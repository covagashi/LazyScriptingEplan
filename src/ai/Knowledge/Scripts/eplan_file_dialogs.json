{
  "eplanFileDialogExamples": {
    "metadata": {
      "version": "1.0",
      "description": "File dialog and file management examples for EPLAN scripts",
      "category": "File Management"
    },
    "fileWriting": {
      "name": "File Writing Operations",
      "description": "Writing text and XML files",
      "examples": [
        {
          "id": "textFileWrite",
          "name": "Write Text File",
          "description": "Create and write text file with encoding",
          "script": [
            "using System.Diagnostics;",
            "using System.IO;",
            "using System.Text;",
            "using System.Windows.Forms;",
            "using Eplan.EplApi.Base;",
            "using Eplan.EplApi.Scripting;",
            "",
            "public class _14_FilesWrite_01_TextFileWrite",
            "{",
            "  [Start]",
            "  public void Function()",
            "  {",
            "    string fileName = PathMap.SubstitutePath(@\"$(PROJECTPATH)\\Test-file.txt\");",
            "",
            "    StringBuilder sb = new StringBuilder();",
            "    sb.Append(\"Example\");",
            "    sb.Append(\" text\");",
            "    sb.AppendLine();",
            "    sb.Append(\"with multiple lines\");",
            "",
            "    File.WriteAllText(fileName, sb.ToString(), Encoding.Unicode);",
            "",
            "    MessageBox.Show(",
            "        \"Text file exported successfully.\",",
            "        \"Information\",",
            "        MessageBoxButtons.OK,",
            "        MessageBoxIcon.Information",
            "        );",
            "",
            "    Process.Start(fileName);",
            "  }",
            "}"
          ]
        },
        {
          "id": "xmlWrite",
          "name": "Write XML File",
          "description": "Serialize objects to XML with custom formatting",
          "script": [
            "using Eplan.EplApi.Base;",
            "using Eplan.EplApi.Scripting;",
            "using System.Collections.Generic;",
            "using System.IO;",
            "using System.Text;",
            "using System.Windows.Forms;",
            "using System.Xml.Serialization;",
            "using System.Xml;",
            "",
            "public class _14_FilesWrite_02_XmlWrite",
            "{",
            "  [Start]",
            "  public void Function()",
            "  {",
            "    List<Person> persons = new List<Person>();",
            "",
            "    Person max = new Person(\"John\", \"Doe\", \"Munich\", \"Marienplatz 1\");",
            "    persons.Add(max);",
            "",
            "    Person maria = new Person(\"Jane\", \"Public\", \"Nuremberg\", \"Zeppelinfeld 2\");",
            "    persons.Add(maria);",
            "",
            "    string xmlPath = PathMap.SubstitutePath(\"$(MD_XML)\");",
            "    string fileName = Path.Combine(xmlPath, \"Persons.xml\");",
            "",
            "    WriteXml(persons, fileName);",
            "    MessageBox.Show(\"XML-file created\");",
            "  }",
            "",
            "  public static void WriteXml(List<Person> persons, string fileName)",
            "  {",
            "    XmlSerializer serializer = new XmlSerializer(typeof(List<Person>));",
            "    XmlSerializerNamespaces namespaces = new XmlSerializerNamespaces();",
            "",
            "    XmlWriterSettings settings = new XmlWriterSettings();",
            "    settings.Indent = true;",
            "    settings.Encoding = Encoding.UTF8;",
            "    XmlWriter writer = XmlWriter.Create(fileName, settings);",
            "",
            "    serializer.Serialize(writer, persons, namespaces);",
            "    writer.Close();",
            "    writer.Dispose();",
            "  }",
            "",
            "  public class Person",
            "  {",
            "    public string FirstName { get; set; }",
            "    public string LastName { get; set; }",
            "    public AddressClass Address { get; set; }",
            "",
            "    public string FullName",
            "    {",
            "      get { return FirstName + \" \" + LastName; }",
            "    }",
            "",
            "    public Person() { }",
            "",
            "    public Person(string firstName, string lastName, string city, string street)",
            "    {",
            "      FirstName = firstName;",
            "      LastName = lastName;",
            "      Address = new AddressClass();",
            "      Address.City = city;",
            "      Address.Street = street;",
            "    }",
            "",
            "    public class AddressClass",
            "    {",
            "      [XmlAttribute]",
            "      public string City { get; set; }",
            "",
            "      [XmlAttribute]",
            "      public string Street { get; set; }",
            "    }",
            "  }",
            "}"
          ]
        }
      ]
    },
    "fileReading": {
      "name": "File Reading Operations", 
      "description": "Reading text and XML files",
      "examples": [
        {
          "id": "textFileRead",
          "name": "Read Text File",
          "description": "Read text file with specific encoding",
          "script": [
            "using System.IO;",
            "using System.Text;",
            "using System.Windows.Forms;",
            "using Eplan.EplApi.Base;",
            "using Eplan.EplApi.Scripting;",
            "",
            "public class _15_FilesRead_01_TextFileRead",
            "{",
            "  [Start]",
            "  public void Function()",
            "  {",
            "    string fileName = PathMap.SubstitutePath(@\"$(PROJECTPATH)\\Test-file.txt\");",
            "",
            "    string[] lines = File.ReadAllLines(fileName, Encoding.Unicode);",
            "",
            "    MessageBox.Show(lines[0]);",
            "  }",
            "}"
          ]
        },
        {
          "id": "xmlFileRead",
          "name": "Read XML File",
          "description": "Parse XML file to find specific properties",
          "script": [
            "using System;",
            "using System.Windows.Forms;",
            "using System.Xml;",
            "using Eplan.EplApi.Base;",
            "using Eplan.EplApi.Scripting;",
            "",
            "public class _15_FilesRead_02_XmlFileRead",
            "{",
            "  [Start]",
            "  public void Function()",
            "  {",
            "    string fileName = PathMap.SubstitutePath(\"$(PROJECTPATH)\" + @\"\\\" + \"Projectinfo.xml\");",
            "    int id = 10043;",
            "    string lastVersion = ReadProjectProperty(fileName, id);",
            "",
            "    if (lastVersion != null)",
            "    {",
            "      MessageBox.Show(\"Last used EPLAN version:\" + Environment.NewLine + lastVersion);",
            "    }",
            "    else",
            "    {",
            "      MessageBox.Show(",
            "        \"Property \" + id + \" not found.\",",
            "        \"Warning\",",
            "        MessageBoxButtons.OK,",
            "        MessageBoxIcon.Warning",
            "      );",
            "    }",
            "  }",
            "",
            "  private static string ReadProjectProperty(string fileName, int id)",
            "  {",
            "    string property = null;",
            "    XmlTextReader reader = new XmlTextReader(fileName);",
            "",
            "    while (reader.Read())",
            "    {",
            "      if (reader.HasAttributes)",
            "      {",
            "        while (reader.MoveToNextAttribute())",
            "        {",
            "          if (reader.Name == \"id\")",
            "          {",
            "            if (reader.Value == id.ToString())",
            "            {",
            "              property = reader.ReadString();",
            "              reader.Close();",
            "              return property;",
            "            }",
            "          }",
            "        }",
            "      }",
            "    }",
            "",
            "    reader.Close();",
            "    return property;",
            "  }",
            "}"
          ]
        },
        {
          "id": "xmlDeserialize",
          "name": "XML Deserialization",
          "description": "Deserialize XML to custom objects",
          "script": [
            "using Eplan.EplApi.Base;",
            "using Eplan.EplApi.Scripting;",
            "using System.Collections.Generic;",
            "using System.IO;",
            "using System.Windows.Forms;",
            "using System.Xml.Serialization;",
            "",
            "public class _15_FilesRead_03_XmlFileOwnClassRead",
            "{",
            "  [Start]",
            "  public void Function()",
            "  {",
            "    string xmlPath = PathMap.SubstitutePath(\"$(MD_XML)\");",
            "    string fileName = Path.Combine(xmlPath, \"Persons.xml\");",
            "",
            "    List<Person> persons = ReadXml(fileName);",
            "    foreach (Person person in persons)",
            "    {",
            "      MessageBox.Show(person.FullName);",
            "    }",
            "  }",
            "",
            "  public static List<Person> ReadXml(string fileName)",
            "  {",
            "    XmlSerializer serializer = new XmlSerializer(typeof(List<Person>));",
            "    StreamReader reader = new StreamReader(fileName);",
            "",
            "    List<Person> persons = (List<Person>)serializer.Deserialize(reader);",
            "    reader.Close();",
            "    reader.Dispose();",
            "    return persons;",
            "  }",
            "",
            "  public class Person",
            "  {",
            "    public string FirstName { get; set; }",
            "    public string LastName { get; set; }",
            "    public AddressClass Address { get; set; }",
            "",
            "    public string FullName",
            "    {",
            "      get { return FirstName + \" \" + LastName; }",
            "    }",
            "",
            "    public Person() { }",
            "",
            "    public class AddressClass",
            "    {",
            "      [XmlAttribute]",
            "      public string City { get; set; }",
            "",
            "      [XmlAttribute]",
            "      public string Street { get; set; }",
            "    }",
            "  }",
            "}"
          ]
        }
      ]
    },
    "categories": {
      "standardDialogs": {
        "name": "Standard File Dialogs",
        "description": "Windows Forms file dialogs",
        "examples": [
          {
            "id": "saveFileDialog",
            "name": "Save File Dialog",
            "description": "File save dialog with filters and default settings",
            "script": [
              "using System;",
              "using System.IO;",
              "using System.Windows.Forms;",
              "using Eplan.EplApi.Base;",
              "using Eplan.EplApi.Scripting;",
              "",
              "public class _13_FilesOpenSave_01_SaveFileDialog",
              "{",
              "  [Start]",
              "  public void Function()",
              "  {",
              "    string projectPath = PathMap.SubstitutePath(\"$(PROJECTPATH)\");",
              "    string fileName = \"Test-file\";",
              "",
              "    SaveFileDialog sfd = new SaveFileDialog();",
              "    sfd.DefaultExt = \"txt\";",
              "    sfd.FileName = fileName;",
              "    sfd.Filter = \"Text files (*.txt)|*.txt\";",
              "    sfd.InitialDirectory = projectPath;",
              "    sfd.Title = \"Select storage location for test file:\";",
              "    sfd.ValidateNames = true;",
              "",
              "    if (sfd.ShowDialog() == DialogResult.OK)",
              "    {",
              "      FileStream fileStream = File.Create(sfd.FileName);",
              "      fileStream.Dispose();",
              "      MessageBox.Show(",
              "        \"File was saved successfully:\" + Environment.NewLine +",
              "        sfd.FileName,",
              "        \"Information\",",
              "        MessageBoxButtons.OK,",
              "        MessageBoxIcon.Information",
              "      );",
              "    }",
              "  }",
              "}"
            ]
          },
          {
            "id": "openFileDialog",
            "name": "Open File Dialog",
            "description": "File open dialog with custom filters",
            "script": [
              "using System;",
              "using System.Windows.Forms;",
              "using Eplan.EplApi.Base;",
              "using Eplan.EplApi.Scripting;",
              "",
              "public class _13_FilesOpenSave_02_OpenFileDialog",
              "{",
              "  [Start]",
              "  public void Function()",
              "  {",
              "    string projectPath = PathMap.SubstitutePath(\"$(PROJECTPATH)\");",
              "    string fileName = \"Test-file\";",
              "",
              "    OpenFileDialog ofd = new OpenFileDialog();",
              "    ofd.DefaultExt = \"txt\";",
              "    ofd.FileName = fileName;",
              "    ofd.Filter = \"Test-File (*Test-File*.txt)|*Test-File*.txt|All files (*.*)|*.*\";",
              "    ofd.InitialDirectory = projectPath;",
              "    ofd.Title = \"Choose Test-File:\";",
              "    ofd.ValidateNames = true;",
              "",
              "    if (ofd.ShowDialog() == DialogResult.OK)",
              "    {",
              "      fileName = ofd.FileName;",
              "      MessageBox.Show(",
              "        \"The storage location was successfully transferred:\" +",
              "        Environment.NewLine +",
              "        fileName,",
              "        \"Information\",",
              "        MessageBoxButtons.OK,",
              "        MessageBoxIcon.Information",
              "      );",
              "    }",
              "  }",
              "}"
            ]
          }
        ]
      },
      "eplanDialogs": {
        "name": "EPLAN File Dialogs",
        "description": "EPLAN-specific file selection dialogs",
        "examples": [
          {
            "id": "fileSelectDecisionContext",
            "name": "FileSelectDecisionContext",
            "description": "EPLAN's native file selection dialog",
            "script": [
              "using System;",
              "using System.IO;",
              "using System.Windows.Forms;",
              "using Eplan.EplApi.Base;",
              "using Eplan.EplApi.Scripting;",
              "",
              "public class _13_FilesOpenSave_04_FileSelectDecisionContext",
              "{",
              "  [Start]",
              "  public void Function()",
              "  {",
              "    string projectPath = PathMap.SubstitutePath(\"$(PROJECTPATH)\");",
              "",
              "    // Save",
              "    FileSelectDecisionContext fsdcSave = new FileSelectDecisionContext();",
              "    fsdcSave.Title = \"Choose file:\";",
              "    fsdcSave.OpenFileFlag = false;",
              "    fsdcSave.CustomDefaultPath = projectPath;",
              "    fsdcSave.AllowMultiSelect = false;",
              "    fsdcSave.DefaultExtension = \"txt\";",
              "    fsdcSave.AddFilter(\"Text files (*.txt)\", \"*.txt\");",
              "    fsdcSave.AddFilter(\"All files (*.*)\", \"*.*\");",
              "",
              "    Decider deciderSave = new Decider();",
              "    EnumDecisionReturn decisionSave = deciderSave.Decide(fsdcSave);",
              "    if (decisionSave == EnumDecisionReturn.eCANCEL)",
              "    {",
              "      return;",
              "    }",
              "",
              "    string fullFileNameSave = fsdcSave.GetFiles()[0];",
              "    FileStream fileStream = File.Create(fullFileNameSave);",
              "    fileStream.Dispose();",
              "    MessageBox.Show(\"File has been saved:\" + Environment.NewLine + fullFileNameSave);",
              "",
              "    // Open",
              "    FileSelectDecisionContext fsdcOpen = new FileSelectDecisionContext();",
              "    fsdcOpen.Title = \"Choose file:\";",
              "    fsdcOpen.OpenFileFlag = true;",
              "    fsdcOpen.CustomDefaultPath = projectPath;",
              "    fsdcOpen.AllowMultiSelect = false;",
              "    fsdcOpen.DefaultExtension = \"txt\";",
              "    fsdcOpen.AddFilter(\"Text files (*.txt)\", \"*.txt\");",
              "    fsdcOpen.AddFilter(\"All files (*.*)\", \"*.*\");",
              "",
              "    Decider deciderOpen = new Decider();",
              "    EnumDecisionReturn decisionOpen = deciderOpen.Decide(fsdcOpen);",
              "    if (decisionOpen == EnumDecisionReturn.eCANCEL)",
              "    {",
              "      return;",
              "    }",
              "",
              "    string fullFileNameOpen = fsdcOpen.GetFiles()[0];",
              "    MessageBox.Show(\"File openend:\" + Environment.NewLine + fullFileNameOpen);",
              "  }",
              "}"
            ]
          }
        ]
      },
      "fileValidation": {
        "name": "File Validation",
        "description": "Filename validation and sanitization",
        "examples": [
          {
            "id": "checkFilenames",
            "name": "Filename Character Validation",
            "description": "Clean invalid characters from filenames",
            "script": [
              "using System;",
              "using System.Windows.Forms;",
              "using Eplan.EplApi.Scripting;",
              "",
              "public class _13_FilesOpenSave_03_CheckFilenames",
              "{",
              "  [Start]",
              "  public void Function()",
              "  {",
              "    string invalidChars = @\"[\\\\/:*?\"\"<>|]\";",
              "",
              "    MessageBox.Show(\"These characters are converted:\" + ",
              "      Environment.NewLine + invalidChars,",
              "        \"Information\",",
              "        MessageBoxButtons.OK,",
              "        MessageBoxIcon.Information);",
              "",
              "    invalidChars = AdjustPath(invalidChars);",
              "",
              "    MessageBox.Show(invalidChars,",
              "        \"Information\",",
              "        MessageBoxButtons.OK,",
              "        MessageBoxIcon.Information);",
              "  }",
              "",
              "  private string AdjustPath(string input)",
              "  {",
              "    return System.Text.RegularExpressions.Regex.Replace(input, @\"[\\\\/:*?\"\"<>|]\", \"-\");",
              "  }",
              "}"
            ]
          }
        ]
      }
    },
    "dialogProperties": {
      "saveFileDialog": [
        "DefaultExt - Default file extension",
        "FileName - Default filename",
        "Filter - File type filters",
        "InitialDirectory - Starting directory",
        "Title - Dialog title",
        "ValidateNames - Validate filename format"
      ],
      "openFileDialog": [
        "DefaultExt - Default file extension", 
        "FileName - Default filename",
        "Filter - File type filters (pipe-separated)",
        "InitialDirectory - Starting directory",
        "Multiselect - Allow multiple file selection",
        "Title - Dialog title"
      ],
      "fileSelectDecisionContext": [
        "OpenFileFlag - true for open, false for save",
        "CustomDefaultPath - Starting directory",
        "AllowMultiSelect - Multiple file selection",
        "DefaultExtension - Default file extension",
        "AddFilter() - Add file type filters",
        "GetFiles() - Retrieve selected files array"
      ]
    },
    "invalidFileChars": {
      "characters": "\\/:*?\"<>|",
      "replacement": "Replace with dash (-) or underscore (_)",
      "regex": "@\"[\\\\/:*?\"\"<>|]\""
    }
  }
}