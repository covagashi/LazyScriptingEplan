[
    {
        "source": "APIReference.md",
        "path": "/",
        "title": "APIReference",
        "content": "API Reference stores detail description of classes and other API items (actions, events, interactions and converters)"
    },
    {
        "source": "API_UserGuide.md",
        "path": "/",
        "title": "API_UserGuide",
        "content": "The user guide is a compilation of How-To-Dos, which describe, how you can use the Eplan API. It shows, how you can manage to write your own API applications, like add-ins](AddIns.html) or [using Eplan in other applications](EplanInOtherApplications.html).\n\nThe user guide contains examples for some typical tasks, you perhaps want to automate in Eplan using the API. There are examples for [creating or opening Eplan projects](CreateOpenProject.html), for [creating pages](CreatePages.html) an [placing macros, etc.\n\nIn contrast to the API Reference the user guide does not store detail description of every API class."
    },
    {
        "source": "Helpstructure.md",
        "path": "/",
        "title": "Helpstructure",
        "content": "The documentation you are reading is divided into two sections:\n\n**1. User Guide**  \nThe User Guide section introduces you into how to set up a development environment and start developing or use more advanced functionality.\n\n**2. API Reference**  \nThe API Reference section lists and describes in detail all the namespaces, classes, methods, etc. of the Eplan API.\n\nAPI Support setup installs the API Help in HTML and Microsoft Help Viewer format. In this way, it can be accessed online or locally from a disk (i.e. in offline mode).\n\n### API Help formats\n\nIn offline mode, API Help can be accessed by the shortcut on a desktop (HTML format) or from Visual Studio (Microsoft Help Viewer).\n\nThe later one is the standard help system format used by Visual Studio. It can thus be accessed as another VS help installed locally, i.e. by pressing the F1] key.\n\nSometimes the setup cannot correctly register the help correctly in Visual Studio. In this case it can be done manually using the following steps:\n\na) Start the Microsoft Help Viewer using Help > Add and Remove Help Content from Visual Studio.\n\n![\n\nb) In the Manage Content tab, please select Disk installation source, then browse for the  helpcontentsetup.msha  file in the directory where the API Help was installed.  \nBy default it should be in  %ProgramData%\\EPLAN\\O\\_Data\\API-Support\\<Eplan version>\\doc.\n\nc) Select the Add link and press the Update button.\n\nd) Make sure that the help is registered by browsing the Eplan API content in the Microsoft Help Viewer.\n\ne) In order to use the help integrated with Visual Studio, please set the preferred help to the Help Viewer:\n\n![](images/preferred_help.jpg)\n\nPlease note that as of Visual Studio 2017, Microsoft Help Viewer is an optional installation component, so it must be additionally added by the Visual Studio Installer."
    },
    {
        "source": "Assemblies.md",
        "path": "/API Reference",
        "title": "Assemblies",
        "content": "Here is a detail description of all available API assemblies"
    },
    {
        "source": "Eplan.EplApi.AFu.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly",
        "title": "Eplan.EplApi.AFu",
        "content": "Namespaces\n\n| Namespace | Description |\n| --- | --- |\n| Eplan.EplApi.ApplicationFramework](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework_namespace.html) | This namespace provides all necessary functionality to integrate API add-ins into EPLAN, to react on events and to work with actions. |\n| [Eplan.EplApi.BaseRemoting](Eplan.EplApi.AFu~Eplan.EplApi.BaseRemoting_namespace.html) | This namespace is used for working with EPLAN Remoting. |\n| [Eplan.EplApi.RemoteServer](Eplan.EplApi.AFu~Eplan.EplApi.RemoteServer_namespace.html) | This namespace is used for working with EPLAN Remoting. |\n| [Eplan.EplApi.Scripting | The classes of the Scripting namespace provide the attributes for scripts. |"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework_namespace.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework_namespace",
        "content": "This namespace provides all necessary functionality to integrate API add-ins into EPLAN, to react on events and to work with actions.\n\nClasses\n\n|  | Class | Description |\n| --- | --- | --- |\n| Class | Action](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.Action.html) | An action performs a task in the system. It is usually called via ribbon items or the [CallingActions. \\Parameters can be passed to the action in a context class, and return values can be obtained with this parameter. Actions are implemented in an add-in by deriving a class from IEplAction](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplAction.html). |\n| Class | [ActionCallingContext](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionCallingContext.html) | This is the ActionCallingContext class used to pass parameters to an action and to receive return values of the action. |\n| Class | [ActionManager](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionManager.html) | Class for retrieving Action objects |\n| Class | [ActionParameterProperties](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionParameterProperties.html) | Description of a parameter that can be passed to an ActionCallingContext. This class only serves for documentation purposes. |\n| Class | [ActionProperties](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionProperties.html) | This class returns a description text and a list of the parameters that can be passed as context parameters. |\n| Class | [CommandLineInterpreter](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.CommandLineInterpreter.html) | Class for executing commands in command-line style. |\n| Class | [EventHandler](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventHandler.html) | Base class to handle events. |\n| Class | [EventHandlerWrapper](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventHandlerWrapper.html) | Event handler to process EPLAN events in a remoting client. It is not possible to directly use the [EventHandler](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventHandler.html) in a remoting client! |\n| Class | [EventManager](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventManager.html) | Class for sending events. |\n| Class | [EventParameter](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventParameter.html) | Base class for event parameters |\n| Class | [EventParameterString](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventParameterString.html) | Event parameter of the System::String data type |\n| Class | [License](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.License.html) | Class for querying Eplan licensing options ([LicenseOptions](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.LicenseOptions.html)). |\n| Class | [QuietModeStep](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.QuietModeStep.html) | Allows setting quiet mode for a part of code |\n| Class | [UserRights](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.UserRights.html) | Class for checking execute permissions. In the rights management module, you can assign execute permissions to individual actions. These execute permissions are also assigned to specific users. As a result, the rights management system can decide whether the logged-on user has the right to perform a specific action. The rights management system can be completely disabled [CheckUserRights](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.UserRights~CheckUserRights.html), or it can be set to a specific operating mode (logging on with the current windows user). However, this operating mode cannot be queried or set via API. |\n\nInterfaces\n\n|  | Interface | Description |\n| --- | --- | --- |\n| Interface | [IActionCallingContext](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IActionCallingContext.html) | Interface class for the [ActionCallingContext](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionCallingContext.html) class. Can be used instead of the class in function parameters. |\n| Interface | [ICommandLineInterpreter](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ICommandLineInterpreter.html) | For internal use only. A fixed interface ID is specified which is used to generate this interface in W3u.exe. This ID is specified in the source code and cannot be changed. |\n| Interface | [IEplAction](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplAction.html) | Interface declaration for an action. When an action is to be registered for an add-in (an assembly) in the system, this interface must be implemented by a class of the add-in. |\n| Interface | [IEplActionChecked](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplActionChecked.html) | Interface to switch the status on / off of an Action. If this interface is not used, the Action is off by default. If you implement this interface in an action class, you can set the state of the respective Action to on. If 0, unchecks; if 1, checks; and if 2, sets indeterminate. |\n| Interface | [IEplActionEnable](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplActionEnable.html) | Interface to enable or disable an Action. If this interface is not used, the Action is enabled by default. If you implement this interface in an action class, you can set the respective Action to disabled. If a ribbon item points to this Action, they will be also disabled (grayed out). |\n| Interface | [IEplAddIn](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplAddIn.html) | Interface declaration for an EPLAN add-in. If an assembly is to be loaded as an EPLAN add-in, exactly one class of the assembly must implement this interface. |\n| Interface | [IEplAddInShadowCopy](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplAddInShadowCopy.html) | Provides a mechanism for framework to pass information about original location of the add-in assembly. |\n| Interface | [IEplanEvents](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplanEvents.html) | Declaration of the interface for EPLAN events. |\n| Interface | [IEplanEventsWrapper](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplanEventsWrapper.html) | For internal use only. |\n| Interface | [IEventParameter](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEventParameter.html) | Base interface declaration for event parameters |\n| Interface | [IExtendedProcessor](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IExtendedProcessor.html) | Interface for implementing an extended processor in connection with the IXMLProcessor. |\n| Interface | [IInterface](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IInterface.html) | A type implementing this interface can be registered as an EPLAN interface. |\n| Interface | [IOptions](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IOptions.html) | If a class implements this interface, a settings dialog can be assigned to the XML processor. |\n| Interface | [IXMLProcessor](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IXMLProcessor.html) | Interface for implementing an XML processor. |\n\nDelegates\n\n|  | Delegate | Description |\n| --- | --- | --- |\n| Delegate | [EventHandlerFunction](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventHandlerFunction.html) | Functions of this type can be registered as event handlers in the class [EventHandler](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventHandler.html). |\n| Delegate | [EventHandlerNameFunction](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventHandlerNameFunction.html) | Functions of this type can be registered as event handlers in the class [EventHandler](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventHandler.html). |\n| Delegate | [EventHandlerNameFunctionResult](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventHandlerNameFunctionResult.html) | Functions of this type can be registered as event handlers in the class [EventHandler](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventHandler.html). |\n\nEnumerations\n\n|  | Enumeration | Description |\n| --- | --- | --- |\n| Enumeration | [LicenseOptions](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.LicenseOptions.html) | License options provided by the Eplan licensing system. |\n| Enumeration | [LicenseType](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.LicenseType.html) | License type: local, network (remote) or borrowed |\n| Enumeration | [QuietModes](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.QuietModes.html) | Quiet modes |"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.Action.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.Action",
        "content": "An action performs a task in the system. It is usually called via ribbon items or the CallingActions. \\Parameters can be passed to the action in a context class, and return values can be obtained with this parameter. Actions are implemented in an add-in by deriving a class from IEplAction](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplAction.html).\n\nInheritance Hierarchy\n\n[System.Object](#)  \n   **Eplan.EplApi.ApplicationFramework.Action**\n\nSyntax\n\n* [C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic class Action\n```\n```\n\n```\n```\npublic ref class Action\n```\n```\n\nRemarks\n\nActions are registered under a name [Name](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.Action~Name.html) in the system. Using this name, you can find an action and call its execution function [Execute](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.Action~Execute.html). Please mind, that Microsoft.Net framework 3.5 contains a class System.Action. If you include the namespace Eplan.EplApi.ApplicationFramework in your code file by e.g. a using statement without the use of an alias, you might get a compiler error like: \"'Action' is an ambiguous reference between 'System.Action' and 'Eplan.EplApi.ApplicationFramework.Action'\". Action names with . are not allowed.\n\n\n\nPublic Constructors\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Constructor | [Action Constructor](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.Action~_ctor(AfAction).html) | For internal use only. |\n\n[Top](#top)\n\n\n\nPublic Properties\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Property | [ActionProperties](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.Action~ActionProperties.html) | Descriptive data for this action. |\n| Public Property | [ModuleName](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.Action~ModuleName.html) | Name of the module in which this action is implemented. |\n| Public Property | [Name](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.Action~Name.html) | Name used to identify this action in the system. |\n\n[Top](#top)\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [Execute](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.Action~Execute.html) | Performs the actual action. |\n| Public Method | [GetChecked](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.Action~GetChecked.html) | Returns 'checked' state of an action |\n| Public Method | [GetEnabled](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.Action~GetEnabled.html) | Returns whether an action is enabled |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionCallingContext.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionCallingContext",
        "content": "This is the ActionCallingContext class used to pass parameters to an action and to receive return values of the action.\n\nInheritance Hierarchy\n\nSystem.Object](#)  \n   [Eplan.EplApi.Base.Context](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context.html)  \n      **Eplan.EplApi.ApplicationFramework.ActionCallingContext**  \n         [Eplan.EplApi.DataModel.StorableObjectContext](Eplan.EplApi.DataModelu~Eplan.EplApi.DataModel.StorableObjectContext.html)\n\nSyntax\n\n* [C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\n[Guid(\"B44C4085-E6B8-3622-A1EF-50DF81A26485\")]\npublic class ActionCallingContext : Eplan.EplApi.Base.Context, IActionCallingContext, Eplan.EplApi.Base.IContext\n```\n```\n\n```\n```\n[Guid(\"B44C4085-E6B8-3622-A1EF-50DF81A26485\")]\npublic ref class ActionCallingContext : public Eplan.EplApi.Base.Context, IActionCallingContext, Eplan.EplApi.Base.IContext\n```\n```\n\nRemarks\n\nUsing AddParameter(...) you can add explicitly named parameters to the ActionCallingContext. The action must use this explicit name to reference these parameters. Likewise, values returned by the action can be added. Please mind that an Action may modify the ActionCallingContext during its execution. Sometimes e.g. project IDs are added to the context and are passed to an inner action. Reusing the same ActionCallingContext for another Action call may lead to unexpected results. So in most cases it is advisable to create a new ActionCallingContext for a new Action call.\n\n\n\nPublic Constructors\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Constructor | [ActionCallingContext Constructor](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionCallingContext~_ctor.html) | Overloaded. |\n\n[Top](#top)\n\n\n\nPublic Properties\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Property | [SysMessages](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionCallingContext~SysMessages.html) | Gets system messages |\n\n[Top](#top)\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [AddParameter](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context~AddParameter.html) | Adds a parameter to the Context. (Inherited from [Eplan.EplApi.Base.Context](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context.html)) |\n| Public Method | [Dispose()](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context~Dispose().html) | Destructor for deterministic finalization of ActionCallingContext object. (Inherited from [Eplan.EplApi.Base.Context](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context.html)) |\n| Public Method | [GetAfActionCallingContext](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionCallingContext~GetAfActionCallingContext.html) | For internal use only. |\n| Public Method | [GetContextParameter](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionCallingContext~GetContextParameter.html) | Overridden. Get the Block of Context Parameters of this Context. |\n| Public Method | [GetEContext](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context~GetEContext.html) | For internal use only. (Inherited from [Eplan.EplApi.Base.Context](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context.html)) |\n| Public Method | [GetException](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionCallingContext~GetException.html) | Get Exception |\n| Public Method | [GetParameter](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context~GetParameter.html) | Gets a parameter from the Context. (Inherited from [Eplan.EplApi.Base.Context](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context.html)) |\n| Public Method | [GetParameterCount](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context~GetParameterCount.html) | Gets the count of the Parameters in this context (Inherited from [Eplan.EplApi.Base.Context](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context.html)) |\n| Public Method | [GetParameters](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context~GetParameters.html) | Gets array filled with parameters names from the context. (Inherited from [Eplan.EplApi.Base.Context](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context.html)) |\n| Public Method | [GetStrings](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context~GetStrings.html) | Gets the array filled with strings from the context. (Additional to the parameters) (Inherited from [Eplan.EplApi.Base.Context](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context.html)) |\n| Public Method | [SetAfActionCallingContext](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionCallingContext~SetAfActionCallingContext.html) | For internal use only. |\n| Public Method | [SetContextParameter](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionCallingContext~SetContextParameter.html) | Overridden. Sets a block of context parameters (as ContextParameterBlock object). |\n| Public Method | [SetEContext](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context~SetEContext.html) | For internal use only. (Inherited from [Eplan.EplApi.Base.Context](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context.html)) |\n| Public Method | [SetStrings](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context~SetStrings.html) | Sets the array filled with strings from the context. (Additional to the parameters) (Inherited from [Eplan.EplApi.Base.Context](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context.html)) |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionManager.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionManager",
        "content": "Class for retrieving Action objects\n\nInheritance Hierarchy\n\nSystem.Object](#)  \n   **Eplan.EplApi.ApplicationFramework.ActionManager**\n\nSyntax\n\n* [C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic class ActionManager\n```\n```\n\n```\n```\npublic ref class ActionManager\n```\n```\n\nExample\n\n* [C#](#i-tab-content-197a471a-3d16-4dba-937e-8d138e13e34d)\n\n```\nAction oAction = m_ActionManager.FindAction(null);\nAssert.IsNull(oAction);\nActionCallingContext oACC = new ActionCallingContext();\noAction.Execute(oACC);\n\n```\n\nPublic Constructors\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Constructor | [ActionManager Constructor](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionManager~_ctor.html) |  |\n\n[Top](#top)\n\n\n\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [FindAction](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionManager~FindAction.html) | Overloaded. This function searches for an action registered in the system. |\n| Public Method | [FindBaseAction](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionManager~FindBaseAction.html) | This function searches the base action for an existing action the base action has the same name, but a lower ordinal. |\n| Public Method | [FindBaseActionFromFunctionAction](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionManager~FindBaseActionFromFunctionAction.html) | This function searches the base action for an existing action in scripting. the base action has the same name, but a lower ordinal. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionParameterProperties.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionParameterProperties",
        "content": "Description of a parameter that can be passed to an ActionCallingContext. This class only serves for documentation purposes.\n\nInheritance Hierarchy\n\nSystem.Object](#)  \n   **Eplan.EplApi.ApplicationFramework.ActionParameterProperties**\n\nSyntax\n\n* [C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic class ActionParameterProperties\n```\n```\n\n```\n```\npublic ref class ActionParameterProperties\n```\n```\n\nExample\n\nExample of listing action parameters\n\n* [C#](#i-tab-content-3d7e6ec0-66db-443a-ac18-1b0284bd8955)\n\n```\nActionManager actionManager = new ActionManager();\nEplApi.ApplicationFramework.Action foundAction = actionManager.FindAction(\"ActionExample\");\n\nArrayList listOfParameterProperties = foundAction.ActionProperties.GetParameterProperties();\n\nif (listOfParameterProperties.Count > 0)\n{\n\n    foreach (ActionParameterProperties parameterProperty in listOfParameterProperties)\n    {\n        string strParamName = parameterProperty.Name;\n        Debug.WriteLine(strParamName);\n\n    }\n}\n\n```\n\nPublic Constructors\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Constructor | [ActionParameterProperties Constructor](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionParameterProperties~_ctor.html) | Overloaded. |\n\n[Top](#top)\n\n\n\nPublic Properties\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Property | [Name](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionParameterProperties~Name.html) | Name of a parameter. |\n\n[Top](#top)\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [Dispose](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionParameterProperties~Dispose().html) | Destructor for deterministic finalization of ActionParameterProperties object. |\n| Public Method | [GetAfActionParameter](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionParameterProperties~GetAfActionParameter.html) | For internal use only. |\n| Public Method | [Set](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionParameterProperties~Set.html) | Description text of a parameter. Sets name and description text of a parameter. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionProperties.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionProperties",
        "content": "This class returns a description text and a list of the parameters that can be passed as context parameters.\n\nInheritance Hierarchy\n\nSystem.Object](#)  \n   **Eplan.EplApi.ApplicationFramework.ActionProperties**\n\nSyntax\n\n* [C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic class ActionProperties\n```\n```\n\n```\n```\npublic ref class ActionProperties\n```\n```\n\n\n\nPublic Constructors\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Constructor | [ActionProperties Constructor](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionProperties~_ctor.html) | Overloaded. |\n\n[Top](#top)\n\n\n\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [AddParameter](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionProperties~AddParameter.html) | Adds the description of another context parameter. |\n| Public Method | [Dispose](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionProperties~Dispose().html) | Destructor for deterministic finalization of ActionProperties object. |\n| Public Method | [GetAfActionProp](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionProperties~GetAfActionProp.html) | For internal use only. |\n| Public Method | [GetParameterProperties](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionProperties~GetParameterProperties.html) | Returns all descriptions of the context parameters. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.CommandLineInterpreter.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.CommandLineInterpreter",
        "content": "Class for executing commands in command-line style.\n\nInheritance Hierarchy\n\nSystem.Object](#)  \n   **Eplan.EplApi.ApplicationFramework.CommandLineInterpreter**\n\nSyntax\n\n* [C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\n[ClassInterface(ClassInterfaceType.None)]\npublic class CommandLineInterpreter : ICommandLineInterpreter\n```\n```\n\n```\n```\n[ClassInterface(ClassInterfaceType.None)]\npublic ref class CommandLineInterpreter : public ICommandLineInterpreter\n```\n```\n\nExample\n\nExample of executing command-line commands\n\n* [C#](#i-tab-content-302e0190-01ab-499a-bd5b-819258a74668)\n\n```\nString strAction= @\"XPrjActionProjectOpen /PROJECT:\";\n\nbool bRet= CommandLineInterpreter().Execute(strAction + ProjectName);\nif (!bRet)\n{\n   new Decider().Decide(EnumDecisionType.eOkDecision, \"P8 command does not work\", \"OpenProjectAndPage\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK);\n   CommandLineInterpreter.Execute(\"SystemErrDialog\");\n   return -1;\n}\n```\n\nPublic Constructors\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Constructor | [CommandLineInterpreter Constructor](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.CommandLineInterpreter~_ctor.html) | Overloaded. |\n\n[Top](#top)\n\n\n\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [Execute](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.CommandLineInterpreter~Execute.html) | Overloaded. Execution of a command. |\n| Public Method | [IsExecutable](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.CommandLineInterpreter~IsExecutable.html) | Checks whether the execution of an expression is possible. This is only the case when the corresponding action is available. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventHandler.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventHandler",
        "content": "Base class to handle events.\n\nInheritance Hierarchy\n\nSystem.Object](#)  \n   **Eplan.EplApi.ApplicationFramework.EventHandler**\n\nSyntax\n\n* [C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\n[ComSourceInterfaces(Eplan.EplApi.ApplicationFramework.IEplanEvents)]\npublic class EventHandler\n```\n```\n\n```\n```\n[ComSourceInterfaces(Eplan.EplApi.ApplicationFramework.IEplanEvents)]\npublic ref class EventHandler\n```\n```\n\nRemarks\n\nIf you want to respond to EPLAN events from a remoting client, you should use a local event handler object of the [EventHandlerWrapper](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventHandlerWrapper.html) type.\n\n\n\nPublic Constructors\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Constructor | [EventHandler Constructor](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventHandler~_ctor.html) | Overloaded. |\n\n[Top](#top)\n\nPublic Fields\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Field | [EplanEvent](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventHandler~EplanEvent.html) | This event is raised whenever an event with the desired name occurs in EPLAN. |\n| Public Field | [EplanNameEvent](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventHandler~EplanNameEvent.html) | This event is raised whenever an event with the desired name occurs in EPLAN. The original name of the event is also given. |\n| Public Field | [EplanNameEventResult](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventHandler~EplanNameEventResult.html) | This event is raised whenever an event with the desired name occurs in EPLAN. The original name of the event is also given. Additional a return value is supported. |\n\n[Top](#top)\n\n\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [Dispose](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventHandler~Dispose().html) | Event handler is released. |\n| Public Method | [RaiseEvent](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventHandler~RaiseEvent.html) | For internal use only. |\n| Public Method | [RaiseEventResult](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventHandler~RaiseEventResult.html) | For internal use only. |\n| Public Method | [SetEvent](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventHandler~SetEvent.html) | Defines for which event the [IEplanEvents](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplanEvents.html) is raised. |\n\n[Top](#top)\n\nPublic Events\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Event | [NameEvent](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventHandler~NameEvent_EV.html) | This event is raised whenever an event with the desired name occurs in EPLAN. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventHandlerWrapper.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventHandlerWrapper",
        "content": "Event handler to process EPLAN events in a remoting client. It is not possible to directly use the EventHandler](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventHandler.html) in a remoting client!\n\nInheritance Hierarchy\n\n[System.Object](#)  \n   **Eplan.EplApi.ApplicationFramework.EventHandlerWrapper**\n\nSyntax\n\n* [C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic class EventHandlerWrapper\n```\n```\n\n```\n```\npublic ref class EventHandlerWrapper\n```\n```\n\nExample\n\nResponse to EPLAN events in a remoting client\n\n* [C#](#i-tab-content-554902b5-14b5-40cf-9763-2416cc392d02)\n\n```\nEplan.EplApi.ApplicationFramework.EventHandler oEventHandler = new Eplan.EplApi.ApplicationFramework.EventHandler();\noEventHandler.SetEvent(\"onActionStart.String.*\");\n       \nEplan.EplApi.ApplicationFramework.EventHandlerWrapper oWrapper= new Eplan.EplApi.ApplicationFramework.EventHandlerWrapper();\noWrapper.EplanEventLocally += new Eplan.EplApi.ApplicationFramework.EventHandlerFunction(oWrapper_EventHandlerFunctionLocally);\n          \noEventHandler.EplanEvent += new Eplan.EplApi.ApplicationFramework.EventHandlerFunction(oWrapper.LocallyEventHandlerFunction);\n```\n\nPublic Constructors\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Constructor | [EventHandlerWrapper Constructor](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventHandlerWrapper~_ctor.html) |  |\n\n[Top](#top)\n\nPublic Fields\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Field | [EplanEventLocally](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventHandlerWrapper~EplanEventLocally.html) | Local event handler |\n\n[Top](#top)\n\n\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [InitializeLifetimeService](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventHandlerWrapper~InitializeLifetimeService.html) | This object should live \"forever.\" |\n| Public Method | [LocallyEventHandlerFunction](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventHandlerWrapper~LocallyEventHandlerFunction.html) | This function of the local event handler is registered as a handler function of the remote event handler [EventHandler](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventHandler.html). |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventManager.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventManager",
        "content": "Class for sending events.\n\nInheritance Hierarchy\n\nSystem.Object](#)  \n   **Eplan.EplApi.ApplicationFramework.EventManager**\n\nSyntax\n\n* [C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic class EventManager\n```\n```\n\n```\n```\npublic ref class EventManager\n```\n```\n\n\n\nPublic Constructors\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Constructor | [EventManager Constructor](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventManager~_ctor.html) |  |\n\n[Top](#top)\n\n\n\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [Send](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventManager~Send.html) | Sends an event to the system. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventParameter.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventParameter",
        "content": "Base class for event parameters\n\nInheritance Hierarchy\n\nSystem.Object](#)  \n   **Eplan.EplApi.ApplicationFramework.EventParameter**\n\nSyntax\n\n* [C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic class EventParameter : IEventParameter\n```\n```\n\n```\n```\npublic ref class EventParameter : public IEventParameter\n```\n```\n\n\n\nPublic Constructors\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Constructor | [EventParameter Constructor](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventParameter~_ctor.html) | For internal use only. |\n\n[Top](#top)\n\n\n\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [Dispose](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventParameter~Dispose().html) | For internal use only. |\n| Public Method | [GetInternalParameter](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventParameter~GetInternalParameter.html) | For internal use only. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventParameterString.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventParameterString",
        "content": "Event parameter of the System::String data type\n\nInheritance Hierarchy\n\nSystem.Object](#)  \n   **Eplan.EplApi.ApplicationFramework.EventParameterString**\n\nSyntax\n\n* [C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic class EventParameterString : IEventParameter\n```\n```\n\n```\n```\npublic ref class EventParameterString : public IEventParameter\n```\n```\n\n\n\nPublic Constructors\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Constructor | [EventParameterString Constructor](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventParameterString~_ctor.html) | Overloaded. |\n\n[Top](#top)\n\n\n\nPublic Properties\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Property | [String](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventParameterString~String.html) | Event parameter of the String type. |\n\n[Top](#top)\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [CreateFrom](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventParameterString~CreateFrom.html) | Creates the specific EventParameterString object from the IEventParameter interface. |\n| Public Method | [Dispose](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventParameterString~Dispose().html) | Releases the object. |\n| Public Method | [GetInternalParameter](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventParameterString~GetInternalParameter.html) | For internal use only. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.License.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.License",
        "content": "Class for querying Eplan licensing options (LicenseOptions](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.LicenseOptions.html)).\n\nInheritance Hierarchy\n\n[System.Object](#)  \n   **Eplan.EplApi.ApplicationFramework.License**\n\nSyntax\n\n* [C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic class License\n```\n```\n\n```\n```\npublic ref class License\n```\n```\n\n\n\nPublic Constructors\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Constructor | [License Constructor](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.License~_ctor.html) |  |\n\n[Top](#top)\n\n\n\nPublic Properties\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Property | [DongleNumber](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.License~DongleNumber.html) | Get the dongle number |\n| Public Property | [Type](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.License~Type.html) | Gets license type: local, remote (network) or borrowed. |\n\n[Top](#top)\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [Dispose](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.License~Dispose().html) | Destructor for deterministic finalization of License object. |\n| Public Method | [GetLicenseModules](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.License~GetLicenseModules.html) |  |\n| Public Method | [HasOption](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.License~HasOption.html) | Is used to determine whether a license for this option exists in the system and if it is available. |\n| Public Method | [LockOption](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.License~LockOption.html) | Assigns a license to an option on the system, i.e., a license for this option is deducted. If all available licenses for this option are already in use, the function fails. An option is used until the program is exited. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.QuietModeStep.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.QuietModeStep",
        "content": "Allows setting quiet mode for a part of code\n\nInheritance Hierarchy\n\nSystem.Object](#)  \n   **Eplan.EplApi.ApplicationFramework.QuietModeStep**\n\nSyntax\n\n* [C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic class QuietModeStep\n```\n```\n\n```\n```\npublic ref class QuietModeStep\n```\n```\n\nRemarks\n\nThe class should be used with âusingâ statement. This will ensure restoring original mode after its block\n\n\n\nPublic Constructors\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Constructor | [QuietModeStep Constructor](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.QuietModeStep~_ctor.html) |  |\n\n[Top](#top)\n\n\n\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [Dispose](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.QuietModeStep~Dispose().html) |  |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.UserRights.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.UserRights",
        "content": "Class for checking execute permissions. In the rights management module, you can assign execute permissions to individual actions. These execute permissions are also assigned to specific users. As a result, the rights management system can decide whether the logged-on user has the right to perform a specific action. The rights management system can be completely disabled CheckUserRights](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.UserRights~CheckUserRights.html), or it can be set to a specific operating mode (logging on with the current windows user). However, this operating mode cannot be queried or set via API.\n\nInheritance Hierarchy\n\n[System.Object](#)  \n   **Eplan.EplApi.ApplicationFramework.UserRights**\n\nSyntax\n\n* [C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic class UserRights\n```\n```\n\n```\n```\npublic ref class UserRights\n```\n```\n\n\n\nPublic Constructors\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Constructor | [UserRights Constructor](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.UserRights~_ctor.html) |  |\n\n[Top](#top)\n\n\n\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [AddRight](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.UserRights~AddRight.html) | Adds the specified right entry to the given category of the custom UserRights file. The new right name will appear in the rights management dialog. |\n| Public Method | [CheckRightFor](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.UserRights~CheckRightFor.html) | Checks the execute permission of an action |\n| Public Method | [CheckUserRights](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.UserRights~CheckUserRights.html) | Queries, whether the rights management is currently active. |\n| Public Method | [DeleteRight](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.UserRights~DeleteRight.html) | Deletes the specified right entry from the UserRights database (rights management dialog) |\n| Public Method | [GetCategories](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.UserRights~GetCategories.html) | Returns the identifiers of all existing user rights categories. |\n| Public Method | [GetGroups](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.UserRights~GetGroups.html) | Gets the groups from user rights management, to which the specified user belongs.. |\n| Public Method | [GetUser](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.UserRights~GetUser.html) | Gets the user. |\n| Public Method | [GetUserSID](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.UserRights~GetUserSID.html) | Gets the user SID. |\n| Public Method | [IsRightExisting](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.UserRights~IsRightExisting.html) |  |\n| Public Method | [SetUser](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.UserRights~SetUser.html) | Sets the user. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.Action_ctorAfAction.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/Action",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.Action_ctorAfAction",
        "content": "For internal use only.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic Action( \n   AfAction* pAction\n)\n```\n```\n\n```\n```\npublic:\nAction( \n   AfAction* pAction\n)\n```\n```\n\n#### Parameters\n\n*pAction*\n:   For internal use only."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.Action_methods.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/Action",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.Action_methods",
        "content": "For a list of all members of this type, see Action members](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.Action_members.html).\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [Execute](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.Action~Execute.html) | Performs the actual action. |\n| Public Method | [GetChecked](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.Action~GetChecked.html) | Returns 'checked' state of an action |\n| Public Method | [GetEnabled](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.Action~GetEnabled.html) | Returns whether an action is enabled |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.Action_properties.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/Action",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.Action_properties",
        "content": "For a list of all members of this type, see Action members](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.Action_members.html).\n\nPublic Properties\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Property | [ActionProperties](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.Action~ActionProperties.html) | Descriptive data for this action. |\n| Public Property | [ModuleName](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.Action~ModuleName.html) | Name of the module in which this action is implemented. |\n| Public Property | [Name](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.Action~Name.html) | Name used to identify this action in the system. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionExecute.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/Action/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionExecute",
        "content": "Performs the actual action.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic bool Execute( \n   ActionCallingContext oCallingContext\n)\n```\n```\n\n```\n```\npublic:\nbool Execute( \n   ActionCallingContext^ oCallingContext\n)\n```\n```\n\n#### Parameters\n\n*oCallingContext*\n:   Using this parameter generic parameters of variable number and different types can be passed to the action.\n\n#### Return Value\n\ntrue: This function was completed successfully. false: An error occurred while performing the action.\n\nExceptions\n\n| Exception | Description |\n| --- | --- |\n| [Eplan.EplApi.Base.BaseException](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException.html) | Exceptions may occur while performing the action. All these exceptions are returned as BaseException. |\n\nRemarks\n\nExceptions, which occur during the execution of an action can be retrieved from the ActionCallingContext by the GetException() method."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionGetChecked.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/Action/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionGetChecked",
        "content": "Returns 'checked' state of an action\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic int GetChecked( \n   ActionCallingContext oCallingContext,\n   string strActionWithParameters\n)\n```\n```\n\n```\n```\npublic:\nint GetChecked( \n   ActionCallingContext^ oCallingContext,\n   String^ strActionWithParameters\n)\n```\n```\n\n#### Parameters\n\n*oCallingContext*\n\n\n*strActionWithParameters*\n\nRemarks\n\nCan be used to simulate 'checkbox' or 'radio' style of a control bound to the action"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionGetEnabled.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/Action/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionGetEnabled",
        "content": "Returns whether an action is enabled\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic bool GetEnabled( \n   ActionCallingContext oCallingContext,\n   string strActionWithParameters\n)\n```\n```\n\n```\n```\npublic:\nbool GetEnabled( \n   ActionCallingContext^ oCallingContext,\n   String^ strActionWithParameters\n)\n```\n```\n\n#### Parameters\n\n*oCallingContext*\n\n\n*strActionWithParameters*\n\nRemarks\n\nIs used to enable/dissable control bound to the action (usually RibbonCommand)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionActionProperties.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/Action/Properties",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionActionProperties",
        "content": "Descriptive data for this action.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic ActionProperties ActionProperties {get;}\n```\n```\n\n```\n```\npublic:\nproperty ActionProperties^ ActionProperties {\n   ActionProperties^ get();\n}\n```\n```"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionModuleName.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/Action/Properties",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionModuleName",
        "content": "Name of the module in which this action is implemented.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic string ModuleName {get;}\n```\n```\n\n```\n```\npublic:\nproperty String^ ModuleName {\n   String^ get();\n}\n```\n```"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionName.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/Action/Properties",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionName",
        "content": "Name used to identify this action in the system.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic string Name {get;}\n```\n```\n\n```\n```\npublic:\nproperty String^ Name {\n   String^ get();\n}\n```\n```"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionCallingContext_ctor.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/ActionCallingContext",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionCallingContext_ctor",
        "content": "Creates an ActionCallingContext\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic ActionCallingContext()\n```\n```\n\n```\n```\npublic:\nActionCallingContext();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionCallingContext_methods.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/ActionCallingContext",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionCallingContext_methods",
        "content": "For a list of all members of this type, see ActionCallingContext members](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionCallingContext_members.html).\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [AddParameter](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context~AddParameter.html) | Adds a parameter to the Context. (Inherited from [Eplan.EplApi.Base.Context](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context.html)) |\n| Public Method | [Dispose()](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context~Dispose().html) | Destructor for deterministic finalization of ActionCallingContext object. (Inherited from [Eplan.EplApi.Base.Context](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context.html)) |\n| Public Method | [GetAfActionCallingContext](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionCallingContext~GetAfActionCallingContext.html) | For internal use only. |\n| Public Method | [GetContextParameter](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionCallingContext~GetContextParameter.html) | Overridden. Get the Block of Context Parameters of this Context. |\n| Public Method | [GetEContext](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context~GetEContext.html) | For internal use only. (Inherited from [Eplan.EplApi.Base.Context](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context.html)) |\n| Public Method | [GetException](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionCallingContext~GetException.html) | Get Exception |\n| Public Method | [GetParameter](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context~GetParameter.html) | Gets a parameter from the Context. (Inherited from [Eplan.EplApi.Base.Context](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context.html)) |\n| Public Method | [GetParameterCount](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context~GetParameterCount.html) | Gets the count of the Parameters in this context (Inherited from [Eplan.EplApi.Base.Context](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context.html)) |\n| Public Method | [GetParameters](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context~GetParameters.html) | Gets array filled with parameters names from the context. (Inherited from [Eplan.EplApi.Base.Context](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context.html)) |\n| Public Method | [GetStrings](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context~GetStrings.html) | Gets the array filled with strings from the context. (Additional to the parameters) (Inherited from [Eplan.EplApi.Base.Context](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context.html)) |\n| Public Method | [SetAfActionCallingContext](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionCallingContext~SetAfActionCallingContext.html) | For internal use only. |\n| Public Method | [SetContextParameter](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionCallingContext~SetContextParameter.html) | Overridden. Sets a block of context parameters (as ContextParameterBlock object). |\n| Public Method | [SetEContext](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context~SetEContext.html) | For internal use only. (Inherited from [Eplan.EplApi.Base.Context](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context.html)) |\n| Public Method | [SetStrings](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context~SetStrings.html) | Sets the array filled with strings from the context. (Additional to the parameters) (Inherited from [Eplan.EplApi.Base.Context](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context.html)) |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionCallingContext_properties.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/ActionCallingContext",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionCallingContext_properties",
        "content": "For a list of all members of this type, see ActionCallingContext members](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionCallingContext_members.html).\n\nPublic Properties\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Property | [SysMessages](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionCallingContext~SysMessages.html) | Gets system messages |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionCallingContext_ctorAfActionCallingContext.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/ActionCallingContext/ActionCallingContext Constructor",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionCallingContext_ctorAfActionCallingContext",
        "content": "For internal use only.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic ActionCallingContext( \n   AfActionCallingContext* pAfActionCallingContext\n)\n```\n```\n\n```\n```\npublic:\nActionCallingContext( \n   AfActionCallingContext* pAfActionCallingContext\n)\n```\n```\n\n#### Parameters\n\n*pAfActionCallingContext*\n:   For internal use only."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionCallingContext_ctorAfActionCallingContextBoolean.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/ActionCallingContext/ActionCallingContext Constructor",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionCallingContext_ctorAfActionCallingContextBoolean",
        "content": "For internal use only.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic ActionCallingContext( \n   AfActionCallingContext* pAfActionCallingContext,\n   bool bDelete\n)\n```\n```\n\n```\n```\npublic:\nActionCallingContext( \n   AfActionCallingContext* pAfActionCallingContext,\n   bool bDelete\n)\n```\n```\n\n#### Parameters\n\n*pAfActionCallingContext*\n:   For internal use only.\n\n*bDelete*"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionCallingContextGetAfActionCallingContext.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/ActionCallingContext/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionCallingContextGetAfActionCallingContext",
        "content": "For internal use only.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic AfActionCallingContext GetAfActionCallingContext()\n```\n```\n\n```\n```\npublic:\nAfActionCallingContext GetAfActionCallingContext();\n```\n```\n\n#### Return Value\n\nFor internal use only."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionCallingContextGetContextParameter.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/ActionCallingContext/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionCallingContextGetContextParameter",
        "content": "Get the Block of Context Parameters of this Context.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic override ContextParameterBlock GetContextParameter()\n```\n```\n\n```\n```\npublic:\nContextParameterBlock^ GetContextParameter(); override\n```\n```\n\n#### Return Value\n\nThe Context Parameter Block when available."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionCallingContextGetException.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/ActionCallingContext/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionCallingContextGetException",
        "content": "Get Exception\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic BaseException GetException()\n```\n```\n\n```\n```\npublic:\nBaseException^ GetException();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionCallingContextSetAfActionCallingContext.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/ActionCallingContext/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionCallingContextSetAfActionCallingContext",
        "content": "For internal use only.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void SetAfActionCallingContext( \n   AfActionCallingContext* pAfActionCallingContext\n)\n```\n```\n\n```\n```\npublic:\nvoid SetAfActionCallingContext( \n   AfActionCallingContext* pAfActionCallingContext\n)\n```\n```\n\n#### Parameters\n\n*pAfActionCallingContext*"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionCallingContextSetContextParameter.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/ActionCallingContext/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionCallingContextSetContextParameter",
        "content": "Sets a block of context parameters (as ContextParameterBlock object).\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic override void SetContextParameter( \n   ContextParameterBlock pParams\n)\n```\n```\n\n```\n```\npublic:\nvoid SetContextParameter( \n   ContextParameterBlock^ pParams\n) override\n```\n```\n\n#### Parameters\n\n*pParams*\n:   a block of parameters to set\n\nRemarks\n\nContextParameterBlock is added to the context."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionCallingContextSysMessages.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/ActionCallingContext/Properties",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionCallingContextSysMessages",
        "content": "Gets system messages\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic SysMessagesCollection SysMessages {get; set;}\n```\n```\n\n```\n```\npublic:\nproperty SysMessagesCollection^ SysMessages {\n   SysMessagesCollection^ get();\n   void set (    SysMessagesCollection^ value);\n}\n```\n```"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionManager_ctor.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/ActionManager",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionManager_ctor",
        "content": "Syntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic ActionManager()\n```\n```\n\n```\n```\npublic:\nActionManager();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionManager_methods.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/ActionManager",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionManager_methods",
        "content": "For a list of all members of this type, see ActionManager members](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionManager_members.html).\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [FindAction](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionManager~FindAction.html) | Overloaded. This function searches for an action registered in the system. |\n| Public Method | [FindBaseAction](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionManager~FindBaseAction.html) | This function searches the base action for an existing action the base action has the same name, but a lower ordinal. |\n| Public Method | [FindBaseActionFromFunctionAction](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionManager~FindBaseActionFromFunctionAction.html) | This function searches the base action for an existing action in scripting. the base action has the same name, but a lower ordinal. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionManagerFindAction.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/ActionManager/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionManagerFindAction",
        "content": "This function searches for an action registered in the system.\n\nOverload List\n\n| Overload | Description |\n| --- | --- |\n| FindAction(String,Boolean)](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionManager~FindAction(String,Boolean).html) | This function searches for an action registered in the system. |\n| [FindAction(String)](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionManager~FindAction(String).html) | This function searches for an action registered in the system. |"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionManagerFindBaseAction.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/ActionManager/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionManagerFindBaseAction",
        "content": "This function searches the base action for an existing action the base action has the same name, but a lower ordinal.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic Action FindBaseAction( \n   IEplAction pAction,\n   bool bSilent\n)\n```\n```\n\n```\n```\npublic:\nAction^ FindBaseAction( \n   IEplAction^ pAction,\n   bool bSilent\n)\n```\n```\n\n#### Parameters\n\n*pAction*\n:   the action you search the base action.\n\n*bSilent*\n:   true: no error is reported in the system errors when the action is not found.\n\n#### Return Value\n\nReturns a reference to a [Action](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.Action.html) or NULL in case no action with this name exists in the system."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionManagerFindBaseActionFromFunctionAction.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/ActionManager/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionManagerFindBaseActionFromFunctionAction",
        "content": "This function searches the base action for an existing action in scripting. the base action has the same name, but a lower ordinal.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic Action FindBaseActionFromFunctionAction( \n   bool bSilent\n)\n```\n```\n\n```\n```\npublic:\nAction^ FindBaseActionFromFunctionAction( \n   bool bSilent\n)\n```\n```\n\n#### Parameters\n\n*bSilent*\n:   true: no error is reported in the system errors when the action is not found.\n\n#### Return Value\n\nReturns a reference to a [Action](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.Action.html) or NULL in case no action with this name exists in the system."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionManagerFindActionString.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/ActionManager/Methods/FindAction Method",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionManagerFindActionString",
        "content": "This function searches for an action registered in the system.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic Action FindAction( \n   string strNameOfAction\n)\n```\n```\n\n```\n```\npublic:\nAction^ FindAction( \n   String^ strNameOfAction\n)\n```\n```\n\n#### Parameters\n\n*strNameOfAction*\n:   Name of the action you search for.\n\n#### Return Value\n\nReturns a reference to a [Action](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.Action.html) or NULL in case no action with this name exists in the system."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionManagerFindActionStringBoolean.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/ActionManager/Methods/FindAction Method",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionManagerFindActionStringBoolean",
        "content": "This function searches for an action registered in the system.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic Action FindAction( \n   string strNameOfAction,\n   bool bSilent\n)\n```\n```\n\n```\n```\npublic:\nAction^ FindAction( \n   String^ strNameOfAction,\n   bool bSilent\n)\n```\n```\n\n#### Parameters\n\n*strNameOfAction*\n:   Name of the action you search for.\n\n*bSilent*\n:   true: no error is reported in the system errors when the action is not found.\n\n#### Return Value\n\nReturns a reference to a [Action](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.Action.html) or NULL in case no action with this name exists in the system."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionParameterProperties_ctor.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/ActionParameterProperties",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionParameterProperties_ctor",
        "content": "Creates a new instance.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic ActionParameterProperties()\n```\n```\n\n```\n```\npublic:\nActionParameterProperties();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionParameterProperties_methods.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/ActionParameterProperties",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionParameterProperties_methods",
        "content": "For a list of all members of this type, see ActionParameterProperties members](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionParameterProperties_members.html).\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [Dispose](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionParameterProperties~Dispose().html) | Destructor for deterministic finalization of ActionParameterProperties object. |\n| Public Method | [GetAfActionParameter](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionParameterProperties~GetAfActionParameter.html) | For internal use only. |\n| Public Method | [Set](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionParameterProperties~Set.html) | Description text of a parameter. Sets name and description text of a parameter. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionParameterProperties_properties.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/ActionParameterProperties",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionParameterProperties_properties",
        "content": "For a list of all members of this type, see ActionParameterProperties members](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionParameterProperties_members.html).\n\nPublic Properties\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Property | [Name](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionParameterProperties~Name.html) | Name of a parameter. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionParameterProperties_ctorAfActionParameterBoolean.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/ActionParameterProperties/ActionParameterProperties Constructor",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionParameterProperties_ctorAfActionParameterBoolean",
        "content": "For internal use only.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic ActionParameterProperties( \n   AfActionParameter* pAfActionParameter,\n   bool bCopy\n)\n```\n```\n\n```\n```\npublic:\nActionParameterProperties( \n   AfActionParameter* pAfActionParameter,\n   bool bCopy\n)\n```\n```\n\n#### Parameters\n\n*pAfActionParameter*\n:   For internal use only.\n\n*bCopy*\n:   For internal use only."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionParameterPropertiesDispose.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/ActionParameterProperties/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionParameterPropertiesDispose",
        "content": "Destructor for deterministic finalization of ActionParameterProperties object.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void Dispose()\n```\n```\n\n```\n```\npublic:\nvoid Dispose();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionParameterPropertiesGetAfActionParameter.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/ActionParameterProperties/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionParameterPropertiesGetAfActionParameter",
        "content": "For internal use only.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic AfActionParameter GetAfActionParameter()\n```\n```\n\n```\n```\npublic:\nAfActionParameter GetAfActionParameter();\n```\n```\n\n#### Return Value\n\nFor internal use only."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionParameterPropertiesSet.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/ActionParameterProperties/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionParameterPropertiesSet",
        "content": "Description text of a parameter. Sets name and description text of a parameter.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void Set( \n   string strParamName\n)\n```\n```\n\n```\n```\npublic:\nvoid Set( \n   String^ strParamName\n)\n```\n```\n\n#### Parameters\n\n*strParamName*\n:   Name of the parameter."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionParameterPropertiesName.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/ActionParameterProperties/Properties",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionParameterPropertiesName",
        "content": "Name of a parameter.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic string Name {get;}\n```\n```\n\n```\n```\npublic:\nproperty String^ Name {\n   String^ get();\n}\n```\n```"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionProperties_ctor.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/ActionProperties",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionProperties_ctor",
        "content": "Creates an ActionProperties object.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic ActionProperties()\n```\n```\n\n```\n```\npublic:\nActionProperties();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionProperties_methods.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/ActionProperties",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionProperties_methods",
        "content": "For a list of all members of this type, see ActionProperties members](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionProperties_members.html).\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [AddParameter](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionProperties~AddParameter.html) | Adds the description of another context parameter. |\n| Public Method | [Dispose](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionProperties~Dispose().html) | Destructor for deterministic finalization of ActionProperties object. |\n| Public Method | [GetAfActionProp](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionProperties~GetAfActionProp.html) | For internal use only. |\n| Public Method | [GetParameterProperties](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionProperties~GetParameterProperties.html) | Returns all descriptions of the context parameters. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionProperties_ctorAfActionProp.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/ActionProperties/ActionProperties Constructor",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionProperties_ctorAfActionProp",
        "content": "For internal use only.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic ActionProperties( \n   AfActionProp* pAfActionProp\n)\n```\n```\n\n```\n```\npublic:\nActionProperties( \n   AfActionProp* pAfActionProp\n)\n```\n```\n\n#### Parameters\n\n*pAfActionProp*\n:   For internal use only."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionPropertiesAddParameter.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/ActionProperties/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionPropertiesAddParameter",
        "content": "Adds the description of another context parameter.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void AddParameter( \n   ActionParameterProperties oActionParameterProperties\n)\n```\n```\n\n```\n```\npublic:\nvoid AddParameter( \n   ActionParameterProperties^ oActionParameterProperties\n)\n```\n```\n\n#### Parameters\n\n*oActionParameterProperties*\n:   Description parameter to be added."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionPropertiesDispose.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/ActionProperties/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionPropertiesDispose",
        "content": "Destructor for deterministic finalization of ActionProperties object.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void Dispose()\n```\n```\n\n```\n```\npublic:\nvoid Dispose();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionPropertiesGetAfActionProp.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/ActionProperties/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionPropertiesGetAfActionProp",
        "content": "For internal use only.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic AfActionProp GetAfActionProp()\n```\n```\n\n```\n```\npublic:\nAfActionProp GetAfActionProp();\n```\n```\n\n#### Return Value\n\nFor internal use only."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionPropertiesGetParameterProperties.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/ActionProperties/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ActionPropertiesGetParameterProperties",
        "content": "Returns all descriptions of the context parameters.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic ArrayList GetParameterProperties()\n```\n```\n\n```\n```\npublic:\nArrayList^ GetParameterProperties();\n```\n```\n\n#### Return Value\n\nList of description objects"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.CommandLineInterpreter_ctor.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/CommandLineInterpreter",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.CommandLineInterpreter_ctor",
        "content": "constructor\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic CommandLineInterpreter()\n```\n```\n\n```\n```\npublic:\nCommandLineInterpreter();\n```\n```\n\nRemarks\n\nIf an exception raised while executing the action, it will not be transmitted to the caller."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.CommandLineInterpreter_methods.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/CommandLineInterpreter",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.CommandLineInterpreter_methods",
        "content": "For a list of all members of this type, see CommandLineInterpreter members](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.CommandLineInterpreter_members.html).\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [Execute](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.CommandLineInterpreter~Execute.html) | Overloaded. Execution of a command. |\n| Public Method | [IsExecutable](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.CommandLineInterpreter~IsExecutable.html) | Checks whether the execution of an expression is possible. This is only the case when the corresponding action is available. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.CommandLineInterpreter_ctorBoolean.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/CommandLineInterpreter/CommandLineInterpreter Constructor",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.CommandLineInterpreter_ctorBoolean",
        "content": "constructor\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic CommandLineInterpreter( \n   bool bEnableExceptions\n)\n```\n```\n\n```\n```\npublic:\nCommandLineInterpreter( \n   bool bEnableExceptions\n)\n```\n```\n\n#### Parameters\n\n*bEnableExceptions*\n:   If true then, if an exception raised, it will be transmitted to the caller. If false, only a boolean value will be returned by calling Execute method. If this returned value is false, this means the action has not succeed. Otherwise all things are OK.\n\nRemarks\n\nThe type of exceptions which can be raised, if parameter bEnableExceptions=true, is from System::BaseException."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.CommandLineInterpreter_ctorBooleanBoolean.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/CommandLineInterpreter/CommandLineInterpreter Constructor",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.CommandLineInterpreter_ctorBooleanBoolean",
        "content": "constructor\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic CommandLineInterpreter( \n   bool bEnableExceptions,\n   bool bCollectSysMessages\n)\n```\n```\n\n```\n```\npublic:\nCommandLineInterpreter( \n   bool bEnableExceptions,\n   bool bCollectSysMessages\n)\n```\n```\n\n#### Parameters\n\n*bEnableExceptions*\n:   If true then, if an exception raised, it will be transmitted to the caller. If false, only a boolean value will be returned by calling Execute method. If this returned value is false, this means the action has not succeed. Otherwise all things are OK.\n\n*bCollectSysMessages*\n:   If true then system messages will be collected by Execute method in ActionCallingContext.SysMessages.\n\nRemarks\n\nThe type of exceptions which can be raised, if parameter bEnableExceptions=true, is from System::BaseException."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.CommandLineInterpreterExecute.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/CommandLineInterpreter/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.CommandLineInterpreterExecute",
        "content": "Execution of a command.\n\nOverload List\n\n| Overload | Description |\n| --- | --- |\n| Execute(String)](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.CommandLineInterpreter~Execute(String).html) | Execution of a command. |\n| [Execute(String,ActionCallingContext)](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.CommandLineInterpreter~Execute(String,ActionCallingContext).html) | Execution of a command line expression. |"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.CommandLineInterpreterIsExecutable.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/CommandLineInterpreter/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.CommandLineInterpreterIsExecutable",
        "content": "Checks whether the execution of an expression is possible. This is only the case when the corresponding action is available.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic virtual bool IsExecutable( \n   string strExpression\n)\n```\n```\n\n```\n```\npublic:\nvirtual bool IsExecutable( \n   String^ strExpression\n)\n```\n```\n\n#### Parameters\n\n*strExpression*\n:   Command line expression to be checked.\n\n#### Return Value\n\ntrue, if command line expression is valid false, if command line expression cannot be executed."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.CommandLineInterpreterExecuteString.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/CommandLineInterpreter/Methods/Execute Method",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.CommandLineInterpreterExecuteString",
        "content": "Execution of a command.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic virtual bool Execute( \n   string strExpression\n)\n```\n```\n\n```\n```\npublic:\nvirtual bool Execute( \n   String^ strExpression\n)\n```\n```\n\n#### Parameters\n\n*strExpression*\n:   Action plus arguments\n\n#### Return Value\n\ntrue: The command line operation was successfully completed. false: One or more errors occured while executing the command line operation."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.CommandLineInterpreterExecuteStringActionCallingContext.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/CommandLineInterpreter/Methods/Execute Method",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.CommandLineInterpreterExecuteStringActionCallingContext",
        "content": "Execution of a command line expression.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic virtual bool Execute( \n   string strExpression,\n   ActionCallingContext oContext\n)\n```\n```\n\n```\n```\npublic:\nvirtual bool Execute( \n   String^ strExpression,\n   ActionCallingContext^ oContext\n)\n```\n```\n\n#### Parameters\n\n*strExpression*\n:   Action plus arguments\n\n*oContext*\n:   The context assigned to the action. Additional data can be encapsulated by the user here.\n\n#### Return Value\n\ntrue: The command line operation was successfully completed. false: One or more errors occured while executing the command line operation."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventHandler_ctor.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/EventHandler",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventHandler_ctor",
        "content": "Creates a new object to handle events.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic EventHandler()\n```\n```\n\n```\n```\npublic:\nEventHandler();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventHandler_events.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/EventHandler",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventHandler_events",
        "content": "For a list of all members of this type, see EventHandler members](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventHandler_members.html).\n\nPublic Events\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Event | [NameEvent](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventHandler~NameEvent_EV.html) | This event is raised whenever an event with the desired name occurs in EPLAN. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventHandler_fields.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/EventHandler",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventHandler_fields",
        "content": "For a list of all members of this type, see EventHandler members](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventHandler_members.html).\n\nPublic Fields\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Field | [EplanEvent](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventHandler~EplanEvent.html) | This event is raised whenever an event with the desired name occurs in EPLAN. |\n| Public Field | [EplanNameEvent](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventHandler~EplanNameEvent.html) | This event is raised whenever an event with the desired name occurs in EPLAN. The original name of the event is also given. |\n| Public Field | [EplanNameEventResult](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventHandler~EplanNameEventResult.html) | This event is raised whenever an event with the desired name occurs in EPLAN. The original name of the event is also given. Additional a return value is supported. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventHandler_methods.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/EventHandler",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventHandler_methods",
        "content": "For a list of all members of this type, see EventHandler members](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventHandler_members.html).\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [Dispose](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventHandler~Dispose().html) | Event handler is released. |\n| Public Method | [RaiseEvent](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventHandler~RaiseEvent.html) | For internal use only. |\n| Public Method | [RaiseEventResult](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventHandler~RaiseEventResult.html) | For internal use only. |\n| Public Method | [SetEvent](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventHandler~SetEvent.html) | Defines for which event the [IEplanEvents](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplanEvents.html) is raised. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventHandler_ctorString.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/EventHandler/EventHandler Constructor",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventHandler_ctorString",
        "content": "Creates a new object to handle events with the specified name.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic EventHandler( \n   string strEventName\n)\n```\n```\n\n```\n```\npublic:\nEventHandler( \n   String^ strEventName\n)\n```\n```\n\n#### Parameters\n\n*strEventName*\n:   Events with this name are edited through this event handler object."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventHandlerNameEvent_EV.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/EventHandler/Events",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventHandlerNameEvent_EV",
        "content": "This event is raised whenever an event with the desired name occurs in EPLAN.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic event EventHandlerFunction NameEvent\n```\n```\n\n```\n```\npublic:\nevent EventHandlerFunction^ NameEvent\n```\n```"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventHandlerEplanEvent.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/EventHandler/Fields",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventHandlerEplanEvent",
        "content": "This event is raised whenever an event with the desired name occurs in EPLAN.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic EventHandlerFunction EplanEvent\n```\n```\n\n```\n```\npublic:\nEventHandlerFunction^ EplanEvent\n```\n```"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventHandlerEplanNameEvent.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/EventHandler/Fields",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventHandlerEplanNameEvent",
        "content": "This event is raised whenever an event with the desired name occurs in EPLAN. The original name of the event is also given.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic EventHandlerNameFunction EplanNameEvent\n```\n```\n\n```\n```\npublic:\nEventHandlerNameFunction^ EplanNameEvent\n```\n```"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventHandlerEplanNameEventResult.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/EventHandler/Fields",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventHandlerEplanNameEventResult",
        "content": "This event is raised whenever an event with the desired name occurs in EPLAN. The original name of the event is also given. Additional a return value is supported.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic EventHandlerNameFunctionResult EplanNameEventResult\n```\n```\n\n```\n```\npublic:\nEventHandlerNameFunctionResult^ EplanNameEventResult\n```\n```"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventHandlerDispose.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/EventHandler/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventHandlerDispose",
        "content": "Event handler is released.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void Dispose()\n```\n```\n\n```\n```\npublic:\nvoid Dispose();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventHandlerRaiseEvent.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/EventHandler/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventHandlerRaiseEvent",
        "content": "For internal use only.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void RaiseEvent( \n   IEventParameter pEventParameter,\n   string strNameOfEvent\n)\n```\n```\n\n```\n```\npublic:\nvoid RaiseEvent( \n   IEventParameter^ pEventParameter,\n   String^ strNameOfEvent\n)\n```\n```\n\n#### Parameters\n\n*pEventParameter*\n:   For internal use only. Not longer used, used for compilecompability\n\n*strNameOfEvent*"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventHandlerRaiseEventResult.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/EventHandler/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventHandlerRaiseEventResult",
        "content": "For internal use only.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic int RaiseEventResult( \n   IEventParameter pEventParameter,\n   string strNameOfEvent\n)\n```\n```\n\n```\n```\npublic:\nint RaiseEventResult( \n   IEventParameter^ pEventParameter,\n   String^ strNameOfEvent\n)\n```\n```\n\n#### Parameters\n\n*pEventParameter*\n:   For internal use only.\n\n*strNameOfEvent*"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventHandlerSetEvent.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/EventHandler/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventHandlerSetEvent",
        "content": "Defines for which event the IEplanEvents](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplanEvents.html) is raised.\n\nSyntax\n\n* [C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void SetEvent( \n   string strEventName\n)\n```\n```\n\n```\n```\npublic:\nvoid SetEvent( \n   String^ strEventName\n)\n```\n```\n\n#### Parameters\n\n*strEventName*\n:   Events with this name are edited through this event handler object.\n\nExample\n\nDefine the event to respond to\n\n* [C#](#i-tab-content-8b5966d8-c1ef-414f-ab73-d1c399927558)\n\n```\n// Generate an event handler object\nEplan.EplApi.ApplicationFramework.EventHandler myHandler= new Eplan.EplApi.ApplicationFramework.EventHandler();\n// The program should respond to this event\nmyHandler.SetEvent(\"onActionStart.String.*\");\n```"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventHandlerWrapper_ctor.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/EventHandlerWrapper",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventHandlerWrapper_ctor",
        "content": "Syntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic EventHandlerWrapper()\n```\n```\n\n```\n```\npublic:\nEventHandlerWrapper();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventHandlerWrapper_fields.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/EventHandlerWrapper",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventHandlerWrapper_fields",
        "content": "For a list of all members of this type, see EventHandlerWrapper members](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventHandlerWrapper_members.html).\n\nPublic Fields\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Field | [EplanEventLocally](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventHandlerWrapper~EplanEventLocally.html) | Local event handler |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventHandlerWrapper_methods.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/EventHandlerWrapper",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventHandlerWrapper_methods",
        "content": "For a list of all members of this type, see EventHandlerWrapper members](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventHandlerWrapper_members.html).\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [InitializeLifetimeService](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventHandlerWrapper~InitializeLifetimeService.html) | This object should live \"forever.\" |\n| Public Method | [LocallyEventHandlerFunction](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventHandlerWrapper~LocallyEventHandlerFunction.html) | This function of the local event handler is registered as a handler function of the remote event handler [EventHandler](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventHandler.html). |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventHandlerWrapperEplanEventLocally.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/EventHandlerWrapper/Fields",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventHandlerWrapperEplanEventLocally",
        "content": "Local event handler\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic EventHandlerFunction EplanEventLocally\n```\n```\n\n```\n```\npublic:\nEventHandlerFunction^ EplanEventLocally\n```\n```"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventHandlerWrapperInitializeLifetimeService.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/EventHandlerWrapper/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventHandlerWrapperInitializeLifetimeService",
        "content": "This object should live \"forever.\"\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic virtual object InitializeLifetimeService()\n```\n```\n\n```\n```\npublic:\nvirtual Object^ InitializeLifetimeService();\n```\n```\n\n#### Return Value\n\nReturns always `null`."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventHandlerWrapperLocallyEventHandlerFunction.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/EventHandlerWrapper/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventHandlerWrapperLocallyEventHandlerFunction",
        "content": "This function of the local event handler is registered as a handler function of the remote event handler EventHandler](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventHandler.html).\n\nSyntax\n\n* [C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\n[OneWay()]\npublic void LocallyEventHandlerFunction( \n   IEventParameter pIEventParameter\n)\n```\n```\n\n```\n```\n[OneWay()]\npublic:\nvoid LocallyEventHandlerFunction( \n   IEventParameter^ pIEventParameter\n)\n```\n```\n\n#### Parameters\n\n*pIEventParameter*\n:   Interface with parameters associated with the event."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventManager_ctor.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/EventManager",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventManager_ctor",
        "content": "Syntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic EventManager()\n```\n```\n\n```\n```\npublic:\nEventManager();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventManager_methods.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/EventManager",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventManager_methods",
        "content": "For a list of all members of this type, see EventManager members](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventManager_members.html).\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [Send](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventManager~Send.html) | Sends an event to the system. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventManagerSend.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/EventManager/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventManagerSend",
        "content": "Sends an event to the system.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic int Send( \n   string strEventName,\n   IEventParameter pEventParameter\n)\n```\n```\n\n```\n```\npublic:\nint Send( \n   String^ strEventName,\n   IEventParameter^ pEventParameter\n)\n```\n```\n\n#### Parameters\n\n*strEventName*\n:   Name of the event that is sent.\n\n*pEventParameter*\n:   Object containing parameters for this event.\n\n#### Return Value\n\nStatus of event processing. The Status is a result value of an event. The value is defined by the catcher of the event. When more events are called, the result is a bitwise or of every single result.\n\nExample\n\nSend the EventAusCSharpAddIn event with string parameters being passed ([EventParameterString](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventParameterString.html))\n\n* [C#](#i-tab-content-e2c0627d-6854-453c-8176-1744ad591008)\n\n```\nEventManager oEventManager = new EventManager();\nEventParameterString oEventParamString = new EventParameterString();\noEventParamString.String = \"ParameterAusCSharpAddIn\";\nlong lRetVal = oEventManager.Send(\"EventAusCSharpAddIn\", oEventParamString);\n\n```"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventParameter_ctor.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/EventParameter",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventParameter_ctor",
        "content": "For internal use only.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic EventParameter( \n   AfEventParameter* pAfEventParameter\n)\n```\n```\n\n```\n```\npublic:\nEventParameter( \n   AfEventParameter* pAfEventParameter\n)\n```\n```\n\n#### Parameters\n\n*pAfEventParameter*\n:   For internal use only."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventParameter_methods.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/EventParameter",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventParameter_methods",
        "content": "For a list of all members of this type, see EventParameter members](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventParameter_members.html).\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [Dispose](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventParameter~Dispose().html) | For internal use only. |\n| Public Method | [GetInternalParameter](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventParameter~GetInternalParameter.html) | For internal use only. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventParameterDispose.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/EventParameter/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventParameterDispose",
        "content": "For internal use only.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void Dispose()\n```\n```\n\n```\n```\npublic:\nvoid Dispose();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventParameterGetInternalParameter.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/EventParameter/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventParameterGetInternalParameter",
        "content": "For internal use only.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic virtual AfEventParameter GetInternalParameter()\n```\n```\n\n```\n```\npublic:\nvirtual AfEventParameter GetInternalParameter();\n```\n```\n\n#### Return Value\n\nFor internal use only."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventParameterString_ctor.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/EventParameterString",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventParameterString_ctor",
        "content": "Creates a new object.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic EventParameterString()\n```\n```\n\n```\n```\npublic:\nEventParameterString();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventParameterString_methods.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/EventParameterString",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventParameterString_methods",
        "content": "For a list of all members of this type, see EventParameterString members](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventParameterString_members.html).\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [CreateFrom](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventParameterString~CreateFrom.html) | Creates the specific EventParameterString object from the IEventParameter interface. |\n| Public Method | [Dispose](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventParameterString~Dispose().html) | Releases the object. |\n| Public Method | [GetInternalParameter](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventParameterString~GetInternalParameter.html) | For internal use only. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventParameterString_properties.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/EventParameterString",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventParameterString_properties",
        "content": "For a list of all members of this type, see EventParameterString members](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventParameterString_members.html).\n\nPublic Properties\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Property | [String](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventParameterString~String.html) | Event parameter of the String type. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventParameterString_ctorAfEventParameterTemplate.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/EventParameterString/EventParameterString Constructor",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventParameterString_ctorAfEventParameterTemplate",
        "content": "Creates a new object.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic EventParameterString( \n   AfEventParameterTemplate* pAfEvParString\n)\n```\n```\n\n```\n```\npublic:\nEventParameterString( \n   AfEventParameterTemplate* pAfEvParString\n)\n```\n```\n\n#### Parameters\n\n*pAfEvParString*"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventParameterString_ctorIEventParameter.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/EventParameterString/EventParameterString Constructor",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventParameterString_ctorIEventParameter",
        "content": "Creates a new event parameter object of the EventParameterString type from the base interface.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic EventParameterString( \n   IEventParameter pIEventParameter\n)\n```\n```\n\n```\n```\npublic:\nEventParameterString( \n   IEventParameter^ pIEventParameter\n)\n```\n```\n\n#### Parameters\n\n*pIEventParameter*\n:   This interface should point to an EventParameter object that is an EventParameterString."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventParameterStringCreateFrom.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/EventParameterString/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventParameterStringCreateFrom",
        "content": "Creates the specific EventParameterString object from the IEventParameter interface.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void CreateFrom( \n   IEventParameter pIEventParameter\n)\n```\n```\n\n```\n```\npublic:\nvoid CreateFrom( \n   IEventParameter^ pIEventParameter\n)\n```\n```\n\n#### Parameters\n\n*pIEventParameter*\n:   The EventParameterString object is created from this interface. This interface should point to an EventParameter object that is an EventParameterString."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventParameterStringDispose.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/EventParameterString/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventParameterStringDispose",
        "content": "Releases the object.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void Dispose()\n```\n```\n\n```\n```\npublic:\nvoid Dispose();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventParameterStringGetInternalParameter.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/EventParameterString/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventParameterStringGetInternalParameter",
        "content": "For internal use only.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic virtual AfEventParameter GetInternalParameter()\n```\n```\n\n```\n```\npublic:\nvirtual AfEventParameter GetInternalParameter();\n```\n```\n\n#### Return Value\n\nFor internal use only."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventParameterStringString.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/EventParameterString/Properties",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventParameterStringString",
        "content": "Event parameter of the String type.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic string String {get; set;}\n```\n```\n\n```\n```\npublic:\nproperty String^ String {\n   String^ get();\n   void set (    String^ value);\n}\n```\n```"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.License_ctor.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/License",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.License_ctor",
        "content": "Syntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic License()\n```\n```\n\n```\n```\npublic:\nLicense();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.License_methods.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/License",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.License_methods",
        "content": "For a list of all members of this type, see License members](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.License_members.html).\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [Dispose](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.License~Dispose().html) | Destructor for deterministic finalization of License object. |\n| Public Method | [GetLicenseModules](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.License~GetLicenseModules.html) |  |\n| Public Method | [HasOption](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.License~HasOption.html) | Is used to determine whether a license for this option exists in the system and if it is available. |\n| Public Method | [LockOption](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.License~LockOption.html) | Assigns a license to an option on the system, i.e., a license for this option is deducted. If all available licenses for this option are already in use, the function fails. An option is used until the program is exited. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.License_properties.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/License",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.License_properties",
        "content": "For a list of all members of this type, see License members](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.License_members.html).\n\nPublic Properties\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Property | [DongleNumber](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.License~DongleNumber.html) | Get the dongle number |\n| Public Property | [Type](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.License~Type.html) | Gets license type: local, remote (network) or borrowed. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.LicenseDispose.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/License/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.LicenseDispose",
        "content": "Destructor for deterministic finalization of License object.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void Dispose()\n```\n```\n\n```\n```\npublic:\nvoid Dispose();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.LicenseGetLicenseModules.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/License/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.LicenseGetLicenseModules",
        "content": "Syntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void GetLicenseModules( \n   ref Dictionary<LicenseOptions,bool> LicenseModulesDic\n)\n```\n```\n\n```\n```\npublic:\nvoid GetLicenseModules( \n   Dictionary<LicenseOptions,bool>^% LicenseModulesDic\n)\n```\n```\n\n#### Parameters\n\n*LicenseModulesDic*\n:   A Dictionary of license modules (output parameter).\n\nRemarks\n\nAfter executing this method, the LicenseModulesDic parameter contains a dictionary of license modules. The key is the license option of the module, the value is the state whether the module license is available or not."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.LicenseHasOption.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/License/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.LicenseHasOption",
        "content": "Is used to determine whether a license for this option exists in the system and if it is available.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic bool HasOption( \n   LicenseOptions eOption\n)\n```\n```\n\n```\n```\npublic:\nbool HasOption( \n   LicenseOptions eOption\n)\n```\n```\n\n#### Parameters\n\n*eOption*\n:   Determines whether a license is available on the system for this licensing option.\n\n#### Return Value\n\ntrue: This options is licensed on the system. false: This options is not licensed on the system."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.LicenseLockOption.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/License/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.LicenseLockOption",
        "content": "Assigns a license to an option on the system, i.e., a license for this option is deducted. If all available licenses for this option are already in use, the function fails. An option is used until the program is exited.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic bool LockOption( \n   LicenseOptions eOption\n)\n```\n```\n\n```\n```\npublic:\nbool LockOption( \n   LicenseOptions eOption\n)\n```\n```\n\n#### Parameters\n\n*eOption*\n:   A license is assigned to this option.\n\n#### Return Value\n\ntrue: A license has been successfully assigned to this option. false: No license has been assigned to this option."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.LicenseDongleNumber.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/License/Properties",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.LicenseDongleNumber",
        "content": "Get the dongle number\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic string DongleNumber {get;}\n```\n```\n\n```\n```\npublic:\nproperty String^ DongleNumber {\n   String^ get();\n}\n```\n```\n\n#### Property Value\n\nThe dongle number of the computer"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.LicenseType.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/License/Properties",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.LicenseType",
        "content": "License type: local, network (remote) or borrowed\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic enum LicenseType : System.Enum\n```\n```\n\n```\n```\npublic enum class LicenseType : public System.Enum\n```\n```\n\nMembers\n\n| Member | Value | Description |\n| --- | --- | --- |\n| **Borrowed** | 5 | borrowed license |\n| **Local** | 1 | local license |\n| **NoLicense** | 0 | No license |\n| **Remote** | 2 | network license |\n\nInheritance Hierarchy\n\n[System.Object](#)  \n   [System.ValueType](#)  \n      [System.Enum](#)  \n         **Eplan.EplApi.ApplicationFramework.LicenseType**"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.QuietModeStep_ctor.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/QuietModeStep",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.QuietModeStep_ctor",
        "content": "Syntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic QuietModeStep( \n   QuietModes quietMode\n)\n```\n```\n\n```\n```\npublic:\nQuietModeStep( \n   QuietModes quietMode\n)\n```\n```\n\n#### Parameters\n\n*quietMode*"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.QuietModeStep_methods.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/QuietModeStep",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.QuietModeStep_methods",
        "content": "For a list of all members of this type, see QuietModeStep members](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.QuietModeStep_members.html).\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [Dispose](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.QuietModeStep~Dispose().html) |  |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.QuietModeStepDispose.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/QuietModeStep/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.QuietModeStepDispose",
        "content": "Syntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void Dispose()\n```\n```\n\n```\n```\npublic:\nvoid Dispose();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.UserRights_ctor.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/UserRights",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.UserRights_ctor",
        "content": "Syntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic UserRights()\n```\n```\n\n```\n```\npublic:\nUserRights();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.UserRights_methods.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/UserRights",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.UserRights_methods",
        "content": "For a list of all members of this type, see UserRights members](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.UserRights_members.html).\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [AddRight](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.UserRights~AddRight.html) | Adds the specified right entry to the given category of the custom UserRights file. The new right name will appear in the rights management dialog. |\n| Public Method | [CheckRightFor](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.UserRights~CheckRightFor.html) | Checks the execute permission of an action |\n| Public Method | [CheckUserRights](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.UserRights~CheckUserRights.html) | Queries, whether the rights management is currently active. |\n| Public Method | [DeleteRight](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.UserRights~DeleteRight.html) | Deletes the specified right entry from the UserRights database (rights management dialog) |\n| Public Method | [GetCategories](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.UserRights~GetCategories.html) | Returns the identifiers of all existing user rights categories. |\n| Public Method | [GetGroups](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.UserRights~GetGroups.html) | Gets the groups from user rights management, to which the specified user belongs.. |\n| Public Method | [GetUser](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.UserRights~GetUser.html) | Gets the user. |\n| Public Method | [GetUserSID](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.UserRights~GetUserSID.html) | Gets the user SID. |\n| Public Method | [IsRightExisting](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.UserRights~IsRightExisting.html) |  |\n| Public Method | [SetUser](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.UserRights~SetUser.html) | Sets the user. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.UserRightsAddRight.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/UserRights/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.UserRightsAddRight",
        "content": "Adds the specified right entry to the given category of the custom UserRights file. The new right name will appear in the rights management dialog.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic bool AddRight( \n   string strRightname,\n   string strCategory\n)\n```\n```\n\n```\n```\npublic:\nbool AddRight( \n   String^ strRightname,\n   String^ strCategory\n)\n```\n```\n\n#### Parameters\n\n*strRightname*\n:   right name string\n\n*strCategory*\n:   category name string. Only existing categories can be used. You can get the existing categories by the GetCategories method. You need to set the complete category name, you find in the StringCollection returned by GetCategory.\n\n#### Return Value\n\ntrue, in case the new right was successfully added to the rights management database.\n\nExceptions\n\n| Exception | Description |\n| --- | --- |\n| [System.ApplicationException](#) | Thrown when logged-in user has not enough right to work on user rights. |\n| [System.ArgumentException](#) | Thrown when given right `strRightname` already exist. |\n| [System.ArgumentException | Thrown when category `strCategory` does not exist. |\n\nRemarks\n\nThe currently logged-in user must have the URShowAdministrationDialog right, this is the right to work on user rights. The custom user rights will be saved to the file \"$(EPLAN\\_DATA)\\\\Administration\\\\customrights.erm\". The system administrator needs to protect this file from changes by unauthorized persons."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.UserRightsCheckRightFor.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/UserRights/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.UserRightsCheckRightFor",
        "content": "Checks the execute permission of an action\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic bool CheckRightFor( \n   string strRight\n)\n```\n```\n\n```\n```\npublic:\nbool CheckRightFor( \n   String^ strRight\n)\n```\n```\n\n#### Parameters\n\n*strRight*\n:   Name of the execute permission to be checked.\n\n#### Return Value\n\ntrue: Action is granted execute permission. false: The action must not be executed by the current user.\n\nRemarks\n\nBefore executing newly programmed functions, the API programmer should check a right that is relatively similar to that of the new function. If, for example, a function is implemented that generates new pages, the right to create pages (XGedNewSchemePage) should be queried beforehand. If you check for a right, which is not yet added to the UserRights database, this right is always granted.\n\nExample\n\nExample of querying a right\n\n* [C#](#i-tab-content-9f17aff5-a918-4ced-80d4-6bf7ff31324f)\n\n```\nUserRights oUserRights = new UserRights();\nbool bRights = oUserRights.CheckUserRights(); // is the user rights management activated?\nif (bRights)\n{\n\n  bool bAnRight= oUserRights.CheckRightFor(\"XPLEditorStart\");\n}\n```"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.UserRightsCheckUserRights.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/UserRights/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.UserRightsCheckUserRights",
        "content": "Queries, whether the rights management is currently active.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic bool CheckUserRights()\n```\n```\n\n```\n```\npublic:\nbool CheckUserRights();\n```\n```\n\n#### Return Value\n\ntrue: Rights management activated in the system; false: No rights management activated in the system.\n\nRemarks\n\nThis method does not change the current mode of rights management. It only checks, whether the rights management is active or not."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.UserRightsDeleteRight.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/UserRights/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.UserRightsDeleteRight",
        "content": "Deletes the specified right entry from the UserRights database (rights management dialog)\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic bool DeleteRight( \n   string strRightname\n)\n```\n```\n\n```\n```\npublic:\nbool DeleteRight( \n   String^ strRightname\n)\n```\n```\n\n#### Parameters\n\n*strRightname*\n:   name of the user right entry to remove\n\n#### Return Value\n\ntrue, in case the right was successfully removed from the rights management database.\n\nRemarks\n\nThe currently logged-in user must have the URShowAdministrationDialog right, this is the right to work on user rights. Any group assignments of this right are removed."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.UserRightsGetCategories.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/UserRights/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.UserRightsGetCategories",
        "content": "Returns the identifiers of all existing user rights categories.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic StringCollection GetCategories()\n```\n```\n\n```\n```\npublic:\nStringCollection^ GetCategories();\n```\n```\n\n#### Return Value\n\nthe category identifiers in a string collection. The names are needed in order to add a new right to an existing category.\n\nExample\n\nExample of getting category names that can be displayed in dialogs:\n\n* [C#](#i-tab-content-d0cc526e-161d-444d-b7ca-efbce96304a5)\n\n```\n\nUserRights oUR = new UserRights();\nStringCollection oCategoryIDs = oUR.GetCategories();\nList<string> lstCategoryNames = new List<string>();\nforeach (String strCategoryID in oCategoryIDs)\n{\n    MultiLangString oMLSCategoryID = new MultiLangString();\n    oMLSCategoryID.SetAsString(strCategoryID);\n    String strCategoryNameToDisplayInDialog = new Translate().GetStringToDisplayInDialogs(oMLSCategoryID);\n    lstCategoryNames.Add(strCategoryNameToDisplayInDialog);\n}\n\n\n```"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.UserRightsGetGroups.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/UserRights/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.UserRightsGetGroups",
        "content": "Gets the groups from user rights management, to which the specified user belongs..\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic StringCollection GetGroups( \n   string strUserSID\n)\n```\n```\n\n```\n```\npublic:\nStringCollection^ GetGroups( \n   String^ strUserSID\n)\n```\n```\n\n#### Parameters\n\n*strUserSID*\n:   SID of user.\n\n#### Return Value\n\nThe groups, the user belongs to."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.UserRightsGetUser.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/UserRights/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.UserRightsGetUser",
        "content": "Gets the user.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic string GetUser()\n```\n```\n\n```\n```\npublic:\nString^ GetUser();\n```\n```\n\n#### Return Value\n\nThe user."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.UserRightsGetUserSID.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/UserRights/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.UserRightsGetUserSID",
        "content": "Gets the user SID.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic string GetUserSID()\n```\n```\n\n```\n```\npublic:\nString^ GetUserSID();\n```\n```\n\n#### Return Value\n\nThe user SID."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.UserRightsIsRightExisting.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/UserRights/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.UserRightsIsRightExisting",
        "content": "Syntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic bool IsRightExisting( \n   string strRightname\n)\n```\n```\n\n```\n```\npublic:\nbool IsRightExisting( \n   String^ strRightname\n)\n```\n```\n\n#### Parameters\n\n*strRightname*"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.UserRightsSetUser.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Classes/UserRights/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.UserRightsSetUser",
        "content": "Sets the user.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic bool SetUser( \n   string strUserName,\n   string strUserPassword\n)\n```\n```\n\n```\n```\npublic:\nbool SetUser( \n   String^ strUserName,\n   String^ strUserPassword\n)\n```\n```\n\n#### Parameters\n\n*strUserName*\n\n\n*strUserPassword*\n\n#### Return Value\n\nTrue: User was changed. False: User was not changed."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventHandlerFunction.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Delegates",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventHandlerFunction",
        "content": "Functions of this type can be registered as event handlers in the class EventHandler](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventHandler.html).\n\nSyntax\n\n* [C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic delegate void EventHandlerFunction( \n   IEventParameter pIEventParameter\n)\n```\n```\n\n```\n```\npublic delegate void EventHandlerFunction( \n   IEventParameter^ pIEventParameter\n)\n```\n```\n\n#### Parameters\n\n*pIEventParameter*"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventHandlerNameFunction.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Delegates",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventHandlerNameFunction",
        "content": "Functions of this type can be registered as event handlers in the class EventHandler](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventHandler.html).\n\nSyntax\n\n* [C#](#i-syntax-CS)\n* [C++/CLI\n\n```\n```\npublic delegate void EventHandlerNameFunction( \n   IEventParameter pIEventParameter,\n   string strNameOfEvent\n)\n```\n```\n\n```\n```\npublic delegate void EventHandlerNameFunction( \n   IEventParameter^ pIEventParameter,\n   String^ strNameOfEvent\n)\n```\n```\n\n#### Parameters\n\n*pIEventParameter*\n\n\n*strNameOfEvent*\n:   The original name of the send event. Can be useful when I was registered for an wildcard event, p.e. \"Test\\*\""
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventHandlerNameFunctionResult.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Delegates",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.EventHandlerNameFunctionResult",
        "content": "Functions of this type can be registered as event handlers in the class EventHandler](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.EventHandler.html).\n\nSyntax\n\n* [C#](#i-syntax-CS)\n* [C++/CLI\n\n```\n```\npublic delegate long EventHandlerNameFunctionResult( \n   IEventParameter pIEventParameter,\n   string strNameOfEvent\n)\n```\n```\n\n```\n```\npublic delegate int64 EventHandlerNameFunctionResult( \n   IEventParameter^ pIEventParameter,\n   String^ strNameOfEvent\n)\n```\n```\n\n#### Parameters\n\n*pIEventParameter*\n\n\n*strNameOfEvent*\n:   The original name of the send event. Can be useful when I was registered for an wildcard event, p.e. \"Test\\*\"\n\n#### Return Value\n\nthe return value of your event. When there are more handlers the result value is the bitwise or of all results."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.LicenseOptions.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Enumerations",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.LicenseOptions",
        "content": "License options provided by the Eplan licensing system.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI\n\n```\n```\npublic enum LicenseOptions : System.Enum\n```\n```\n\n```\n```\npublic enum class LicenseOptions : public System.Enum\n```\n```\n\nMembers\n\n| Member | Value | Description |\n| --- | --- | --- |\n| **\\_3DEXPERIENCEConnector** | 4786 | 4786, Eplan 3DEXPERIENCE Connector |\n| **APIExtension** | 725 | 725, Eplan API Extension |\n| **APIExtensionPartsmanagement** | 1880 | 1880, Eplan API Extension Partsmanagement |\n| **APIRuntimeApplication0001** | 2500 | 2500, API Runtime: Application 0001 |\n| **APIRuntimeApplication0002** | 2501 | 2501, API Runtime: Application 0002 |\n| **APIRuntimeApplication0003** | 2502 | 2502, API Runtime: Application 0003 |\n| **APIRuntimeApplication0004** | 2503 | 2503, API Runtime: Application 0004 |\n| **APIRuntimeApplication0005** | 2504 | 2504, API Runtime: Application 0005 |\n| **APIRuntimeApplication0006** | 2505 | 2505, API Runtime: Application 0006 |\n| **APIRuntimeApplication0007** | 2506 | 2506, API Runtime: Application 0007 |\n| **APIRuntimeApplication0008** | 2507 | 2507, API Runtime: Application 0008 |\n| **APIRuntimeApplication0009** | 2508 | 2508, API Runtime: Application 0009 |\n| **APIRuntimeApplication0010** | 2509 | 2509, API Runtime: Application 0010 |\n| **APIRuntimeApplication0011** | 2510 | 2510, API Runtime: Application 0011 |\n| **APIRuntimeApplication0012** | 2511 | 2511, API Runtime: Application 0012 |\n| **APIRuntimeApplication0013** | 2512 | 2512, API Runtime: Application 0013 |\n| **APIRuntimeApplication0014** | 2513 | 2513, API Runtime: Application 0014 |\n| **APIRuntimeApplication0015** | 2514 | 2514, API Runtime: Application 0015 |\n| **APIRuntimeApplication0016** | 2515 | 2515, API Runtime: Application 0016 |\n| **APIRuntimeApplication0017** | 2516 | 2516, API Runtime: Application 0017 |\n| **APIRuntimeApplication0018** | 2517 | 2517, API Runtime: Application 0018 |\n| **APIRuntimeApplication0019** | 2518 | 2518, API Runtime: Application 0019 |\n| **APIRuntimeApplication0020** | 2519 | 2519, API Runtime: Application 0020 |\n| **APIRuntimeApplication0021** | 2520 | 2520, API Runtime: Application 0021 |\n| **APIRuntimeApplication0022** | 2521 | 2521, API Runtime: Application 0022 |\n| **APIRuntimeApplication0023** | 2522 | 2522, API Runtime: Application 0023 |\n| **APIRuntimeApplication0024** | 2523 | 2523, API Runtime: Application 0024 |\n| **APIRuntimeApplication0025** | 2524 | 2524, API Runtime: Application 0025 |\n| **APIRuntimeApplication0026** | 2525 | 2525, API Runtime: Application 0026 |\n| **APIRuntimeApplication0027** | 2526 | 2526, API Runtime: Application 0027 |\n| **APIRuntimeApplication0028** | 2527 | 2527, API Runtime: Application 0028 |\n| **APIRuntimeApplication0029** | 2528 | 2528, API Runtime: Application 0029 |\n| **APIRuntimeApplication0030** | 2529 | 2529, API Runtime: Application 0030 |\n| **APIRuntimeApplication0031** | 2530 | 2530, API Runtime: Application 0031 |\n| **APIRuntimeApplication0032** | 2531 | 2531, API Runtime: Application 0032 |\n| **APIRuntimeApplication0033** | 2532 | 2532, API Runtime: Application 0033 |\n| **APIRuntimeApplication0034** | 2533 | 2533, API Runtime: Application 0034 |\n| **APIRuntimeApplication0035** | 2534 | 2534, API Runtime: Application 0035 |\n| **APIRuntimeApplication0036** | 2535 | 2535, API Runtime: Application 0036 |\n| **APIRuntimeApplication0037** | 2536 | 2536, API Runtime: Application 0037 |\n| **APIRuntimeApplication0038** | 2537 | 2537, API Runtime: Application 0038 |\n| **APIRuntimeApplication0039** | 2538 | 2538, API Runtime: Application 0039 |\n| **APIRuntimeApplication0040** | 2539 | 2539, API Runtime: Application 0040 |\n| **APIRuntimeApplication0041** | 2540 | 2540, API Runtime: Application 0041 |\n| **APIRuntimeApplication0042** | 2541 | 2541, API Runtime: Application 0042 |\n| **APIRuntimeApplication0043** | 2542 | 2542, API Runtime: Application 0043 |\n| **APIRuntimeApplication0044** | 2543 | 2543, API Runtime: Application 0044 |\n| **APIRuntimeApplication0045** | 2544 | 2544, API Runtime: Application 0045 |\n| **APIRuntimeApplication0046** | 2545 | 2545, API Runtime: Application 0046 |\n| **APIRuntimeApplication0047** | 2546 | 2546, API Runtime: Application 0047 |\n| **APIRuntimeApplication0048** | 2547 | 2547, API Runtime: Application 0048 |\n| **APIRuntimeApplication0049** | 2548 | 2548, API Runtime: Application 0049 |\n| **APIRuntimeApplication0050** | 2549 | 2549, API Runtime: Application 0050 |\n| **APIRuntimeApplication0051** | 2550 | 2550, API Runtime: Application 0051 |\n| **APIRuntimeApplication0052** | 2551 | 2551, API Runtime: Application 0052 |\n| **APIRuntimeApplication0053** | 2552 | 2552, API Runtime: Application 0053 |\n| **APIRuntimeApplication0054** | 2553 | 2553, API Runtime: Application 0054 |\n| **APIRuntimeApplication0055** | 2554 | 2554, API Runtime: Application 0055 |\n| **APIRuntimeApplication0056** | 2555 | 2555, API Runtime: Application 0056 |\n| **APIRuntimeApplication0057** | 2556 | 2556, API Runtime: Application 0057 |\n| **APIRuntimeApplication0058** | 2557 | 2557, API Runtime: Application 0058 |\n| **APIRuntimeApplication0059** | 2558 | 2558, API Runtime: Application 0059 |\n| **APIRuntimeApplication0060** | 2559 | 2559, API Runtime: Application 0060 |\n| **APIRuntimeApplication0061** | 2560 | 2560, API Runtime: Application 0061 |\n| **APIRuntimeApplication0062** | 2561 | 2561, API Runtime: Application 0062 |\n| **APIRuntimeApplication0063** | 2562 | 2562, API Runtime: Application 0063 |\n| **APIRuntimeApplication0064** | 2563 | 2563, API Runtime: Application 0064 |\n| **APIRuntimeApplication0065** | 2564 | 2564, API Runtime: Application 0065 |\n| **APIRuntimeApplication0066** | 2565 | 2565, API Runtime: Application 0066 |\n| **APIRuntimeApplication0067** | 2566 | 2566, API Runtime: Application 0067 |\n| **APIRuntimeApplication0068** | 2567 | 2567, API Runtime: Application 0068 |\n| **APIRuntimeApplication0069** | 2568 | 2568, API Runtime: Application 0069 |\n| **APIRuntimeApplication0070** | 2569 | 2569, API Runtime: Application 0070 |\n| **APIRuntimeApplication0071** | 2570 | 2570, API Runtime: Application 0071 |\n| **APIRuntimeApplication0072** | 2571 | 2571, API Runtime: Application 0072 |\n| **APIRuntimeApplication0073** | 2572 | 2572, API Runtime: Application 0073 |\n| **APIRuntimeApplication0074** | 2573 | 2573, API Runtime: Application 0074 |\n| **APIRuntimeApplication0075** | 2574 | 2574, API Runtime: Application 0075 |\n| **APIRuntimeApplication0076** | 2575 | 2575, API Runtime: Application 0076 |\n| **APIRuntimeApplication0077** | 2576 | 2576, API Runtime: Application 0077 |\n| **APIRuntimeApplication0078** | 2577 | 2577, API Runtime: Application 0078 |\n| **APIRuntimeApplication0079** | 2578 | 2578, API Runtime: Application 0079 |\n| **APIRuntimeApplication0080** | 2579 | 2579, API Runtime: Application 0080 |\n| **APIRuntimeApplication0081** | 2580 | 2580, API Runtime: Application 0081 |\n| **APIRuntimeApplication0082** | 2581 | 2581, API Runtime: Application 0082 |\n| **APIRuntimeApplication0083** | 2582 | 2582, API Runtime: Application 0083 |\n| **APIRuntimeApplication0084** | 2583 | 2583, API Runtime: Application 0084 |\n| **APIRuntimeApplication0085** | 2584 | 2584, API Runtime: Application 0085 |\n| **APIRuntimeApplication0086** | 2585 | 2585, API Runtime: Application 0086 |\n| **APIRuntimeApplication0087** | 2586 | 2586, API Runtime: Application 0087 |\n| **APIRuntimeApplication0088** | 2587 | 2587, API Runtime: Application 0088 |\n| **APIRuntimeApplication0089** | 2588 | 2588, API Runtime: Application 0089 |\n| **APIRuntimeApplication0090** | 2589 | 2589, API Runtime: Application 0090 |\n| **APIRuntimeApplication0091** | 2590 | 2590, API Runtime: Application 0091 |\n| **APIRuntimeApplication0092** | 2591 | 2591, API Runtime: Application 0092 |\n| **APIRuntimeApplication0093** | 2592 | 2592, API Runtime: Application 0093 |\n| **APIRuntimeApplication0094** | 2593 | 2593, API Runtime: Application 0094 |\n| **APIRuntimeApplication0095** | 2594 | 2594, API Runtime: Application 0095 |\n| **APIRuntimeApplication0096** | 2595 | 2595, API Runtime: Application 0096 |\n| **APIRuntimeApplication0097** | 2596 | 2596, API Runtime: Application 0097 |\n| **APIRuntimeApplication0098** | 2597 | 2597, API Runtime: Application 0098 |\n| **APIRuntimeApplication0099** | 2598 | 2598, API Runtime: Application 0099 |\n| **APIRuntimeApplication0100** | 2599 | 2599, API Runtime: Application 0100 |\n| **APIRuntimeApplication0101** | 2600 | 2600, API Runtime: Application 0101 |\n| **APIRuntimeApplication0102** | 2601 | 2601, API Runtime: Application 0102 |\n| **APIRuntimeApplication0103** | 2602 | 2602, API Runtime: Application 0103 |\n| **APIRuntimeApplication0104** | 2603 | 2603, API Runtime: Application 0104 |\n| **APIRuntimeApplication0105** | 2604 | 2604, API Runtime: Application 0105 |\n| **APIRuntimeApplication0106** | 2605 | 2605, API Runtime: Application 0106 |\n| **APIRuntimeApplication0107** | 2606 | 2606, API Runtime: Application 0107 |\n| **APIRuntimeApplication0108** | 2607 | 2607, API Runtime: Application 0108 |\n| **APIRuntimeApplication0109** | 2608 | 2608, API Runtime: Application 0109 |\n| **APIRuntimeApplication0110** | 2609 | 2609, API Runtime: Application 0110 |\n| **APIRuntimeApplication0111** | 2610 | 2610, API Runtime: Application 0111 |\n| **APIRuntimeApplication0112** | 2611 | 2611, API Runtime: Application 0112 |\n| **APIRuntimeApplication0113** | 2612 | 2612, API Runtime: Application 0113 |\n| **APIRuntimeApplication0114** | 2613 | 2613, API Runtime: Application 0114 |\n| **APIRuntimeApplication0115** | 2614 | 2614, API Runtime: Application 0115 |\n| **APIRuntimeApplication0116** | 2615 | 2615, API Runtime: Application 0116 |\n| **APIRuntimeApplication0117** | 2616 | 2616, API Runtime: Application 0117 |\n| **APIRuntimeApplication0118** | 2617 | 2617, API Runtime: Application 0118 |\n| **APIRuntimeApplication0119** | 2618 | 2618, API Runtime: Application 0119 |\n| **APIRuntimeApplication0120** | 2619 | 2619, API Runtime: Application 0120 |\n| **APIRuntimeApplication0121** | 2620 | 2620, API Runtime: Application 0121 |\n| **APIRuntimeApplication0122** | 2621 | 2621, API Runtime: Application 0122 |\n| **APIRuntimeApplication0123** | 2622 | 2622, API Runtime: Application 0123 |\n| **APIRuntimeApplication0124** | 2623 | 2623, API Runtime: Application 0124 |\n| **APIRuntimeApplication0125** | 2624 | 2624, API Runtime: Application 0125 |\n| **APIRuntimeApplication0126** | 2625 | 2625, API Runtime: Application 0126 |\n| **APIRuntimeApplication0127** | 2626 | 2626, API Runtime: Application 0127 |\n| **APIRuntimeApplication0128** | 2627 | 2627, API Runtime: Application 0128 |\n| **APIRuntimeApplication0129** | 2628 | 2628, API Runtime: Application 0129 |\n| **APIRuntimeApplication0130** | 2629 | 2629, API Runtime: Application 0130 |\n| **APIRuntimeApplication0131** | 2630 | 2630, API Runtime: Application 0131 |\n| **APIRuntimeApplication0132** | 2631 | 2631, API Runtime: Application 0132 |\n| **APIRuntimeApplication0133** | 2632 | 2632, API Runtime: Application 0133 |\n| **APIRuntimeApplication0134** | 2633 | 2633, API Runtime: Application 0134 |\n| **APIRuntimeApplication0135** | 2634 | 2634, API Runtime: Application 0135 |\n| **APIRuntimeApplication0136** | 2635 | 2635, API Runtime: Application 0136 |\n| **APIRuntimeApplication0137** | 2636 | 2636, API Runtime: Application 0137 |\n| **APIRuntimeApplication0138** | 2637 | 2637, API Runtime: Application 0138 |\n| **APIRuntimeApplication0139** | 2638 | 2638, API Runtime: Application 0139 |\n| **APIRuntimeApplication0140** | 2639 | 2639, API Runtime: Application 0140 |\n| **APIRuntimeApplication0141** | 2640 | 2640, API Runtime: Application 0141 |\n| **APIRuntimeApplication0142** | 2641 | 2641, API Runtime: Application 0142 |\n| **APIRuntimeApplication0143** | 2642 | 2642, API Runtime: Application 0143 |\n| **APIRuntimeApplication0144** | 2643 | 2643, API Runtime: Application 0144 |\n| **APIRuntimeApplication0145** | 2644 | 2644, API Runtime: Application 0145 |\n| **APIRuntimeApplication0146** | 2645 | 2645, API Runtime: Application 0146 |\n| **APIRuntimeApplication0147** | 2646 | 2646, API Runtime: Application 0147 |\n| **APIRuntimeApplication0148** | 2647 | 2647, API Runtime: Application 0148 |\n| **APIRuntimeApplication0149** | 2648 | 2648, API Runtime: Application 0149 |\n| **APIRuntimeApplication0150** | 2649 | 2649, API Runtime: Application 0150 |\n| **APIRuntimeApplication0151** | 2650 | 2650, API Runtime: Application 0151 |\n| **APIRuntimeApplication0152** | 2651 | 2651, API Runtime: Application 0152 |\n| **APIRuntimeApplication0153** | 2652 | 2652, API Runtime: Application 0153 |\n| **APIRuntimeApplication0154** | 2653 | 2653, API Runtime: Application 0154 |\n| **APIRuntimeApplication0155** | 2654 | 2654, API Runtime: Application 0155 |\n| **APIRuntimeApplication0156** | 2655 | 2655, API Runtime: Application 0156 |\n| **APIRuntimeApplication0157** | 2656 | 2656, API Runtime: Application 0157 |\n| **APIRuntimeApplication0158** | 2657 | 2657, API Runtime: Application 0158 |\n| **APIRuntimeApplication0159** | 2658 | 2658, API Runtime: Application 0159 |\n| **APIRuntimeApplication0160** | 2659 | 2659, API Runtime: Application 0160 |\n| **APIRuntimeApplication0161** | 2660 | 2660, API Runtime: Application 0161 |\n| **APIRuntimeApplication0162** | 2661 | 2661, API Runtime: Application 0162 |\n| **APIRuntimeApplication0163** | 2662 | 2662, API Runtime: Application 0163 |\n| **APIRuntimeApplication0164** | 2663 | 2663, API Runtime: Application 0164 |\n| **APIRuntimeApplication0165** | 2664 | 2664, API Runtime: Application 0165 |\n| **APIRuntimeApplication0166** | 2665 | 2665, API Runtime: Application 0166 |\n| **APIRuntimeApplication0167** | 2666 | 2666, API Runtime: Application 0167 |\n| **APIRuntimeApplication0168** | 2667 | 2667, API Runtime: Application 0168 |\n| **APIRuntimeApplication0169** | 2668 | 2668, API Runtime: Application 0169 |\n| **APIRuntimeApplication0170** | 2669 | 2669, API Runtime: Application 0170 |\n| **APIRuntimeApplication0171** | 2670 | 2670, API Runtime: Application 0171 |\n| **APIRuntimeApplication0172** | 2671 | 2671, API Runtime: Application 0172 |\n| **APIRuntimeApplication0173** | 2672 | 2672, API Runtime: Application 0173 |\n| **APIRuntimeApplication0174** | 2673 | 2673, API Runtime: Application 0174 |\n| **APIRuntimeApplication0175** | 2674 | 2674, API Runtime: Application 0175 |\n| **APIRuntimeApplication0176** | 2675 | 2675, API Runtime: Application 0176 |\n| **APIRuntimeApplication0177** | 2676 | 2676, API Runtime: Application 0177 |\n| **APIRuntimeApplication0178** | 2677 | 2677, API Runtime: Application 0178 |\n| **APIRuntimeApplication0179** | 2678 | 2678, API Runtime: Application 0179 |\n| **APIRuntimeApplication0180** | 2679 | 2679, API Runtime: Application 0180 |\n| **APIRuntimeApplication0181** | 2680 | 2680, API Runtime: Application 0181 |\n| **APIRuntimeApplication0182** | 2681 | 2681, API Runtime: Application 0182 |\n| **APIRuntimeApplication0183** | 2682 | 2682, API Runtime: Application 0183 |\n| **APIRuntimeApplication0184** | 2683 | 2683, API Runtime: Application 0184 |\n| **APIRuntimeApplication0185** | 2684 | 2684, API Runtime: Application 0185 |\n| **APIRuntimeApplication0186** | 2685 | 2685, API Runtime: Application 0186 |\n| **APIRuntimeApplication0187** | 2686 | 2686, API Runtime: Application 0187 |\n| **APIRuntimeApplication0188** | 2687 | 2687, API Runtime: Application 0188 |\n| **APIRuntimeApplication0189** | 2688 | 2688, API Runtime: Application 0189 |\n| **APIRuntimeApplication0190** | 2689 | 2689, API Runtime: Application 0190 |\n| **APIRuntimeApplication0191** | 2690 | 2690, API Runtime: Application 0191 |\n| **APIRuntimeApplication0192** | 2691 | 2691, API Runtime: Application 0192 |\n| **APIRuntimeApplication0193** | 2692 | 2692, API Runtime: Application 0193 |\n| **APIRuntimeApplication0194** | 2693 | 2693, API Runtime: Application 0194 |\n| **APIRuntimeApplication0195** | 2694 | 2694, API Runtime: Application 0195 |\n| **APIRuntimeApplication0196** | 2695 | 2695, API Runtime: Application 0196 |\n| **APIRuntimeApplication0197** | 2696 | 2696, API Runtime: Application 0197 |\n| **APIRuntimeApplication0198** | 2697 | 2697, API Runtime: Application 0198 |\n| **APIRuntimeApplication0199** | 2698 | 2698, API Runtime: Application 0199 |\n| **APIRuntimeApplication0200** | 2699 | 2699, API Runtime: Application 0200 |\n| **APIRuntimeApplication0201** | 2700 | 2700, API Runtime: Application 0201 |\n| **APIRuntimeApplication0202** | 2701 | 2701, API Runtime: Application 0202 |\n| **APIRuntimeApplication0203** | 2702 | 2702, API Runtime: Application 0203 |\n| **APIRuntimeApplication0204** | 2703 | 2703, API Runtime: Application 0204 |\n| **APIRuntimeApplication0205** | 2704 | 2704, API Runtime: Application 0205 |\n| **APIRuntimeApplication0206** | 2705 | 2705, API Runtime: Application 0206 |\n| **APIRuntimeApplication0207** | 2706 | 2706, API Runtime: Application 0207 |\n| **APIRuntimeApplication0208** | 2707 | 2707, API Runtime: Application 0208 |\n| **APIRuntimeApplication0209** | 2708 | 2708, API Runtime: Application 0209 |\n| **APIRuntimeApplication0210** | 2709 | 2709, API Runtime: Application 0210 |\n| **APIRuntimeApplication0211** | 2710 | 2710, API Runtime: Application 0211 |\n| **APIRuntimeApplication0212** | 2711 | 2711, API Runtime: Application 0212 |\n| **APIRuntimeApplication0213** | 2712 | 2712, API Runtime: Application 0213 |\n| **APIRuntimeApplication0214** | 2713 | 2713, API Runtime: Application 0214 |\n| **APIRuntimeApplication0215** | 2714 | 2714, API Runtime: Application 0215 |\n| **APIRuntimeApplication0216** | 2715 | 2715, API Runtime: Application 0216 |\n| **APIRuntimeApplication0217** | 2716 | 2716, API Runtime: Application 0217 |\n| **APIRuntimeApplication0218** | 2717 | 2717, API Runtime: Application 0218 |\n| **APIRuntimeApplication0219** | 2718 | 2718, API Runtime: Application 0219 |\n| **APIRuntimeApplication0220** | 2719 | 2719, API Runtime: Application 0220 |\n| **APIRuntimeApplication0221** | 2720 | 2720, API Runtime: Application 0221 |\n| **APIRuntimeApplication0222** | 2721 | 2721, API Runtime: Application 0222 |\n| **APIRuntimeApplication0223** | 2722 | 2722, API Runtime: Application 0223 |\n| **APIRuntimeApplication0224** | 2723 | 2723, API Runtime: Application 0224 |\n| **APIRuntimeApplication0225** | 2724 | 2724, API Runtime: Application 0225 |\n| **APIRuntimeApplication0226** | 2725 | 2725, API Runtime: Application 0226 |\n| **APIRuntimeApplication0227** | 2726 | 2726, API Runtime: Application 0227 |\n| **APIRuntimeApplication0228** | 2727 | 2727, API Runtime: Application 0228 |\n| **APIRuntimeApplication0229** | 2728 | 2728, API Runtime: Application 0229 |\n| **APIRuntimeApplication0230** | 2729 | 2729, API Runtime: Application 0230 |\n| **APIRuntimeApplication0231** | 2730 | 2730, API Runtime: Application 0231 |\n| **APIRuntimeApplication0232** | 2731 | 2731, API Runtime: Application 0232 |\n| **APIRuntimeApplication0233** | 2732 | 2732, API Runtime: Application 0233 |\n| **APIRuntimeApplication0234** | 2733 | 2733, API Runtime: Application 0234 |\n| **APIRuntimeApplication0235** | 2734 | 2734, API Runtime: Application 0235 |\n| **APIRuntimeApplication0236** | 2735 | 2735, API Runtime: Application 0236 |\n| **APIRuntimeApplication0237** | 2736 | 2736, API Runtime: Application 0237 |\n| **APIRuntimeApplication0238** | 2737 | 2737, API Runtime: Application 0238 |\n| **APIRuntimeApplication0239** | 2738 | 2738, API Runtime: Application 0239 |\n| **APIRuntimeApplication0240** | 2739 | 2739, API Runtime: Application 0240 |\n| **APIRuntimeApplication0241** | 2740 | 2740, API Runtime: Application 0241 |\n| **APIRuntimeApplication0242** | 2741 | 2741, API Runtime: Application 0242 |\n| **APIRuntimeApplication0243** | 2742 | 2742, API Runtime: Application 0243 |\n| **APIRuntimeApplication0244** | 2743 | 2743, API Runtime: Application 0244 |\n| **APIRuntimeApplication0245** | 2744 | 2744, API Runtime: Application 0245 |\n| **APIRuntimeApplication0246** | 2745 | 2745, API Runtime: Application 0246 |\n| **APIRuntimeApplication0247** | 2746 | 2746, API Runtime: Application 0247 |\n| **APIRuntimeApplication0248** | 2747 | 2747, API Runtime: Application 0248 |\n| **APIRuntimeApplication0249** | 2748 | 2748, API Runtime: Application 0249 |\n| **APIRuntimeApplication0250** | 2749 | 2749, API Runtime: Application 0250 |\n| **APIRuntimeApplication0251** | 2750 | 2750, API Runtime: Application 0251 |\n| **APIRuntimeApplication0252** | 2751 | 2751, API Runtime: Application 0252 |\n| **APIRuntimeApplication0253** | 2752 | 2752, API Runtime: Application 0253 |\n| **APIRuntimeApplication0254** | 2753 | 2753, API Runtime: Application 0254 |\n| **APIRuntimeApplication0255** | 2754 | 2754, API Runtime: Application 0255 |\n| **APIRuntimeApplication0256** | 2755 | 2755, API Runtime: Application 0256 |\n| **APIRuntimeApplication0257** | 2756 | 2756, API Runtime: Application 0257 |\n| **APIRuntimeApplication0258** | 2757 | 2757, API Runtime: Application 0258 |\n| **APIRuntimeApplication0259** | 2758 | 2758, API Runtime: Application 0259 |\n| **APIRuntimeApplication0260** | 2759 | 2759, API Runtime: Application 0260 |\n| **APIRuntimeApplication0261** | 2760 | 2760, API Runtime: Application 0261 |\n| **APIRuntimeApplication0262** | 2761 | 2761, API Runtime: Application 0262 |\n| **APIRuntimeApplication0263** | 2762 | 2762, API Runtime: Application 0263 |\n| **APIRuntimeApplication0264** | 2763 | 2763, API Runtime: Application 0264 |\n| **APIRuntimeApplication0265** | 2764 | 2764, API Runtime: Application 0265 |\n| **APIRuntimeApplication0266** | 2765 | 2765, API Runtime: Application 0266 |\n| **APIRuntimeApplication0267** | 2766 | 2766, API Runtime: Application 0267 |\n| **APIRuntimeApplication0268** | 2767 | 2767, API Runtime: Application 0268 |\n| **APIRuntimeApplication0269** | 2768 | 2768, API Runtime: Application 0269 |\n| **APIRuntimeApplication0270** | 2769 | 2769, API Runtime: Application 0270 |\n| **APIRuntimeApplication0271** | 2770 | 2770, API Runtime: Application 0271 |\n| **APIRuntimeApplication0272** | 2771 | 2771, API Runtime: Application 0272 |\n| **APIRuntimeApplication0273** | 2772 | 2772, API Runtime: Application 0273 |\n| **APIRuntimeApplication0274** | 2773 | 2773, API Runtime: Application 0274 |\n| **APIRuntimeApplication0275** | 2774 | 2774, API Runtime: Application 0275 |\n| **APIRuntimeApplication0276** | 2775 | 2775, API Runtime: Application 0276 |\n| **APIRuntimeApplication0277** | 2776 | 2776, API Runtime: Application 0277 |\n| **APIRuntimeApplication0278** | 2777 | 2777, API Runtime: Application 0278 |\n| **APIRuntimeApplication0279** | 2778 | 2778, API Runtime: Application 0279 |\n| **APIRuntimeApplication0280** | 2779 | 2779, API Runtime: Application 0280 |\n| **APIRuntimeApplication0281** | 2780 | 2780, API Runtime: Application 0281 |\n| **APIRuntimeApplication0282** | 2781 | 2781, API Runtime: Application 0282 |\n| **APIRuntimeApplication0283** | 2782 | 2782, API Runtime: Application 0283 |\n| **APIRuntimeApplication0284** | 2783 | 2783, API Runtime: Application 0284 |\n| **APIRuntimeApplication0285** | 2784 | 2784, API Runtime: Application 0285 |\n| **APIRuntimeApplication0286** | 2785 | 2785, API Runtime: Application 0286 |\n| **APIRuntimeApplication0287** | 2786 | 2786, API Runtime: Application 0287 |\n| **APIRuntimeApplication0288** | 2787 | 2787, API Runtime: Application 0288 |\n| **APIRuntimeApplication0289** | 2788 | 2788, API Runtime: Application 0289 |\n| **APIRuntimeApplication0290** | 2789 | 2789, API Runtime: Application 0290 |\n| **APIRuntimeApplication0291** | 2790 | 2790, API Runtime: Application 0291 |\n| **APIRuntimeApplication0292** | 2791 | 2791, API Runtime: Application 0292 |\n| **APIRuntimeApplication0293** | 2792 | 2792, API Runtime: Application 0293 |\n| **APIRuntimeApplication0294** | 2793 | 2793, API Runtime: Application 0294 |\n| **APIRuntimeApplication0295** | 2794 | 2794, API Runtime: Application 0295 |\n| **APIRuntimeApplication0296** | 2795 | 2795, API Runtime: Application 0296 |\n| **APIRuntimeApplication0297** | 2796 | 2796, API Runtime: Application 0297 |\n| **APIRuntimeApplication0298** | 2797 | 2797, API Runtime: Application 0298 |\n| **APIRuntimeApplication0299** | 2798 | 2798, API Runtime: Application 0299 |\n| **APIRuntimeApplication0300** | 2799 | 2799, API Runtime: Application 0300 |\n| **APIRuntimeApplication0301** | 2800 | 2800, API Runtime: Application 0301 |\n| **APIRuntimeApplication0302** | 2801 | 2801, API Runtime: Application 0302 |\n| **APIRuntimeApplication0303** | 2802 | 2802, API Runtime: Application 0303 |\n| **APIRuntimeApplication0304** | 2803 | 2803, API Runtime: Application 0304 |\n| **APIRuntimeApplication0305** | 2804 | 2804, API Runtime: Application 0305 |\n| **APIRuntimeApplication0306** | 2805 | 2805, API Runtime: Application 0306 |\n| **APIRuntimeApplication0307** | 2806 | 2806, API Runtime: Application 0307 |\n| **APIRuntimeApplication0308** | 2807 | 2807, API Runtime: Application 0308 |\n| **APIRuntimeApplication0309** | 2808 | 2808, API Runtime: Application 0309 |\n| **APIRuntimeApplication0310** | 2809 | 2809, API Runtime: Application 0310 |\n| **APIRuntimeApplication0311** | 2810 | 2810, API Runtime: Application 0311 |\n| **APIRuntimeApplication0312** | 2811 | 2811, API Runtime: Application 0312 |\n| **APIRuntimeApplication0313** | 2812 | 2812, API Runtime: Application 0313 |\n| **APIRuntimeApplication0314** | 2813 | 2813, API Runtime: Application 0314 |\n| **APIRuntimeApplication0315** | 2814 | 2814, API Runtime: Application 0315 |\n| **APIRuntimeApplication0316** | 2815 | 2815, API Runtime: Application 0316 |\n| **APIRuntimeApplication0317** | 2816 | 2816, API Runtime: Application 0317 |\n| **APIRuntimeApplication0318** | 2817 | 2817, API Runtime: Application 0318 |\n| **APIRuntimeApplication0319** | 2818 | 2818, API Runtime: Application 0319 |\n| **APIRuntimeApplication0320** | 2819 | 2819, API Runtime: Application 0320 |\n| **APIRuntimeApplication0321** | 2820 | 2820, API Runtime: Application 0321 |\n| **APIRuntimeApplication0322** | 2821 | 2821, API Runtime: Application 0322 |\n| **APIRuntimeApplication0323** | 2822 | 2822, API Runtime: Application 0323 |\n| **APIRuntimeApplication0324** | 2823 | 2823, API Runtime: Application 0324 |\n| **APIRuntimeApplication0325** | 2824 | 2824, API Runtime: Application 0325 |\n| **APIRuntimeApplication0326** | 2825 | 2825, API Runtime: Application 0326 |\n| **APIRuntimeApplication0327** | 2826 | 2826, API Runtime: Application 0327 |\n| **APIRuntimeApplication0328** | 2827 | 2827, API Runtime: Application 0328 |\n| **APIRuntimeApplication0329** | 2828 | 2828, API Runtime: Application 0329 |\n| **APIRuntimeApplication0330** | 2829 | 2829, API Runtime: Application 0330 |\n| **APIRuntimeApplication0331** | 2830 | 2830, API Runtime: Application 0331 |\n| **APIRuntimeApplication0332** | 2831 | 2831, API Runtime: Application 0332 |\n| **APIRuntimeApplication0333** | 2832 | 2832, API Runtime: Application 0333 |\n| **APIRuntimeApplication0334** | 2833 | 2833, API Runtime: Application 0334 |\n| **APIRuntimeApplication0335** | 2834 | 2834, API Runtime: Application 0335 |\n| **APIRuntimeApplication0336** | 2835 | 2835, API Runtime: Application 0336 |\n| **APIRuntimeApplication0337** | 2836 | 2836, API Runtime: Application 0337 |\n| **APIRuntimeApplication0338** | 2837 | 2837, API Runtime: Application 0338 |\n| **APIRuntimeApplication0339** | 2838 | 2838, API Runtime: Application 0339 |\n| **APIRuntimeApplication0340** | 2839 | 2839, API Runtime: Application 0340 |\n| **APIRuntimeApplication0341** | 2840 | 2840, API Runtime: Application 0341 |\n| **APIRuntimeApplication0342** | 2841 | 2841, API Runtime: Application 0342 |\n| **APIRuntimeApplication0343** | 2842 | 2842, API Runtime: Application 0343 |\n| **APIRuntimeApplication0344** | 2843 | 2843, API Runtime: Application 0344 |\n| **APIRuntimeApplication0345** | 2844 | 2844, API Runtime: Application 0345 |\n| **APIRuntimeApplication0346** | 2845 | 2845, API Runtime: Application 0346 |\n| **APIRuntimeApplication0347** | 2846 | 2846, API Runtime: Application 0347 |\n| **APIRuntimeApplication0348** | 2847 | 2847, API Runtime: Application 0348 |\n| **APIRuntimeApplication0349** | 2848 | 2848, API Runtime: Application 0349 |\n| **APIRuntimeApplication0350** | 2849 | 2849, API Runtime: Application 0350 |\n| **APIRuntimeApplication0351** | 2850 | 2850, API Runtime: Application 0351 |\n| **APIRuntimeApplication0352** | 2851 | 2851, API Runtime: Application 0352 |\n| **APIRuntimeApplication0353** | 2852 | 2852, API Runtime: Application 0353 |\n| **APIRuntimeApplication0354** | 2853 | 2853, API Runtime: Application 0354 |\n| **APIRuntimeApplication0355** | 2854 | 2854, API Runtime: Application 0355 |\n| **APIRuntimeApplication0356** | 2855 | 2855, API Runtime: Application 0356 |\n| **APIRuntimeApplication0357** | 2856 | 2856, API Runtime: Application 0357 |\n| **APIRuntimeApplication0358** | 2857 | 2857, API Runtime: Application 0358 |\n| **APIRuntimeApplication0359** | 2858 | 2858, API Runtime: Application 0359 |\n| **APIRuntimeApplication0360** | 2859 | 2859, API Runtime: Application 0360 |\n| **APIRuntimeApplication0361** | 2860 | 2860, API Runtime: Application 0361 |\n| **APIRuntimeApplication0362** | 2861 | 2861, API Runtime: Application 0362 |\n| **APIRuntimeApplication0363** | 2862 | 2862, API Runtime: Application 0363 |\n| **APIRuntimeApplication0364** | 2863 | 2863, API Runtime: Application 0364 |\n| **APIRuntimeApplication0365** | 2864 | 2864, API Runtime: Application 0365 |\n| **APIRuntimeApplication0366** | 2865 | 2865, API Runtime: Application 0366 |\n| **APIRuntimeApplication0367** | 2866 | 2866, API Runtime: Application 0367 |\n| **APIRuntimeApplication0368** | 2867 | 2867, API Runtime: Application 0368 |\n| **APIRuntimeApplication0369** | 2868 | 2868, API Runtime: Application 0369 |\n| **APIRuntimeApplication0370** | 2869 | 2869, API Runtime: Application 0370 |\n| **APIRuntimeApplication0371** | 2870 | 2870, API Runtime: Application 0371 |\n| **APIRuntimeApplication0372** | 2871 | 2871, API Runtime: Application 0372 |\n| **APIRuntimeApplication0373** | 2872 | 2872, API Runtime: Application 0373 |\n| **APIRuntimeApplication0374** | 2873 | 2873, API Runtime: Application 0374 |\n| **APIRuntimeApplication0375** | 2874 | 2874, API Runtime: Application 0375 |\n| **APIRuntimeApplication0376** | 2875 | 2875, API Runtime: Application 0376 |\n| **APIRuntimeApplication0377** | 2876 | 2876, API Runtime: Application 0377 |\n| **APIRuntimeApplication0378** | 2877 | 2877, API Runtime: Application 0378 |\n| **APIRuntimeApplication0379** | 2878 | 2878, API Runtime: Application 0379 |\n| **APIRuntimeApplication0380** | 2879 | 2879, API Runtime: Application 0380 |\n| **APIRuntimeApplication0381** | 2880 | 2880, API Runtime: Application 0381 |\n| **APIRuntimeApplication0382** | 2881 | 2881, API Runtime: Application 0382 |\n| **APIRuntimeApplication0383** | 2882 | 2882, API Runtime: Application 0383 |\n| **APIRuntimeApplication0384** | 2883 | 2883, API Runtime: Application 0384 |\n| **APIRuntimeApplication0385** | 2884 | 2884, API Runtime: Application 0385 |\n| **APIRuntimeApplication0386** | 2885 | 2885, API Runtime: Application 0386 |\n| **APIRuntimeApplication0387** | 2886 | 2886, API Runtime: Application 0387 |\n| **APIRuntimeApplication0388** | 2887 | 2887, API Runtime: Application 0388 |\n| **APIRuntimeApplication0389** | 2888 | 2888, API Runtime: Application 0389 |\n| **APIRuntimeApplication0390** | 2889 | 2889, API Runtime: Application 0390 |\n| **APIRuntimeApplication0391** | 2890 | 2890, API Runtime: Application 0391 |\n| **APIRuntimeApplication0392** | 2891 | 2891, API Runtime: Application 0392 |\n| **APIRuntimeApplication0393** | 2892 | 2892, API Runtime: Application 0393 |\n| **APIRuntimeApplication0394** | 2893 | 2893, API Runtime: Application 0394 |\n| **APIRuntimeApplication0395** | 2894 | 2894, API Runtime: Application 0395 |\n| **APIRuntimeApplication0396** | 2895 | 2895, API Runtime: Application 0396 |\n| **APIRuntimeApplication0397** | 2896 | 2896, API Runtime: Application 0397 |\n| **APIRuntimeApplication0398** | 2897 | 2897, API Runtime: Application 0398 |\n| **APIRuntimeApplication0399** | 2898 | 2898, API Runtime: Application 0399 |\n| **APIRuntimeApplication0400** | 2899 | 2899, API Runtime: Application 0400 |\n| **APIRuntimeApplication0401** | 2900 | 2900, API Runtime: Application 0401 |\n| **APIRuntimeApplication0402** | 2901 | 2901, API Runtime: Application 0402 |\n| **APIRuntimeApplication0403** | 2902 | 2902, API Runtime: Application 0403 |\n| **APIRuntimeApplication0404** | 2903 | 2903, API Runtime: Application 0404 |\n| **APIRuntimeApplication0405** | 2904 | 2904, API Runtime: Application 0405 |\n| **APIRuntimeApplication0406** | 2905 | 2905, API Runtime: Application 0406 |\n| **APIRuntimeApplication0407** | 2906 | 2906, API Runtime: Application 0407 |\n| **APIRuntimeApplication0408** | 2907 | 2907, API Runtime: Application 0408 |\n| **APIRuntimeApplication0409** | 2908 | 2908, API Runtime: Application 0409 |\n| **APIRuntimeApplication0410** | 2909 | 2909, API Runtime: Application 0410 |\n| **APIRuntimeApplication0411** | 2910 | 2910, API Runtime: Application 0411 |\n| **APIRuntimeApplication0412** | 2911 | 2911, API Runtime: Application 0412 |\n| **APIRuntimeApplication0413** | 2912 | 2912, API Runtime: Application 0413 |\n| **APIRuntimeApplication0414** | 2913 | 2913, API Runtime: Application 0414 |\n| **APIRuntimeApplication0415** | 2914 | 2914, API Runtime: Application 0415 |\n| **APIRuntimeApplication0416** | 2915 | 2915, API Runtime: Application 0416 |\n| **APIRuntimeApplication0417** | 2916 | 2916, API Runtime: Application 0417 |\n| **APIRuntimeApplication0418** | 2917 | 2917, API Runtime: Application 0418 |\n| **APIRuntimeApplication0419** | 2918 | 2918, API Runtime: Application 0419 |\n| **APIRuntimeApplication0420** | 2919 | 2919, API Runtime: Application 0420 |\n| **APIRuntimeApplication0421** | 2920 | 2920, API Runtime: Application 0421 |\n| **APIRuntimeApplication0422** | 2921 | 2921, API Runtime: Application 0422 |\n| **APIRuntimeApplication0423** | 2922 | 2922, API Runtime: Application 0423 |\n| **APIRuntimeApplication0424** | 2923 | 2923, API Runtime: Application 0424 |\n| **APIRuntimeApplication0425** | 2924 | 2924, API Runtime: Application 0425 |\n| **APIRuntimeApplication0426** | 2925 | 2925, API Runtime: Application 0426 |\n| **APIRuntimeApplication0427** | 2926 | 2926, API Runtime: Application 0427 |\n| **APIRuntimeApplication0428** | 2927 | 2927, API Runtime: Application 0428 |\n| **APIRuntimeApplication0429** | 2928 | 2928, API Runtime: Application 0429 |\n| **APIRuntimeApplication0430** | 2929 | 2929, API Runtime: Application 0430 |\n| **APIRuntimeApplication0431** | 2930 | 2930, API Runtime: Application 0431 |\n| **APIRuntimeApplication0432** | 2931 | 2931, API Runtime: Application 0432 |\n| **APIRuntimeApplication0433** | 2932 | 2932, API Runtime: Application 0433 |\n| **APIRuntimeApplication0434** | 2933 | 2933, API Runtime: Application 0434 |\n| **APIRuntimeApplication0435** | 2934 | 2934, API Runtime: Application 0435 |\n| **APIRuntimeApplication0436** | 2935 | 2935, API Runtime: Application 0436 |\n| **APIRuntimeApplication0437** | 2936 | 2936, API Runtime: Application 0437 |\n| **APIRuntimeApplication0438** | 2937 | 2937, API Runtime: Application 0438 |\n| **APIRuntimeApplication0439** | 2938 | 2938, API Runtime: Application 0439 |\n| **APIRuntimeApplication0440** | 2939 | 2939, API Runtime: Application 0440 |\n| **APIRuntimeApplication0441** | 2940 | 2940, API Runtime: Application 0441 |\n| **APIRuntimeApplication0442** | 2941 | 2941, API Runtime: Application 0442 |\n| **APIRuntimeApplication0443** | 2942 | 2942, API Runtime: Application 0443 |\n| **APIRuntimeApplication0444** | 2943 | 2943, API Runtime: Application 0444 |\n| **APIRuntimeApplication0445** | 2944 | 2944, API Runtime: Application 0445 |\n| **APIRuntimeApplication0446** | 2945 | 2945, API Runtime: Application 0446 |\n| **APIRuntimeApplication0447** | 2946 | 2946, API Runtime: Application 0447 |\n| **APIRuntimeApplication0448** | 2947 | 2947, API Runtime: Application 0448 |\n| **APIRuntimeApplication0449** | 2948 | 2948, API Runtime: Application 0449 |\n| **APIRuntimeApplication0450** | 2949 | 2949, API Runtime: Application 0450 |\n| **APIRuntimeApplication0451** | 2950 | 2950, API Runtime: Application 0451 |\n| **APIRuntimeApplication0452** | 2951 | 2951, API Runtime: Application 0452 |\n| **APIRuntimeApplication0453** | 2952 | 2952, API Runtime: Application 0453 |\n| **APIRuntimeApplication0454** | 2953 | 2953, API Runtime: Application 0454 |\n| **APIRuntimeApplication0455** | 2954 | 2954, API Runtime: Application 0455 |\n| **APIRuntimeApplication0456** | 2955 | 2955, API Runtime: Application 0456 |\n| **APIRuntimeApplication0457** | 2956 | 2956, API Runtime: Application 0457 |\n| **APIRuntimeApplication0458** | 2957 | 2957, API Runtime: Application 0458 |\n| **APIRuntimeApplication0459** | 2958 | 2958, API Runtime: Application 0459 |\n| **APIRuntimeApplication0460** | 2959 | 2959, API Runtime: Application 0460 |\n| **APIRuntimeApplication0461** | 2960 | 2960, API Runtime: Application 0461 |\n| **APIRuntimeApplication0462** | 2961 | 2961, API Runtime: Application 0462 |\n| **APIRuntimeApplication0463** | 2962 | 2962, API Runtime: Application 0463 |\n| **APIRuntimeApplication0464** | 2963 | 2963, API Runtime: Application 0464 |\n| **APIRuntimeApplication0465** | 2964 | 2964, API Runtime: Application 0465 |\n| **APIRuntimeApplication0466** | 2965 | 2965, API Runtime: Application 0466 |\n| **APIRuntimeApplication0467** | 2966 | 2966, API Runtime: Application 0467 |\n| **APIRuntimeApplication0468** | 2967 | 2967, API Runtime: Application 0468 |\n| **APIRuntimeApplication0469** | 2968 | 2968, API Runtime: Application 0469 |\n| **APIRuntimeApplication0470** | 2969 | 2969, API Runtime: Application 0470 |\n| **APIRuntimeApplication0471** | 2970 | 2970, API Runtime: Application 0471 |\n| **APIRuntimeApplication0472** | 2971 | 2971, API Runtime: Application 0472 |\n| **APIRuntimeApplication0473** | 2972 | 2972, API Runtime: Application 0473 |\n| **APIRuntimeApplication0474** | 2973 | 2973, API Runtime: Application 0474 |\n| **APIRuntimeApplication0475** | 2974 | 2974, API Runtime: Application 0475 |\n| **APIRuntimeApplication0476** | 2975 | 2975, API Runtime: Application 0476 |\n| **APIRuntimeApplication0477** | 2976 | 2976, API Runtime: Application 0477 |\n| **APIRuntimeApplication0478** | 2977 | 2977, API Runtime: Application 0478 |\n| **APIRuntimeApplication0479** | 2978 | 2978, API Runtime: Application 0479 |\n| **APIRuntimeApplication0480** | 2979 | 2979, API Runtime: Application 0480 |\n| **APIRuntimeApplication0481** | 2980 | 2980, API Runtime: Application 0481 |\n| **APIRuntimeApplication0482** | 2981 | 2981, API Runtime: Application 0482 |\n| **APIRuntimeApplication0483** | 2982 | 2982, API Runtime: Application 0483 |\n| **APIRuntimeApplication0484** | 2983 | 2983, API Runtime: Application 0484 |\n| **APIRuntimeApplication0485** | 2984 | 2984, API Runtime: Application 0485 |\n| **APIRuntimeApplication0486** | 2985 | 2985, API Runtime: Application 0486 |\n| **APIRuntimeApplication0487** | 2986 | 2986, API Runtime: Application 0487 |\n| **APIRuntimeApplication0488** | 2987 | 2987, API Runtime: Application 0488 |\n| **APIRuntimeApplication0489** | 2988 | 2988, API Runtime: Application 0489 |\n| **APIRuntimeApplication0490** | 2989 | 2989, API Runtime: Application 0490 |\n| **APIRuntimeApplication0491** | 2990 | 2990, API Runtime: Application 0491 |\n| **APIRuntimeApplication0492** | 2991 | 2991, API Runtime: Application 0492 |\n| **APIRuntimeApplication0493** | 2992 | 2992, API Runtime: Application 0493 |\n| **APIRuntimeApplication0494** | 2993 | 2993, API Runtime: Application 0494 |\n| **APIRuntimeApplication0495** | 2994 | 2994, API Runtime: Application 0495 |\n| **APIRuntimeApplication0496** | 2995 | 2995, API Runtime: Application 0496 |\n| **APIRuntimeApplication0497** | 2996 | 2996, API Runtime: Application 0497 |\n| **APIRuntimeApplication0498** | 2997 | 2997, API Runtime: Application 0498 |\n| **APIRuntimeApplication0499** | 2998 | 2998, API Runtime: Application 0499 |\n| **APIRuntimeApplication0500** | 2999 | 2999, API Runtime: Application 0500 |\n| **APIRuntimeApplication0501** | 3000 | 3000, API Runtime: Application 0501 |\n| **APIRuntimeApplication0502** | 3001 | 3001, API Runtime: Application 0502 |\n| **APIRuntimeApplication0503** | 3002 | 3002, API Runtime: Application 0503 |\n| **APIRuntimeApplication0504** | 3003 | 3003, API Runtime: Application 0504 |\n| **APIRuntimeApplication0505** | 3004 | 3004, API Runtime: Application 0505 |\n| **APIRuntimeApplication0506** | 3005 | 3005, API Runtime: Application 0506 |\n| **APIRuntimeApplication0507** | 3006 | 3006, API Runtime: Application 0507 |\n| **APIRuntimeApplication0508** | 3007 | 3007, API Runtime: Application 0508 |\n| **APIRuntimeApplication0509** | 3008 | 3008, API Runtime: Application 0509 |\n| **APIRuntimeApplication0510** | 3009 | 3009, API Runtime: Application 0510 |\n| **APIRuntimeApplication0511** | 3010 | 3010, API Runtime: Application 0511 |\n| **APIRuntimeApplication0512** | 3011 | 3011, API Runtime: Application 0512 |\n| **APIRuntimeApplication0513** | 3012 | 3012, API Runtime: Application 0513 |\n| **APIRuntimeApplication0514** | 3013 | 3013, API Runtime: Application 0514 |\n| **APIRuntimeApplication0515** | 3014 | 3014, API Runtime: Application 0515 |\n| **APIRuntimeApplication0516** | 3015 | 3015, API Runtime: Application 0516 |\n| **APIRuntimeApplication0517** | 3016 | 3016, API Runtime: Application 0517 |\n| **APIRuntimeApplication0518** | 3017 | 3017, API Runtime: Application 0518 |\n| **APIRuntimeApplication0519** | 3018 | 3018, API Runtime: Application 0519 |\n| **APIRuntimeApplication0520** | 3019 | 3019, API Runtime: Application 0520 |\n| **APIRuntimeApplication0521** | 3020 | 3020, API Runtime: Application 0521 |\n| **APIRuntimeApplication0522** | 3021 | 3021, API Runtime: Application 0522 |\n| **APIRuntimeApplication0523** | 3022 | 3022, API Runtime: Application 0523 |\n| **APIRuntimeApplication0524** | 3023 | 3023, API Runtime: Application 0524 |\n| **APIRuntimeApplication0525** | 3024 | 3024, API Runtime: Application 0525 |\n| **APIRuntimeApplication0526** | 3025 | 3025, API Runtime: Application 0526 |\n| **APIRuntimeApplication0527** | 3026 | 3026, API Runtime: Application 0527 |\n| **APIRuntimeApplication0528** | 3027 | 3027, API Runtime: Application 0528 |\n| **APIRuntimeApplication0529** | 3028 | 3028, API Runtime: Application 0529 |\n| **APIRuntimeApplication0530** | 3029 | 3029, API Runtime: Application 0530 |\n| **APIRuntimeApplication0531** | 3030 | 3030, API Runtime: Application 0531 |\n| **APIRuntimeApplication0532** | 3031 | 3031, API Runtime: Application 0532 |\n| **APIRuntimeApplication0533** | 3032 | 3032, API Runtime: Application 0533 |\n| **APIRuntimeApplication0534** | 3033 | 3033, API Runtime: Application 0534 |\n| **APIRuntimeApplication0535** | 3034 | 3034, API Runtime: Application 0535 |\n| **APIRuntimeApplication0536** | 3035 | 3035, API Runtime: Application 0536 |\n| **APIRuntimeApplication0537** | 3036 | 3036, API Runtime: Application 0537 |\n| **APIRuntimeApplication0538** | 3037 | 3037, API Runtime: Application 0538 |\n| **APIRuntimeApplication0539** | 3038 | 3038, API Runtime: Application 0539 |\n| **APIRuntimeApplication0540** | 3039 | 3039, API Runtime: Application 0540 |\n| **APIRuntimeApplication0541** | 3040 | 3040, API Runtime: Application 0541 |\n| **APIRuntimeApplication0542** | 3041 | 3041, API Runtime: Application 0542 |\n| **APIRuntimeApplication0543** | 3042 | 3042, API Runtime: Application 0543 |\n| **APIRuntimeApplication0544** | 3043 | 3043, API Runtime: Application 0544 |\n| **APIRuntimeApplication0545** | 3044 | 3044, API Runtime: Application 0545 |\n| **APIRuntimeApplication0546** | 3045 | 3045, API Runtime: Application 0546 |\n| **APIRuntimeApplication0547** | 3046 | 3046, API Runtime: Application 0547 |\n| **APIRuntimeApplication0548** | 3047 | 3047, API Runtime: Application 0548 |\n| **APIRuntimeApplication0549** | 3048 | 3048, API Runtime: Application 0549 |\n| **APIRuntimeApplication0550** | 3049 | 3049, API Runtime: Application 0550 |\n| **APIRuntimeApplication0551** | 3050 | 3050, API Runtime: Application 0551 |\n| **APIRuntimeApplication0552** | 3051 | 3051, API Runtime: Application 0552 |\n| **APIRuntimeApplication0553** | 3052 | 3052, API Runtime: Application 0553 |\n| **APIRuntimeApplication0554** | 3053 | 3053, API Runtime: Application 0554 |\n| **APIRuntimeApplication0555** | 3054 | 3054, API Runtime: Application 0555 |\n| **APIRuntimeApplication0556** | 3055 | 3055, API Runtime: Application 0556 |\n| **APIRuntimeApplication0557** | 3056 | 3056, API Runtime: Application 0557 |\n| **APIRuntimeApplication0558** | 3057 | 3057, API Runtime: Application 0558 |\n| **APIRuntimeApplication0559** | 3058 | 3058, API Runtime: Application 0559 |\n| **APIRuntimeApplication0560** | 3059 | 3059, API Runtime: Application 0560 |\n| **APIRuntimeApplication0561** | 3060 | 3060, API Runtime: Application 0561 |\n| **APIRuntimeApplication0562** | 3061 | 3061, API Runtime: Application 0562 |\n| **APIRuntimeApplication0563** | 3062 | 3062, API Runtime: Application 0563 |\n| **APIRuntimeApplication0564** | 3063 | 3063, API Runtime: Application 0564 |\n| **APIRuntimeApplication0565** | 3064 | 3064, API Runtime: Application 0565 |\n| **APIRuntimeApplication0566** | 3065 | 3065, API Runtime: Application 0566 |\n| **APIRuntimeApplication0567** | 3066 | 3066, API Runtime: Application 0567 |\n| **APIRuntimeApplication0568** | 3067 | 3067, API Runtime: Application 0568 |\n| **APIRuntimeApplication0569** | 3068 | 3068, API Runtime: Application 0569 |\n| **APIRuntimeApplication0570** | 3069 | 3069, API Runtime: Application 0570 |\n| **APIRuntimeApplication0571** | 3070 | 3070, API Runtime: Application 0571 |\n| **APIRuntimeApplication0572** | 3071 | 3071, API Runtime: Application 0572 |\n| **APIRuntimeApplication0573** | 3072 | 3072, API Runtime: Application 0573 |\n| **APIRuntimeApplication0574** | 3073 | 3073, API Runtime: Application 0574 |\n| **APIRuntimeApplication0575** | 3074 | 3074, API Runtime: Application 0575 |\n| **APIRuntimeApplication0576** | 3075 | 3075, API Runtime: Application 0576 |\n| **APIRuntimeApplication0577** | 3076 | 3076, API Runtime: Application 0577 |\n| **APIRuntimeApplication0578** | 3077 | 3077, API Runtime: Application 0578 |\n| **APIRuntimeApplication0579** | 3078 | 3078, API Runtime: Application 0579 |\n| **APIRuntimeApplication0580** | 3079 | 3079, API Runtime: Application 0580 |\n| **APIRuntimeApplication0581** | 3080 | 3080, API Runtime: Application 0581 |\n| **APIRuntimeApplication0582** | 3081 | 3081, API Runtime: Application 0582 |\n| **APIRuntimeApplication0583** | 3082 | 3082, API Runtime: Application 0583 |\n| **APIRuntimeApplication0584** | 3083 | 3083, API Runtime: Application 0584 |\n| **APIRuntimeApplication0585** | 3084 | 3084, API Runtime: Application 0585 |\n| **APIRuntimeApplication0586** | 3085 | 3085, API Runtime: Application 0586 |\n| **APIRuntimeApplication0587** | 3086 | 3086, API Runtime: Application 0587 |\n| **APIRuntimeApplication0588** | 3087 | 3087, API Runtime: Application 0588 |\n| **APIRuntimeApplication0589** | 3088 | 3088, API Runtime: Application 0589 |\n| **APIRuntimeApplication0590** | 3089 | 3089, API Runtime: Application 0590 |\n| **APIRuntimeApplication0591** | 3090 | 3090, API Runtime: Application 0591 |\n| **APIRuntimeApplication0592** | 3091 | 3091, API Runtime: Application 0592 |\n| **APIRuntimeApplication0593** | 3092 | 3092, API Runtime: Application 0593 |\n| **APIRuntimeApplication0594** | 3093 | 3093, API Runtime: Application 0594 |\n| **APIRuntimeApplication0595** | 3094 | 3094, API Runtime: Application 0595 |\n| **APIRuntimeApplication0596** | 3095 | 3095, API Runtime: Application 0596 |\n| **APIRuntimeApplication0597** | 3096 | 3096, API Runtime: Application 0597 |\n| **APIRuntimeApplication0598** | 3097 | 3097, API Runtime: Application 0598 |\n| **APIRuntimeApplication0599** | 3098 | 3098, API Runtime: Application 0599 |\n| **APIRuntimeApplication0600** | 3099 | 3099, API Runtime: Application 0600 |\n| **APIRuntimeApplication0601** | 3100 | 3100, API Runtime: Application 0601 |\n| **APIRuntimeApplication0602** | 3101 | 3101, API Runtime: Application 0602 |\n| **APIRuntimeApplication0603** | 3102 | 3102, API Runtime: Application 0603 |\n| **APIRuntimeApplication0604** | 3103 | 3103, API Runtime: Application 0604 |\n| **APIRuntimeApplication0605** | 3104 | 3104, API Runtime: Application 0605 |\n| **APIRuntimeApplication0606** | 3105 | 3105, API Runtime: Application 0606 |\n| **APIRuntimeApplication0607** | 3106 | 3106, API Runtime: Application 0607 |\n| **APIRuntimeApplication0608** | 3107 | 3107, API Runtime: Application 0608 |\n| **APIRuntimeApplication0609** | 3108 | 3108, API Runtime: Application 0609 |\n| **APIRuntimeApplication0610** | 3109 | 3109, API Runtime: Application 0610 |\n| **APIRuntimeApplication0611** | 3110 | 3110, API Runtime: Application 0611 |\n| **APIRuntimeApplication0612** | 3111 | 3111, API Runtime: Application 0612 |\n| **APIRuntimeApplication0613** | 3112 | 3112, API Runtime: Application 0613 |\n| **APIRuntimeApplication0614** | 3113 | 3113, API Runtime: Application 0614 |\n| **APIRuntimeApplication0615** | 3114 | 3114, API Runtime: Application 0615 |\n| **APIRuntimeApplication0616** | 3115 | 3115, API Runtime: Application 0616 |\n| **APIRuntimeApplication0617** | 3116 | 3116, API Runtime: Application 0617 |\n| **APIRuntimeApplication0618** | 3117 | 3117, API Runtime: Application 0618 |\n| **APIRuntimeApplication0619** | 3118 | 3118, API Runtime: Application 0619 |\n| **APIRuntimeApplication0620** | 3119 | 3119, API Runtime: Application 0620 |\n| **APIRuntimeApplication0621** | 3120 | 3120, API Runtime: Application 0621 |\n| **APIRuntimeApplication0622** | 3121 | 3121, API Runtime: Application 0622 |\n| **APIRuntimeApplication0623** | 3122 | 3122, API Runtime: Application 0623 |\n| **APIRuntimeApplication0624** | 3123 | 3123, API Runtime: Application 0624 |\n| **APIRuntimeApplication0625** | 3124 | 3124, API Runtime: Application 0625 |\n| **APIRuntimeApplication0626** | 3125 | 3125, API Runtime: Application 0626 |\n| **APIRuntimeApplication0627** | 3126 | 3126, API Runtime: Application 0627 |\n| **APIRuntimeApplication0628** | 3127 | 3127, API Runtime: Application 0628 |\n| **APIRuntimeApplication0629** | 3128 | 3128, API Runtime: Application 0629 |\n| **APIRuntimeApplication0630** | 3129 | 3129, API Runtime: Application 0630 |\n| **APIRuntimeApplication0631** | 3130 | 3130, API Runtime: Application 0631 |\n| **APIRuntimeApplication0632** | 3131 | 3131, API Runtime: Application 0632 |\n| **APIRuntimeApplication0633** | 3132 | 3132, API Runtime: Application 0633 |\n| **APIRuntimeApplication0634** | 3133 | 3133, API Runtime: Application 0634 |\n| **APIRuntimeApplication0635** | 3134 | 3134, API Runtime: Application 0635 |\n| **APIRuntimeApplication0636** | 3135 | 3135, API Runtime: Application 0636 |\n| **APIRuntimeApplication0637** | 3136 | 3136, API Runtime: Application 0637 |\n| **APIRuntimeApplication0638** | 3137 | 3137, API Runtime: Application 0638 |\n| **APIRuntimeApplication0639** | 3138 | 3138, API Runtime: Application 0639 |\n| **APIRuntimeApplication0640** | 3139 | 3139, API Runtime: Application 0640 |\n| **APIRuntimeApplication0641** | 3140 | 3140, API Runtime: Application 0641 |\n| **APIRuntimeApplication0642** | 3141 | 3141, API Runtime: Application 0642 |\n| **APIRuntimeApplication0643** | 3142 | 3142, API Runtime: Application 0643 |\n| **APIRuntimeApplication0644** | 3143 | 3143, API Runtime: Application 0644 |\n| **APIRuntimeApplication0645** | 3144 | 3144, API Runtime: Application 0645 |\n| **APIRuntimeApplication0646** | 3145 | 3145, API Runtime: Application 0646 |\n| **APIRuntimeApplication0647** | 3146 | 3146, API Runtime: Application 0647 |\n| **APIRuntimeApplication0648** | 3147 | 3147, API Runtime: Application 0648 |\n| **APIRuntimeApplication0649** | 3148 | 3148, API Runtime: Application 0649 |\n| **APIRuntimeApplication0650** | 3149 | 3149, API Runtime: Application 0650 |\n| **APIRuntimeApplication0651** | 3150 | 3150, API Runtime: Application 0651 |\n| **APIRuntimeApplication0652** | 3151 | 3151, API Runtime: Application 0652 |\n| **APIRuntimeApplication0653** | 3152 | 3152, API Runtime: Application 0653 |\n| **APIRuntimeApplication0654** | 3153 | 3153, API Runtime: Application 0654 |\n| **APIRuntimeApplication0655** | 3154 | 3154, API Runtime: Application 0655 |\n| **APIRuntimeApplication0656** | 3155 | 3155, API Runtime: Application 0656 |\n| **APIRuntimeApplication0657** | 3156 | 3156, API Runtime: Application 0657 |\n| **APIRuntimeApplication0658** | 3157 | 3157, API Runtime: Application 0658 |\n| **APIRuntimeApplication0659** | 3158 | 3158, API Runtime: Application 0659 |\n| **APIRuntimeApplication0660** | 3159 | 3159, API Runtime: Application 0660 |\n| **APIRuntimeApplication0661** | 3160 | 3160, API Runtime: Application 0661 |\n| **APIRuntimeApplication0662** | 3161 | 3161, API Runtime: Application 0662 |\n| **APIRuntimeApplication0663** | 3162 | 3162, API Runtime: Application 0663 |\n| **APIRuntimeApplication0664** | 3163 | 3163, API Runtime: Application 0664 |\n| **APIRuntimeApplication0665** | 3164 | 3164, API Runtime: Application 0665 |\n| **APIRuntimeApplication0666** | 3165 | 3165, API Runtime: Application 0666 |\n| **APIRuntimeApplication0667** | 3166 | 3166, API Runtime: Application 0667 |\n| **APIRuntimeApplication0668** | 3167 | 3167, API Runtime: Application 0668 |\n| **APIRuntimeApplication0669** | 3168 | 3168, API Runtime: Application 0669 |\n| **APIRuntimeApplication0670** | 3169 | 3169, API Runtime: Application 0670 |\n| **APIRuntimeApplication0671** | 3170 | 3170, API Runtime: Application 0671 |\n| **APIRuntimeApplication0672** | 3171 | 3171, API Runtime: Application 0672 |\n| **APIRuntimeApplication0673** | 3172 | 3172, API Runtime: Application 0673 |\n| **APIRuntimeApplication0674** | 3173 | 3173, API Runtime: Application 0674 |\n| **APIRuntimeApplication0675** | 3174 | 3174, API Runtime: Application 0675 |\n| **APIRuntimeApplication0676** | 3175 | 3175, API Runtime: Application 0676 |\n| **APIRuntimeApplication0677** | 3176 | 3176, API Runtime: Application 0677 |\n| **APIRuntimeApplication0678** | 3177 | 3177, API Runtime: Application 0678 |\n| **APIRuntimeApplication0679** | 3178 | 3178, API Runtime: Application 0679 |\n| **APIRuntimeApplication0680** | 3179 | 3179, API Runtime: Application 0680 |\n| **APIRuntimeApplication0681** | 3180 | 3180, API Runtime: Application 0681 |\n| **APIRuntimeApplication0682** | 3181 | 3181, API Runtime: Application 0682 |\n| **APIRuntimeApplication0683** | 3182 | 3182, API Runtime: Application 0683 |\n| **APIRuntimeApplication0684** | 3183 | 3183, API Runtime: Application 0684 |\n| **APIRuntimeApplication0685** | 3184 | 3184, API Runtime: Application 0685 |\n| **APIRuntimeApplication0686** | 3185 | 3185, API Runtime: Application 0686 |\n| **APIRuntimeApplication0687** | 3186 | 3186, API Runtime: Application 0687 |\n| **APIRuntimeApplication0688** | 3187 | 3187, API Runtime: Application 0688 |\n| **APIRuntimeApplication0689** | 3188 | 3188, API Runtime: Application 0689 |\n| **APIRuntimeApplication0690** | 3189 | 3189, API Runtime: Application 0690 |\n| **APIRuntimeApplication0691** | 3190 | 3190, API Runtime: Application 0691 |\n| **APIRuntimeApplication0692** | 3191 | 3191, API Runtime: Application 0692 |\n| **APIRuntimeApplication0693** | 3192 | 3192, API Runtime: Application 0693 |\n| **APIRuntimeApplication0694** | 3193 | 3193, API Runtime: Application 0694 |\n| **APIRuntimeApplication0695** | 3194 | 3194, API Runtime: Application 0695 |\n| **APIRuntimeApplication0696** | 3195 | 3195, API Runtime: Application 0696 |\n| **APIRuntimeApplication0697** | 3196 | 3196, API Runtime: Application 0697 |\n| **APIRuntimeApplication0698** | 3197 | 3197, API Runtime: Application 0698 |\n| **APIRuntimeApplication0699** | 3198 | 3198, API Runtime: Application 0699 |\n| **APIRuntimeApplication0700** | 3199 | 3199, API Runtime: Application 0700 |\n| **APIRuntimeApplication0701** | 3200 | 3200, API Runtime: Application 0701 |\n| **APIRuntimeApplication0702** | 3201 | 3201, API Runtime: Application 0702 |\n| **APIRuntimeApplication0703** | 3202 | 3202, API Runtime: Application 0703 |\n| **APIRuntimeApplication0704** | 3203 | 3203, API Runtime: Application 0704 |\n| **APIRuntimeApplication0705** | 3204 | 3204, API Runtime: Application 0705 |\n| **APIRuntimeApplication0706** | 3205 | 3205, API Runtime: Application 0706 |\n| **APIRuntimeApplication0707** | 3206 | 3206, API Runtime: Application 0707 |\n| **APIRuntimeApplication0708** | 3207 | 3207, API Runtime: Application 0708 |\n| **APIRuntimeApplication0709** | 3208 | 3208, API Runtime: Application 0709 |\n| **APIRuntimeApplication0710** | 3209 | 3209, API Runtime: Application 0710 |\n| **APIRuntimeApplication0711** | 3210 | 3210, API Runtime: Application 0711 |\n| **APIRuntimeApplication0712** | 3211 | 3211, API Runtime: Application 0712 |\n| **APIRuntimeApplication0713** | 3212 | 3212, API Runtime: Application 0713 |\n| **APIRuntimeApplication0714** | 3213 | 3213, API Runtime: Application 0714 |\n| **APIRuntimeApplication0715** | 3214 | 3214, API Runtime: Application 0715 |\n| **APIRuntimeApplication0716** | 3215 | 3215, API Runtime: Application 0716 |\n| **APIRuntimeApplication0717** | 3216 | 3216, API Runtime: Application 0717 |\n| **APIRuntimeApplication0718** | 3217 | 3217, API Runtime: Application 0718 |\n| **APIRuntimeApplication0719** | 3218 | 3218, API Runtime: Application 0719 |\n| **APIRuntimeApplication0720** | 3219 | 3219, API Runtime: Application 0720 |\n| **APIRuntimeApplication0721** | 3220 | 3220, API Runtime: Application 0721 |\n| **APIRuntimeApplication0722** | 3221 | 3221, API Runtime: Application 0722 |\n| **APIRuntimeApplication0723** | 3222 | 3222, API Runtime: Application 0723 |\n| **APIRuntimeApplication0724** | 3223 | 3223, API Runtime: Application 0724 |\n| **APIRuntimeApplication0725** | 3224 | 3224, API Runtime: Application 0725 |\n| **APIRuntimeApplication0726** | 3225 | 3225, API Runtime: Application 0726 |\n| **APIRuntimeApplication0727** | 3226 | 3226, API Runtime: Application 0727 |\n| **APIRuntimeApplication0728** | 3227 | 3227, API Runtime: Application 0728 |\n| **APIRuntimeApplication0729** | 3228 | 3228, API Runtime: Application 0729 |\n| **APIRuntimeApplication0730** | 3229 | 3229, API Runtime: Application 0730 |\n| **APIRuntimeApplication0731** | 3230 | 3230, API Runtime: Application 0731 |\n| **APIRuntimeApplication0732** | 3231 | 3231, API Runtime: Application 0732 |\n| **APIRuntimeApplication0733** | 3232 | 3232, API Runtime: Application 0733 |\n| **APIRuntimeApplication0734** | 3233 | 3233, API Runtime: Application 0734 |\n| **APIRuntimeApplication0735** | 3234 | 3234, API Runtime: Application 0735 |\n| **APIRuntimeApplication0736** | 3235 | 3235, API Runtime: Application 0736 |\n| **APIRuntimeApplication0737** | 3236 | 3236, API Runtime: Application 0737 |\n| **APIRuntimeApplication0738** | 3237 | 3237, API Runtime: Application 0738 |\n| **APIRuntimeApplication0739** | 3238 | 3238, API Runtime: Application 0739 |\n| **APIRuntimeApplication0740** | 3239 | 3239, API Runtime: Application 0740 |\n| **APIRuntimeApplication0741** | 3240 | 3240, API Runtime: Application 0741 |\n| **APIRuntimeApplication0742** | 3241 | 3241, API Runtime: Application 0742 |\n| **APIRuntimeApplication0743** | 3242 | 3242, API Runtime: Application 0743 |\n| **APIRuntimeApplication0744** | 3243 | 3243, API Runtime: Application 0744 |\n| **APIRuntimeApplication0745** | 3244 | 3244, API Runtime: Application 0745 |\n| **APIRuntimeApplication0746** | 3245 | 3245, API Runtime: Application 0746 |\n| **APIRuntimeApplication0747** | 3246 | 3246, API Runtime: Application 0747 |\n| **APIRuntimeApplication0748** | 3247 | 3247, API Runtime: Application 0748 |\n| **APIRuntimeApplication0749** | 3248 | 3248, API Runtime: Application 0749 |\n| **APIRuntimeApplication0750** | 3249 | 3249, API Runtime: Application 0750 |\n| **APIRuntimeApplication0751** | 3250 | 3250, API Runtime: Application 0751 |\n| **APIRuntimeApplication0752** | 3251 | 3251, API Runtime: Application 0752 |\n| **APIRuntimeApplication0753** | 3252 | 3252, API Runtime: Application 0753 |\n| **APIRuntimeApplication0754** | 3253 | 3253, API Runtime: Application 0754 |\n| **APIRuntimeApplication0755** | 3254 | 3254, API Runtime: Application 0755 |\n| **APIRuntimeApplication0756** | 3255 | 3255, API Runtime: Application 0756 |\n| **APIRuntimeApplication0757** | 3256 | 3256, API Runtime: Application 0757 |\n| **APIRuntimeApplication0758** | 3257 | 3257, API Runtime: Application 0758 |\n| **APIRuntimeApplication0759** | 3258 | 3258, API Runtime: Application 0759 |\n| **APIRuntimeApplication0760** | 3259 | 3259, API Runtime: Application 0760 |\n| **APIRuntimeApplication0761** | 3260 | 3260, API Runtime: Application 0761 |\n| **APIRuntimeApplication0762** | 3261 | 3261, API Runtime: Application 0762 |\n| **APIRuntimeApplication0763** | 3262 | 3262, API Runtime: Application 0763 |\n| **APIRuntimeApplication0764** | 3263 | 3263, API Runtime: Application 0764 |\n| **APIRuntimeApplication0765** | 3264 | 3264, API Runtime: Application 0765 |\n| **APIRuntimeApplication0766** | 3265 | 3265, API Runtime: Application 0766 |\n| **APIRuntimeApplication0767** | 3266 | 3266, API Runtime: Application 0767 |\n| **APIRuntimeApplication0768** | 3267 | 3267, API Runtime: Application 0768 |\n| **APIRuntimeApplication0769** | 3268 | 3268, API Runtime: Application 0769 |\n| **APIRuntimeApplication0770** | 3269 | 3269, API Runtime: Application 0770 |\n| **APIRuntimeApplication0771** | 3270 | 3270, API Runtime: Application 0771 |\n| **APIRuntimeApplication0772** | 3271 | 3271, API Runtime: Application 0772 |\n| **APIRuntimeApplication0773** | 3272 | 3272, API Runtime: Application 0773 |\n| **APIRuntimeApplication0774** | 3273 | 3273, API Runtime: Application 0774 |\n| **APIRuntimeApplication0775** | 3274 | 3274, API Runtime: Application 0775 |\n| **APIRuntimeApplication0776** | 3275 | 3275, API Runtime: Application 0776 |\n| **APIRuntimeApplication0777** | 3276 | 3276, API Runtime: Application 0777 |\n| **APIRuntimeApplication0778** | 3277 | 3277, API Runtime: Application 0778 |\n| **APIRuntimeApplication0779** | 3278 | 3278, API Runtime: Application 0779 |\n| **APIRuntimeApplication0780** | 3279 | 3279, API Runtime: Application 0780 |\n| **APIRuntimeApplication0781** | 3280 | 3280, API Runtime: Application 0781 |\n| **APIRuntimeApplication0782** | 3281 | 3281, API Runtime: Application 0782 |\n| **APIRuntimeApplication0783** | 3282 | 3282, API Runtime: Application 0783 |\n| **APIRuntimeApplication0784** | 3283 | 3283, API Runtime: Application 0784 |\n| **APIRuntimeApplication0785** | 3284 | 3284, API Runtime: Application 0785 |\n| **APIRuntimeApplication0786** | 3285 | 3285, API Runtime: Application 0786 |\n| **APIRuntimeApplication0787** | 3286 | 3286, API Runtime: Application 0787 |\n| **APIRuntimeApplication0788** | 3287 | 3287, API Runtime: Application 0788 |\n| **APIRuntimeApplication0789** | 3288 | 3288, API Runtime: Application 0789 |\n| **APIRuntimeApplication0790** | 3289 | 3289, API Runtime: Application 0790 |\n| **APIRuntimeApplication0791** | 3290 | 3290, API Runtime: Application 0791 |\n| **APIRuntimeApplication0792** | 3291 | 3291, API Runtime: Application 0792 |\n| **APIRuntimeApplication0793** | 3292 | 3292, API Runtime: Application 0793 |\n| **APIRuntimeApplication0794** | 3293 | 3293, API Runtime: Application 0794 |\n| **APIRuntimeApplication0795** | 3294 | 3294, API Runtime: Application 0795 |\n| **APIRuntimeApplication0796** | 3295 | 3295, API Runtime: Application 0796 |\n| **APIRuntimeApplication0797** | 3296 | 3296, API Runtime: Application 0797 |\n| **APIRuntimeApplication0798** | 3297 | 3297, API Runtime: Application 0798 |\n| **APIRuntimeApplication0799** | 3298 | 3298, API Runtime: Application 0799 |\n| **APIRuntimeApplication0800** | 3299 | 3299, API Runtime: Application 0800 |\n| **APIRuntimeApplication0801** | 3300 | 3300, API Runtime: Application 0801 |\n| **APIRuntimeApplication0802** | 3301 | 3301, API Runtime: Application 0802 |\n| **APIRuntimeApplication0803** | 3302 | 3302, API Runtime: Application 0803 |\n| **APIRuntimeApplication0804** | 3303 | 3303, API Runtime: Application 0804 |\n| **APIRuntimeApplication0805** | 3304 | 3304, API Runtime: Application 0805 |\n| **APIRuntimeApplication0806** | 3305 | 3305, API Runtime: Application 0806 |\n| **APIRuntimeApplication0807** | 3306 | 3306, API Runtime: Application 0807 |\n| **APIRuntimeApplication0808** | 3307 | 3307, API Runtime: Application 0808 |\n| **APIRuntimeApplication0809** | 3308 | 3308, API Runtime: Application 0809 |\n| **APIRuntimeApplication0810** | 3309 | 3309, API Runtime: Application 0810 |\n| **APIRuntimeApplication0811** | 3310 | 3310, API Runtime: Application 0811 |\n| **APIRuntimeApplication0812** | 3311 | 3311, API Runtime: Application 0812 |\n| **APIRuntimeApplication0813** | 3312 | 3312, API Runtime: Application 0813 |\n| **APIRuntimeApplication0814** | 3313 | 3313, API Runtime: Application 0814 |\n| **APIRuntimeApplication0815** | 3314 | 3314, API Runtime: Application 0815 |\n| **APIRuntimeApplication0816** | 3315 | 3315, API Runtime: Application 0816 |\n| **APIRuntimeApplication0817** | 3316 | 3316, API Runtime: Application 0817 |\n| **APIRuntimeApplication0818** | 3317 | 3317, API Runtime: Application 0818 |\n| **APIRuntimeApplication0819** | 3318 | 3318, API Runtime: Application 0819 |\n| **APIRuntimeApplication0820** | 3319 | 3319, API Runtime: Application 0820 |\n| **APIRuntimeApplication0821** | 3320 | 3320, API Runtime: Application 0821 |\n| **APIRuntimeApplication0822** | 3321 | 3321, API Runtime: Application 0822 |\n| **APIRuntimeApplication0823** | 3322 | 3322, API Runtime: Application 0823 |\n| **APIRuntimeApplication0824** | 3323 | 3323, API Runtime: Application 0824 |\n| **APIRuntimeApplication0825** | 3324 | 3324, API Runtime: Application 0825 |\n| **APIRuntimeApplication0826** | 3325 | 3325, API Runtime: Application 0826 |\n| **APIRuntimeApplication0827** | 3326 | 3326, API Runtime: Application 0827 |\n| **APIRuntimeApplication0828** | 3327 | 3327, API Runtime: Application 0828 |\n| **APIRuntimeApplication0829** | 3328 | 3328, API Runtime: Application 0829 |\n| **APIRuntimeApplication0830** | 3329 | 3329, API Runtime: Application 0830 |\n| **APIRuntimeApplication0831** | 3330 | 3330, API Runtime: Application 0831 |\n| **APIRuntimeApplication0832** | 3331 | 3331, API Runtime: Application 0832 |\n| **APIRuntimeApplication0833** | 3332 | 3332, API Runtime: Application 0833 |\n| **APIRuntimeApplication0834** | 3333 | 3333, API Runtime: Application 0834 |\n| **APIRuntimeApplication0835** | 3334 | 3334, API Runtime: Application 0835 |\n| **APIRuntimeApplication0836** | 3335 | 3335, API Runtime: Application 0836 |\n| **APIRuntimeApplication0837** | 3336 | 3336, API Runtime: Application 0837 |\n| **APIRuntimeApplication0838** | 3337 | 3337, API Runtime: Application 0838 |\n| **APIRuntimeApplication0839** | 3338 | 3338, API Runtime: Application 0839 |\n| **APIRuntimeApplication0840** | 3339 | 3339, API Runtime: Application 0840 |\n| **APIRuntimeApplication0841** | 3340 | 3340, API Runtime: Application 0841 |\n| **APIRuntimeApplication0842** | 3341 | 3341, API Runtime: Application 0842 |\n| **APIRuntimeApplication0843** | 3342 | 3342, API Runtime: Application 0843 |\n| **APIRuntimeApplication0844** | 3343 | 3343, API Runtime: Application 0844 |\n| **APIRuntimeApplication0845** | 3344 | 3344, API Runtime: Application 0845 |\n| **APIRuntimeApplication0846** | 3345 | 3345, API Runtime: Application 0846 |\n| **APIRuntimeApplication0847** | 3346 | 3346, API Runtime: Application 0847 |\n| **APIRuntimeApplication0848** | 3347 | 3347, API Runtime: Application 0848 |\n| **APIRuntimeApplication0849** | 3348 | 3348, API Runtime: Application 0849 |\n| **APIRuntimeApplication0850** | 3349 | 3349, API Runtime: Application 0850 |\n| **APIRuntimeApplication0851** | 3350 | 3350, API Runtime: Application 0851 |\n| **APIRuntimeApplication0852** | 3351 | 3351, API Runtime: Application 0852 |\n| **APIRuntimeApplication0853** | 3352 | 3352, API Runtime: Application 0853 |\n| **APIRuntimeApplication0854** | 3353 | 3353, API Runtime: Application 0854 |\n| **APIRuntimeApplication0855** | 3354 | 3354, API Runtime: Application 0855 |\n| **APIRuntimeApplication0856** | 3355 | 3355, API Runtime: Application 0856 |\n| **APIRuntimeApplication0857** | 3356 | 3356, API Runtime: Application 0857 |\n| **APIRuntimeApplication0858** | 3357 | 3357, API Runtime: Application 0858 |\n| **APIRuntimeApplication0859** | 3358 | 3358, API Runtime: Application 0859 |\n| **APIRuntimeApplication0860** | 3359 | 3359, API Runtime: Application 0860 |\n| **APIRuntimeApplication0861** | 3360 | 3360, API Runtime: Application 0861 |\n| **APIRuntimeApplication0862** | 3361 | 3361, API Runtime: Application 0862 |\n| **APIRuntimeApplication0863** | 3362 | 3362, API Runtime: Application 0863 |\n| **APIRuntimeApplication0864** | 3363 | 3363, API Runtime: Application 0864 |\n| **APIRuntimeApplication0865** | 3364 | 3364, API Runtime: Application 0865 |\n| **APIRuntimeApplication0866** | 3365 | 3365, API Runtime: Application 0866 |\n| **APIRuntimeApplication0867** | 3366 | 3366, API Runtime: Application 0867 |\n| **APIRuntimeApplication0868** | 3367 | 3367, API Runtime: Application 0868 |\n| **APIRuntimeApplication0869** | 3368 | 3368, API Runtime: Application 0869 |\n| **APIRuntimeApplication0870** | 3369 | 3369, API Runtime: Application 0870 |\n| **APIRuntimeApplication0871** | 3370 | 3370, API Runtime: Application 0871 |\n| **APIRuntimeApplication0872** | 3371 | 3371, API Runtime: Application 0872 |\n| **APIRuntimeApplication0873** | 3372 | 3372, API Runtime: Application 0873 |\n| **APIRuntimeApplication0874** | 3373 | 3373, API Runtime: Application 0874 |\n| **APIRuntimeApplication0875** | 3374 | 3374, API Runtime: Application 0875 |\n| **APIRuntimeApplication0876** | 3375 | 3375, API Runtime: Application 0876 |\n| **APIRuntimeApplication0877** | 3376 | 3376, API Runtime: Application 0877 |\n| **APIRuntimeApplication0878** | 3377 | 3377, API Runtime: Application 0878 |\n| **APIRuntimeApplication0879** | 3378 | 3378, API Runtime: Application 0879 |\n| **APIRuntimeApplication0880** | 3379 | 3379, API Runtime: Application 0880 |\n| **APIRuntimeApplication0881** | 3380 | 3380, API Runtime: Application 0881 |\n| **APIRuntimeApplication0882** | 3381 | 3381, API Runtime: Application 0882 |\n| **APIRuntimeApplication0883** | 3382 | 3382, API Runtime: Application 0883 |\n| **APIRuntimeApplication0884** | 3383 | 3383, API Runtime: Application 0884 |\n| **APIRuntimeApplication0885** | 3384 | 3384, API Runtime: Application 0885 |\n| **APIRuntimeApplication0886** | 3385 | 3385, API Runtime: Application 0886 |\n| **APIRuntimeApplication0887** | 3386 | 3386, API Runtime: Application 0887 |\n| **APIRuntimeApplication0888** | 3387 | 3387, API Runtime: Application 0888 |\n| **APIRuntimeApplication0889** | 3388 | 3388, API Runtime: Application 0889 |\n| **APIRuntimeApplication0890** | 3389 | 3389, API Runtime: Application 0890 |\n| **APIRuntimeApplication0891** | 3390 | 3390, API Runtime: Application 0891 |\n| **APIRuntimeApplication0892** | 3391 | 3391, API Runtime: Application 0892 |\n| **APIRuntimeApplication0893** | 3392 | 3392, API Runtime: Application 0893 |\n| **APIRuntimeApplication0894** | 3393 | 3393, API Runtime: Application 0894 |\n| **APIRuntimeApplication0895** | 3394 | 3394, API Runtime: Application 0895 |\n| **APIRuntimeApplication0896** | 3395 | 3395, API Runtime: Application 0896 |\n| **APIRuntimeApplication0897** | 3396 | 3396, API Runtime: Application 0897 |\n| **APIRuntimeApplication0898** | 3397 | 3397, API Runtime: Application 0898 |\n| **APIRuntimeApplication0899** | 3398 | 3398, API Runtime: Application 0899 |\n| **APIRuntimeApplication0900** | 3399 | 3399, API Runtime: Application 0900 |\n| **APIRuntimeApplication0901** | 3400 | 3400, API Runtime: Application 0901 |\n| **APIRuntimeApplication0902** | 3401 | 3401, API Runtime: Application 0902 |\n| **APIRuntimeApplication0903** | 3402 | 3402, API Runtime: Application 0903 |\n| **APIRuntimeApplication0904** | 3403 | 3403, API Runtime: Application 0904 |\n| **APIRuntimeApplication0905** | 3404 | 3404, API Runtime: Application 0905 |\n| **APIRuntimeApplication0906** | 3405 | 3405, API Runtime: Application 0906 |\n| **APIRuntimeApplication0907** | 3406 | 3406, API Runtime: Application 0907 |\n| **APIRuntimeApplication0908** | 3407 | 3407, API Runtime: Application 0908 |\n| **APIRuntimeApplication0909** | 3408 | 3408, API Runtime: Application 0909 |\n| **APIRuntimeApplication0910** | 3409 | 3409, API Runtime: Application 0910 |\n| **APIRuntimeApplication0911** | 3410 | 3410, API Runtime: Application 0911 |\n| **APIRuntimeApplication0912** | 3411 | 3411, API Runtime: Application 0912 |\n| **APIRuntimeApplication0913** | 3412 | 3412, API Runtime: Application 0913 |\n| **APIRuntimeApplication0914** | 3413 | 3413, API Runtime: Application 0914 |\n| **APIRuntimeApplication0915** | 3414 | 3414, API Runtime: Application 0915 |\n| **APIRuntimeApplication0916** | 3415 | 3415, API Runtime: Application 0916 |\n| **APIRuntimeApplication0917** | 3416 | 3416, API Runtime: Application 0917 |\n| **APIRuntimeApplication0918** | 3417 | 3417, API Runtime: Application 0918 |\n| **APIRuntimeApplication0919** | 3418 | 3418, API Runtime: Application 0919 |\n| **APIRuntimeApplication0920** | 3419 | 3419, API Runtime: Application 0920 |\n| **APIRuntimeApplication0921** | 3420 | 3420, API Runtime: Application 0921 |\n| **APIRuntimeApplication0922** | 3421 | 3421, API Runtime: Application 0922 |\n| **APIRuntimeApplication0923** | 3422 | 3422, API Runtime: Application 0923 |\n| **APIRuntimeApplication0924** | 3423 | 3423, API Runtime: Application 0924 |\n| **APIRuntimeApplication0925** | 3424 | 3424, API Runtime: Application 0925 |\n| **APIRuntimeApplication0926** | 3425 | 3425, API Runtime: Application 0926 |\n| **APIRuntimeApplication0927** | 3426 | 3426, API Runtime: Application 0927 |\n| **APIRuntimeApplication0928** | 3427 | 3427, API Runtime: Application 0928 |\n| **APIRuntimeApplication0929** | 3428 | 3428, API Runtime: Application 0929 |\n| **APIRuntimeApplication0930** | 3429 | 3429, API Runtime: Application 0930 |\n| **APIRuntimeApplication0931** | 3430 | 3430, API Runtime: Application 0931 |\n| **APIRuntimeApplication0932** | 3431 | 3431, API Runtime: Application 0932 |\n| **APIRuntimeApplication0933** | 3432 | 3432, API Runtime: Application 0933 |\n| **APIRuntimeApplication0934** | 3433 | 3433, API Runtime: Application 0934 |\n| **APIRuntimeApplication0935** | 3434 | 3434, API Runtime: Application 0935 |\n| **APIRuntimeApplication0936** | 3435 | 3435, API Runtime: Application 0936 |\n| **APIRuntimeApplication0937** | 3436 | 3436, API Runtime: Application 0937 |\n| **APIRuntimeApplication0938** | 3437 | 3437, API Runtime: Application 0938 |\n| **APIRuntimeApplication0939** | 3438 | 3438, API Runtime: Application 0939 |\n| **APIRuntimeApplication0940** | 3439 | 3439, API Runtime: Application 0940 |\n| **APIRuntimeApplication0941** | 3440 | 3440, API Runtime: Application 0941 |\n| **APIRuntimeApplication0942** | 3441 | 3441, API Runtime: Application 0942 |\n| **APIRuntimeApplication0943** | 3442 | 3442, API Runtime: Application 0943 |\n| **APIRuntimeApplication0944** | 3443 | 3443, API Runtime: Application 0944 |\n| **APIRuntimeApplication0945** | 3444 | 3444, API Runtime: Application 0945 |\n| **APIRuntimeApplication0946** | 3445 | 3445, API Runtime: Application 0946 |\n| **APIRuntimeApplication0947** | 3446 | 3446, API Runtime: Application 0947 |\n| **APIRuntimeApplication0948** | 3447 | 3447, API Runtime: Application 0948 |\n| **APIRuntimeApplication0949** | 3448 | 3448, API Runtime: Application 0949 |\n| **APIRuntimeApplication0950** | 3449 | 3449, API Runtime: Application 0950 |\n| **APIRuntimeApplication0951** | 3450 | 3450, API Runtime: Application 0951 |\n| **APIRuntimeApplication0952** | 3451 | 3451, API Runtime: Application 0952 |\n| **APIRuntimeApplication0953** | 3452 | 3452, API Runtime: Application 0953 |\n| **APIRuntimeApplication0954** | 3453 | 3453, API Runtime: Application 0954 |\n| **APIRuntimeApplication0955** | 3454 | 3454, API Runtime: Application 0955 |\n| **APIRuntimeApplication0956** | 3455 | 3455, API Runtime: Application 0956 |\n| **APIRuntimeApplication0957** | 3456 | 3456, API Runtime: Application 0957 |\n| **APIRuntimeApplication0958** | 3457 | 3457, API Runtime: Application 0958 |\n| **APIRuntimeApplication0959** | 3458 | 3458, API Runtime: Application 0959 |\n| **APIRuntimeApplication0960** | 3459 | 3459, API Runtime: Application 0960 |\n| **APIRuntimeApplication0961** | 3460 | 3460, API Runtime: Application 0961 |\n| **APIRuntimeApplication0962** | 3461 | 3461, API Runtime: Application 0962 |\n| **APIRuntimeApplication0963** | 3462 | 3462, API Runtime: Application 0963 |\n| **APIRuntimeApplication0964** | 3463 | 3463, API Runtime: Application 0964 |\n| **APIRuntimeApplication0965** | 3464 | 3464, API Runtime: Application 0965 |\n| **APIRuntimeApplication0966** | 3465 | 3465, API Runtime: Application 0966 |\n| **APIRuntimeApplication0967** | 3466 | 3466, API Runtime: Application 0967 |\n| **APIRuntimeApplication0968** | 3467 | 3467, API Runtime: Application 0968 |\n| **APIRuntimeApplication0969** | 3468 | 3468, API Runtime: Application 0969 |\n| **APIRuntimeApplication0970** | 3469 | 3469, API Runtime: Application 0970 |\n| **APIRuntimeApplication0971** | 3470 | 3470, API Runtime: Application 0971 |\n| **APIRuntimeApplication0972** | 3471 | 3471, API Runtime: Application 0972 |\n| **APIRuntimeApplication0973** | 3472 | 3472, API Runtime: Application 0973 |\n| **APIRuntimeApplication0974** | 3473 | 3473, API Runtime: Application 0974 |\n| **APIRuntimeApplication0975** | 3474 | 3474, API Runtime: Application 0975 |\n| **APIRuntimeApplication0976** | 3475 | 3475, API Runtime: Application 0976 |\n| **APIRuntimeApplication0977** | 3476 | 3476, API Runtime: Application 0977 |\n| **APIRuntimeApplication0978** | 3477 | 3477, API Runtime: Application 0978 |\n| **APIRuntimeApplication0979** | 3478 | 3478, API Runtime: Application 0979 |\n| **APIRuntimeApplication0980** | 3479 | 3479, API Runtime: Application 0980 |\n| **APIRuntimeApplication0981** | 3480 | 3480, API Runtime: Application 0981 |\n| **APIRuntimeApplication0982** | 3481 | 3481, API Runtime: Application 0982 |\n| **APIRuntimeApplication0983** | 3482 | 3482, API Runtime: Application 0983 |\n| **APIRuntimeApplication0984** | 3483 | 3483, API Runtime: Application 0984 |\n| **APIRuntimeApplication0985** | 3484 | 3484, API Runtime: Application 0985 |\n| **APIRuntimeApplication0986** | 3485 | 3485, API Runtime: Application 0986 |\n| **APIRuntimeApplication0987** | 3486 | 3486, API Runtime: Application 0987 |\n| **APIRuntimeApplication0988** | 3487 | 3487, API Runtime: Application 0988 |\n| **APIRuntimeApplication0989** | 3488 | 3488, API Runtime: Application 0989 |\n| **APIRuntimeApplication0990** | 3489 | 3489, API Runtime: Application 0990 |\n| **APIRuntimeApplication0991** | 3490 | 3490, API Runtime: Application 0991 |\n| **APIRuntimeApplication0992** | 3491 | 3491, API Runtime: Application 0992 |\n| **APIRuntimeApplication0993** | 3492 | 3492, API Runtime: Application 0993 |\n| **APIRuntimeApplication0994** | 3493 | 3493, API Runtime: Application 0994 |\n| **APIRuntimeApplication0995** | 3494 | 3494, API Runtime: Application 0995 |\n| **APIRuntimeApplication0996** | 3495 | 3495, API Runtime: Application 0996 |\n| **APIRuntimeApplication0997** | 3496 | 3496, API Runtime: Application 0997 |\n| **APIRuntimeApplication0998** | 3497 | 3497, API Runtime: Application 0998 |\n| **APIRuntimeApplication0999** | 3498 | 3498, API Runtime: Application 0999 |\n| **APIRuntimeApplication1000** | 3499 | 3499, API Runtime: Application 1000 |\n| **APIRuntimeApplication1001** | 3500 | 3500, API Runtime: Application 1001 |\n| **APIRuntimeApplication1002** | 3501 | 3501, API Runtime: Application 1002 |\n| **APIRuntimeApplication1003** | 3502 | 3502, API Runtime: Application 1003 |\n| **APIRuntimeApplication1004** | 3503 | 3503, API Runtime: Application 1004 |\n| **APIRuntimeApplication1005** | 3504 | 3504, API Runtime: Application 1005 |\n| **APIRuntimeApplication1006** | 3505 | 3505, API Runtime: Application 1006 |\n| **APIRuntimeApplication1007** | 3506 | 3506, API Runtime: Application 1007 |\n| **APIRuntimeApplication1008** | 3507 | 3507, API Runtime: Application 1008 |\n| **APIRuntimeApplication1009** | 3508 | 3508, API Runtime: Application 1009 |\n| **APIRuntimeApplication1010** | 3509 | 3509, API Runtime: Application 1010 |\n| **APIRuntimeApplication1011** | 3510 | 3510, API Runtime: Application 1011 |\n| **APIRuntimeApplication1012** | 3511 | 3511, API Runtime: Application 1012 |\n| **APIRuntimeApplication1013** | 3512 | 3512, API Runtime: Application 1013 |\n| **APIRuntimeApplication1014** | 3513 | 3513, API Runtime: Application 1014 |\n| **APIRuntimeApplication1015** | 3514 | 3514, API Runtime: Application 1015 |\n| **APIRuntimeApplication1016** | 3515 | 3515, API Runtime: Application 1016 |\n| **APIRuntimeApplication1017** | 3516 | 3516, API Runtime: Application 1017 |\n| **APIRuntimeApplication1018** | 3517 | 3517, API Runtime: Application 1018 |\n| **APIRuntimeApplication1019** | 3518 | 3518, API Runtime: Application 1019 |\n| **APIRuntimeApplication1020** | 3519 | 3519, API Runtime: Application 1020 |\n| **APIRuntimeApplication1021** | 3520 | 3520, API Runtime: Application 1021 |\n| **APIRuntimeApplication1022** | 3521 | 3521, API Runtime: Application 1022 |\n| **APIRuntimeApplication1023** | 3522 | 3522, API Runtime: Application 1023 |\n| **APIRuntimeApplication1024** | 3523 | 3523, API Runtime: Application 1024 |\n| **APIRuntimeApplication1025** | 3524 | 3524, API Runtime: Application 1025 |\n| **APIRuntimeApplication1026** | 3525 | 3525, API Runtime: Application 1026 |\n| **APIRuntimeApplication1027** | 3526 | 3526, API Runtime: Application 1027 |\n| **APIRuntimeApplication1028** | 3527 | 3527, API Runtime: Application 1028 |\n| **APIRuntimeApplication1029** | 3528 | 3528, API Runtime: Application 1029 |\n| **APIRuntimeApplication1030** | 3529 | 3529, API Runtime: Application 1030 |\n| **APIRuntimeApplication1031** | 3530 | 3530, API Runtime: Application 1031 |\n| **APIRuntimeApplication1032** | 3531 | 3531, API Runtime: Application 1032 |\n| **APIRuntimeApplication1033** | 3532 | 3532, API Runtime: Application 1033 |\n| **APIRuntimeApplication1034** | 3533 | 3533, API Runtime: Application 1034 |\n| **APIRuntimeApplication1035** | 3534 | 3534, API Runtime: Application 1035 |\n| **APIRuntimeApplication1036** | 3535 | 3535, API Runtime: Application 1036 |\n| **APIRuntimeApplication1037** | 3536 | 3536, API Runtime: Application 1037 |\n| **APIRuntimeApplication1038** | 3537 | 3537, API Runtime: Application 1038 |\n| **APIRuntimeApplication1039** | 3538 | 3538, API Runtime: Application 1039 |\n| **APIRuntimeApplication1040** | 3539 | 3539, API Runtime: Application 1040 |\n| **APIRuntimeApplication1041** | 3540 | 3540, API Runtime: Application 1041 |\n| **APIRuntimeApplication1042** | 3541 | 3541, API Runtime: Application 1042 |\n| **APIRuntimeApplication1043** | 3542 | 3542, API Runtime: Application 1043 |\n| **APIRuntimeApplication1044** | 3543 | 3543, API Runtime: Application 1044 |\n| **APIRuntimeApplication1045** | 3544 | 3544, API Runtime: Application 1045 |\n| **APIRuntimeApplication1046** | 3545 | 3545, API Runtime: Application 1046 |\n| **APIRuntimeApplication1047** | 3546 | 3546, API Runtime: Application 1047 |\n| **APIRuntimeApplication1048** | 3547 | 3547, API Runtime: Application 1048 |\n| **APIRuntimeApplication1049** | 3548 | 3548, API Runtime: Application 1049 |\n| **APIRuntimeApplication1050** | 3549 | 3549, API Runtime: Application 1050 |\n| **APIRuntimeApplication1051** | 3550 | 3550, API Runtime: Application 1051 |\n| **APIRuntimeApplication1052** | 3551 | 3551, API Runtime: Application 1052 |\n| **APIRuntimeApplication1053** | 3552 | 3552, API Runtime: Application 1053 |\n| **APIRuntimeApplication1054** | 3553 | 3553, API Runtime: Application 1054 |\n| **APIRuntimeApplication1055** | 3554 | 3554, API Runtime: Application 1055 |\n| **APIRuntimeApplication1056** | 3555 | 3555, API Runtime: Application 1056 |\n| **APIRuntimeApplication1057** | 3556 | 3556, API Runtime: Application 1057 |\n| **APIRuntimeApplication1058** | 3557 | 3557, API Runtime: Application 1058 |\n| **APIRuntimeApplication1059** | 3558 | 3558, API Runtime: Application 1059 |\n| **APIRuntimeApplication1060** | 3559 | 3559, API Runtime: Application 1060 |\n| **APIRuntimeApplication1061** | 3560 | 3560, API Runtime: Application 1061 |\n| **APIRuntimeApplication1062** | 3561 | 3561, API Runtime: Application 1062 |\n| **APIRuntimeApplication1063** | 3562 | 3562, API Runtime: Application 1063 |\n| **APIRuntimeApplication1064** | 3563 | 3563, API Runtime: Application 1064 |\n| **APIRuntimeApplication1065** | 3564 | 3564, API Runtime: Application 1065 |\n| **APIRuntimeApplication1066** | 3565 | 3565, API Runtime: Application 1066 |\n| **APIRuntimeApplication1067** | 3566 | 3566, API Runtime: Application 1067 |\n| **APIRuntimeApplication1068** | 3567 | 3567, API Runtime: Application 1068 |\n| **APIRuntimeApplication1069** | 3568 | 3568, API Runtime: Application 1069 |\n| **APIRuntimeApplication1070** | 3569 | 3569, API Runtime: Application 1070 |\n| **APIRuntimeApplication1071** | 3570 | 3570, API Runtime: Application 1071 |\n| **APIRuntimeApplication1072** | 3571 | 3571, API Runtime: Application 1072 |\n| **APIRuntimeApplication1073** | 3572 | 3572, API Runtime: Application 1073 |\n| **APIRuntimeApplication1074** | 3573 | 3573, API Runtime: Application 1074 |\n| **APIRuntimeApplication1075** | 3574 | 3574, API Runtime: Application 1075 |\n| **APIRuntimeApplication1076** | 3575 | 3575, API Runtime: Application 1076 |\n| **APIRuntimeApplication1077** | 3576 | 3576, API Runtime: Application 1077 |\n| **APIRuntimeApplication1078** | 3577 | 3577, API Runtime: Application 1078 |\n| **APIRuntimeApplication1079** | 3578 | 3578, API Runtime: Application 1079 |\n| **APIRuntimeApplication1080** | 3579 | 3579, API Runtime: Application 1080 |\n| **APIRuntimeApplication1081** | 3580 | 3580, API Runtime: Application 1081 |\n| **APIRuntimeApplication1082** | 3581 | 3581, API Runtime: Application 1082 |\n| **APIRuntimeApplication1083** | 3582 | 3582, API Runtime: Application 1083 |\n| **APIRuntimeApplication1084** | 3583 | 3583, API Runtime: Application 1084 |\n| **APIRuntimeApplication1085** | 3584 | 3584, API Runtime: Application 1085 |\n| **APIRuntimeApplication1086** | 3585 | 3585, API Runtime: Application 1086 |\n| **APIRuntimeApplication1087** | 3586 | 3586, API Runtime: Application 1087 |\n| **APIRuntimeApplication1088** | 3587 | 3587, API Runtime: Application 1088 |\n| **APIRuntimeApplication1089** | 3588 | 3588, API Runtime: Application 1089 |\n| **APIRuntimeApplication1090** | 3589 | 3589, API Runtime: Application 1090 |\n| **APIRuntimeApplication1091** | 3590 | 3590, API Runtime: Application 1091 |\n| **APIRuntimeApplication1092** | 3591 | 3591, API Runtime: Application 1092 |\n| **APIRuntimeApplication1093** | 3592 | 3592, API Runtime: Application 1093 |\n| **APIRuntimeApplication1094** | 3593 | 3593, API Runtime: Application 1094 |\n| **APIRuntimeApplication1095** | 3594 | 3594, API Runtime: Application 1095 |\n| **APIRuntimeApplication1096** | 3595 | 3595, API Runtime: Application 1096 |\n| **APIRuntimeApplication1097** | 3596 | 3596, API Runtime: Application 1097 |\n| **APIRuntimeApplication1098** | 3597 | 3597, API Runtime: Application 1098 |\n| **APIRuntimeApplication1099** | 3598 | 3598, API Runtime: Application 1099 |\n| **APIRuntimeApplication1100** | 3599 | 3599, API Runtime: Application 1100 |\n| **APIRuntimeApplication1101** | 3600 | 3600, API Runtime: Application 1101 |\n| **APIRuntimeApplication1102** | 3601 | 3601, API Runtime: Application 1102 |\n| **APIRuntimeApplication1103** | 3602 | 3602, API Runtime: Application 1103 |\n| **APIRuntimeApplication1104** | 3603 | 3603, API Runtime: Application 1104 |\n| **APIRuntimeApplication1105** | 3604 | 3604, API Runtime: Application 1105 |\n| **APIRuntimeApplication1106** | 3605 | 3605, API Runtime: Application 1106 |\n| **APIRuntimeApplication1107** | 3606 | 3606, API Runtime: Application 1107 |\n| **APIRuntimeApplication1108** | 3607 | 3607, API Runtime: Application 1108 |\n| **APIRuntimeApplication1109** | 3608 | 3608, API Runtime: Application 1109 |\n| **APIRuntimeApplication1110** | 3609 | 3609, API Runtime: Application 1110 |\n| **APIRuntimeApplication1111** | 3610 | 3610, API Runtime: Application 1111 |\n| **APIRuntimeApplication1112** | 3611 | 3611, API Runtime: Application 1112 |\n| **APIRuntimeApplication1113** | 3612 | 3612, API Runtime: Application 1113 |\n| **APIRuntimeApplication1114** | 3613 | 3613, API Runtime: Application 1114 |\n| **APIRuntimeApplication1115** | 3614 | 3614, API Runtime: Application 1115 |\n| **APIRuntimeApplication1116** | 3615 | 3615, API Runtime: Application 1116 |\n| **APIRuntimeApplication1117** | 3616 | 3616, API Runtime: Application 1117 |\n| **APIRuntimeApplication1118** | 3617 | 3617, API Runtime: Application 1118 |\n| **APIRuntimeApplication1119** | 3618 | 3618, API Runtime: Application 1119 |\n| **APIRuntimeApplication1120** | 3619 | 3619, API Runtime: Application 1120 |\n| **APIRuntimeApplication1121** | 3620 | 3620, API Runtime: Application 1121 |\n| **APIRuntimeApplication1122** | 3621 | 3621, API Runtime: Application 1122 |\n| **APIRuntimeApplication1123** | 3622 | 3622, API Runtime: Application 1123 |\n| **APIRuntimeApplication1124** | 3623 | 3623, API Runtime: Application 1124 |\n| **APIRuntimeApplication1125** | 3624 | 3624, API Runtime: Application 1125 |\n| **APIRuntimeApplication1126** | 3625 | 3625, API Runtime: Application 1126 |\n| **APIRuntimeApplication1127** | 3626 | 3626, API Runtime: Application 1127 |\n| **APIRuntimeApplication1128** | 3627 | 3627, API Runtime: Application 1128 |\n| **APIRuntimeApplication1129** | 3628 | 3628, API Runtime: Application 1129 |\n| **APIRuntimeApplication1130** | 3629 | 3629, API Runtime: Application 1130 |\n| **APIRuntimeApplication1131** | 3630 | 3630, API Runtime: Application 1131 |\n| **APIRuntimeApplication1132** | 3631 | 3631, API Runtime: Application 1132 |\n| **APIRuntimeApplication1133** | 3632 | 3632, API Runtime: Application 1133 |\n| **APIRuntimeApplication1134** | 3633 | 3633, API Runtime: Application 1134 |\n| **APIRuntimeApplication1135** | 3634 | 3634, API Runtime: Application 1135 |\n| **APIRuntimeApplication1136** | 3635 | 3635, API Runtime: Application 1136 |\n| **APIRuntimeApplication1137** | 3636 | 3636, API Runtime: Application 1137 |\n| **APIRuntimeApplication1138** | 3637 | 3637, API Runtime: Application 1138 |\n| **APIRuntimeApplication1139** | 3638 | 3638, API Runtime: Application 1139 |\n| **APIRuntimeApplication1140** | 3639 | 3639, API Runtime: Application 1140 |\n| **APIRuntimeApplication1141** | 3640 | 3640, API Runtime: Application 1141 |\n| **APIRuntimeApplication1142** | 3641 | 3641, API Runtime: Application 1142 |\n| **APIRuntimeApplication1143** | 3642 | 3642, API Runtime: Application 1143 |\n| **APIRuntimeApplication1144** | 3643 | 3643, API Runtime: Application 1144 |\n| **APIRuntimeApplication1145** | 3644 | 3644, API Runtime: Application 1145 |\n| **APIRuntimeApplication1146** | 3645 | 3645, API Runtime: Application 1146 |\n| **APIRuntimeApplication1147** | 3646 | 3646, API Runtime: Application 1147 |\n| **APIRuntimeApplication1148** | 3647 | 3647, API Runtime: Application 1148 |\n| **APIRuntimeApplication1149** | 3648 | 3648, API Runtime: Application 1149 |\n| **APIRuntimeApplication1150** | 3649 | 3649, API Runtime: Application 1150 |\n| **APIRuntimeApplication1151** | 3650 | 3650, API Runtime: Application 1151 |\n| **APIRuntimeApplication1152** | 3651 | 3651, API Runtime: Application 1152 |\n| **APIRuntimeApplication1153** | 3652 | 3652, API Runtime: Application 1153 |\n| **APIRuntimeApplication1154** | 3653 | 3653, API Runtime: Application 1154 |\n| **APIRuntimeApplication1155** | 3654 | 3654, API Runtime: Application 1155 |\n| **APIRuntimeApplication1156** | 3655 | 3655, API Runtime: Application 1156 |\n| **APIRuntimeApplication1157** | 3656 | 3656, API Runtime: Application 1157 |\n| **APIRuntimeApplication1158** | 3657 | 3657, API Runtime: Application 1158 |\n| **APIRuntimeApplication1159** | 3658 | 3658, API Runtime: Application 1159 |\n| **APIRuntimeApplication1160** | 3659 | 3659, API Runtime: Application 1160 |\n| **APIRuntimeApplication1161** | 3660 | 3660, API Runtime: Application 1161 |\n| **APIRuntimeApplication1162** | 3661 | 3661, API Runtime: Application 1162 |\n| **APIRuntimeApplication1163** | 3662 | 3662, API Runtime: Application 1163 |\n| **APIRuntimeApplication1164** | 3663 | 3663, API Runtime: Application 1164 |\n| **APIRuntimeApplication1165** | 3664 | 3664, API Runtime: Application 1165 |\n| **APIRuntimeApplication1166** | 3665 | 3665, API Runtime: Application 1166 |\n| **APIRuntimeApplication1167** | 3666 | 3666, API Runtime: Application 1167 |\n| **APIRuntimeApplication1168** | 3667 | 3667, API Runtime: Application 1168 |\n| **APIRuntimeApplication1169** | 3668 | 3668, API Runtime: Application 1169 |\n| **APIRuntimeApplication1170** | 3669 | 3669, API Runtime: Application 1170 |\n| **APIRuntimeApplication1171** | 3670 | 3670, API Runtime: Application 1171 |\n| **APIRuntimeApplication1172** | 3671 | 3671, API Runtime: Application 1172 |\n| **APIRuntimeApplication1173** | 3672 | 3672, API Runtime: Application 1173 |\n| **APIRuntimeApplication1174** | 3673 | 3673, API Runtime: Application 1174 |\n| **APIRuntimeApplication1175** | 3674 | 3674, API Runtime: Application 1175 |\n| **APIRuntimeApplication1176** | 3675 | 3675, API Runtime: Application 1176 |\n| **APIRuntimeApplication1177** | 3676 | 3676, API Runtime: Application 1177 |\n| **APIRuntimeApplication1178** | 3677 | 3677, API Runtime: Application 1178 |\n| **APIRuntimeApplication1179** | 3678 | 3678, API Runtime: Application 1179 |\n| **APIRuntimeApplication1180** | 3679 | 3679, API Runtime: Application 1180 |\n| **APIRuntimeApplication1181** | 3680 | 3680, API Runtime: Application 1181 |\n| **APIRuntimeApplication1182** | 3681 | 3681, API Runtime: Application 1182 |\n| **APIRuntimeApplication1183** | 3682 | 3682, API Runtime: Application 1183 |\n| **APIRuntimeApplication1184** | 3683 | 3683, API Runtime: Application 1184 |\n| **APIRuntimeApplication1185** | 3684 | 3684, API Runtime: Application 1185 |\n| **APIRuntimeApplication1186** | 3685 | 3685, API Runtime: Application 1186 |\n| **APIRuntimeApplication1187** | 3686 | 3686, API Runtime: Application 1187 |\n| **APIRuntimeApplication1188** | 3687 | 3687, API Runtime: Application 1188 |\n| **APIRuntimeApplication1189** | 3688 | 3688, API Runtime: Application 1189 |\n| **APIRuntimeApplication1190** | 3689 | 3689, API Runtime: Application 1190 |\n| **APIRuntimeApplication1191** | 3690 | 3690, API Runtime: Application 1191 |\n| **APIRuntimeApplication1192** | 3691 | 3691, API Runtime: Application 1192 |\n| **APIRuntimeApplication1193** | 3692 | 3692, API Runtime: Application 1193 |\n| **APIRuntimeApplication1194** | 3693 | 3693, API Runtime: Application 1194 |\n| **APIRuntimeApplication1195** | 3694 | 3694, API Runtime: Application 1195 |\n| **APIRuntimeApplication1196** | 3695 | 3695, API Runtime: Application 1196 |\n| **APIRuntimeApplication1197** | 3696 | 3696, API Runtime: Application 1197 |\n| **APIRuntimeApplication1198** | 3697 | 3697, API Runtime: Application 1198 |\n| **APIRuntimeApplication1199** | 3698 | 3698, API Runtime: Application 1199 |\n| **APIRuntimeApplication1200** | 3699 | 3699, API Runtime: Application 1200 |\n| **APIRuntimeApplication1201** | 3700 | 3700, API Runtime: Application 1201 |\n| **APIRuntimeApplication1202** | 3701 | 3701, API Runtime: Application 1202 |\n| **APIRuntimeApplication1203** | 3702 | 3702, API Runtime: Application 1203 |\n| **APIRuntimeApplication1204** | 3703 | 3703, API Runtime: Application 1204 |\n| **APIRuntimeApplication1205** | 3704 | 3704, API Runtime: Application 1205 |\n| **APIRuntimeApplication1206** | 3705 | 3705, API Runtime: Application 1206 |\n| **APIRuntimeApplication1207** | 3706 | 3706, API Runtime: Application 1207 |\n| **APIRuntimeApplication1208** | 3707 | 3707, API Runtime: Application 1208 |\n| **APIRuntimeApplication1209** | 3708 | 3708, API Runtime: Application 1209 |\n| **APIRuntimeApplication1210** | 3709 | 3709, API Runtime: Application 1210 |\n| **APIRuntimeApplication1211** | 3710 | 3710, API Runtime: Application 1211 |\n| **APIRuntimeApplication1212** | 3711 | 3711, API Runtime: Application 1212 |\n| **APIRuntimeApplication1213** | 3712 | 3712, API Runtime: Application 1213 |\n| **APIRuntimeApplication1214** | 3713 | 3713, API Runtime: Application 1214 |\n| **APIRuntimeApplication1215** | 3714 | 3714, API Runtime: Application 1215 |\n| **APIRuntimeApplication1216** | 3715 | 3715, API Runtime: Application 1216 |\n| **APIRuntimeApplication1217** | 3716 | 3716, API Runtime: Application 1217 |\n| **APIRuntimeApplication1218** | 3717 | 3717, API Runtime: Application 1218 |\n| **APIRuntimeApplication1219** | 3718 | 3718, API Runtime: Application 1219 |\n| **APIRuntimeApplication1220** | 3719 | 3719, API Runtime: Application 1220 |\n| **APIRuntimeApplication1221** | 3720 | 3720, API Runtime: Application 1221 |\n| **APIRuntimeApplication1222** | 3721 | 3721, API Runtime: Application 1222 |\n| **APIRuntimeApplication1223** | 3722 | 3722, API Runtime: Application 1223 |\n| **APIRuntimeApplication1224** | 3723 | 3723, API Runtime: Application 1224 |\n| **APIRuntimeApplication1225** | 3724 | 3724, API Runtime: Application 1225 |\n| **APIRuntimeApplication1226** | 3725 | 3725, API Runtime: Application 1226 |\n| **APIRuntimeApplication1227** | 3726 | 3726, API Runtime: Application 1227 |\n| **APIRuntimeApplication1228** | 3727 | 3727, API Runtime: Application 1228 |\n| **APIRuntimeApplication1229** | 3728 | 3728, API Runtime: Application 1229 |\n| **APIRuntimeApplication1230** | 3729 | 3729, API Runtime: Application 1230 |\n| **APIRuntimeApplication1231** | 3730 | 3730, API Runtime: Application 1231 |\n| **APIRuntimeApplication1232** | 3731 | 3731, API Runtime: Application 1232 |\n| **APIRuntimeApplication1233** | 3732 | 3732, API Runtime: Application 1233 |\n| **APIRuntimeApplication1234** | 3733 | 3733, API Runtime: Application 1234 |\n| **APIRuntimeApplication1235** | 3734 | 3734, API Runtime: Application 1235 |\n| **APIRuntimeApplication1236** | 3735 | 3735, API Runtime: Application 1236 |\n| **APIRuntimeApplication1237** | 3736 | 3736, API Runtime: Application 1237 |\n| **APIRuntimeApplication1238** | 3737 | 3737, API Runtime: Application 1238 |\n| **APIRuntimeApplication1239** | 3738 | 3738, API Runtime: Application 1239 |\n| **APIRuntimeApplication1240** | 3739 | 3739, API Runtime: Application 1240 |\n| **APIRuntimeApplication1241** | 3740 | 3740, API Runtime: Application 1241 |\n| **APIRuntimeApplication1242** | 3741 | 3741, API Runtime: Application 1242 |\n| **APIRuntimeApplication1243** | 3742 | 3742, API Runtime: Application 1243 |\n| **APIRuntimeApplication1244** | 3743 | 3743, API Runtime: Application 1244 |\n| **APIRuntimeApplication1245** | 3744 | 3744, API Runtime: Application 1245 |\n| **APIRuntimeApplication1246** | 3745 | 3745, API Runtime: Application 1246 |\n| **APIRuntimeApplication1247** | 3746 | 3746, API Runtime: Application 1247 |\n| **APIRuntimeApplication1248** | 3747 | 3747, API Runtime: Application 1248 |\n| **APIRuntimeApplication1249** | 3748 | 3748, API Runtime: Application 1249 |\n| **APIRuntimeApplication1250** | 3749 | 3749, API Runtime: Application 1250 |\n| **APIRuntimeApplication1251** | 3750 | 3750, API Runtime: Application 1251 |\n| **APIRuntimeApplication1252** | 3751 | 3751, API Runtime: Application 1252 |\n| **APIRuntimeApplication1253** | 3752 | 3752, API Runtime: Application 1253 |\n| **APIRuntimeApplication1254** | 3753 | 3753, API Runtime: Application 1254 |\n| **APIRuntimeApplication1255** | 3754 | 3754, API Runtime: Application 1255 |\n| **APIRuntimeApplication1256** | 3755 | 3755, API Runtime: Application 1256 |\n| **APIRuntimeApplication1257** | 3756 | 3756, API Runtime: Application 1257 |\n| **APIRuntimeApplication1258** | 3757 | 3757, API Runtime: Application 1258 |\n| **APIRuntimeApplication1259** | 3758 | 3758, API Runtime: Application 1259 |\n| **APIRuntimeApplication1260** | 3759 | 3759, API Runtime: Application 1260 |\n| **APIRuntimeApplication1261** | 3760 | 3760, API Runtime: Application 1261 |\n| **APIRuntimeApplication1262** | 3761 | 3761, API Runtime: Application 1262 |\n| **APIRuntimeApplication1263** | 3762 | 3762, API Runtime: Application 1263 |\n| **APIRuntimeApplication1264** | 3763 | 3763, API Runtime: Application 1264 |\n| **APIRuntimeApplication1265** | 3764 | 3764, API Runtime: Application 1265 |\n| **APIRuntimeApplication1266** | 3765 | 3765, API Runtime: Application 1266 |\n| **APIRuntimeApplication1267** | 3766 | 3766, API Runtime: Application 1267 |\n| **APIRuntimeApplication1268** | 3767 | 3767, API Runtime: Application 1268 |\n| **APIRuntimeApplication1269** | 3768 | 3768, API Runtime: Application 1269 |\n| **APIRuntimeApplication1270** | 3769 | 3769, API Runtime: Application 1270 |\n| **APIRuntimeApplication1271** | 3770 | 3770, API Runtime: Application 1271 |\n| **APIRuntimeApplication1272** | 3771 | 3771, API Runtime: Application 1272 |\n| **APIRuntimeApplication1273** | 3772 | 3772, API Runtime: Application 1273 |\n| **APIRuntimeApplication1274** | 3773 | 3773, API Runtime: Application 1274 |\n| **APIRuntimeApplication1275** | 3774 | 3774, API Runtime: Application 1275 |\n| **APIRuntimeApplication1276** | 3775 | 3775, API Runtime: Application 1276 |\n| **APIRuntimeApplication1277** | 3776 | 3776, API Runtime: Application 1277 |\n| **APIRuntimeApplication1278** | 3777 | 3777, API Runtime: Application 1278 |\n| **APIRuntimeApplication1279** | 3778 | 3778, API Runtime: Application 1279 |\n| **APIRuntimeApplication1280** | 3779 | 3779, API Runtime: Application 1280 |\n| **APIRuntimeApplication1281** | 3780 | 3780, API Runtime: Application 1281 |\n| **APIRuntimeApplication1282** | 3781 | 3781, API Runtime: Application 1282 |\n| **APIRuntimeApplication1283** | 3782 | 3782, API Runtime: Application 1283 |\n| **APIRuntimeApplication1284** | 3783 | 3783, API Runtime: Application 1284 |\n| **APIRuntimeApplication1285** | 3784 | 3784, API Runtime: Application 1285 |\n| **APIRuntimeApplication1286** | 3785 | 3785, API Runtime: Application 1286 |\n| **APIRuntimeApplication1287** | 3786 | 3786, API Runtime: Application 1287 |\n| **APIRuntimeApplication1288** | 3787 | 3787, API Runtime: Application 1288 |\n| **APIRuntimeApplication1289** | 3788 | 3788, API Runtime: Application 1289 |\n| **APIRuntimeApplication1290** | 3789 | 3789, API Runtime: Application 1290 |\n| **APIRuntimeApplication1291** | 3790 | 3790, API Runtime: Application 1291 |\n| **APIRuntimeApplication1292** | 3791 | 3791, API Runtime: Application 1292 |\n| **APIRuntimeApplication1293** | 3792 | 3792, API Runtime: Application 1293 |\n| **APIRuntimeApplication1294** | 3793 | 3793, API Runtime: Application 1294 |\n| **APIRuntimeApplication1295** | 3794 | 3794, API Runtime: Application 1295 |\n| **APIRuntimeApplication1296** | 3795 | 3795, API Runtime: Application 1296 |\n| **APIRuntimeApplication1297** | 3796 | 3796, API Runtime: Application 1297 |\n| **APIRuntimeApplication1298** | 3797 | 3797, API Runtime: Application 1298 |\n| **APIRuntimeApplication1299** | 3798 | 3798, API Runtime: Application 1299 |\n| **APIRuntimeApplication1300** | 3799 | 3799, API Runtime: Application 1300 |\n| **APIRuntimeApplication1301** | 3800 | 3800, API Runtime: Application 1301 |\n| **APIRuntimeApplication1302** | 3801 | 3801, API Runtime: Application 1302 |\n| **APIRuntimeApplication1303** | 3802 | 3802, API Runtime: Application 1303 |\n| **APIRuntimeApplication1304** | 3803 | 3803, API Runtime: Application 1304 |\n| **APIRuntimeApplication1305** | 3804 | 3804, API Runtime: Application 1305 |\n| **APIRuntimeApplication1306** | 3805 | 3805, API Runtime: Application 1306 |\n| **APIRuntimeApplication1307** | 3806 | 3806, API Runtime: Application 1307 |\n| **APIRuntimeApplication1308** | 3807 | 3807, API Runtime: Application 1308 |\n| **APIRuntimeApplication1309** | 3808 | 3808, API Runtime: Application 1309 |\n| **APIRuntimeApplication1310** | 3809 | 3809, API Runtime: Application 1310 |\n| **APIRuntimeApplication1311** | 3810 | 3810, API Runtime: Application 1311 |\n| **APIRuntimeApplication1312** | 3811 | 3811, API Runtime: Application 1312 |\n| **APIRuntimeApplication1313** | 3812 | 3812, API Runtime: Application 1313 |\n| **APIRuntimeApplication1314** | 3813 | 3813, API Runtime: Application 1314 |\n| **APIRuntimeApplication1315** | 3814 | 3814, API Runtime: Application 1315 |\n| **APIRuntimeApplication1316** | 3815 | 3815, API Runtime: Application 1316 |\n| **APIRuntimeApplication1317** | 3816 | 3816, API Runtime: Application 1317 |\n| **APIRuntimeApplication1318** | 3817 | 3817, API Runtime: Application 1318 |\n| **APIRuntimeApplication1319** | 3818 | 3818, API Runtime: Application 1319 |\n| **APIRuntimeApplication1320** | 3819 | 3819, API Runtime: Application 1320 |\n| **APIRuntimeApplication1321** | 3820 | 3820, API Runtime: Application 1321 |\n| **APIRuntimeApplication1322** | 3821 | 3821, API Runtime: Application 1322 |\n| **APIRuntimeApplication1323** | 3822 | 3822, API Runtime: Application 1323 |\n| **APIRuntimeApplication1324** | 3823 | 3823, API Runtime: Application 1324 |\n| **APIRuntimeApplication1325** | 3824 | 3824, API Runtime: Application 1325 |\n| **APIRuntimeApplication1326** | 3825 | 3825, API Runtime: Application 1326 |\n| **APIRuntimeApplication1327** | 3826 | 3826, API Runtime: Application 1327 |\n| **APIRuntimeApplication1328** | 3827 | 3827, API Runtime: Application 1328 |\n| **APIRuntimeApplication1329** | 3828 | 3828, API Runtime: Application 1329 |\n| **APIRuntimeApplication1330** | 3829 | 3829, API Runtime: Application 1330 |\n| **APIRuntimeApplication1331** | 3830 | 3830, API Runtime: Application 1331 |\n| **APIRuntimeApplication1332** | 3831 | 3831, API Runtime: Application 1332 |\n| **APIRuntimeApplication1333** | 3832 | 3832, API Runtime: Application 1333 |\n| **APIRuntimeApplication1334** | 3833 | 3833, API Runtime: Application 1334 |\n| **APIRuntimeApplication1335** | 3834 | 3834, API Runtime: Application 1335 |\n| **APIRuntimeApplication1336** | 3835 | 3835, API Runtime: Application 1336 |\n| **APIRuntimeApplication1337** | 3836 | 3836, API Runtime: Application 1337 |\n| **APIRuntimeApplication1338** | 3837 | 3837, API Runtime: Application 1338 |\n| **APIRuntimeApplication1339** | 3838 | 3838, API Runtime: Application 1339 |\n| **APIRuntimeApplication1340** | 3839 | 3839, API Runtime: Application 1340 |\n| **APIRuntimeApplication1341** | 3840 | 3840, API Runtime: Application 1341 |\n| **APIRuntimeApplication1342** | 3841 | 3841, API Runtime: Application 1342 |\n| **APIRuntimeApplication1343** | 3842 | 3842, API Runtime: Application 1343 |\n| **APIRuntimeApplication1344** | 3843 | 3843, API Runtime: Application 1344 |\n| **APIRuntimeApplication1345** | 3844 | 3844, API Runtime: Application 1345 |\n| **APIRuntimeApplication1346** | 3845 | 3845, API Runtime: Application 1346 |\n| **APIRuntimeApplication1347** | 3846 | 3846, API Runtime: Application 1347 |\n| **APIRuntimeApplication1348** | 3847 | 3847, API Runtime: Application 1348 |\n| **APIRuntimeApplication1349** | 3848 | 3848, API Runtime: Application 1349 |\n| **APIRuntimeApplication1350** | 3849 | 3849, API Runtime: Application 1350 |\n| **APIRuntimeApplication1351** | 3850 | 3850, API Runtime: Application 1351 |\n| **APIRuntimeApplication1352** | 3851 | 3851, API Runtime: Application 1352 |\n| **APIRuntimeApplication1353** | 3852 | 3852, API Runtime: Application 1353 |\n| **APIRuntimeApplication1354** | 3853 | 3853, API Runtime: Application 1354 |\n| **APIRuntimeApplication1355** | 3854 | 3854, API Runtime: Application 1355 |\n| **APIRuntimeApplication1356** | 3855 | 3855, API Runtime: Application 1356 |\n| **APIRuntimeApplication1357** | 3856 | 3856, API Runtime: Application 1357 |\n| **APIRuntimeApplication1358** | 3857 | 3857, API Runtime: Application 1358 |\n| **APIRuntimeApplication1359** | 3858 | 3858, API Runtime: Application 1359 |\n| **APIRuntimeApplication1360** | 3859 | 3859, API Runtime: Application 1360 |\n| **APIRuntimeApplication1361** | 3860 | 3860, API Runtime: Application 1361 |\n| **APIRuntimeApplication1362** | 3861 | 3861, API Runtime: Application 1362 |\n| **APIRuntimeApplication1363** | 3862 | 3862, API Runtime: Application 1363 |\n| **APIRuntimeApplication1364** | 3863 | 3863, API Runtime: Application 1364 |\n| **APIRuntimeApplication1365** | 3864 | 3864, API Runtime: Application 1365 |\n| **APIRuntimeApplication1366** | 3865 | 3865, API Runtime: Application 1366 |\n| **APIRuntimeApplication1367** | 3866 | 3866, API Runtime: Application 1367 |\n| **APIRuntimeApplication1368** | 3867 | 3867, API Runtime: Application 1368 |\n| **APIRuntimeApplication1369** | 3868 | 3868, API Runtime: Application 1369 |\n| **APIRuntimeApplication1370** | 3869 | 3869, API Runtime: Application 1370 |\n| **APIRuntimeApplication1371** | 3870 | 3870, API Runtime: Application 1371 |\n| **APIRuntimeApplication1372** | 3871 | 3871, API Runtime: Application 1372 |\n| **APIRuntimeApplication1373** | 3872 | 3872, API Runtime: Application 1373 |\n| **APIRuntimeApplication1374** | 3873 | 3873, API Runtime: Application 1374 |\n| **APIRuntimeApplication1375** | 3874 | 3874, API Runtime: Application 1375 |\n| **APIRuntimeApplication1376** | 3875 | 3875, API Runtime: Application 1376 |\n| **APIRuntimeApplication1377** | 3876 | 3876, API Runtime: Application 1377 |\n| **APIRuntimeApplication1378** | 3877 | 3877, API Runtime: Application 1378 |\n| **APIRuntimeApplication1379** | 3878 | 3878, API Runtime: Application 1379 |\n| **APIRuntimeApplication1380** | 3879 | 3879, API Runtime: Application 1380 |\n| **APIRuntimeApplication1381** | 3880 | 3880, API Runtime: Application 1381 |\n| **APIRuntimeApplication1382** | 3881 | 3881, API Runtime: Application 1382 |\n| **APIRuntimeApplication1383** | 3882 | 3882, API Runtime: Application 1383 |\n| **APIRuntimeApplication1384** | 3883 | 3883, API Runtime: Application 1384 |\n| **APIRuntimeApplication1385** | 3884 | 3884, API Runtime: Application 1385 |\n| **APIRuntimeApplication1386** | 3885 | 3885, API Runtime: Application 1386 |\n| **APIRuntimeApplication1387** | 3886 | 3886, API Runtime: Application 1387 |\n| **APIRuntimeApplication1388** | 3887 | 3887, API Runtime: Application 1388 |\n| **APIRuntimeApplication1389** | 3888 | 3888, API Runtime: Application 1389 |\n| **APIRuntimeApplication1390** | 3889 | 3889, API Runtime: Application 1390 |\n| **APIRuntimeApplication1391** | 3890 | 3890, API Runtime: Application 1391 |\n| **APIRuntimeApplication1392** | 3891 | 3891, API Runtime: Application 1392 |\n| **APIRuntimeApplication1393** | 3892 | 3892, API Runtime: Application 1393 |\n| **APIRuntimeApplication1394** | 3893 | 3893, API Runtime: Application 1394 |\n| **APIRuntimeApplication1395** | 3894 | 3894, API Runtime: Application 1395 |\n| **APIRuntimeApplication1396** | 3895 | 3895, API Runtime: Application 1396 |\n| **APIRuntimeApplication1397** | 3896 | 3896, API Runtime: Application 1397 |\n| **APIRuntimeApplication1398** | 3897 | 3897, API Runtime: Application 1398 |\n| **APIRuntimeApplication1399** | 3898 | 3898, API Runtime: Application 1399 |\n| **APIRuntimeApplication1400** | 3899 | 3899, API Runtime: Application 1400 |\n| **APIRuntimeApplication1401** | 3900 | 3900, API Runtime: Application 1401 |\n| **APIRuntimeApplication1402** | 3901 | 3901, API Runtime: Application 1402 |\n| **APIRuntimeApplication1403** | 3902 | 3902, API Runtime: Application 1403 |\n| **APIRuntimeApplication1404** | 3903 | 3903, API Runtime: Application 1404 |\n| **APIRuntimeApplication1405** | 3904 | 3904, API Runtime: Application 1405 |\n| **APIRuntimeApplication1406** | 3905 | 3905, API Runtime: Application 1406 |\n| **APIRuntimeApplication1407** | 3906 | 3906, API Runtime: Application 1407 |\n| **APIRuntimeApplication1408** | 3907 | 3907, API Runtime: Application 1408 |\n| **APIRuntimeApplication1409** | 3908 | 3908, API Runtime: Application 1409 |\n| **APIRuntimeApplication1410** | 3909 | 3909, API Runtime: Application 1410 |\n| **APIRuntimeApplication1411** | 3910 | 3910, API Runtime: Application 1411 |\n| **APIRuntimeApplication1412** | 3911 | 3911, API Runtime: Application 1412 |\n| **APIRuntimeApplication1413** | 3912 | 3912, API Runtime: Application 1413 |\n| **APIRuntimeApplication1414** | 3913 | 3913, API Runtime: Application 1414 |\n| **APIRuntimeApplication1415** | 3914 | 3914, API Runtime: Application 1415 |\n| **APIRuntimeApplication1416** | 3915 | 3915, API Runtime: Application 1416 |\n| **APIRuntimeApplication1417** | 3916 | 3916, API Runtime: Application 1417 |\n| **APIRuntimeApplication1418** | 3917 | 3917, API Runtime: Application 1418 |\n| **APIRuntimeApplication1419** | 3918 | 3918, API Runtime: Application 1419 |\n| **APIRuntimeApplication1420** | 3919 | 3919, API Runtime: Application 1420 |\n| **APIRuntimeApplication1421** | 3920 | 3920, API Runtime: Application 1421 |\n| **APIRuntimeApplication1422** | 3921 | 3921, API Runtime: Application 1422 |\n| **APIRuntimeApplication1423** | 3922 | 3922, API Runtime: Application 1423 |\n| **APIRuntimeApplication1424** | 3923 | 3923, API Runtime: Application 1424 |\n| **APIRuntimeApplication1425** | 3924 | 3924, API Runtime: Application 1425 |\n| **APIRuntimeApplication1426** | 3925 | 3925, API Runtime: Application 1426 |\n| **APIRuntimeApplication1427** | 3926 | 3926, API Runtime: Application 1427 |\n| **APIRuntimeApplication1428** | 3927 | 3927, API Runtime: Application 1428 |\n| **APIRuntimeApplication1429** | 3928 | 3928, API Runtime: Application 1429 |\n| **APIRuntimeApplication1430** | 3929 | 3929, API Runtime: Application 1430 |\n| **APIRuntimeApplication1431** | 3930 | 3930, API Runtime: Application 1431 |\n| **APIRuntimeApplication1432** | 3931 | 3931, API Runtime: Application 1432 |\n| **APIRuntimeApplication1433** | 3932 | 3932, API Runtime: Application 1433 |\n| **APIRuntimeApplication1434** | 3933 | 3933, API Runtime: Application 1434 |\n| **APIRuntimeApplication1435** | 3934 | 3934, API Runtime: Application 1435 |\n| **APIRuntimeApplication1436** | 3935 | 3935, API Runtime: Application 1436 |\n| **APIRuntimeApplication1437** | 3936 | 3936, API Runtime: Application 1437 |\n| **APIRuntimeApplication1438** | 3937 | 3937, API Runtime: Application 1438 |\n| **APIRuntimeApplication1439** | 3938 | 3938, API Runtime: Application 1439 |\n| **APIRuntimeApplication1440** | 3939 | 3939, API Runtime: Application 1440 |\n| **APIRuntimeApplication1441** | 3940 | 3940, API Runtime: Application 1441 |\n| **APIRuntimeApplication1442** | 3941 | 3941, API Runtime: Application 1442 |\n| **APIRuntimeApplication1443** | 3942 | 3942, API Runtime: Application 1443 |\n| **APIRuntimeApplication1444** | 3943 | 3943, API Runtime: Application 1444 |\n| **APIRuntimeApplication1445** | 3944 | 3944, API Runtime: Application 1445 |\n| **APIRuntimeApplication1446** | 3945 | 3945, API Runtime: Application 1446 |\n| **APIRuntimeApplication1447** | 3946 | 3946, API Runtime: Application 1447 |\n| **APIRuntimeApplication1448** | 3947 | 3947, API Runtime: Application 1448 |\n| **APIRuntimeApplication1449** | 3948 | 3948, API Runtime: Application 1449 |\n| **APIRuntimeApplication1450** | 3949 | 3949, API Runtime: Application 1450 |\n| **APIRuntimeApplication1451** | 3950 | 3950, API Runtime: Application 1451 |\n| **APIRuntimeApplication1452** | 3951 | 3951, API Runtime: Application 1452 |\n| **APIRuntimeApplication1453** | 3952 | 3952, API Runtime: Application 1453 |\n| **APIRuntimeApplication1454** | 3953 | 3953, API Runtime: Application 1454 |\n| **APIRuntimeApplication1455** | 3954 | 3954, API Runtime: Application 1455 |\n| **APIRuntimeApplication1456** | 3955 | 3955, API Runtime: Application 1456 |\n| **APIRuntimeApplication1457** | 3956 | 3956, API Runtime: Application 1457 |\n| **APIRuntimeApplication1458** | 3957 | 3957, API Runtime: Application 1458 |\n| **APIRuntimeApplication1459** | 3958 | 3958, API Runtime: Application 1459 |\n| **APIRuntimeApplication1460** | 3959 | 3959, API Runtime: Application 1460 |\n| **APIRuntimeApplication1461** | 3960 | 3960, API Runtime: Application 1461 |\n| **APIRuntimeApplication1462** | 3961 | 3961, API Runtime: Application 1462 |\n| **APIRuntimeApplication1463** | 3962 | 3962, API Runtime: Application 1463 |\n| **APIRuntimeApplication1464** | 3963 | 3963, API Runtime: Application 1464 |\n| **APIRuntimeApplication1465** | 3964 | 3964, API Runtime: Application 1465 |\n| **APIRuntimeApplication1466** | 3965 | 3965, API Runtime: Application 1466 |\n| **APIRuntimeApplication1467** | 3966 | 3966, API Runtime: Application 1467 |\n| **APIRuntimeApplication1468** | 3967 | 3967, API Runtime: Application 1468 |\n| **APIRuntimeApplication1469** | 3968 | 3968, API Runtime: Application 1469 |\n| **APIRuntimeApplication1470** | 3969 | 3969, API Runtime: Application 1470 |\n| **APIRuntimeApplication1471** | 3970 | 3970, API Runtime: Application 1471 |\n| **APIRuntimeApplication1472** | 3971 | 3971, API Runtime: Application 1472 |\n| **APIRuntimeApplication1473** | 3972 | 3972, API Runtime: Application 1473 |\n| **APIRuntimeApplication1474** | 3973 | 3973, API Runtime: Application 1474 |\n| **APIRuntimeApplication1475** | 3974 | 3974, API Runtime: Application 1475 |\n| **APIRuntimeApplication1476** | 3975 | 3975, API Runtime: Application 1476 |\n| **APIRuntimeApplication1477** | 3976 | 3976, API Runtime: Application 1477 |\n| **APIRuntimeApplication1478** | 3977 | 3977, API Runtime: Application 1478 |\n| **APIRuntimeApplication1479** | 3978 | 3978, API Runtime: Application 1479 |\n| **APIRuntimeApplication1480** | 3979 | 3979, API Runtime: Application 1480 |\n| **APIRuntimeApplication1481** | 3980 | 3980, API Runtime: Application 1481 |\n| **APIRuntimeApplication1482** | 3981 | 3981, API Runtime: Application 1482 |\n| **APIRuntimeApplication1483** | 3982 | 3982, API Runtime: Application 1483 |\n| **APIRuntimeApplication1484** | 3983 | 3983, API Runtime: Application 1484 |\n| **APIRuntimeApplication1485** | 3984 | 3984, API Runtime: Application 1485 |\n| **APIRuntimeApplication1486** | 3985 | 3985, API Runtime: Application 1486 |\n| **APIRuntimeApplication1487** | 3986 | 3986, API Runtime: Application 1487 |\n| **APIRuntimeApplication1488** | 3987 | 3987, API Runtime: Application 1488 |\n| **APIRuntimeApplication1489** | 3988 | 3988, API Runtime: Application 1489 |\n| **APIRuntimeApplication1490** | 3989 | 3989, API Runtime: Application 1490 |\n| **APIRuntimeApplication1491** | 3990 | 3990, API Runtime: Application 1491 |\n| **APIRuntimeApplication1492** | 3991 | 3991, API Runtime: Application 1492 |\n| **APIRuntimeApplication1493** | 3992 | 3992, API Runtime: Application 1493 |\n| **APIRuntimeApplication1494** | 3993 | 3993, API Runtime: Application 1494 |\n| **APIRuntimeApplication1495** | 3994 | 3994, API Runtime: Application 1495 |\n| **APIRuntimeApplication1496** | 3995 | 3995, API Runtime: Application 1496 |\n| **APIRuntimeApplication1497** | 3996 | 3996, API Runtime: Application 1497 |\n| **APIRuntimeApplication1498** | 3997 | 3997, API Runtime: Application 1498 |\n| **APIRuntimeApplication1499** | 3998 | 3998, API Runtime: Application 1499 |\n| **APIRuntimeApplication1500** | 3999 | 3999, API Runtime: Application 1500 |\n| **APIRuntimeApplication1501** | 4000 | 4000, API Runtime: Application 1501 |\n| **APIRuntimeApplication1502** | 4001 | 4001, API Runtime: Application 1502 |\n| **APIRuntimeApplication1503** | 4002 | 4002, API Runtime: Application 1503 |\n| **APIRuntimeApplication1504** | 4003 | 4003, API Runtime: Application 1504 |\n| **APIRuntimeApplication1505** | 4004 | 4004, API Runtime: Application 1505 |\n| **APIRuntimeApplication1506** | 4005 | 4005, API Runtime: Application 1506 |\n| **APIRuntimeApplication1507** | 4006 | 4006, API Runtime: Application 1507 |\n| **APIRuntimeApplication1508** | 4007 | 4007, API Runtime: Application 1508 |\n| **APIRuntimeApplication1509** | 4008 | 4008, API Runtime: Application 1509 |\n| **APIRuntimeApplication1510** | 4009 | 4009, API Runtime: Application 1510 |\n| **APIRuntimeApplication1511** | 4010 | 4010, API Runtime: Application 1511 |\n| **APIRuntimeApplication1512** | 4011 | 4011, API Runtime: Application 1512 |\n| **APIRuntimeApplication1513** | 4012 | 4012, API Runtime: Application 1513 |\n| **APIRuntimeApplication1514** | 4013 | 4013, API Runtime: Application 1514 |\n| **APIRuntimeApplication1515** | 4014 | 4014, API Runtime: Application 1515 |\n| **APIRuntimeApplication1516** | 4015 | 4015, API Runtime: Application 1516 |\n| **APIRuntimeApplication1517** | 4016 | 4016, API Runtime: Application 1517 |\n| **APIRuntimeApplication1518** | 4017 | 4017, API Runtime: Application 1518 |\n| **APIRuntimeApplication1519** | 4018 | 4018, API Runtime: Application 1519 |\n| **APIRuntimeApplication1520** | 4019 | 4019, API Runtime: Application 1520 |\n| **APIRuntimeApplication1521** | 4020 | 4020, API Runtime: Application 1521 |\n| **APIRuntimeApplication1522** | 4021 | 4021, API Runtime: Application 1522 |\n| **APIRuntimeApplication1523** | 4022 | 4022, API Runtime: Application 1523 |\n| **APIRuntimeApplication1524** | 4023 | 4023, API Runtime: Application 1524 |\n| **APIRuntimeApplication1525** | 4024 | 4024, API Runtime: Application 1525 |\n| **APIRuntimeApplication1526** | 4025 | 4025, API Runtime: Application 1526 |\n| **APIRuntimeApplication1527** | 4026 | 4026, API Runtime: Application 1527 |\n| **APIRuntimeApplication1528** | 4027 | 4027, API Runtime: Application 1528 |\n| **APIRuntimeApplication1529** | 4028 | 4028, API Runtime: Application 1529 |\n| **APIRuntimeApplication1530** | 4029 | 4029, API Runtime: Application 1530 |\n| **APIRuntimeApplication1531** | 4030 | 4030, API Runtime: Application 1531 |\n| **APIRuntimeApplication1532** | 4031 | 4031, API Runtime: Application 1532 |\n| **APIRuntimeApplication1533** | 4032 | 4032, API Runtime: Application 1533 |\n| **APIRuntimeApplication1534** | 4033 | 4033, API Runtime: Application 1534 |\n| **APIRuntimeApplication1535** | 4034 | 4034, API Runtime: Application 1535 |\n| **APIRuntimeApplication1536** | 4035 | 4035, API Runtime: Application 1536 |\n| **APIRuntimeApplication1537** | 4036 | 4036, API Runtime: Application 1537 |\n| **APIRuntimeApplication1538** | 4037 | 4037, API Runtime: Application 1538 |\n| **APIRuntimeApplication1539** | 4038 | 4038, API Runtime: Application 1539 |\n| **APIRuntimeApplication1540** | 4039 | 4039, API Runtime: Application 1540 |\n| **APIRuntimeApplication1541** | 4040 | 4040, API Runtime: Application 1541 |\n| **APIRuntimeApplication1542** | 4041 | 4041, API Runtime: Application 1542 |\n| **APIRuntimeApplication1543** | 4042 | 4042, API Runtime: Application 1543 |\n| **APIRuntimeApplication1544** | 4043 | 4043, API Runtime: Application 1544 |\n| **APIRuntimeApplication1545** | 4044 | 4044, API Runtime: Application 1545 |\n| **APIRuntimeApplication1546** | 4045 | 4045, API Runtime: Application 1546 |\n| **APIRuntimeApplication1547** | 4046 | 4046, API Runtime: Application 1547 |\n| **APIRuntimeApplication1548** | 4047 | 4047, API Runtime: Application 1548 |\n| **APIRuntimeApplication1549** | 4048 | 4048, API Runtime: Application 1549 |\n| **APIRuntimeApplication1550** | 4049 | 4049, API Runtime: Application 1550 |\n| **APIRuntimeApplication1551** | 4050 | 4050, API Runtime: Application 1551 |\n| **APIRuntimeApplication1552** | 4051 | 4051, API Runtime: Application 1552 |\n| **APIRuntimeApplication1553** | 4052 | 4052, API Runtime: Application 1553 |\n| **APIRuntimeApplication1554** | 4053 | 4053, API Runtime: Application 1554 |\n| **APIRuntimeApplication1555** | 4054 | 4054, API Runtime: Application 1555 |\n| **APIRuntimeApplication1556** | 4055 | 4055, API Runtime: Application 1556 |\n| **APIRuntimeApplication1557** | 4056 | 4056, API Runtime: Application 1557 |\n| **APIRuntimeApplication1558** | 4057 | 4057, API Runtime: Application 1558 |\n| **APIRuntimeApplication1559** | 4058 | 4058, API Runtime: Application 1559 |\n| **APIRuntimeApplication1560** | 4059 | 4059, API Runtime: Application 1560 |\n| **APIRuntimeApplication1561** | 4060 | 4060, API Runtime: Application 1561 |\n| **APIRuntimeApplication1562** | 4061 | 4061, API Runtime: Application 1562 |\n| **APIRuntimeApplication1563** | 4062 | 4062, API Runtime: Application 1563 |\n| **APIRuntimeApplication1564** | 4063 | 4063, API Runtime: Application 1564 |\n| **APIRuntimeApplication1565** | 4064 | 4064, API Runtime: Application 1565 |\n| **APIRuntimeApplication1566** | 4065 | 4065, API Runtime: Application 1566 |\n| **APIRuntimeApplication1567** | 4066 | 4066, API Runtime: Application 1567 |\n| **APIRuntimeApplication1568** | 4067 | 4067, API Runtime: Application 1568 |\n| **APIRuntimeApplication1569** | 4068 | 4068, API Runtime: Application 1569 |\n| **APIRuntimeApplication1570** | 4069 | 4069, API Runtime: Application 1570 |\n| **APIRuntimeApplication1571** | 4070 | 4070, API Runtime: Application 1571 |\n| **APIRuntimeApplication1572** | 4071 | 4071, API Runtime: Application 1572 |\n| **APIRuntimeApplication1573** | 4072 | 4072, API Runtime: Application 1573 |\n| **APIRuntimeApplication1574** | 4073 | 4073, API Runtime: Application 1574 |\n| **APIRuntimeApplication1575** | 4074 | 4074, API Runtime: Application 1575 |\n| **APIRuntimeApplication1576** | 4075 | 4075, API Runtime: Application 1576 |\n| **APIRuntimeApplication1577** | 4076 | 4076, API Runtime: Application 1577 |\n| **APIRuntimeApplication1578** | 4077 | 4077, API Runtime: Application 1578 |\n| **APIRuntimeApplication1579** | 4078 | 4078, API Runtime: Application 1579 |\n| **APIRuntimeApplication1580** | 4079 | 4079, API Runtime: Application 1580 |\n| **APIRuntimeApplication1581** | 4080 | 4080, API Runtime: Application 1581 |\n| **APIRuntimeApplication1582** | 4081 | 4081, API Runtime: Application 1582 |\n| **APIRuntimeApplication1583** | 4082 | 4082, API Runtime: Application 1583 |\n| **APIRuntimeApplication1584** | 4083 | 4083, API Runtime: Application 1584 |\n| **APIRuntimeApplication1585** | 4084 | 4084, API Runtime: Application 1585 |\n| **APIRuntimeApplication1586** | 4085 | 4085, API Runtime: Application 1586 |\n| **APIRuntimeApplication1587** | 4086 | 4086, API Runtime: Application 1587 |\n| **APIRuntimeApplication1588** | 4087 | 4087, API Runtime: Application 1588 |\n| **APIRuntimeApplication1589** | 4088 | 4088, API Runtime: Application 1589 |\n| **APIRuntimeApplication1590** | 4089 | 4089, API Runtime: Application 1590 |\n| **APIRuntimeApplication1591** | 4090 | 4090, API Runtime: Application 1591 |\n| **APIRuntimeApplication1592** | 4091 | 4091, API Runtime: Application 1592 |\n| **APIRuntimeApplication1593** | 4092 | 4092, API Runtime: Application 1593 |\n| **APIRuntimeApplication1594** | 4093 | 4093, API Runtime: Application 1594 |\n| **APIRuntimeApplication1595** | 4094 | 4094, API Runtime: Application 1595 |\n| **APIRuntimeApplication1596** | 4095 | 4095, API Runtime: Application 1596 |\n| **APIRuntimeApplication1597** | 4096 | 4096, API Runtime: Application 1597 |\n| **APIRuntimeApplication1598** | 4097 | 4097, API Runtime: Application 1598 |\n| **APIRuntimeApplication1599** | 4098 | 4098, API Runtime: Application 1599 |\n| **APIRuntimeApplication1600** | 4099 | 4099, API Runtime: Application 1600 |\n| **APIRuntimeApplication1601** | 4100 | 4100, API Runtime: Application 1601 |\n| **APIRuntimeApplication1602** | 4101 | 4101, API Runtime: Application 1602 |\n| **APIRuntimeApplication1603** | 4102 | 4102, API Runtime: Application 1603 |\n| **APIRuntimeApplication1604** | 4103 | 4103, API Runtime: Application 1604 |\n| **APIRuntimeApplication1605** | 4104 | 4104, API Runtime: Application 1605 |\n| **APIRuntimeApplication1606** | 4105 | 4105, API Runtime: Application 1606 |\n| **APIRuntimeApplication1607** | 4106 | 4106, API Runtime: Application 1607 |\n| **APIRuntimeApplication1608** | 4107 | 4107, API Runtime: Application 1608 |\n| **APIRuntimeApplication1609** | 4108 | 4108, API Runtime: Application 1609 |\n| **APIRuntimeApplication1610** | 4109 | 4109, API Runtime: Application 1610 |\n| **APIRuntimeApplication1611** | 4110 | 4110, API Runtime: Application 1611 |\n| **APIRuntimeApplication1612** | 4111 | 4111, API Runtime: Application 1612 |\n| **APIRuntimeApplication1613** | 4112 | 4112, API Runtime: Application 1613 |\n| **APIRuntimeApplication1614** | 4113 | 4113, API Runtime: Application 1614 |\n| **APIRuntimeApplication1615** | 4114 | 4114, API Runtime: Application 1615 |\n| **APIRuntimeApplication1616** | 4115 | 4115, API Runtime: Application 1616 |\n| **APIRuntimeApplication1617** | 4116 | 4116, API Runtime: Application 1617 |\n| **APIRuntimeApplication1618** | 4117 | 4117, API Runtime: Application 1618 |\n| **APIRuntimeApplication1619** | 4118 | 4118, API Runtime: Application 1619 |\n| **APIRuntimeApplication1620** | 4119 | 4119, API Runtime: Application 1620 |\n| **APIRuntimeApplication1621** | 4120 | 4120, API Runtime: Application 1621 |\n| **APIRuntimeApplication1622** | 4121 | 4121, API Runtime: Application 1622 |\n| **APIRuntimeApplication1623** | 4122 | 4122, API Runtime: Application 1623 |\n| **APIRuntimeApplication1624** | 4123 | 4123, API Runtime: Application 1624 |\n| **APIRuntimeApplication1625** | 4124 | 4124, API Runtime: Application 1625 |\n| **APIRuntimeApplication1626** | 4125 | 4125, API Runtime: Application 1626 |\n| **APIRuntimeApplication1627** | 4126 | 4126, API Runtime: Application 1627 |\n| **APIRuntimeApplication1628** | 4127 | 4127, API Runtime: Application 1628 |\n| **APIRuntimeApplication1629** | 4128 | 4128, API Runtime: Application 1629 |\n| **APIRuntimeApplication1630** | 4129 | 4129, API Runtime: Application 1630 |\n| **APIRuntimeApplication1631** | 4130 | 4130, API Runtime: Application 1631 |\n| **APIRuntimeApplication1632** | 4131 | 4131, API Runtime: Application 1632 |\n| **APIRuntimeApplication1633** | 4132 | 4132, API Runtime: Application 1633 |\n| **APIRuntimeApplication1634** | 4133 | 4133, API Runtime: Application 1634 |\n| **APIRuntimeApplication1635** | 4134 | 4134, API Runtime: Application 1635 |\n| **APIRuntimeApplication1636** | 4135 | 4135, API Runtime: Application 1636 |\n| **APIRuntimeApplication1637** | 4136 | 4136, API Runtime: Application 1637 |\n| **APIRuntimeApplication1638** | 4137 | 4137, API Runtime: Application 1638 |\n| **APIRuntimeApplication1639** | 4138 | 4138, API Runtime: Application 1639 |\n| **APIRuntimeApplication1640** | 4139 | 4139, API Runtime: Application 1640 |\n| **APIRuntimeApplication1641** | 4140 | 4140, API Runtime: Application 1641 |\n| **APIRuntimeApplication1642** | 4141 | 4141, API Runtime: Application 1642 |\n| **APIRuntimeApplication1643** | 4142 | 4142, API Runtime: Application 1643 |\n| **APIRuntimeApplication1644** | 4143 | 4143, API Runtime: Application 1644 |\n| **APIRuntimeApplication1645** | 4144 | 4144, API Runtime: Application 1645 |\n| **APIRuntimeApplication1646** | 4145 | 4145, API Runtime: Application 1646 |\n| **APIRuntimeApplication1647** | 4146 | 4146, API Runtime: Application 1647 |\n| **APIRuntimeApplication1648** | 4147 | 4147, API Runtime: Application 1648 |\n| **APIRuntimeApplication1649** | 4148 | 4148, API Runtime: Application 1649 |\n| **APIRuntimeApplication1650** | 4149 | 4149, API Runtime: Application 1650 |\n| **APIRuntimeApplication1651** | 4150 | 4150, API Runtime: Application 1651 |\n| **APIRuntimeApplication1652** | 4151 | 4151, API Runtime: Application 1652 |\n| **APIRuntimeApplication1653** | 4152 | 4152, API Runtime: Application 1653 |\n| **APIRuntimeApplication1654** | 4153 | 4153, API Runtime: Application 1654 |\n| **APIRuntimeApplication1655** | 4154 | 4154, API Runtime: Application 1655 |\n| **APIRuntimeApplication1656** | 4155 | 4155, API Runtime: Application 1656 |\n| **APIRuntimeApplication1657** | 4156 | 4156, API Runtime: Application 1657 |\n| **APIRuntimeApplication1658** | 4157 | 4157, API Runtime: Application 1658 |\n| **APIRuntimeApplication1659** | 4158 | 4158, API Runtime: Application 1659 |\n| **APIRuntimeApplication1660** | 4159 | 4159, API Runtime: Application 1660 |\n| **APIRuntimeApplication1661** | 4160 | 4160, API Runtime: Application 1661 |\n| **APIRuntimeApplication1662** | 4161 | 4161, API Runtime: Application 1662 |\n| **APIRuntimeApplication1663** | 4162 | 4162, API Runtime: Application 1663 |\n| **APIRuntimeApplication1664** | 4163 | 4163, API Runtime: Application 1664 |\n| **APIRuntimeApplication1665** | 4164 | 4164, API Runtime: Application 1665 |\n| **APIRuntimeApplication1666** | 4165 | 4165, API Runtime: Application 1666 |\n| **APIRuntimeApplication1667** | 4166 | 4166, API Runtime: Application 1667 |\n| **APIRuntimeApplication1668** | 4167 | 4167, API Runtime: Application 1668 |\n| **APIRuntimeApplication1669** | 4168 | 4168, API Runtime: Application 1669 |\n| **APIRuntimeApplication1670** | 4169 | 4169, API Runtime: Application 1670 |\n| **APIRuntimeApplication1671** | 4170 | 4170, API Runtime: Application 1671 |\n| **APIRuntimeApplication1672** | 4171 | 4171, API Runtime: Application 1672 |\n| **APIRuntimeApplication1673** | 4172 | 4172, API Runtime: Application 1673 |\n| **APIRuntimeApplication1674** | 4173 | 4173, API Runtime: Application 1674 |\n| **APIRuntimeApplication1675** | 4174 | 4174, API Runtime: Application 1675 |\n| **APIRuntimeApplication1676** | 4175 | 4175, API Runtime: Application 1676 |\n| **APIRuntimeApplication1677** | 4176 | 4176, API Runtime: Application 1677 |\n| **APIRuntimeApplication1678** | 4177 | 4177, API Runtime: Application 1678 |\n| **APIRuntimeApplication1679** | 4178 | 4178, API Runtime: Application 1679 |\n| **APIRuntimeApplication1680** | 4179 | 4179, API Runtime: Application 1680 |\n| **APIRuntimeApplication1681** | 4180 | 4180, API Runtime: Application 1681 |\n| **APIRuntimeApplication1682** | 4181 | 4181, API Runtime: Application 1682 |\n| **APIRuntimeApplication1683** | 4182 | 4182, API Runtime: Application 1683 |\n| **APIRuntimeApplication1684** | 4183 | 4183, API Runtime: Application 1684 |\n| **APIRuntimeApplication1685** | 4184 | 4184, API Runtime: Application 1685 |\n| **APIRuntimeApplication1686** | 4185 | 4185, API Runtime: Application 1686 |\n| **APIRuntimeApplication1687** | 4186 | 4186, API Runtime: Application 1687 |\n| **APIRuntimeApplication1688** | 4187 | 4187, API Runtime: Application 1688 |\n| **APIRuntimeApplication1689** | 4188 | 4188, API Runtime: Application 1689 |\n| **APIRuntimeApplication1690** | 4189 | 4189, API Runtime: Application 1690 |\n| **APIRuntimeApplication1691** | 4190 | 4190, API Runtime: Application 1691 |\n| **APIRuntimeApplication1692** | 4191 | 4191, API Runtime: Application 1692 |\n| **APIRuntimeApplication1693** | 4192 | 4192, API Runtime: Application 1693 |\n| **APIRuntimeApplication1694** | 4193 | 4193, API Runtime: Application 1694 |\n| **APIRuntimeApplication1695** | 4194 | 4194, API Runtime: Application 1695 |\n| **APIRuntimeApplication1696** | 4195 | 4195, API Runtime: Application 1696 |\n| **APIRuntimeApplication1697** | 4196 | 4196, API Runtime: Application 1697 |\n| **APIRuntimeApplication1698** | 4197 | 4197, API Runtime: Application 1698 |\n| **APIRuntimeApplication1699** | 4198 | 4198, API Runtime: Application 1699 |\n| **APIRuntimeApplication1700** | 4199 | 4199, API Runtime: Application 1700 |\n| **APIRuntimeApplication1701** | 4200 | 4200, API Runtime: Application 1701 |\n| **APIRuntimeApplication1702** | 4201 | 4201, API Runtime: Application 1702 |\n| **APIRuntimeApplication1703** | 4202 | 4202, API Runtime: Application 1703 |\n| **APIRuntimeApplication1704** | 4203 | 4203, API Runtime: Application 1704 |\n| **APIRuntimeApplication1705** | 4204 | 4204, API Runtime: Application 1705 |\n| **APIRuntimeApplication1706** | 4205 | 4205, API Runtime: Application 1706 |\n| **APIRuntimeApplication1707** | 4206 | 4206, API Runtime: Application 1707 |\n| **APIRuntimeApplication1708** | 4207 | 4207, API Runtime: Application 1708 |\n| **APIRuntimeApplication1709** | 4208 | 4208, API Runtime: Application 1709 |\n| **APIRuntimeApplication1710** | 4209 | 4209, API Runtime: Application 1710 |\n| **APIRuntimeApplication1711** | 4210 | 4210, API Runtime: Application 1711 |\n| **APIRuntimeApplication1712** | 4211 | 4211, API Runtime: Application 1712 |\n| **APIRuntimeApplication1713** | 4212 | 4212, API Runtime: Application 1713 |\n| **APIRuntimeApplication1714** | 4213 | 4213, API Runtime: Application 1714 |\n| **APIRuntimeApplication1715** | 4214 | 4214, API Runtime: Application 1715 |\n| **APIRuntimeApplication1716** | 4215 | 4215, API Runtime: Application 1716 |\n| **APIRuntimeApplication1717** | 4216 | 4216, API Runtime: Application 1717 |\n| **APIRuntimeApplication1718** | 4217 | 4217, API Runtime: Application 1718 |\n| **APIRuntimeApplication1719** | 4218 | 4218, API Runtime: Application 1719 |\n| **APIRuntimeApplication1720** | 4219 | 4219, API Runtime: Application 1720 |\n| **APIRuntimeApplication1721** | 4220 | 4220, API Runtime: Application 1721 |\n| **APIRuntimeApplication1722** | 4221 | 4221, API Runtime: Application 1722 |\n| **APIRuntimeApplication1723** | 4222 | 4222, API Runtime: Application 1723 |\n| **APIRuntimeApplication1724** | 4223 | 4223, API Runtime: Application 1724 |\n| **APIRuntimeApplication1725** | 4224 | 4224, API Runtime: Application 1725 |\n| **APIRuntimeApplication1726** | 4225 | 4225, API Runtime: Application 1726 |\n| **APIRuntimeApplication1727** | 4226 | 4226, API Runtime: Application 1727 |\n| **APIRuntimeApplication1728** | 4227 | 4227, API Runtime: Application 1728 |\n| **APIRuntimeApplication1729** | 4228 | 4228, API Runtime: Application 1729 |\n| **APIRuntimeApplication1730** | 4229 | 4229, API Runtime: Application 1730 |\n| **APIRuntimeApplication1731** | 4230 | 4230, API Runtime: Application 1731 |\n| **APIRuntimeApplication1732** | 4231 | 4231, API Runtime: Application 1732 |\n| **APIRuntimeApplication1733** | 4232 | 4232, API Runtime: Application 1733 |\n| **APIRuntimeApplication1734** | 4233 | 4233, API Runtime: Application 1734 |\n| **APIRuntimeApplication1735** | 4234 | 4234, API Runtime: Application 1735 |\n| **APIRuntimeApplication1736** | 4235 | 4235, API Runtime: Application 1736 |\n| **APIRuntimeApplication1737** | 4236 | 4236, API Runtime: Application 1737 |\n| **APIRuntimeApplication1738** | 4237 | 4237, API Runtime: Application 1738 |\n| **APIRuntimeApplication1739** | 4238 | 4238, API Runtime: Application 1739 |\n| **APIRuntimeApplication1740** | 4239 | 4239, API Runtime: Application 1740 |\n| **APIRuntimeApplication1741** | 4240 | 4240, API Runtime: Application 1741 |\n| **APIRuntimeApplication1742** | 4241 | 4241, API Runtime: Application 1742 |\n| **APIRuntimeApplication1743** | 4242 | 4242, API Runtime: Application 1743 |\n| **APIRuntimeApplication1744** | 4243 | 4243, API Runtime: Application 1744 |\n| **APIRuntimeApplication1745** | 4244 | 4244, API Runtime: Application 1745 |\n| **APIRuntimeApplication1746** | 4245 | 4245, API Runtime: Application 1746 |\n| **APIRuntimeApplication1747** | 4246 | 4246, API Runtime: Application 1747 |\n| **APIRuntimeApplication1748** | 4247 | 4247, API Runtime: Application 1748 |\n| **APIRuntimeApplication1749** | 4248 | 4248, API Runtime: Application 1749 |\n| **APIRuntimeApplication1750** | 4249 | 4249, API Runtime: Application 1750 |\n| **APIRuntimeApplication1751** | 4250 | 4250, API Runtime: Application 1751 |\n| **APIRuntimeApplication1752** | 4251 | 4251, API Runtime: Application 1752 |\n| **APIRuntimeApplication1753** | 4252 | 4252, API Runtime: Application 1753 |\n| **APIRuntimeApplication1754** | 4253 | 4253, API Runtime: Application 1754 |\n| **APIRuntimeApplication1755** | 4254 | 4254, API Runtime: Application 1755 |\n| **APIRuntimeApplication1756** | 4255 | 4255, API Runtime: Application 1756 |\n| **APIRuntimeApplication1757** | 4256 | 4256, API Runtime: Application 1757 |\n| **APIRuntimeApplication1758** | 4257 | 4257, API Runtime: Application 1758 |\n| **APIRuntimeApplication1759** | 4258 | 4258, API Runtime: Application 1759 |\n| **APIRuntimeApplication1760** | 4259 | 4259, API Runtime: Application 1760 |\n| **APIRuntimeApplication1761** | 4260 | 4260, API Runtime: Application 1761 |\n| **APIRuntimeApplication1762** | 4261 | 4261, API Runtime: Application 1762 |\n| **APIRuntimeApplication1763** | 4262 | 4262, API Runtime: Application 1763 |\n| **APIRuntimeApplication1764** | 4263 | 4263, API Runtime: Application 1764 |\n| **APIRuntimeApplication1765** | 4264 | 4264, API Runtime: Application 1765 |\n| **APIRuntimeApplication1766** | 4265 | 4265, API Runtime: Application 1766 |\n| **APIRuntimeApplication1767** | 4266 | 4266, API Runtime: Application 1767 |\n| **APIRuntimeApplication1768** | 4267 | 4267, API Runtime: Application 1768 |\n| **APIRuntimeApplication1769** | 4268 | 4268, API Runtime: Application 1769 |\n| **APIRuntimeApplication1770** | 4269 | 4269, API Runtime: Application 1770 |\n| **APIRuntimeApplication1771** | 4270 | 4270, API Runtime: Application 1771 |\n| **APIRuntimeApplication1772** | 4271 | 4271, API Runtime: Application 1772 |\n| **APIRuntimeApplication1773** | 4272 | 4272, API Runtime: Application 1773 |\n| **APIRuntimeApplication1774** | 4273 | 4273, API Runtime: Application 1774 |\n| **APIRuntimeApplication1775** | 4274 | 4274, API Runtime: Application 1775 |\n| **APIRuntimeApplication1776** | 4275 | 4275, API Runtime: Application 1776 |\n| **APIRuntimeApplication1777** | 4276 | 4276, API Runtime: Application 1777 |\n| **APIRuntimeApplication1778** | 4277 | 4277, API Runtime: Application 1778 |\n| **APIRuntimeApplication1779** | 4278 | 4278, API Runtime: Application 1779 |\n| **APIRuntimeApplication1780** | 4279 | 4279, API Runtime: Application 1780 |\n| **APIRuntimeApplication1781** | 4280 | 4280, API Runtime: Application 1781 |\n| **APIRuntimeApplication1782** | 4281 | 4281, API Runtime: Application 1782 |\n| **APIRuntimeApplication1783** | 4282 | 4282, API Runtime: Application 1783 |\n| **APIRuntimeApplication1784** | 4283 | 4283, API Runtime: Application 1784 |\n| **APIRuntimeApplication1785** | 4284 | 4284, API Runtime: Application 1785 |\n| **APIRuntimeApplication1786** | 4285 | 4285, API Runtime: Application 1786 |\n| **APIRuntimeApplication1787** | 4286 | 4286, API Runtime: Application 1787 |\n| **APIRuntimeApplication1788** | 4287 | 4287, API Runtime: Application 1788 |\n| **APIRuntimeApplication1789** | 4288 | 4288, API Runtime: Application 1789 |\n| **APIRuntimeApplication1790** | 4289 | 4289, API Runtime: Application 1790 |\n| **APIRuntimeApplication1791** | 4290 | 4290, API Runtime: Application 1791 |\n| **APIRuntimeApplication1792** | 4291 | 4291, API Runtime: Application 1792 |\n| **APIRuntimeApplication1793** | 4292 | 4292, API Runtime: Application 1793 |\n| **APIRuntimeApplication1794** | 4293 | 4293, API Runtime: Application 1794 |\n| **APIRuntimeApplication1795** | 4294 | 4294, API Runtime: Application 1795 |\n| **APIRuntimeApplication1796** | 4295 | 4295, API Runtime: Application 1796 |\n| **APIRuntimeApplication1797** | 4296 | 4296, API Runtime: Application 1797 |\n| **APIRuntimeApplication1798** | 4297 | 4297, API Runtime: Application 1798 |\n| **APIRuntimeApplication1799** | 4298 | 4298, API Runtime: Application 1799 |\n| **APIRuntimeApplication1800** | 4299 | 4299, API Runtime: Application 1800 |\n| **APIRuntimeApplication1801** | 4300 | 4300, API Runtime: Application 1801 |\n| **APIRuntimeApplication1802** | 4301 | 4301, API Runtime: Application 1802 |\n| **APIRuntimeApplication1803** | 4302 | 4302, API Runtime: Application 1803 |\n| **APIRuntimeApplication1804** | 4303 | 4303, API Runtime: Application 1804 |\n| **APIRuntimeApplication1805** | 4304 | 4304, API Runtime: Application 1805 |\n| **APIRuntimeApplication1806** | 4305 | 4305, API Runtime: Application 1806 |\n| **APIRuntimeApplication1807** | 4306 | 4306, API Runtime: Application 1807 |\n| **APIRuntimeApplication1808** | 4307 | 4307, API Runtime: Application 1808 |\n| **APIRuntimeApplication1809** | 4308 | 4308, API Runtime: Application 1809 |\n| **APIRuntimeApplication1810** | 4309 | 4309, API Runtime: Application 1810 |\n| **APIRuntimeApplication1811** | 4310 | 4310, API Runtime: Application 1811 |\n| **APIRuntimeApplication1812** | 4311 | 4311, API Runtime: Application 1812 |\n| **APIRuntimeApplication1813** | 4312 | 4312, API Runtime: Application 1813 |\n| **APIRuntimeApplication1814** | 4313 | 4313, API Runtime: Application 1814 |\n| **APIRuntimeApplication1815** | 4314 | 4314, API Runtime: Application 1815 |\n| **APIRuntimeApplication1816** | 4315 | 4315, API Runtime: Application 1816 |\n| **APIRuntimeApplication1817** | 4316 | 4316, API Runtime: Application 1817 |\n| **APIRuntimeApplication1818** | 4317 | 4317, API Runtime: Application 1818 |\n| **APIRuntimeApplication1819** | 4318 | 4318, API Runtime: Application 1819 |\n| **APIRuntimeApplication1820** | 4319 | 4319, API Runtime: Application 1820 |\n| **APIRuntimeApplication1821** | 4320 | 4320, API Runtime: Application 1821 |\n| **APIRuntimeApplication1822** | 4321 | 4321, API Runtime: Application 1822 |\n| **APIRuntimeApplication1823** | 4322 | 4322, API Runtime: Application 1823 |\n| **APIRuntimeApplication1824** | 4323 | 4323, API Runtime: Application 1824 |\n| **APIRuntimeApplication1825** | 4324 | 4324, API Runtime: Application 1825 |\n| **APIRuntimeApplication1826** | 4325 | 4325, API Runtime: Application 1826 |\n| **APIRuntimeApplication1827** | 4326 | 4326, API Runtime: Application 1827 |\n| **APIRuntimeApplication1828** | 4327 | 4327, API Runtime: Application 1828 |\n| **APIRuntimeApplication1829** | 4328 | 4328, API Runtime: Application 1829 |\n| **APIRuntimeApplication1830** | 4329 | 4329, API Runtime: Application 1830 |\n| **APIRuntimeApplication1831** | 4330 | 4330, API Runtime: Application 1831 |\n| **APIRuntimeApplication1832** | 4331 | 4331, API Runtime: Application 1832 |\n| **APIRuntimeApplication1833** | 4332 | 4332, API Runtime: Application 1833 |\n| **APIRuntimeApplication1834** | 4333 | 4333, API Runtime: Application 1834 |\n| **APIRuntimeApplication1835** | 4334 | 4334, API Runtime: Application 1835 |\n| **APIRuntimeApplication1836** | 4335 | 4335, API Runtime: Application 1836 |\n| **APIRuntimeApplication1837** | 4336 | 4336, API Runtime: Application 1837 |\n| **APIRuntimeApplication1838** | 4337 | 4337, API Runtime: Application 1838 |\n| **APIRuntimeApplication1839** | 4338 | 4338, API Runtime: Application 1839 |\n| **APIRuntimeApplication1840** | 4339 | 4339, API Runtime: Application 1840 |\n| **APIRuntimeApplication1841** | 4340 | 4340, API Runtime: Application 1841 |\n| **APIRuntimeApplication1842** | 4341 | 4341, API Runtime: Application 1842 |\n| **APIRuntimeApplication1843** | 4342 | 4342, API Runtime: Application 1843 |\n| **APIRuntimeApplication1844** | 4343 | 4343, API Runtime: Application 1844 |\n| **APIRuntimeApplication1845** | 4344 | 4344, API Runtime: Application 1845 |\n| **APIRuntimeApplication1846** | 4345 | 4345, API Runtime: Application 1846 |\n| **APIRuntimeApplication1847** | 4346 | 4346, API Runtime: Application 1847 |\n| **APIRuntimeApplication1848** | 4347 | 4347, API Runtime: Application 1848 |\n| **APIRuntimeApplication1849** | 4348 | 4348, API Runtime: Application 1849 |\n| **APIRuntimeApplication1850** | 4349 | 4349, API Runtime: Application 1850 |\n| **APIRuntimeApplication1851** | 4350 | 4350, API Runtime: Application 1851 |\n| **APIRuntimeApplication1852** | 4351 | 4351, API Runtime: Application 1852 |\n| **APIRuntimeApplication1853** | 4352 | 4352, API Runtime: Application 1853 |\n| **APIRuntimeApplication1854** | 4353 | 4353, API Runtime: Application 1854 |\n| **APIRuntimeApplication1855** | 4354 | 4354, API Runtime: Application 1855 |\n| **APIRuntimeApplication1856** | 4355 | 4355, API Runtime: Application 1856 |\n| **APIRuntimeApplication1857** | 4356 | 4356, API Runtime: Application 1857 |\n| **APIRuntimeApplication1858** | 4357 | 4357, API Runtime: Application 1858 |\n| **APIRuntimeApplication1859** | 4358 | 4358, API Runtime: Application 1859 |\n| **APIRuntimeApplication1860** | 4359 | 4359, API Runtime: Application 1860 |\n| **APIRuntimeApplication1861** | 4360 | 4360, API Runtime: Application 1861 |\n| **APIRuntimeApplication1862** | 4361 | 4361, API Runtime: Application 1862 |\n| **APIRuntimeApplication1863** | 4362 | 4362, API Runtime: Application 1863 |\n| **APIRuntimeApplication1864** | 4363 | 4363, API Runtime: Application 1864 |\n| **APIRuntimeApplication1865** | 4364 | 4364, API Runtime: Application 1865 |\n| **APIRuntimeApplication1866** | 4365 | 4365, API Runtime: Application 1866 |\n| **APIRuntimeApplication1867** | 4366 | 4366, API Runtime: Application 1867 |\n| **APIRuntimeApplication1868** | 4367 | 4367, API Runtime: Application 1868 |\n| **APIRuntimeApplication1869** | 4368 | 4368, API Runtime: Application 1869 |\n| **APIRuntimeApplication1870** | 4369 | 4369, API Runtime: Application 1870 |\n| **APIRuntimeApplication1871** | 4370 | 4370, API Runtime: Application 1871 |\n| **APIRuntimeApplication1872** | 4371 | 4371, API Runtime: Application 1872 |\n| **APIRuntimeApplication1873** | 4372 | 4372, API Runtime: Application 1873 |\n| **APIRuntimeApplication1874** | 4373 | 4373, API Runtime: Application 1874 |\n| **APIRuntimeApplication1875** | 4374 | 4374, API Runtime: Application 1875 |\n| **APIRuntimeApplication1876** | 4375 | 4375, API Runtime: Application 1876 |\n| **APIRuntimeApplication1877** | 4376 | 4376, API Runtime: Application 1877 |\n| **APIRuntimeApplication1878** | 4377 | 4377, API Runtime: Application 1878 |\n| **APIRuntimeApplication1879** | 4378 | 4378, API Runtime: Application 1879 |\n| **APIRuntimeApplication1880** | 4379 | 4379, API Runtime: Application 1880 |\n| **APIRuntimeApplication1881** | 4380 | 4380, API Runtime: Application 1881 |\n| **APIRuntimeApplication1882** | 4381 | 4381, API Runtime: Application 1882 |\n| **APIRuntimeApplication1883** | 4382 | 4382, API Runtime: Application 1883 |\n| **APIRuntimeApplication1884** | 4383 | 4383, API Runtime: Application 1884 |\n| **APIRuntimeApplication1885** | 4384 | 4384, API Runtime: Application 1885 |\n| **APIRuntimeApplication1886** | 4385 | 4385, API Runtime: Application 1886 |\n| **APIRuntimeApplication1887** | 4386 | 4386, API Runtime: Application 1887 |\n| **APIRuntimeApplication1888** | 4387 | 4387, API Runtime: Application 1888 |\n| **APIRuntimeApplication1889** | 4388 | 4388, API Runtime: Application 1889 |\n| **APIRuntimeApplication1890** | 4389 | 4389, API Runtime: Application 1890 |\n| **APIRuntimeApplication1891** | 4390 | 4390, API Runtime: Application 1891 |\n| **APIRuntimeApplication1892** | 4391 | 4391, API Runtime: Application 1892 |\n| **APIRuntimeApplication1893** | 4392 | 4392, API Runtime: Application 1893 |\n| **APIRuntimeApplication1894** | 4393 | 4393, API Runtime: Application 1894 |\n| **APIRuntimeApplication1895** | 4394 | 4394, API Runtime: Application 1895 |\n| **APIRuntimeApplication1896** | 4395 | 4395, API Runtime: Application 1896 |\n| **APIRuntimeApplication1897** | 4396 | 4396, API Runtime: Application 1897 |\n| **APIRuntimeApplication1898** | 4397 | 4397, API Runtime: Application 1898 |\n| **APIRuntimeApplication1899** | 4398 | 4398, API Runtime: Application 1899 |\n| **APIRuntimeApplication1900** | 4399 | 4399, API Runtime: Application 1900 |\n| **APIRuntimeApplication1901** | 4400 | 4400, API Runtime: Application 1901 |\n| **APIRuntimeApplication1902** | 4401 | 4401, API Runtime: Application 1902 |\n| **APIRuntimeApplication1903** | 4402 | 4402, API Runtime: Application 1903 |\n| **APIRuntimeApplication1904** | 4403 | 4403, API Runtime: Application 1904 |\n| **APIRuntimeApplication1905** | 4404 | 4404, API Runtime: Application 1905 |\n| **APIRuntimeApplication1906** | 4405 | 4405, API Runtime: Application 1906 |\n| **APIRuntimeApplication1907** | 4406 | 4406, API Runtime: Application 1907 |\n| **APIRuntimeApplication1908** | 4407 | 4407, API Runtime: Application 1908 |\n| **APIRuntimeApplication1909** | 4408 | 4408, API Runtime: Application 1909 |\n| **APIRuntimeApplication1910** | 4409 | 4409, API Runtime: Application 1910 |\n| **APIRuntimeApplication1911** | 4410 | 4410, API Runtime: Application 1911 |\n| **APIRuntimeApplication1912** | 4411 | 4411, API Runtime: Application 1912 |\n| **APIRuntimeApplication1913** | 4412 | 4412, API Runtime: Application 1913 |\n| **APIRuntimeApplication1914** | 4413 | 4413, API Runtime: Application 1914 |\n| **APIRuntimeApplication1915** | 4414 | 4414, API Runtime: Application 1915 |\n| **APIRuntimeApplication1916** | 4415 | 4415, API Runtime: Application 1916 |\n| **APIRuntimeApplication1917** | 4416 | 4416, API Runtime: Application 1917 |\n| **APIRuntimeApplication1918** | 4417 | 4417, API Runtime: Application 1918 |\n| **APIRuntimeApplication1919** | 4418 | 4418, API Runtime: Application 1919 |\n| **APIRuntimeApplication1920** | 4419 | 4419, API Runtime: Application 1920 |\n| **APIRuntimeApplication1921** | 4420 | 4420, API Runtime: Application 1921 |\n| **APIRuntimeApplication1922** | 4421 | 4421, API Runtime: Application 1922 |\n| **APIRuntimeApplication1923** | 4422 | 4422, API Runtime: Application 1923 |\n| **APIRuntimeApplication1924** | 4423 | 4423, API Runtime: Application 1924 |\n| **APIRuntimeApplication1925** | 4424 | 4424, API Runtime: Application 1925 |\n| **APIRuntimeApplication1926** | 4425 | 4425, API Runtime: Application 1926 |\n| **APIRuntimeApplication1927** | 4426 | 4426, API Runtime: Application 1927 |\n| **APIRuntimeApplication1928** | 4427 | 4427, API Runtime: Application 1928 |\n| **APIRuntimeApplication1929** | 4428 | 4428, API Runtime: Application 1929 |\n| **APIRuntimeApplication1930** | 4429 | 4429, API Runtime: Application 1930 |\n| **APIRuntimeApplication1931** | 4430 | 4430, API Runtime: Application 1931 |\n| **APIRuntimeApplication1932** | 4431 | 4431, API Runtime: Application 1932 |\n| **APIRuntimeApplication1933** | 4432 | 4432, API Runtime: Application 1933 |\n| **APIRuntimeApplication1934** | 4433 | 4433, API Runtime: Application 1934 |\n| **APIRuntimeApplication1935** | 4434 | 4434, API Runtime: Application 1935 |\n| **APIRuntimeApplication1936** | 4435 | 4435, API Runtime: Application 1936 |\n| **APIRuntimeApplication1937** | 4436 | 4436, API Runtime: Application 1937 |\n| **APIRuntimeApplication1938** | 4437 | 4437, API Runtime: Application 1938 |\n| **APIRuntimeApplication1939** | 4438 | 4438, API Runtime: Application 1939 |\n| **APIRuntimeApplication1940** | 4439 | 4439, API Runtime: Application 1940 |\n| **APIRuntimeApplication1941** | 4440 | 4440, API Runtime: Application 1941 |\n| **APIRuntimeApplication1942** | 4441 | 4441, API Runtime: Application 1942 |\n| **APIRuntimeApplication1943** | 4442 | 4442, API Runtime: Application 1943 |\n| **APIRuntimeApplication1944** | 4443 | 4443, API Runtime: Application 1944 |\n| **APIRuntimeApplication1945** | 4444 | 4444, API Runtime: Application 1945 |\n| **APIRuntimeApplication1946** | 4445 | 4445, API Runtime: Application 1946 |\n| **APIRuntimeApplication1947** | 4446 | 4446, API Runtime: Application 1947 |\n| **APIRuntimeApplication1948** | 4447 | 4447, API Runtime: Application 1948 |\n| **APIRuntimeApplication1949** | 4448 | 4448, API Runtime: Application 1949 |\n| **APIRuntimeApplication1950** | 4449 | 4449, API Runtime: Application 1950 |\n| **APIRuntimeApplication1951** | 4450 | 4450, API Runtime: Application 1951 |\n| **APIRuntimeApplication1952** | 4451 | 4451, API Runtime: Application 1952 |\n| **APIRuntimeApplication1953** | 4452 | 4452, API Runtime: Application 1953 |\n| **APIRuntimeApplication1954** | 4453 | 4453, API Runtime: Application 1954 |\n| **APIRuntimeApplication1955** | 4454 | 4454, API Runtime: Application 1955 |\n| **APIRuntimeApplication1956** | 4455 | 4455, API Runtime: Application 1956 |\n| **APIRuntimeApplication1957** | 4456 | 4456, API Runtime: Application 1957 |\n| **APIRuntimeApplication1958** | 4457 | 4457, API Runtime: Application 1958 |\n| **APIRuntimeApplication1959** | 4458 | 4458, API Runtime: Application 1959 |\n| **APIRuntimeApplication1960** | 4459 | 4459, API Runtime: Application 1960 |\n| **APIRuntimeApplication1961** | 4460 | 4460, API Runtime: Application 1961 |\n| **APIRuntimeApplication1962** | 4461 | 4461, API Runtime: Application 1962 |\n| **APIRuntimeApplication1963** | 4462 | 4462, API Runtime: Application 1963 |\n| **APIRuntimeApplication1964** | 4463 | 4463, API Runtime: Application 1964 |\n| **APIRuntimeApplication1965** | 4464 | 4464, API Runtime: Application 1965 |\n| **APIRuntimeApplication1966** | 4465 | 4465, API Runtime: Application 1966 |\n| **APIRuntimeApplication1967** | 4466 | 4466, API Runtime: Application 1967 |\n| **APIRuntimeApplication1968** | 4467 | 4467, API Runtime: Application 1968 |\n| **APIRuntimeApplication1969** | 4468 | 4468, API Runtime: Application 1969 |\n| **APIRuntimeApplication1970** | 4469 | 4469, API Runtime: Application 1970 |\n| **APIRuntimeApplication1971** | 4470 | 4470, API Runtime: Application 1971 |\n| **APIRuntimeApplication1972** | 4471 | 4471, API Runtime: Application 1972 |\n| **APIRuntimeApplication1973** | 4472 | 4472, API Runtime: Application 1973 |\n| **APIRuntimeApplication1974** | 4473 | 4473, API Runtime: Application 1974 |\n| **APIRuntimeApplication1975** | 4474 | 4474, API Runtime: Application 1975 |\n| **APIRuntimeApplication1976** | 4475 | 4475, API Runtime: Application 1976 |\n| **APIRuntimeApplication1977** | 4476 | 4476, API Runtime: Application 1977 |\n| **APIRuntimeApplication1978** | 4477 | 4477, API Runtime: Application 1978 |\n| **APIRuntimeApplication1979** | 4478 | 4478, API Runtime: Application 1979 |\n| **APIRuntimeApplication1980** | 4479 | 4479, API Runtime: Application 1980 |\n| **APIRuntimeApplication1981** | 4480 | 4480, API Runtime: Application 1981 |\n| **APIRuntimeApplication1982** | 4481 | 4481, API Runtime: Application 1982 |\n| **APIRuntimeApplication1983** | 4482 | 4482, API Runtime: Application 1983 |\n| **APIRuntimeApplication1984** | 4483 | 4483, API Runtime: Application 1984 |\n| **APIRuntimeApplication1985** | 4484 | 4484, API Runtime: Application 1985 |\n| **APIRuntimeApplication1986** | 4485 | 4485, API Runtime: Application 1986 |\n| **APIRuntimeApplication1987** | 4486 | 4486, API Runtime: Application 1987 |\n| **APIRuntimeApplication1988** | 4487 | 4487, API Runtime: Application 1988 |\n| **APIRuntimeApplication1989** | 4488 | 4488, API Runtime: Application 1989 |\n| **APIRuntimeApplication1990** | 4489 | 4489, API Runtime: Application 1990 |\n| **APIRuntimeApplication1991** | 4490 | 4490, API Runtime: Application 1991 |\n| **APIRuntimeApplication1992** | 4491 | 4491, API Runtime: Application 1992 |\n| **APIRuntimeApplication1993** | 4492 | 4492, API Runtime: Application 1993 |\n| **APIRuntimeApplication1994** | 4493 | 4493, API Runtime: Application 1994 |\n| **APIRuntimeApplication1995** | 4494 | 4494, API Runtime: Application 1995 |\n| **APIRuntimeApplication1996** | 4495 | 4495, API Runtime: Application 1996 |\n| **APIRuntimeApplication1997** | 4496 | 4496, API Runtime: Application 1997 |\n| **APIRuntimeApplication1998** | 4497 | 4497, API Runtime: Application 1998 |\n| **APIRuntimeApplication1999** | 4498 | 4498, API Runtime: Application 1999 |\n| **APIRuntimeApplication2000** | 4499 | 4499, API Runtime: Application 2000 |\n| **AutodeskVaultInterface** | 747 | 747, Eplan Autodesk Vault Interface |\n| **AutomaticProcessing** | 382 | 382, Automatic processing |\n| **AutomationML** | 1417 | 1417, Eplan AutomationML |\n| **BusConfigurationExport** | 727 | 727, Bus configuration export |\n| **BusConfigurationExportAMLForClassroom** | 1968 | 1968, Bus configuration export AML for Classroom |\n| **BusConfigurationInterface** | 726 | 726, Bus configuration interface |\n| **Cabling** | 393 | 393, Eplan FieldSys |\n| **ChangeOfStandard** | 721 | 721, Eplan Change of standard |\n| **Classroom** | 657 | 657, Eplan Classroom License |\n| **CogineerBuilder** | 1450 | 1450, Eplan Cogineer Builder |\n| **CogineerBuilderAdvanced** | 1659 | 1659, Eplan Cogineer Builder Advanced |\n| **CogineerDesigner** | 1449 | 1449, Eplan Cogineer Designer |\n| **CogineerDesignerAdvanced** | 1658 | 1658, Eplan Cogineer Designer Advanced |\n| **CogineerSilentMode** | 1660 | 1660, Eplan Cogineer Silent Mode |\n| **CommandLineActions** | 979 | 979, EEC - Scripting Extensions |\n| **Comments** | 4659 | 4659, Eplan Comments |\n| **CopyPages** | 378 | 378, Copy pages |\n| **CPM** | 786 | 786, Eplan CPM, Eplan LPM |\n| **CreateAndCopyProjects** | 377 | 377, Create and copy projects |\n| **CreoCablingInterface** | 749 | 749, Eplan CreoCablingInterface |\n| **DataImport** | 791 | 791, Data import |\n| **DataPortal** | 1223 | 1223, Eplan Data Portal |\n| **DataPortalProf** | 1225 | 1225, Eplan Data Portal Professional |\n| **DSHplusIntegration** | 746 | 746, Eplan DSHplus Integration |\n| **DXF\\_DWGExport** | 729 | 729, DXF / DWG export |\n| **DXF\\_DWGImport** | 730 | 730, DXF / DWG import |\n| **EADNApplication0001** | 2000 | 2000, EADN: Application 0001 |\n| **EADNApplication0002** | 2001 | 2001, EADN: Application 0002 |\n| **EADNApplication0003** | 2002 | 2002, EADN: Application 0003 |\n| **EADNApplication0004** | 2003 | 2003, EADN: Application 0004 |\n| **EADNApplication0005** | 2004 | 2004, EADN: Application 0005 |\n| **EADNApplication0006** | 2005 | 2005, EADN: Application 0006 |\n| **EADNApplication0007** | 2006 | 2006, EADN: Application 0007 |\n| **EADNApplication0008** | 2007 | 2007, EADN: Application 0008 |\n| **EADNApplication0009** | 2008 | 2008, EADN: Application 0009 |\n| **EADNApplication0010** | 2009 | 2009, EADN: Application 0010 |\n| **EADNApplication0011** | 2010 | 2010, EADN: Application 0011 |\n| **EADNApplication0012** | 2011 | 2011, EADN: Application 0012 |\n| **EADNApplication0013** | 2012 | 2012, EADN: Application 0013 |\n| **EADNApplication0014** | 2013 | 2013, EADN: Application 0014 |\n| **EADNApplication0015** | 2014 | 2014, EADN: Application 0015 |\n| **EADNApplication0016** | 2015 | 2015, EADN: Application 0016 |\n| **EADNApplication0017** | 2016 | 2016, EADN: Application 0017 |\n| **EADNApplication0018** | 2017 | 2017, EADN: Application 0018 |\n| **EADNApplication0019** | 2018 | 2018, EADN: Application 0019 |\n| **EADNApplication0020** | 2019 | 2019, EADN: Application 0020 |\n| **EADNApplication0021** | 2020 | 2020, EADN: Application 0021 |\n| **EADNApplication0022** | 2021 | 2021, EADN: Application 0022 |\n| **EADNApplication0023** | 2022 | 2022, EADN: Application 0023 |\n| **EADNApplication0024** | 2023 | 2023, EADN: Application 0024 |\n| **EADNApplication0025** | 2024 | 2024, EADN: Application 0025 |\n| **EADNApplication0026** | 2025 | 2025, EADN: Application 0026 |\n| **EADNApplication0027** | 2026 | 2026, EADN: Application 0027 |\n| **EADNApplication0028** | 2027 | 2027, EADN: Application 0028 |\n| **EADNApplication0029** | 2028 | 2028, EADN: Application 0029 |\n| **EADNApplication0030** | 2029 | 2029, EADN: Application 0030 |\n| **EADNApplication0031** | 2030 | 2030, EADN: Application 0031 |\n| **EADNApplication0032** | 2031 | 2031, EADN: Application 0032 |\n| **EADNApplication0033** | 2032 | 2032, EADN: Application 0033 |\n| **EADNApplication0034** | 2033 | 2033, EADN: Application 0034 |\n| **EADNApplication0035** | 2034 | 2034, EADN: Application 0035 |\n| **EADNApplication0036** | 2035 | 2035, EADN: Application 0036 |\n| **EADNApplication0037** | 2036 | 2036, EADN: Application 0037 |\n| **EADNApplication0038** | 2037 | 2037, EADN: Application 0038 |\n| **EADNApplication0039** | 2038 | 2038, EADN: Application 0039 |\n| **EADNApplication0040** | 2039 | 2039, EADN: Application 0040 |\n| **EADNApplication0041** | 2040 | 2040, EADN: Application 0041 |\n| **EADNApplication0042** | 2041 | 2041, EADN: Application 0042 |\n| **EADNApplication0043** | 2042 | 2042, EADN: Application 0043 |\n| **EADNApplication0044** | 2043 | 2043, EADN: Application 0044 |\n| **EADNApplication0045** | 2044 | 2044, EADN: Application 0045 |\n| **EADNApplication0046** | 2045 | 2045, EADN: Application 0046 |\n| **EADNApplication0047** | 2046 | 2046, EADN: Application 0047 |\n| **EADNApplication0048** | 2047 | 2047, EADN: Application 0048 |\n| **EADNApplication0049** | 2048 | 2048, EADN: Application 0049 |\n| **EADNApplication0050** | 2049 | 2049, EADN: Application 0050 |\n| **EADNApplication0051** | 2050 | 2050, EADN: Application 0051 |\n| **EADNApplication0052** | 2051 | 2051, EADN: Application 0052 |\n| **EADNApplication0053** | 2052 | 2052, EADN: Application 0053 |\n| **EADNApplication0054** | 2053 | 2053, EADN: Application 0054 |\n| **EADNApplication0055** | 2054 | 2054, EADN: Application 0055 |\n| **EADNApplication0056** | 2055 | 2055, EADN: Application 0056 |\n| **EADNApplication0057** | 2056 | 2056, EADN: Application 0057 |\n| **EADNApplication0058** | 2057 | 2057, EADN: Application 0058 |\n| **EADNApplication0059** | 2058 | 2058, EADN: Application 0059 |\n| **EADNApplication0060** | 2059 | 2059, EADN: Application 0060 |\n| **EADNApplication0061** | 2060 | 2060, EADN: Application 0061 |\n| **EADNApplication0062** | 2061 | 2061, EADN: Application 0062 |\n| **EADNApplication0063** | 2062 | 2062, EADN: Application 0063 |\n| **EADNApplication0064** | 2063 | 2063, EADN: Application 0064 |\n| **EADNApplication0065** | 2064 | 2064, EADN: Application 0065 |\n| **EADNApplication0066** | 2065 | 2065, EADN: Application 0066 |\n| **EADNApplication0067** | 2066 | 2066, EADN: Application 0067 |\n| **EADNApplication0068** | 2067 | 2067, EADN: Application 0068 |\n| **EADNApplication0069** | 2068 | 2068, EADN: Application 0069 |\n| **EADNApplication0070** | 2069 | 2069, EADN: Application 0070 |\n| **EADNApplication0071** | 2070 | 2070, EADN: Application 0071 |\n| **EADNApplication0072** | 2071 | 2071, EADN: Application 0072 |\n| **EADNApplication0073** | 2072 | 2072, EADN: Application 0073 |\n| **EADNApplication0074** | 2073 | 2073, EADN: Application 0074 |\n| **EADNApplication0075** | 2074 | 2074, EADN: Application 0075 |\n| **EADNApplication0076** | 2075 | 2075, EADN: Application 0076 |\n| **EADNApplication0077** | 2076 | 2076, EADN: Application 0077 |\n| **EADNApplication0078** | 2077 | 2077, EADN: Application 0078 |\n| **EADNApplication0079** | 2078 | 2078, EADN: Application 0079 |\n| **EADNApplication0080** | 2079 | 2079, EADN: Application 0080 |\n| **EADNApplication0081** | 2080 | 2080, EADN: Application 0081 |\n| **EADNApplication0082** | 2081 | 2081, EADN: Application 0082 |\n| **EADNApplication0083** | 2082 | 2082, EADN: Application 0083 |\n| **EADNApplication0084** | 2083 | 2083, EADN: Application 0084 |\n| **EADNApplication0085** | 2084 | 2084, EADN: Application 0085 |\n| **EADNApplication0086** | 2085 | 2085, EADN: Application 0086 |\n| **EADNApplication0087** | 2086 | 2086, EADN: Application 0087 |\n| **EADNApplication0088** | 2087 | 2087, EADN: Application 0088 |\n| **EADNApplication0089** | 2088 | 2088, EADN: Application 0089 |\n| **EADNApplication0090** | 2089 | 2089, EADN: Application 0090 |\n| **EADNApplication0091** | 2090 | 2090, EADN: Application 0091 |\n| **EADNApplication0092** | 2091 | 2091, EADN: Application 0092 |\n| **EADNApplication0093** | 2092 | 2092, EADN: Application 0093 |\n| **EADNApplication0094** | 2093 | 2093, EADN: Application 0094 |\n| **EADNApplication0095** | 2094 | 2094, EADN: Application 0095 |\n| **EADNApplication0096** | 2095 | 2095, EADN: Application 0096 |\n| **EADNApplication0097** | 2096 | 2096, EADN: Application 0097 |\n| **EADNApplication0098** | 2097 | 2097, EADN: Application 0098 |\n| **EADNApplication0099** | 2098 | 2098, EADN: Application 0099 |\n| **EADNApplication0100** | 2099 | 2099, EADN: Application 0100 |\n| **EADNApplication0101** | 2100 | 2100, EADN: Application 0101 |\n| **EADNApplication0102** | 2101 | 2101, EADN: Application 0102 |\n| **EADNApplication0103** | 2102 | 2102, EADN: Application 0103 |\n| **EADNApplication0104** | 2103 | 2103, EADN: Application 0104 |\n| **EADNApplication0105** | 2104 | 2104, EADN: Application 0105 |\n| **EADNApplication0106** | 2105 | 2105, EADN: Application 0106 |\n| **EADNApplication0107** | 2106 | 2106, EADN: Application 0107 |\n| **EADNApplication0108** | 2107 | 2107, EADN: Application 0108 |\n| **EADNApplication0109** | 2108 | 2108, EADN: Application 0109 |\n| **EADNApplication0110** | 2109 | 2109, EADN: Application 0110 |\n| **EADNApplication0111** | 2110 | 2110, EADN: Application 0111 |\n| **EADNApplication0112** | 2111 | 2111, EADN: Application 0112 |\n| **EADNApplication0113** | 2112 | 2112, EADN: Application 0113 |\n| **EADNApplication0114** | 2113 | 2113, EADN: Application 0114 |\n| **EADNApplication0115** | 2114 | 2114, EADN: Application 0115 |\n| **EADNApplication0116** | 2115 | 2115, EADN: Application 0116 |\n| **EADNApplication0117** | 2116 | 2116, EADN: Application 0117 |\n| **EADNApplication0118** | 2117 | 2117, EADN: Application 0118 |\n| **EADNApplication0119** | 2118 | 2118, EADN: Application 0119 |\n| **EADNApplication0120** | 2119 | 2119, EADN: Application 0120 |\n| **EADNApplication0121** | 2120 | 2120, EADN: Application 0121 |\n| **EADNApplication0122** | 2121 | 2121, EADN: Application 0122 |\n| **EADNApplication0123** | 2122 | 2122, EADN: Application 0123 |\n| **EADNApplication0124** | 2123 | 2123, EADN: Application 0124 |\n| **EADNApplication0125** | 2124 | 2124, EADN: Application 0125 |\n| **EADNApplication0126** | 2125 | 2125, EADN: Application 0126 |\n| **EADNApplication0127** | 2126 | 2126, EADN: Application 0127 |\n| **EADNApplication0128** | 2127 | 2127, EADN: Application 0128 |\n| **EADNApplication0129** | 2128 | 2128, EADN: Application 0129 |\n| **EADNApplication0130** | 2129 | 2129, EADN: Application 0130 |\n| **EADNApplication0131** | 2130 | 2130, EADN: Application 0131 |\n| **EADNApplication0132** | 2131 | 2131, EADN: Application 0132 |\n| **EADNApplication0133** | 2132 | 2132, EADN: Application 0133 |\n| **EADNApplication0134** | 2133 | 2133, EADN: Application 0134 |\n| **EADNApplication0135** | 2134 | 2134, EADN: Application 0135 |\n| **EADNApplication0136** | 2135 | 2135, EADN: Application 0136 |\n| **EADNApplication0137** | 2136 | 2136, EADN: Application 0137 |\n| **EADNApplication0138** | 2137 | 2137, EADN: Application 0138 |\n| **EADNApplication0139** | 2138 | 2138, EADN: Application 0139 |\n| **EADNApplication0140** | 2139 | 2139, EADN: Application 0140 |\n| **EADNApplication0141** | 2140 | 2140, EADN: Application 0141 |\n| **EADNApplication0142** | 2141 | 2141, EADN: Application 0142 |\n| **EADNApplication0143** | 2142 | 2142, EADN: Application 0143 |\n| **EADNApplication0144** | 2143 | 2143, EADN: Application 0144 |\n| **EADNApplication0145** | 2144 | 2144, EADN: Application 0145 |\n| **EADNApplication0146** | 2145 | 2145, EADN: Application 0146 |\n| **EADNApplication0147** | 2146 | 2146, EADN: Application 0147 |\n| **EADNApplication0148** | 2147 | 2147, EADN: Application 0148 |\n| **EADNApplication0149** | 2148 | 2148, EADN: Application 0149 |\n| **EADNApplication0150** | 2149 | 2149, EADN: Application 0150 |\n| **EADNApplication0151** | 2150 | 2150, EADN: Application 0151 |\n| **EADNApplication0152** | 2151 | 2151, EADN: Application 0152 |\n| **EADNApplication0153** | 2152 | 2152, EADN: Application 0153 |\n| **EADNApplication0154** | 2153 | 2153, EADN: Application 0154 |\n| **EADNApplication0155** | 2154 | 2154, EADN: Application 0155 |\n| **EADNApplication0156** | 2155 | 2155, EADN: Application 0156 |\n| **EADNApplication0157** | 2156 | 2156, EADN: Application 0157 |\n| **EADNApplication0158** | 2157 | 2157, EADN: Application 0158 |\n| **EADNApplication0159** | 2158 | 2158, EADN: Application 0159 |\n| **EADNApplication0160** | 2159 | 2159, EADN: Application 0160 |\n| **EADNApplication0161** | 2160 | 2160, EADN: Application 0161 |\n| **EADNApplication0162** | 2161 | 2161, EADN: Application 0162 |\n| **EADNApplication0163** | 2162 | 2162, EADN: Application 0163 |\n| **EADNApplication0164** | 2163 | 2163, EADN: Application 0164 |\n| **EADNApplication0165** | 2164 | 2164, EADN: Application 0165 |\n| **EADNApplication0166** | 2165 | 2165, EADN: Application 0166 |\n| **EADNApplication0167** | 2166 | 2166, EADN: Application 0167 |\n| **EADNApplication0168** | 2167 | 2167, EADN: Application 0168 |\n| **EADNApplication0169** | 2168 | 2168, EADN: Application 0169 |\n| **EADNApplication0170** | 2169 | 2169, EADN: Application 0170 |\n| **EADNApplication0171** | 2170 | 2170, EADN: Application 0171 |\n| **EADNApplication0172** | 2171 | 2171, EADN: Application 0172 |\n| **EADNApplication0173** | 2172 | 2172, EADN: Application 0173 |\n| **EADNApplication0174** | 2173 | 2173, EADN: Application 0174 |\n| **EADNApplication0175** | 2174 | 2174, EADN: Application 0175 |\n| **EADNApplication0176** | 2175 | 2175, EADN: Application 0176 |\n| **EADNApplication0177** | 2176 | 2176, EADN: Application 0177 |\n| **EADNApplication0178** | 2177 | 2177, EADN: Application 0178 |\n| **EADNApplication0179** | 2178 | 2178, EADN: Application 0179 |\n| **EADNApplication0180** | 2179 | 2179, EADN: Application 0180 |\n| **EADNApplication0181** | 2180 | 2180, EADN: Application 0181 |\n| **EADNApplication0182** | 2181 | 2181, EADN: Application 0182 |\n| **EADNApplication0183** | 2182 | 2182, EADN: Application 0183 |\n| **EADNApplication0184** | 2183 | 2183, EADN: Application 0184 |\n| **EADNApplication0185** | 2184 | 2184, EADN: Application 0185 |\n| **EADNApplication0186** | 2185 | 2185, EADN: Application 0186 |\n| **EADNApplication0187** | 2186 | 2186, EADN: Application 0187 |\n| **EADNApplication0188** | 2187 | 2187, EADN: Application 0188 |\n| **EADNApplication0189** | 2188 | 2188, EADN: Application 0189 |\n| **EADNApplication0190** | 2189 | 2189, EADN: Application 0190 |\n| **EADNApplication0191** | 2190 | 2190, EADN: Application 0191 |\n| **EADNApplication0192** | 2191 | 2191, EADN: Application 0192 |\n| **EADNApplication0193** | 2192 | 2192, EADN: Application 0193 |\n| **EADNApplication0194** | 2193 | 2193, EADN: Application 0194 |\n| **EADNApplication0195** | 2194 | 2194, EADN: Application 0195 |\n| **EADNApplication0196** | 2195 | 2195, EADN: Application 0196 |\n| **EADNApplication0197** | 2196 | 2196, EADN: Application 0197 |\n| **EADNApplication0198** | 2197 | 2197, EADN: Application 0198 |\n| **EADNApplication0199** | 2198 | 2198, EADN: Application 0199 |\n| **EADNApplication0200** | 2199 | 2199, EADN: Application 0200 |\n| **EADNApplication0201** | 2200 | 2200, EADN: Application 0201 |\n| **EADNApplication0202** | 2201 | 2201, EADN: Application 0202 |\n| **EADNApplication0203** | 2202 | 2202, EADN: Application 0203 |\n| **EADNApplication0204** | 2203 | 2203, EADN: Application 0204 |\n| **EADNApplication0205** | 2204 | 2204, EADN: Application 0205 |\n| **EADNApplication0206** | 2205 | 2205, EADN: Application 0206 |\n| **EADNApplication0207** | 2206 | 2206, EADN: Application 0207 |\n| **EADNApplication0208** | 2207 | 2207, EADN: Application 0208 |\n| **EADNApplication0209** | 2208 | 2208, EADN: Application 0209 |\n| **EADNApplication0210** | 2209 | 2209, EADN: Application 0210 |\n| **EADNApplication0211** | 2210 | 2210, EADN: Application 0211 |\n| **EADNApplication0212** | 2211 | 2211, EADN: Application 0212 |\n| **EADNApplication0213** | 2212 | 2212, EADN: Application 0213 |\n| **EADNApplication0214** | 2213 | 2213, EADN: Application 0214 |\n| **EADNApplication0215** | 2214 | 2214, EADN: Application 0215 |\n| **EADNApplication0216** | 2215 | 2215, EADN: Application 0216 |\n| **EADNApplication0217** | 2216 | 2216, EADN: Application 0217 |\n| **EADNApplication0218** | 2217 | 2217, EADN: Application 0218 |\n| **EADNApplication0219** | 2218 | 2218, EADN: Application 0219 |\n| **EADNApplication0220** | 2219 | 2219, EADN: Application 0220 |\n| **EADNApplication0221** | 2220 | 2220, EADN: Application 0221 |\n| **EADNApplication0222** | 2221 | 2221, EADN: Application 0222 |\n| **EADNApplication0223** | 2222 | 2222, EADN: Application 0223 |\n| **EADNApplication0224** | 2223 | 2223, EADN: Application 0224 |\n| **EADNApplication0225** | 2224 | 2224, EADN: Application 0225 |\n| **EADNApplication0226** | 2225 | 2225, EADN: Application 0226 |\n| **EADNApplication0227** | 2226 | 2226, EADN: Application 0227 |\n| **EADNApplication0228** | 2227 | 2227, EADN: Application 0228 |\n| **EADNApplication0229** | 2228 | 2228, EADN: Application 0229 |\n| **EADNApplication0230** | 2229 | 2229, EADN: Application 0230 |\n| **EADNApplication0231** | 2230 | 2230, EADN: Application 0231 |\n| **EADNApplication0232** | 2231 | 2231, EADN: Application 0232 |\n| **EADNApplication0233** | 2232 | 2232, EADN: Application 0233 |\n| **EADNApplication0234** | 2233 | 2233, EADN: Application 0234 |\n| **EADNApplication0235** | 2234 | 2234, EADN: Application 0235 |\n| **EADNApplication0236** | 2235 | 2235, EADN: Application 0236 |\n| **EADNApplication0237** | 2236 | 2236, EADN: Application 0237 |\n| **EADNApplication0238** | 2237 | 2237, EADN: Application 0238 |\n| **EADNApplication0239** | 2238 | 2238, EADN: Application 0239 |\n| **EADNApplication0240** | 2239 | 2239, EADN: Application 0240 |\n| **EADNApplication0241** | 2240 | 2240, EADN: Application 0241 |\n| **EADNApplication0242** | 2241 | 2241, EADN: Application 0242 |\n| **EADNApplication0243** | 2242 | 2242, EADN: Application 0243 |\n| **EADNApplication0244** | 2243 | 2243, EADN: Application 0244 |\n| **EADNApplication0245** | 2244 | 2244, EADN: Application 0245 |\n| **EADNApplication0246** | 2245 | 2245, EADN: Application 0246 |\n| **EADNApplication0247** | 2246 | 2246, EADN: Application 0247 |\n| **EADNApplication0248** | 2247 | 2247, EADN: Application 0248 |\n| **EADNApplication0249** | 2248 | 2248, EADN: Application 0249 |\n| **EADNApplication0250** | 2249 | 2249, EADN: Application 0250 |\n| **EADNApplication0251** | 2250 | 2250, EADN: Application 0251 |\n| **EADNApplication0252** | 2251 | 2251, EADN: Application 0252 |\n| **EADNApplication0253** | 2252 | 2252, EADN: Application 0253 |\n| **EADNApplication0254** | 2253 | 2253, EADN: Application 0254 |\n| **EADNApplication0255** | 2254 | 2254, EADN: Application 0255 |\n| **EADNApplication0256** | 2255 | 2255, EADN: Application 0256 |\n| **EADNApplication0257** | 2256 | 2256, EADN: Application 0257 |\n| **EADNApplication0258** | 2257 | 2257, EADN: Application 0258 |\n| **EADNApplication0259** | 2258 | 2258, EADN: Application 0259 |\n| **EADNApplication0260** | 2259 | 2259, EADN: Application 0260 |\n| **EADNApplication0261** | 2260 | 2260, EADN: Application 0261 |\n| **EADNApplication0262** | 2261 | 2261, EADN: Application 0262 |\n| **EADNApplication0263** | 2262 | 2262, EADN: Application 0263 |\n| **EADNApplication0264** | 2263 | 2263, EADN: Application 0264 |\n| **EADNApplication0265** | 2264 | 2264, EADN: Application 0265 |\n| **EADNApplication0266** | 2265 | 2265, EADN: Application 0266 |\n| **EADNApplication0267** | 2266 | 2266, EADN: Application 0267 |\n| **EADNApplication0268** | 2267 | 2267, EADN: Application 0268 |\n| **EADNApplication0269** | 2268 | 2268, EADN: Application 0269 |\n| **EADNApplication0270** | 2269 | 2269, EADN: Application 0270 |\n| **EADNApplication0271** | 2270 | 2270, EADN: Application 0271 |\n| **EADNApplication0272** | 2271 | 2271, EADN: Application 0272 |\n| **EADNApplication0273** | 2272 | 2272, EADN: Application 0273 |\n| **EADNApplication0274** | 2273 | 2273, EADN: Application 0274 |\n| **EADNApplication0275** | 2274 | 2274, EADN: Application 0275 |\n| **EADNApplication0276** | 2275 | 2275, EADN: Application 0276 |\n| **EADNApplication0277** | 2276 | 2276, EADN: Application 0277 |\n| **EADNApplication0278** | 2277 | 2277, EADN: Application 0278 |\n| **EADNApplication0279** | 2278 | 2278, EADN: Application 0279 |\n| **EADNApplication0280** | 2279 | 2279, EADN: Application 0280 |\n| **EADNApplication0281** | 2280 | 2280, EADN: Application 0281 |\n| **EADNApplication0282** | 2281 | 2281, EADN: Application 0282 |\n| **EADNApplication0283** | 2282 | 2282, EADN: Application 0283 |\n| **EADNApplication0284** | 2283 | 2283, EADN: Application 0284 |\n| **EADNApplication0285** | 2284 | 2284, EADN: Application 0285 |\n| **EADNApplication0286** | 2285 | 2285, EADN: Application 0286 |\n| **EADNApplication0287** | 2286 | 2286, EADN: Application 0287 |\n| **EADNApplication0288** | 2287 | 2287, EADN: Application 0288 |\n| **EADNApplication0289** | 2288 | 2288, EADN: Application 0289 |\n| **EADNApplication0290** | 2289 | 2289, EADN: Application 0290 |\n| **EADNApplication0291** | 2290 | 2290, EADN: Application 0291 |\n| **EADNApplication0292** | 2291 | 2291, EADN: Application 0292 |\n| **EADNApplication0293** | 2292 | 2292, EADN: Application 0293 |\n| **EADNApplication0294** | 2293 | 2293, EADN: Application 0294 |\n| **EADNApplication0295** | 2294 | 2294, EADN: Application 0295 |\n| **EADNApplication0296** | 2295 | 2295, EADN: Application 0296 |\n| **EADNApplication0297** | 2296 | 2296, EADN: Application 0297 |\n| **EADNApplication0298** | 2297 | 2297, EADN: Application 0298 |\n| **EADNApplication0299** | 2298 | 2298, EADN: Application 0299 |\n| **EADNApplication0300** | 2299 | 2299, EADN: Application 0300 |\n| **EADNApplication0301** | 2300 | 2300, EADN: Application 0301 |\n| **EADNApplication0302** | 2301 | 2301, EADN: Application 0302 |\n| **EADNApplication0303** | 2302 | 2302, EADN: Application 0303 |\n| **EADNApplication0304** | 2303 | 2303, EADN: Application 0304 |\n| **EADNApplication0305** | 2304 | 2304, EADN: Application 0305 |\n| **EADNApplication0306** | 2305 | 2305, EADN: Application 0306 |\n| **EADNApplication0307** | 2306 | 2306, EADN: Application 0307 |\n| **EADNApplication0308** | 2307 | 2307, EADN: Application 0308 |\n| **EADNApplication0309** | 2308 | 2308, EADN: Application 0309 |\n| **EADNApplication0310** | 2309 | 2309, EADN: Application 0310 |\n| **EADNApplication0311** | 2310 | 2310, EADN: Application 0311 |\n| **EADNApplication0312** | 2311 | 2311, EADN: Application 0312 |\n| **EADNApplication0313** | 2312 | 2312, EADN: Application 0313 |\n| **EADNApplication0314** | 2313 | 2313, EADN: Application 0314 |\n| **EADNApplication0315** | 2314 | 2314, EADN: Application 0315 |\n| **EADNApplication0316** | 2315 | 2315, EADN: Application 0316 |\n| **EADNApplication0317** | 2316 | 2316, EADN: Application 0317 |\n| **EADNApplication0318** | 2317 | 2317, EADN: Application 0318 |\n| **EADNApplication0319** | 2318 | 2318, EADN: Application 0319 |\n| **EADNApplication0320** | 2319 | 2319, EADN: Application 0320 |\n| **EADNApplication0321** | 2320 | 2320, EADN: Application 0321 |\n| **EADNApplication0322** | 2321 | 2321, EADN: Application 0322 |\n| **EADNApplication0323** | 2322 | 2322, EADN: Application 0323 |\n| **EADNApplication0324** | 2323 | 2323, EADN: Application 0324 |\n| **EADNApplication0325** | 2324 | 2324, EADN: Application 0325 |\n| **EADNApplication0326** | 2325 | 2325, EADN: Application 0326 |\n| **EADNApplication0327** | 2326 | 2326, EADN: Application 0327 |\n| **EADNApplication0328** | 2327 | 2327, EADN: Application 0328 |\n| **EADNApplication0329** | 2328 | 2328, EADN: Application 0329 |\n| **EADNApplication0330** | 2329 | 2329, EADN: Application 0330 |\n| **EADNApplication0331** | 2330 | 2330, EADN: Application 0331 |\n| **EADNApplication0332** | 2331 | 2331, EADN: Application 0332 |\n| **EADNApplication0333** | 2332 | 2332, EADN: Application 0333 |\n| **EADNApplication0334** | 2333 | 2333, EADN: Application 0334 |\n| **EADNApplication0335** | 2334 | 2334, EADN: Application 0335 |\n| **EADNApplication0336** | 2335 | 2335, EADN: Application 0336 |\n| **EADNApplication0337** | 2336 | 2336, EADN: Application 0337 |\n| **EADNApplication0338** | 2337 | 2337, EADN: Application 0338 |\n| **EADNApplication0339** | 2338 | 2338, EADN: Application 0339 |\n| **EADNApplication0340** | 2339 | 2339, EADN: Application 0340 |\n| **EADNApplication0341** | 2340 | 2340, EADN: Application 0341 |\n| **EADNApplication0342** | 2341 | 2341, EADN: Application 0342 |\n| **EADNApplication0343** | 2342 | 2342, EADN: Application 0343 |\n| **EADNApplication0344** | 2343 | 2343, EADN: Application 0344 |\n| **EADNApplication0345** | 2344 | 2344, EADN: Application 0345 |\n| **EADNApplication0346** | 2345 | 2345, EADN: Application 0346 |\n| **EADNApplication0347** | 2346 | 2346, EADN: Application 0347 |\n| **EADNApplication0348** | 2347 | 2347, EADN: Application 0348 |\n| **EADNApplication0349** | 2348 | 2348, EADN: Application 0349 |\n| **EADNApplication0350** | 2349 | 2349, EADN: Application 0350 |\n| **EADNApplication0351** | 2350 | 2350, EADN: Application 0351 |\n| **EADNApplication0352** | 2351 | 2351, EADN: Application 0352 |\n| **EADNApplication0353** | 2352 | 2352, EADN: Application 0353 |\n| **EADNApplication0354** | 2353 | 2353, EADN: Application 0354 |\n| **EADNApplication0355** | 2354 | 2354, EADN: Application 0355 |\n| **EADNApplication0356** | 2355 | 2355, EADN: Application 0356 |\n| **EADNApplication0357** | 2356 | 2356, EADN: Application 0357 |\n| **EADNApplication0358** | 2357 | 2357, EADN: Application 0358 |\n| **EADNApplication0359** | 2358 | 2358, EADN: Application 0359 |\n| **EADNApplication0360** | 2359 | 2359, EADN: Application 0360 |\n| **EADNApplication0361** | 2360 | 2360, EADN: Application 0361 |\n| **EADNApplication0362** | 2361 | 2361, EADN: Application 0362 |\n| **EADNApplication0363** | 2362 | 2362, EADN: Application 0363 |\n| **EADNApplication0364** | 2363 | 2363, EADN: Application 0364 |\n| **EADNApplication0365** | 2364 | 2364, EADN: Application 0365 |\n| **EADNApplication0366** | 2365 | 2365, EADN: Application 0366 |\n| **EADNApplication0367** | 2366 | 2366, EADN: Application 0367 |\n| **EADNApplication0368** | 2367 | 2367, EADN: Application 0368 |\n| **EADNApplication0369** | 2368 | 2368, EADN: Application 0369 |\n| **EADNApplication0370** | 2369 | 2369, EADN: Application 0370 |\n| **EADNApplication0371** | 2370 | 2370, EADN: Application 0371 |\n| **EADNApplication0372** | 2371 | 2371, EADN: Application 0372 |\n| **EADNApplication0373** | 2372 | 2372, EADN: Application 0373 |\n| **EADNApplication0374** | 2373 | 2373, EADN: Application 0374 |\n| **EADNApplication0375** | 2374 | 2374, EADN: Application 0375 |\n| **EADNApplication0376** | 2375 | 2375, EADN: Application 0376 |\n| **EADNApplication0377** | 2376 | 2376, EADN: Application 0377 |\n| **EADNApplication0378** | 2377 | 2377, EADN: Application 0378 |\n| **EADNApplication0379** | 2378 | 2378, EADN: Application 0379 |\n| **EADNApplication0380** | 2379 | 2379, EADN: Application 0380 |\n| **EADNApplication0381** | 2380 | 2380, EADN: Application 0381 |\n| **EADNApplication0382** | 2381 | 2381, EADN: Application 0382 |\n| **EADNApplication0383** | 2382 | 2382, EADN: Application 0383 |\n| **EADNApplication0384** | 2383 | 2383, EADN: Application 0384 |\n| **EADNApplication0385** | 2384 | 2384, EADN: Application 0385 |\n| **EADNApplication0386** | 2385 | 2385, EADN: Application 0386 |\n| **EADNApplication0387** | 2386 | 2386, EADN: Application 0387 |\n| **EADNApplication0388** | 2387 | 2387, EADN: Application 0388 |\n| **EADNApplication0389** | 2388 | 2388, EADN: Application 0389 |\n| **EADNApplication0390** | 2389 | 2389, EADN: Application 0390 |\n| **EADNApplication0391** | 2390 | 2390, EADN: Application 0391 |\n| **EADNApplication0392** | 2391 | 2391, EADN: Application 0392 |\n| **EADNApplication0393** | 2392 | 2392, EADN: Application 0393 |\n| **EADNApplication0394** | 2393 | 2393, EADN: Application 0394 |\n| **EADNApplication0395** | 2394 | 2394, EADN: Application 0395 |\n| **EADNApplication0396** | 2395 | 2395, EADN: Application 0396 |\n| **EADNApplication0397** | 2396 | 2396, EADN: Application 0397 |\n| **EADNApplication0398** | 2397 | 2397, EADN: Application 0398 |\n| **EADNApplication0399** | 2398 | 2398, EADN: Application 0399 |\n| **EADNApplication0400** | 2399 | 2399, EADN: Application 0400 |\n| **EADNApplication0401** | 2400 | 2400, EADN: Application 0401 |\n| **EADNApplication0402** | 2401 | 2401, EADN: Application 0402 |\n| **EADNApplication0403** | 2402 | 2402, EADN: Application 0403 |\n| **EADNApplication0404** | 2403 | 2403, EADN: Application 0404 |\n| **EADNApplication0405** | 2404 | 2404, EADN: Application 0405 |\n| **EADNApplication0406** | 2405 | 2405, EADN: Application 0406 |\n| **EADNApplication0407** | 2406 | 2406, EADN: Application 0407 |\n| **EADNApplication0408** | 2407 | 2407, EADN: Application 0408 |\n| **EADNApplication0409** | 2408 | 2408, EADN: Application 0409 |\n| **EADNApplication0410** | 2409 | 2409, EADN: Application 0410 |\n| **EADNApplication0411** | 2410 | 2410, EADN: Application 0411 |\n| **EADNApplication0412** | 2411 | 2411, EADN: Application 0412 |\n| **EADNApplication0413** | 2412 | 2412, EADN: Application 0413 |\n| **EADNApplication0414** | 2413 | 2413, EADN: Application 0414 |\n| **EADNApplication0415** | 2414 | 2414, EADN: Application 0415 |\n| **EADNApplication0416** | 2415 | 2415, EADN: Application 0416 |\n| **EADNApplication0417** | 2416 | 2416, EADN: Application 0417 |\n| **EADNApplication0418** | 2417 | 2417, EADN: Application 0418 |\n| **EADNApplication0419** | 2418 | 2418, EADN: Application 0419 |\n| **EADNApplication0420** | 2419 | 2419, EADN: Application 0420 |\n| **EADNApplication0421** | 2420 | 2420, EADN: Application 0421 |\n| **EADNApplication0422** | 2421 | 2421, EADN: Application 0422 |\n| **EADNApplication0423** | 2422 | 2422, EADN: Application 0423 |\n| **EADNApplication0424** | 2423 | 2423, EADN: Application 0424 |\n| **EADNApplication0425** | 2424 | 2424, EADN: Application 0425 |\n| **EADNApplication0426** | 2425 | 2425, EADN: Application 0426 |\n| **EADNApplication0427** | 2426 | 2426, EADN: Application 0427 |\n| **EADNApplication0428** | 2427 | 2427, EADN: Application 0428 |\n| **EADNApplication0429** | 2428 | 2428, EADN: Application 0429 |\n| **EADNApplication0430** | 2429 | 2429, EADN: Application 0430 |\n| **EADNApplication0431** | 2430 | 2430, EADN: Application 0431 |\n| **EADNApplication0432** | 2431 | 2431, EADN: Application 0432 |\n| **EADNApplication0433** | 2432 | 2432, EADN: Application 0433 |\n| **EADNApplication0434** | 2433 | 2433, EADN: Application 0434 |\n| **EADNApplication0435** | 2434 | 2434, EADN: Application 0435 |\n| **EADNApplication0436** | 2435 | 2435, EADN: Application 0436 |\n| **EADNApplication0437** | 2436 | 2436, EADN: Application 0437 |\n| **EADNApplication0438** | 2437 | 2437, EADN: Application 0438 |\n| **EADNApplication0439** | 2438 | 2438, EADN: Application 0439 |\n| **EADNApplication0440** | 2439 | 2439, EADN: Application 0440 |\n| **EADNApplication0441** | 2440 | 2440, EADN: Application 0441 |\n| **EADNApplication0442** | 2441 | 2441, EADN: Application 0442 |\n| **EADNApplication0443** | 2442 | 2442, EADN: Application 0443 |\n| **EADNApplication0444** | 2443 | 2443, EADN: Application 0444 |\n| **EADNApplication0445** | 2444 | 2444, EADN: Application 0445 |\n| **EADNApplication0446** | 2445 | 2445, EADN: Application 0446 |\n| **EADNApplication0447** | 2446 | 2446, EADN: Application 0447 |\n| **EADNApplication0448** | 2447 | 2447, EADN: Application 0448 |\n| **EADNApplication0449** | 2448 | 2448, EADN: Application 0449 |\n| **EADNApplication0450** | 2449 | 2449, EADN: Application 0450 |\n| **EADNApplication0451** | 2450 | 2450, EADN: Application 0451 |\n| **EADNApplication0452** | 2451 | 2451, EADN: Application 0452 |\n| **EADNApplication0453** | 2452 | 2452, EADN: Application 0453 |\n| **EADNApplication0454** | 2453 | 2453, EADN: Application 0454 |\n| **EADNApplication0455** | 2454 | 2454, EADN: Application 0455 |\n| **EADNApplication0456** | 2455 | 2455, EADN: Application 0456 |\n| **EADNApplication0457** | 2456 | 2456, EADN: Application 0457 |\n| **EADNApplication0458** | 2457 | 2457, EADN: Application 0458 |\n| **EADNApplication0459** | 2458 | 2458, EADN: Application 0459 |\n| **EADNApplication0460** | 2459 | 2459, EADN: Application 0460 |\n| **EADNApplication0461** | 2460 | 2460, EADN: Application 0461 |\n| **EADNApplication0462** | 2461 | 2461, EADN: Application 0462 |\n| **EADNApplication0463** | 2462 | 2462, EADN: Application 0463 |\n| **EADNApplication0464** | 2463 | 2463, EADN: Application 0464 |\n| **EADNApplication0465** | 2464 | 2464, EADN: Application 0465 |\n| **EADNApplication0466** | 2465 | 2465, EADN: Application 0466 |\n| **EADNApplication0467** | 2466 | 2466, EADN: Application 0467 |\n| **EADNApplication0468** | 2467 | 2467, EADN: Application 0468 |\n| **EADNApplication0469** | 2468 | 2468, EADN: Application 0469 |\n| **EADNApplication0470** | 2469 | 2469, EADN: Application 0470 |\n| **EADNApplication0471** | 2470 | 2470, EADN: Application 0471 |\n| **EADNApplication0472** | 2471 | 2471, EADN: Application 0472 |\n| **EADNApplication0473** | 2472 | 2472, EADN: Application 0473 |\n| **EADNApplication0474** | 2473 | 2473, EADN: Application 0474 |\n| **EADNApplication0475** | 2474 | 2474, EADN: Application 0475 |\n| **EADNApplication0476** | 2475 | 2475, EADN: Application 0476 |\n| **EADNApplication0477** | 2476 | 2476, EADN: Application 0477 |\n| **EADNApplication0478** | 2477 | 2477, EADN: Application 0478 |\n| **EADNApplication0479** | 2478 | 2478, EADN: Application 0479 |\n| **EADNApplication0480** | 2479 | 2479, EADN: Application 0480 |\n| **EADNApplication0481** | 2480 | 2480, EADN: Application 0481 |\n| **EADNApplication0482** | 2481 | 2481, EADN: Application 0482 |\n| **EADNApplication0483** | 2482 | 2482, EADN: Application 0483 |\n| **EADNApplication0484** | 2483 | 2483, EADN: Application 0484 |\n| **EADNApplication0485** | 2484 | 2484, EADN: Application 0485 |\n| **EADNApplication0486** | 2485 | 2485, EADN: Application 0486 |\n| **EADNApplication0487** | 2486 | 2486, EADN: Application 0487 |\n| **EADNApplication0488** | 2487 | 2487, EADN: Application 0488 |\n| **EADNApplication0489** | 2488 | 2488, EADN: Application 0489 |\n| **EADNApplication0490** | 2489 | 2489, EADN: Application 0490 |\n| **EADNApplication0491** | 2490 | 2490, EADN: Application 0491 |\n| **EADNApplication0492** | 2491 | 2491, EADN: Application 0492 |\n| **EADNApplication0493** | 2492 | 2492, EADN: Application 0493 |\n| **EADNApplication0494** | 2493 | 2493, EADN: Application 0494 |\n| **EADNApplication0495** | 2494 | 2494, EADN: Application 0495 |\n| **EADNApplication0496** | 2495 | 2495, EADN: Application 0496 |\n| **EADNApplication0497** | 2496 | 2496, EADN: Application 0497 |\n| **EADNApplication0498** | 2497 | 2497, EADN: Application 0498 |\n| **EADNApplication0499** | 2498 | 2498, EADN: Application 0499 |\n| **EADNApplication0500** | 2499 | 2499, EADN: Application 0500 or eLAB |\n| **EADNApplication0501** | 5001 | 5001, EADN: Application 0501 |\n| **EADNApplication0502** | 5002 | 5002, EADN: Application 0502 |\n| **EADNApplication0503** | 5003 | 5003, EADN: Application 0503 |\n| **EADNApplication0504** | 5004 | 5004, EADN: Application 0504 |\n| **EADNApplication0505** | 5005 | 5005, EADN: Application 0505 |\n| **EADNApplication0506** | 5006 | 5006, EADN: Application 0506 |\n| **EADNApplication0507** | 5007 | 5007, EADN: Application 0507 |\n| **EADNApplication0508** | 5008 | 5008, EADN: Application 0508 |\n| **EADNApplication0509** | 5009 | 5009, EADN: Application 0509 |\n| **EADNApplication0510** | 5010 | 5010, EADN: Application 0510 |\n| **EADNApplication0511** | 5011 | 5011, EADN: Application 0511 |\n| **EADNApplication0512** | 5012 | 5012, EADN: Application 0512 |\n| **EADNApplication0513** | 5013 | 5013, EADN: Application 0513 |\n| **EADNApplication0514** | 5014 | 5014, EADN: Application 0514 |\n| **EADNApplication0515** | 5015 | 5015, EADN: Application 0515 |\n| **EADNApplication0516** | 5016 | 5016, EADN: Application 0516 |\n| **EADNApplication0517** | 5017 | 5017, EADN: Application 0517 |\n| **EADNApplication0518** | 5018 | 5018, EADN: Application 0518 |\n| **EADNApplication0519** | 5019 | 5019, EADN: Application 0519 |\n| **EADNApplication0520** | 5020 | 5020, EADN: Application 0520 |\n| **EADNApplication0521** | 5021 | 5021, EADN: Application 0521 |\n| **EADNApplication0522** | 5022 | 5022, EADN: Application 0522 |\n| **EADNApplication0523** | 5023 | 5023, EADN: Application 0523 |\n| **EADNApplication0524** | 5024 | 5024, EADN: Application 0524 |\n| **EADNApplication0525** | 5025 | 5025, EADN: Application 0525 |\n| **EADNApplication0526** | 5026 | 5026, EADN: Application 0526 |\n| **EADNApplication0527** | 5027 | 5027, EADN: Application 0527 |\n| **EADNApplication0528** | 5028 | 5028, EADN: Application 0528 |\n| **EADNApplication0529** | 5029 | 5029, EADN: Application 0529 |\n| **EADNApplication0530** | 5030 | 5030, EADN: Application 0530 |\n| **EADNApplication0531** | 5031 | 5031, EADN: Application 0531 |\n| **EADNApplication0532** | 5032 | 5032, EADN: Application 0532 |\n| **EADNApplication0533** | 5033 | 5033, EADN: Application 0533 |\n| **EADNApplication0534** | 5034 | 5034, EADN: Application 0534 |\n| **EADNApplication0535** | 5035 | 5035, EADN: Application 0535 |\n| **EADNApplication0536** | 5036 | 5036, EADN: Application 0536 |\n| **EADNApplication0537** | 5037 | 5037, EADN: Application 0537 |\n| **EADNApplication0538** | 5038 | 5038, EADN: Application 0538 |\n| **EADNApplication0539** | 5039 | 5039, EADN: Application 0539 |\n| **EADNApplication0540** | 5040 | 5040, EADN: Application 0540 |\n| **EADNApplication0541** | 5041 | 5041, EADN: Application 0541 |\n| **EADNApplication0542** | 5042 | 5042, EADN: Application 0542 |\n| **EADNApplication0543** | 5043 | 5043, EADN: Application 0543 |\n| **EADNApplication0544** | 5044 | 5044, EADN: Application 0544 |\n| **EADNApplication0545** | 5045 | 5045, EADN: Application 0545 |\n| **EADNApplication0546** | 5046 | 5046, EADN: Application 0546 |\n| **EADNApplication0547** | 5047 | 5047, EADN: Application 0547 |\n| **EADNApplication0548** | 5048 | 5048, EADN: Application 0548 |\n| **EADNApplication0549** | 5049 | 5049, EADN: Application 0549 |\n| **EADNApplication0550** | 5050 | 5050, EADN: Application 0550 |\n| **EADNApplication0551** | 5051 | 5051, EADN: Application 0551 |\n| **EADNApplication0552** | 5052 | 5052, EADN: Application 0552 |\n| **EADNApplication0553** | 5053 | 5053, EADN: Application 0553 |\n| **EADNApplication0554** | 5054 | 5054, EADN: Application 0554 |\n| **EADNApplication0555** | 5055 | 5055, EADN: Application 0555 |\n| **EADNApplication0556** | 5056 | 5056, EADN: Application 0556 |\n| **EADNApplication0557** | 5057 | 5057, EADN: Application 0557 |\n| **EADNApplication0558** | 5058 | 5058, EADN: Application 0558 |\n| **EADNApplication0559** | 5059 | 5059, EADN: Application 0559 |\n| **EADNApplication0560** | 5060 | 5060, EADN: Application 0560 |\n| **EADNApplication0561** | 5061 | 5061, EADN: Application 0561 |\n| **EADNApplication0562** | 5062 | 5062, EADN: Application 0562 |\n| **EADNApplication0563** | 5063 | 5063, EADN: Application 0563 |\n| **EADNApplication0564** | 5064 | 5064, EADN: Application 0564 |\n| **EADNApplication0565** | 5065 | 5065, EADN: Application 0565 |\n| **EADNApplication0566** | 5066 | 5066, EADN: Application 0566 |\n| **EADNApplication0567** | 5067 | 5067, EADN: Application 0567 |\n| **EADNApplication0568** | 5068 | 5068, EADN: Application 0568 |\n| **EADNApplication0569** | 5069 | 5069, EADN: Application 0569 |\n| **EADNApplication0570** | 5070 | 5070, EADN: Application 0570 |\n| **EADNApplication0571** | 5071 | 5071, EADN: Application 0571 |\n| **EADNApplication0572** | 5072 | 5072, EADN: Application 0572 |\n| **EADNApplication0573** | 5073 | 5073, EADN: Application 0573 |\n| **EADNApplication0574** | 5074 | 5074, EADN: Application 0574 |\n| **EADNApplication0575** | 5075 | 5075, EADN: Application 0575 |\n| **EADNApplication0576** | 5076 | 5076, EADN: Application 0576 |\n| **EADNApplication0577** | 5077 | 5077, EADN: Application 0577 |\n| **EADNApplication0578** | 5078 | 5078, EADN: Application 0578 |\n| **EADNApplication0579** | 5079 | 5079, EADN: Application 0579 |\n| **EADNApplication0580** | 5080 | 5080, EADN: Application 0580 |\n| **EADNApplication0581** | 5081 | 5081, EADN: Application 0581 |\n| **EADNApplication0582** | 5082 | 5082, EADN: Application 0582 |\n| **EADNApplication0583** | 5083 | 5083, EADN: Application 0583 |\n| **EADNApplication0584** | 5084 | 5084, EADN: Application 0584 |\n| **EADNApplication0585** | 5085 | 5085, EADN: Application 0585 |\n| **EADNApplication0586** | 5086 | 5086, EADN: Application 0586 |\n| **EADNApplication0587** | 5087 | 5087, EADN: Application 0587 |\n| **EADNApplication0588** | 5088 | 5088, EADN: Application 0588 |\n| **EADNApplication0589** | 5089 | 5089, EADN: Application 0589 |\n| **EADNApplication0590** | 5090 | 5090, EADN: Application 0590 |\n| **EADNApplication0591** | 5091 | 5091, EADN: Application 0591 |\n| **EADNApplication0592** | 5092 | 5092, EADN: Application 0592 |\n| **EADNApplication0593** | 5093 | 5093, EADN: Application 0593 |\n| **EADNApplication0594** | 5094 | 5094, EADN: Application 0594 |\n| **EADNApplication0595** | 5095 | 5095, EADN: Application 0595 |\n| **EADNApplication0596** | 5096 | 5096, EADN: Application 0596 |\n| **EADNApplication0597** | 5097 | 5097, EADN: Application 0597 |\n| **EADNApplication0598** | 5098 | 5098, EADN: Application 0598 |\n| **EADNApplication0599** | 5099 | 5099, EADN: Application 0599 |\n| **EADNApplication0600** | 5100 | 5100, EADN: Application 0600 |\n| **EADNApplication0601** | 5101 | 5101, EADN: Application 0601 |\n| **EADNApplication0602** | 5102 | 5102, EADN: Application 0602 |\n| **EADNApplication0603** | 5103 | 5103, EADN: Application 0603 |\n| **EADNApplication0604** | 5104 | 5104, EADN: Application 0604 |\n| **EADNApplication0605** | 5105 | 5105, EADN: Application 0605 |\n| **EADNApplication0606** | 5106 | 5106, EADN: Application 0606 |\n| **EADNApplication0607** | 5107 | 5107, EADN: Application 0607 |\n| **EADNApplication0608** | 5108 | 5108, EADN: Application 0608 |\n| **EADNApplication0609** | 5109 | 5109, EADN: Application 0609 |\n| **EADNApplication0610** | 5110 | 5110, EADN: Application 0610 |\n| **EADNApplication0611** | 5111 | 5111, EADN: Application 0611 |\n| **EADNApplication0612** | 5112 | 5112, EADN: Application 0612 |\n| **EADNApplication0613** | 5113 | 5113, EADN: Application 0613 |\n| **EADNApplication0614** | 5114 | 5114, EADN: Application 0614 |\n| **EADNApplication0615** | 5115 | 5115, EADN: Application 0615 |\n| **EADNApplication0616** | 5116 | 5116, EADN: Application 0616 |\n| **EADNApplication0617** | 5117 | 5117, EADN: Application 0617 |\n| **EADNApplication0618** | 5118 | 5118, EADN: Application 0618 |\n| **EADNApplication0619** | 5119 | 5119, EADN: Application 0619 |\n| **EADNApplication0620** | 5120 | 5120, EADN: Application 0620 |\n| **EADNApplication0621** | 5121 | 5121, EADN: Application 0621 |\n| **EADNApplication0622** | 5122 | 5122, EADN: Application 0622 |\n| **EADNApplication0623** | 5123 | 5123, EADN: Application 0623 |\n| **EADNApplication0624** | 5124 | 5124, EADN: Application 0624 |\n| **EADNApplication0625** | 5125 | 5125, EADN: Application 0625 |\n| **EADNApplication0626** | 5126 | 5126, EADN: Application 0626 |\n| **EADNApplication0627** | 5127 | 5127, EADN: Application 0627 |\n| **EADNApplication0628** | 5128 | 5128, EADN: Application 0628 |\n| **EADNApplication0629** | 5129 | 5129, EADN: Application 0629 |\n| **EADNApplication0630** | 5130 | 5130, EADN: Application 0630 |\n| **EADNApplication0631** | 5131 | 5131, EADN: Application 0631 |\n| **EADNApplication0632** | 5132 | 5132, EADN: Application 0632 |\n| **EADNApplication0633** | 5133 | 5133, EADN: Application 0633 |\n| **EADNApplication0634** | 5134 | 5134, EADN: Application 0634 |\n| **EADNApplication0635** | 5135 | 5135, EADN: Application 0635 |\n| **EADNApplication0636** | 5136 | 5136, EADN: Application 0636 |\n| **EADNApplication0637** | 5137 | 5137, EADN: Application 0637 |\n| **EADNApplication0638** | 5138 | 5138, EADN: Application 0638 |\n| **EADNApplication0639** | 5139 | 5139, EADN: Application 0639 |\n| **EADNApplication0640** | 5140 | 5140, EADN: Application 0640 |\n| **EADNApplication0641** | 5141 | 5141, EADN: Application 0641 |\n| **EADNApplication0642** | 5142 | 5142, EADN: Application 0642 |\n| **EADNApplication0643** | 5143 | 5143, EADN: Application 0643 |\n| **EADNApplication0644** | 5144 | 5144, EADN: Application 0644 |\n| **EADNApplication0645** | 5145 | 5145, EADN: Application 0645 |\n| **EADNApplication0646** | 5146 | 5146, EADN: Application 0646 |\n| **EADNApplication0647** | 5147 | 5147, EADN: Application 0647 |\n| **EADNApplication0648** | 5148 | 5148, EADN: Application 0648 |\n| **EADNApplication0649** | 5149 | 5149, EADN: Application 0649 |\n| **EADNApplication0650** | 5150 | 5150, EADN: Application 0650 |\n| **EADNApplication0651** | 5151 | 5151, EADN: Application 0651 |\n| **EADNApplication0652** | 5152 | 5152, EADN: Application 0652 |\n| **EADNApplication0653** | 5153 | 5153, EADN: Application 0653 |\n| **EADNApplication0654** | 5154 | 5154, EADN: Application 0654 |\n| **EADNApplication0655** | 5155 | 5155, EADN: Application 0655 |\n| **EADNApplication0656** | 5156 | 5156, EADN: Application 0656 |\n| **EADNApplication0657** | 5157 | 5157, EADN: Application 0657 |\n| **EADNApplication0658** | 5158 | 5158, EADN: Application 0658 |\n| **EADNApplication0659** | 5159 | 5159, EADN: Application 0659 |\n| **EADNApplication0660** | 5160 | 5160, EADN: Application 0660 |\n| **EADNApplication0661** | 5161 | 5161, EADN: Application 0661 |\n| **EADNApplication0662** | 5162 | 5162, EADN: Application 0662 |\n| **EADNApplication0663** | 5163 | 5163, EADN: Application 0663 |\n| **EADNApplication0664** | 5164 | 5164, EADN: Application 0664 |\n| **EADNApplication0665** | 5165 | 5165, EADN: Application 0665 |\n| **EADNApplication0666** | 5166 | 5166, EADN: Application 0666 |\n| **EADNApplication0667** | 5167 | 5167, EADN: Application 0667 |\n| **EADNApplication0668** | 5168 | 5168, EADN: Application 0668 |\n| **EADNApplication0669** | 5169 | 5169, EADN: Application 0669 |\n| **EADNApplication0670** | 5170 | 5170, EADN: Application 0670 |\n| **EADNApplication0671** | 5171 | 5171, EADN: Application 0671 |\n| **EADNApplication0672** | 5172 | 5172, EADN: Application 0672 |\n| **EADNApplication0673** | 5173 | 5173, EADN: Application 0673 |\n| **EADNApplication0674** | 5174 | 5174, EADN: Application 0674 |\n| **EADNApplication0675** | 5175 | 5175, EADN: Application 0675 |\n| **EADNApplication0676** | 5176 | 5176, EADN: Application 0676 |\n| **EADNApplication0677** | 5177 | 5177, EADN: Application 0677 |\n| **EADNApplication0678** | 5178 | 5178, EADN: Application 0678 |\n| **EADNApplication0679** | 5179 | 5179, EADN: Application 0679 |\n| **EADNApplication0680** | 5180 | 5180, EADN: Application 0680 |\n| **EADNApplication0681** | 5181 | 5181, EADN: Application 0681 |\n| **EADNApplication0682** | 5182 | 5182, EADN: Application 0682 |\n| **EADNApplication0683** | 5183 | 5183, EADN: Application 0683 |\n| **EADNApplication0684** | 5184 | 5184, EADN: Application 0684 |\n| **EADNApplication0685** | 5185 | 5185, EADN: Application 0685 |\n| **EADNApplication0686** | 5186 | 5186, EADN: Application 0686 |\n| **EADNApplication0687** | 5187 | 5187, EADN: Application 0687 |\n| **EADNApplication0688** | 5188 | 5188, EADN: Application 0688 |\n| **EADNApplication0689** | 5189 | 5189, EADN: Application 0689 |\n| **EADNApplication0690** | 5190 | 5190, EADN: Application 0690 |\n| **EADNApplication0691** | 5191 | 5191, EADN: Application 0691 |\n| **EADNApplication0692** | 5192 | 5192, EADN: Application 0692 |\n| **EADNApplication0693** | 5193 | 5193, EADN: Application 0693 |\n| **EADNApplication0694** | 5194 | 5194, EADN: Application 0694 |\n| **EADNApplication0695** | 5195 | 5195, EADN: Application 0695 |\n| **EADNApplication0696** | 5196 | 5196, EADN: Application 0696 |\n| **EADNApplication0697** | 5197 | 5197, EADN: Application 0697 |\n| **EADNApplication0698** | 5198 | 5198, EADN: Application 0698 |\n| **EADNApplication0699** | 5199 | 5199, EADN: Application 0699 |\n| **EADNApplication0700** | 5200 | 5200, EADN: Application 0700 |\n| **EADNApplication0701** | 5201 | 5201, EADN: Application 0701 |\n| **EADNApplication0702** | 5202 | 5202, EADN: Application 0702 |\n| **EADNApplication0703** | 5203 | 5203, EADN: Application 0703 |\n| **EADNApplication0704** | 5204 | 5204, EADN: Application 0704 |\n| **EADNApplication0705** | 5205 | 5205, EADN: Application 0705 |\n| **EADNApplication0706** | 5206 | 5206, EADN: Application 0706 |\n| **EADNApplication0707** | 5207 | 5207, EADN: Application 0707 |\n| **EADNApplication0708** | 5208 | 5208, EADN: Application 0708 |\n| **EADNApplication0709** | 5209 | 5209, EADN: Application 0709 |\n| **EADNApplication0710** | 5210 | 5210, EADN: Application 0710 |\n| **EADNApplication0711** | 5211 | 5211, EADN: Application 0711 |\n| **EADNApplication0712** | 5212 | 5212, EADN: Application 0712 |\n| **EADNApplication0713** | 5213 | 5213, EADN: Application 0713 |\n| **EADNApplication0714** | 5214 | 5214, EADN: Application 0714 |\n| **EADNApplication0715** | 5215 | 5215, EADN: Application 0715 |\n| **EADNApplication0716** | 5216 | 5216, EADN: Application 0716 |\n| **EADNApplication0717** | 5217 | 5217, EADN: Application 0717 |\n| **EADNApplication0718** | 5218 | 5218, EADN: Application 0718 |\n| **EADNApplication0719** | 5219 | 5219, EADN: Application 0719 |\n| **EADNApplication0720** | 5220 | 5220, EADN: Application 0720 |\n| **EADNApplication0721** | 5221 | 5221, EADN: Application 0721 |\n| **EADNApplication0722** | 5222 | 5222, EADN: Application 0722 |\n| **EADNApplication0723** | 5223 | 5223, EADN: Application 0723 |\n| **EADNApplication0724** | 5224 | 5224, EADN: Application 0724 |\n| **EADNApplication0725** | 5225 | 5225, EADN: Application 0725 |\n| **EADNApplication0726** | 5226 | 5226, EADN: Application 0726 |\n| **EADNApplication0727** | 5227 | 5227, EADN: Application 0727 |\n| **EADNApplication0728** | 5228 | 5228, EADN: Application 0728 |\n| **EADNApplication0729** | 5229 | 5229, EADN: Application 0729 |\n| **EADNApplication0730** | 5230 | 5230, EADN: Application 0730 |\n| **EADNApplication0731** | 5231 | 5231, EADN: Application 0731 |\n| **EADNApplication0732** | 5232 | 5232, EADN: Application 0732 |\n| **EADNApplication0733** | 5233 | 5233, EADN: Application 0733 |\n| **EADNApplication0734** | 5234 | 5234, EADN: Application 0734 |\n| **EADNApplication0735** | 5235 | 5235, EADN: Application 0735 |\n| **EADNApplication0736** | 5236 | 5236, EADN: Application 0736 |\n| **EADNApplication0737** | 5237 | 5237, EADN: Application 0737 |\n| **EADNApplication0738** | 5238 | 5238, EADN: Application 0738 |\n| **EADNApplication0739** | 5239 | 5239, EADN: Application 0739 |\n| **EADNApplication0740** | 5240 | 5240, EADN: Application 0740 |\n| **EADNApplication0741** | 5241 | 5241, EADN: Application 0741 |\n| **EADNApplication0742** | 5242 | 5242, EADN: Application 0742 |\n| **EADNApplication0743** | 5243 | 5243, EADN: Application 0743 |\n| **EADNApplication0744** | 5244 | 5244, EADN: Application 0744 |\n| **EADNApplication0745** | 5245 | 5245, EADN: Application 0745 |\n| **EADNApplication0746** | 5246 | 5246, EADN: Application 0746 |\n| **EADNApplication0747** | 5247 | 5247, EADN: Application 0747 |\n| **EADNApplication0748** | 5248 | 5248, EADN: Application 0748 |\n| **EADNApplication0749** | 5249 | 5249, EADN: Application 0749 |\n| **EADNApplication0750** | 5250 | 5250, EADN: Application 0750 |\n| **EADNApplication0751** | 5251 | 5251, EADN: Application 0751 |\n| **EADNApplication0752** | 5252 | 5252, EADN: Application 0752 |\n| **EADNApplication0753** | 5253 | 5253, EADN: Application 0753 |\n| **EADNApplication0754** | 5254 | 5254, EADN: Application 0754 |\n| **EADNApplication0755** | 5255 | 5255, EADN: Application 0755 |\n| **EADNApplication0756** | 5256 | 5256, EADN: Application 0756 |\n| **EADNApplication0757** | 5257 | 5257, EADN: Application 0757 |\n| **EADNApplication0758** | 5258 | 5258, EADN: Application 0758 |\n| **EADNApplication0759** | 5259 | 5259, EADN: Application 0759 |\n| **EADNApplication0760** | 5260 | 5260, EADN: Application 0760 |\n| **EADNApplication0761** | 5261 | 5261, EADN: Application 0761 |\n| **EADNApplication0762** | 5262 | 5262, EADN: Application 0762 |\n| **EADNApplication0763** | 5263 | 5263, EADN: Application 0763 |\n| **EADNApplication0764** | 5264 | 5264, EADN: Application 0764 |\n| **EADNApplication0765** | 5265 | 5265, EADN: Application 0765 |\n| **EADNApplication0766** | 5266 | 5266, EADN: Application 0766 |\n| **EADNApplication0767** | 5267 | 5267, EADN: Application 0767 |\n| **EADNApplication0768** | 5268 | 5268, EADN: Application 0768 |\n| **EADNApplication0769** | 5269 | 5269, EADN: Application 0769 |\n| **EADNApplication0770** | 5270 | 5270, EADN: Application 0770 |\n| **EADNApplication0771** | 5271 | 5271, EADN: Application 0771 |\n| **EADNApplication0772** | 5272 | 5272, EADN: Application 0772 |\n| **EADNApplication0773** | 5273 | 5273, EADN: Application 0773 |\n| **EADNApplication0774** | 5274 | 5274, EADN: Application 0774 |\n| **EADNApplication0775** | 5275 | 5275, EADN: Application 0775 |\n| **EADNApplication0776** | 5276 | 5276, EADN: Application 0776 |\n| **EADNApplication0777** | 5277 | 5277, EADN: Application 0777 |\n| **EADNApplication0778** | 5278 | 5278, EADN: Application 0778 |\n| **EADNApplication0779** | 5279 | 5279, EADN: Application 0779 |\n| **EADNApplication0780** | 5280 | 5280, EADN: Application 0780 |\n| **EADNApplication0781** | 5281 | 5281, EADN: Application 0781 |\n| **EADNApplication0782** | 5282 | 5282, EADN: Application 0782 |\n| **EADNApplication0783** | 5283 | 5283, EADN: Application 0783 |\n| **EADNApplication0784** | 5284 | 5284, EADN: Application 0784 |\n| **EADNApplication0785** | 5285 | 5285, EADN: Application 0785 |\n| **EADNApplication0786** | 5286 | 5286, EADN: Application 0786 |\n| **EADNApplication0787** | 5287 | 5287, EADN: Application 0787 |\n| **EADNApplication0788** | 5288 | 5288, EADN: Application 0788 |\n| **EADNApplication0789** | 5289 | 5289, EADN: Application 0789 |\n| **EADNApplication0790** | 5290 | 5290, EADN: Application 0790 |\n| **EADNApplication0791** | 5291 | 5291, EADN: Application 0791 |\n| **EADNApplication0792** | 5292 | 5292, EADN: Application 0792 |\n| **EADNApplication0793** | 5293 | 5293, EADN: Application 0793 |\n| **EADNApplication0794** | 5294 | 5294, EADN: Application 0794 |\n| **EADNApplication0795** | 5295 | 5295, EADN: Application 0795 |\n| **EADNApplication0796** | 5296 | 5296, EADN: Application 0796 |\n| **EADNApplication0797** | 5297 | 5297, EADN: Application 0797 |\n| **EADNApplication0798** | 5298 | 5298, EADN: Application 0798 |\n| **EADNApplication0799** | 5299 | 5299, EADN: Application 0799 |\n| **EADNApplication0800** | 5300 | 5300, EADN: Application 0800 |\n| **EADNApplication0801** | 5301 | 5301, EADN: Application 0801 |\n| **EADNApplication0802** | 5302 | 5302, EADN: Application 0802 |\n| **EADNApplication0803** | 5303 | 5303, EADN: Application 0803 |\n| **EADNApplication0804** | 5304 | 5304, EADN: Application 0804 |\n| **EADNApplication0805** | 5305 | 5305, EADN: Application 0805 |\n| **EADNApplication0806** | 5306 | 5306, EADN: Application 0806 |\n| **EADNApplication0807** | 5307 | 5307, EADN: Application 0807 |\n| **EADNApplication0808** | 5308 | 5308, EADN: Application 0808 |\n| **EADNApplication0809** | 5309 | 5309, EADN: Application 0809 |\n| **EADNApplication0810** | 5310 | 5310, EADN: Application 0810 |\n| **EADNApplication0811** | 5311 | 5311, EADN: Application 0811 |\n| **EADNApplication0812** | 5312 | 5312, EADN: Application 0812 |\n| **EADNApplication0813** | 5313 | 5313, EADN: Application 0813 |\n| **EADNApplication0814** | 5314 | 5314, EADN: Application 0814 |\n| **EADNApplication0815** | 5315 | 5315, EADN: Application 0815 |\n| **EADNApplication0816** | 5316 | 5316, EADN: Application 0816 |\n| **EADNApplication0817** | 5317 | 5317, EADN: Application 0817 |\n| **EADNApplication0818** | 5318 | 5318, EADN: Application 0818 |\n| **EADNApplication0819** | 5319 | 5319, EADN: Application 0819 |\n| **EADNApplication0820** | 5320 | 5320, EADN: Application 0820 |\n| **EADNApplication0821** | 5321 | 5321, EADN: Application 0821 |\n| **EADNApplication0822** | 5322 | 5322, EADN: Application 0822 |\n| **EADNApplication0823** | 5323 | 5323, EADN: Application 0823 |\n| **EADNApplication0824** | 5324 | 5324, EADN: Application 0824 |\n| **EADNApplication0825** | 5325 | 5325, EADN: Application 0825 |\n| **EADNApplication0826** | 5326 | 5326, EADN: Application 0826 |\n| **EADNApplication0827** | 5327 | 5327, EADN: Application 0827 |\n| **EADNApplication0828** | 5328 | 5328, EADN: Application 0828 |\n| **EADNApplication0829** | 5329 | 5329, EADN: Application 0829 |\n| **EADNApplication0830** | 5330 | 5330, EADN: Application 0830 |\n| **EADNApplication0831** | 5331 | 5331, EADN: Application 0831 |\n| **EADNApplication0832** | 5332 | 5332, EADN: Application 0832 |\n| **EADNApplication0833** | 5333 | 5333, EADN: Application 0833 |\n| **EADNApplication0834** | 5334 | 5334, EADN: Application 0834 |\n| **EADNApplication0835** | 5335 | 5335, EADN: Application 0835 |\n| **EADNApplication0836** | 5336 | 5336, EADN: Application 0836 |\n| **EADNApplication0837** | 5337 | 5337, EADN: Application 0837 |\n| **EADNApplication0838** | 5338 | 5338, EADN: Application 0838 |\n| **EADNApplication0839** | 5339 | 5339, EADN: Application 0839 |\n| **EADNApplication0840** | 5340 | 5340, EADN: Application 0840 |\n| **EADNApplication0841** | 5341 | 5341, EADN: Application 0841 |\n| **EADNApplication0842** | 5342 | 5342, EADN: Application 0842 |\n| **EADNApplication0843** | 5343 | 5343, EADN: Application 0843 |\n| **EADNApplication0844** | 5344 | 5344, EADN: Application 0844 |\n| **EADNApplication0845** | 5345 | 5345, EADN: Application 0845 |\n| **EADNApplication0846** | 5346 | 5346, EADN: Application 0846 |\n| **EADNApplication0847** | 5347 | 5347, EADN: Application 0847 |\n| **EADNApplication0848** | 5348 | 5348, EADN: Application 0848 |\n| **EADNApplication0849** | 5349 | 5349, EADN: Application 0849 |\n| **EADNApplication0850** | 5350 | 5350, EADN: Application 0850 |\n| **EADNApplication0851** | 5351 | 5351, EADN: Application 0851 |\n| **EADNApplication0852** | 5352 | 5352, EADN: Application 0852 |\n| **EADNApplication0853** | 5353 | 5353, EADN: Application 0853 |\n| **EADNApplication0854** | 5354 | 5354, EADN: Application 0854 |\n| **EADNApplication0855** | 5355 | 5355, EADN: Application 0855 |\n| **EADNApplication0856** | 5356 | 5356, EADN: Application 0856 |\n| **EADNApplication0857** | 5357 | 5357, EADN: Application 0857 |\n| **EADNApplication0858** | 5358 | 5358, EADN: Application 0858 |\n| **EADNApplication0859** | 5359 | 5359, EADN: Application 0859 |\n| **EADNApplication0860** | 5360 | 5360, EADN: Application 0860 |\n| **EADNApplication0861** | 5361 | 5361, EADN: Application 0861 |\n| **EADNApplication0862** | 5362 | 5362, EADN: Application 0862 |\n| **EADNApplication0863** | 5363 | 5363, EADN: Application 0863 |\n| **EADNApplication0864** | 5364 | 5364, EADN: Application 0864 |\n| **EADNApplication0865** | 5365 | 5365, EADN: Application 0865 |\n| **EADNApplication0866** | 5366 | 5366, EADN: Application 0866 |\n| **EADNApplication0867** | 5367 | 5367, EADN: Application 0867 |\n| **EADNApplication0868** | 5368 | 5368, EADN: Application 0868 |\n| **EADNApplication0869** | 5369 | 5369, EADN: Application 0869 |\n| **EADNApplication0870** | 5370 | 5370, EADN: Application 0870 |\n| **EADNApplication0871** | 5371 | 5371, EADN: Application 0871 |\n| **EADNApplication0872** | 5372 | 5372, EADN: Application 0872 |\n| **EADNApplication0873** | 5373 | 5373, EADN: Application 0873 |\n| **EADNApplication0874** | 5374 | 5374, EADN: Application 0874 |\n| **EADNApplication0875** | 5375 | 5375, EADN: Application 0875 |\n| **EADNApplication0876** | 5376 | 5376, EADN: Application 0876 |\n| **EADNApplication0877** | 5377 | 5377, EADN: Application 0877 |\n| **EADNApplication0878** | 5378 | 5378, EADN: Application 0878 |\n| **EADNApplication0879** | 5379 | 5379, EADN: Application 0879 |\n| **EADNApplication0880** | 5380 | 5380, EADN: Application 0880 |\n| **EADNApplication0881** | 5381 | 5381, EADN: Application 0881 |\n| **EADNApplication0882** | 5382 | 5382, EADN: Application 0882 |\n| **EADNApplication0883** | 5383 | 5383, EADN: Application 0883 |\n| **EADNApplication0884** | 5384 | 5384, EADN: Application 0884 |\n| **EADNApplication0885** | 5385 | 5385, EADN: Application 0885 |\n| **EADNApplication0886** | 5386 | 5386, EADN: Application 0886 |\n| **EADNApplication0887** | 5387 | 5387, EADN: Application 0887 |\n| **EADNApplication0888** | 5388 | 5388, EADN: Application 0888 |\n| **EADNApplication0889** | 5389 | 5389, EADN: Application 0889 |\n| **EADNApplication0890** | 5390 | 5390, EADN: Application 0890 |\n| **EADNApplication0891** | 5391 | 5391, EADN: Application 0891 |\n| **EADNApplication0892** | 5392 | 5392, EADN: Application 0892 |\n| **EADNApplication0893** | 5393 | 5393, EADN: Application 0893 |\n| **EADNApplication0894** | 5394 | 5394, EADN: Application 0894 |\n| **EADNApplication0895** | 5395 | 5395, EADN: Application 0895 |\n| **EADNApplication0896** | 5396 | 5396, EADN: Application 0896 |\n| **EADNApplication0897** | 5397 | 5397, EADN: Application 0897 |\n| **EADNApplication0898** | 5398 | 5398, EADN: Application 0898 |\n| **EADNApplication0899** | 5399 | 5399, EADN: Application 0899 |\n| **EADNApplication0900** | 5400 | 5400, EADN: Application 0900 |\n| **EADNApplication0901** | 5401 | 5401, EADN: Application 0901 |\n| **EADNApplication0902** | 5402 | 5402, EADN: Application 0902 |\n| **EADNApplication0903** | 5403 | 5403, EADN: Application 0903 |\n| **EADNApplication0904** | 5404 | 5404, EADN: Application 0904 |\n| **EADNApplication0905** | 5405 | 5405, EADN: Application 0905 |\n| **EADNApplication0906** | 5406 | 5406, EADN: Application 0906 |\n| **EADNApplication0907** | 5407 | 5407, EADN: Application 0907 |\n| **EADNApplication0908** | 5408 | 5408, EADN: Application 0908 |\n| **EADNApplication0909** | 5409 | 5409, EADN: Application 0909 |\n| **EADNApplication0910** | 5410 | 5410, EADN: Application 0910 |\n| **EADNApplication0911** | 5411 | 5411, EADN: Application 0911 |\n| **EADNApplication0912** | 5412 | 5412, EADN: Application 0912 |\n| **EADNApplication0913** | 5413 | 5413, EADN: Application 0913 |\n| **EADNApplication0914** | 5414 | 5414, EADN: Application 0914 |\n| **EADNApplication0915** | 5415 | 5415, EADN: Application 0915 |\n| **EADNApplication0916** | 5416 | 5416, EADN: Application 0916 |\n| **EADNApplication0917** | 5417 | 5417, EADN: Application 0917 |\n| **EADNApplication0918** | 5418 | 5418, EADN: Application 0918 |\n| **EADNApplication0919** | 5419 | 5419, EADN: Application 0919 |\n| **EADNApplication0920** | 5420 | 5420, EADN: Application 0920 |\n| **EADNApplication0921** | 5421 | 5421, EADN: Application 0921 |\n| **EADNApplication0922** | 5422 | 5422, EADN: Application 0922 |\n| **EADNApplication0923** | 5423 | 5423, EADN: Application 0923 |\n| **EADNApplication0924** | 5424 | 5424, EADN: Application 0924 |\n| **EADNApplication0925** | 5425 | 5425, EADN: Application 0925 |\n| **EADNApplication0926** | 5426 | 5426, EADN: Application 0926 |\n| **EADNApplication0927** | 5427 | 5427, EADN: Application 0927 |\n| **EADNApplication0928** | 5428 | 5428, EADN: Application 0928 |\n| **EADNApplication0929** | 5429 | 5429, EADN: Application 0929 |\n| **EADNApplication0930** | 5430 | 5430, EADN: Application 0930 |\n| **EADNApplication0931** | 5431 | 5431, EADN: Application 0931 |\n| **EADNApplication0932** | 5432 | 5432, EADN: Application 0932 |\n| **EADNApplication0933** | 5433 | 5433, EADN: Application 0933 |\n| **EADNApplication0934** | 5434 | 5434, EADN: Application 0934 |\n| **EADNApplication0935** | 5435 | 5435, EADN: Application 0935 |\n| **EADNApplication0936** | 5436 | 5436, EADN: Application 0936 |\n| **EADNApplication0937** | 5437 | 5437, EADN: Application 0937 |\n| **EADNApplication0938** | 5438 | 5438, EADN: Application 0938 |\n| **EADNApplication0939** | 5439 | 5439, EADN: Application 0939 |\n| **EADNApplication0940** | 5440 | 5440, EADN: Application 0940 |\n| **EADNApplication0941** | 5441 | 5441, EADN: Application 0941 |\n| **EADNApplication0942** | 5442 | 5442, EADN: Application 0942 |\n| **EADNApplication0943** | 5443 | 5443, EADN: Application 0943 |\n| **EADNApplication0944** | 5444 | 5444, EADN: Application 0944 |\n| **EADNApplication0945** | 5445 | 5445, EADN: Application 0945 |\n| **EADNApplication0946** | 5446 | 5446, EADN: Application 0946 |\n| **EADNApplication0947** | 5447 | 5447, EADN: Application 0947 |\n| **EADNApplication0948** | 5448 | 5448, EADN: Application 0948 |\n| **EADNApplication0949** | 5449 | 5449, EADN: Application 0949 |\n| **EADNApplication0950** | 5450 | 5450, EADN: Application 0950 |\n| **EADNApplication0951** | 5451 | 5451, EADN: Application 0951 |\n| **EADNApplication0952** | 5452 | 5452, EADN: Application 0952 |\n| **EADNApplication0953** | 5453 | 5453, EADN: Application 0953 |\n| **EADNApplication0954** | 5454 | 5454, EADN: Application 0954 |\n| **EADNApplication0955** | 5455 | 5455, EADN: Application 0955 |\n| **EADNApplication0956** | 5456 | 5456, EADN: Application 0956 |\n| **EADNApplication0957** | 5457 | 5457, EADN: Application 0957 |\n| **EADNApplication0958** | 5458 | 5458, EADN: Application 0958 |\n| **EADNApplication0959** | 5459 | 5459, EADN: Application 0959 |\n| **EADNApplication0960** | 5460 | 5460, EADN: Application 0960 |\n| **EADNApplication0961** | 5461 | 5461, EADN: Application 0961 |\n| **EADNApplication0962** | 5462 | 5462, EADN: Application 0962 |\n| **EADNApplication0963** | 5463 | 5463, EADN: Application 0963 |\n| **EADNApplication0964** | 5464 | 5464, EADN: Application 0964 |\n| **EADNApplication0965** | 5465 | 5465, EADN: Application 0965 |\n| **EADNApplication0966** | 5466 | 5466, EADN: Application 0966 |\n| **EADNApplication0967** | 5467 | 5467, EADN: Application 0967 |\n| **EADNApplication0968** | 5468 | 5468, EADN: Application 0968 |\n| **EADNApplication0969** | 5469 | 5469, EADN: Application 0969 |\n| **EADNApplication0970** | 5470 | 5470, EADN: Application 0970 |\n| **EADNApplication0971** | 5471 | 5471, EADN: Application 0971 |\n| **EADNApplication0972** | 5472 | 5472, EADN: Application 0972 |\n| **EADNApplication0973** | 5473 | 5473, EADN: Application 0973 |\n| **EADNApplication0974** | 5474 | 5474, EADN: Application 0974 |\n| **EADNApplication0975** | 5475 | 5475, EADN: Application 0975 |\n| **EADNApplication0976** | 5476 | 5476, EADN: Application 0976 |\n| **EADNApplication0977** | 5477 | 5477, EADN: Application 0977 |\n| **EADNApplication0978** | 5478 | 5478, EADN: Application 0978 |\n| **EADNApplication0979** | 5479 | 5479, EADN: Application 0979 |\n| **EADNApplication0980** | 5480 | 5480, EADN: Application 0980 |\n| **EADNApplication0981** | 5481 | 5481, EADN: Application 0981 |\n| **EADNApplication0982** | 5482 | 5482, EADN: Application 0982 |\n| **EADNApplication0983** | 5483 | 5483, EADN: Application 0983 |\n| **EADNApplication0984** | 5484 | 5484, EADN: Application 0984 |\n| **EADNApplication0985** | 5485 | 5485, EADN: Application 0985 |\n| **EADNApplication0986** | 5486 | 5486, EADN: Application 0986 |\n| **EADNApplication0987** | 5487 | 5487, EADN: Application 0987 |\n| **EADNApplication0988** | 5488 | 5488, EADN: Application 0988 |\n| **EADNApplication0989** | 5489 | 5489, EADN: Application 0989 |\n| **EADNApplication0990** | 5490 | 5490, EADN: Application 0990 |\n| **EADNApplication0991** | 5491 | 5491, EADN: Application 0991 |\n| **EADNApplication0992** | 5492 | 5492, EADN: Application 0992 |\n| **EADNApplication0993** | 5493 | 5493, EADN: Application 0993 |\n| **EADNApplication0994** | 5494 | 5494, EADN: Application 0994 |\n| **EADNApplication0995** | 5495 | 5495, EADN: Application 0995 |\n| **EADNApplication0996** | 5496 | 5496, EADN: Application 0996 |\n| **EADNApplication0997** | 5497 | 5497, EADN: Application 0997 |\n| **EADNApplication0998** | 5498 | 5498, EADN: Application 0998 |\n| **EADNApplication0999** | 5499 | 5499, EADN: Application 0999 |\n| **EADNApplication1000** | 5500 | 5500, EADN: Application 1000 |\n| **EClassImport** | 1229 | 1229, Eplan ECLASS Import |\n| **Edit3DTerminals** | 1133 | 1133, Edit 3D Terminals |\n| **EditingDevices** | 822 | 822, Editing devices |\n| **EditingFrames** | 817 | 817, Editing frames |\n| **EditingOfCables** | 713 | 713, Editing of cables |\n| **EditingOfElectrFunctions** | 712 | 712, Editing of electr. functions |\n| **EditingOfElectricLogic** | 717 | 717, Editing of electric logic |\n| **EditingOfMasterData** | 815 | 815, Editing of master data |\n| **EditingOfParts** | 787 | 787, Editing of parts |\n| **EditingOfPLC** | 716 | 716, Editing of PLC |\n| **EditingOfPlugs** | 715 | 715, Editing of plugs |\n| **EditingOfTerminals** | 714 | 714, Editing of terminals |\n| **Education** | 790 | 790, Eplan Education Version |\n| **EDZFormat** | 1227 | 1227, Eplan EDZ Format |\n| **ElectricP8** | 1221 | 1221, Eplan Electric P8 |\n| **ERPIntegrationSuite** | 4782 | 4782, Eplan ERP Integration Suite |\n| **ERPPDMIntegration** | 748 | 748, Eplan ERP/PDM Integration Suite |\n| **ESTOCK** | 1972 | 1972, Eplan eSTOCK |\n| **ExportDeviceLists** | 1974 | 1974, Export device lists |\n| **ExportFunctions** | 718 | 718, Export functions |\n| **ExportParts** | 1217 | 1217, Export parts |\n| **ExportPLCAssignmentList** | 899 | 899, Export PLC assignment list |\n| **ExportToImagefile** | 829 | 829, Export to imagefile |\n| **ExportVRMLFormat** | 1975 | 1975, Export VRML format |\n| **ExportWiresPartList** | 1976 | 1976, Export wires part list |\n| **ExternalEditingOfObjectProperties** | 825 | 825, External editing of object properties |\n| **ExternalEditOfProjectProperties** | 1218 | 1218, External edit of project properties base |\n| **ExternalPartSelection** | 731 | 731, External part selection |\n| **Fluid** | 740 | 740, Eplan Fluid |\n| **FluidHoseConfigurator** | 1194 | 1194, Eplan Fluid Hose Configurator |\n| **FormGenerationConnectionDiagrams** | 737 | 737, Form generation - connection diagrams |\n| **FormGenerationConnectionDiagramsDevice** | 738 | 738, Form generation - connection diagrams: device |\n| **FormGenerationItemspecific** | 733 | 733, Form generation - item-specific |\n| **FormGenerationMasterData** | 826 | 826, Form generation - master data |\n| **FormGenerationOverviews** | 734 | 734, Form generation - overviews |\n| **FormGenerationOverviewsConnections** | 827 | 827, Form generation - overviews: connections |\n| **FormGenerationOverviewsDeviceTagList** | 735 | 735, Form generation - overviews: device tag list |\n| **FormGenerationOverviewsPotentialOverview** | 736 | 736, Form generation - overviews: potential overview |\n| **FormGenerationParts** | 739 | 739, Form generation - parts |\n| **GraphicalReports** | 1365 | 1365, Eplan Graphical Reports |\n| **HarnessProDExtensions** | 1647 | 1647, Eplan Harness proD Extensions |\n| **ImportAndExportDeviceLists** | 380 | 380, Import and export device lists |\n| **ImportAndExportOfSymbolsAndSymbolLibraries** | 816 | 816, Import and export of symbols and symbol libraries |\n| **ImportAndInsertMacros** | 818 | 818, Import and insert macros |\n| **IntelligentPDF** | 776 | 776, Intelligent PDF |\n| **InterfaceToLabelingDevices** | 728 | 728, Interface to labeling devices |\n| **Language\\_cs\\_CZ** | 1613 | 1613, Eplan Language Czech |\n| **Language\\_da\\_DK** | 1606 | 1606, Eplan Language Danish |\n| **Language\\_de\\_DE** | 1600 | 1600, Eplan Language German |\n| **Language\\_en\\_US** | 1601 | 1601, Eplan Language English |\n| **Language\\_es\\_ES** | 1616 | 1616, Eplan Language Spanish |\n| **Language\\_fr\\_FR** | 1602 | 1602, Eplan Language French |\n| **Language\\_hu\\_HU** | 1614 | 1614, Eplan Language Hungarian |\n| **Language\\_it\\_IT** | 1605 | 1605, Eplan Language Italian |\n| **Language\\_ja\\_JP** | 1622 | 1622, Eplan Language Japanese |\n| **Language\\_ko\\_KR** | 1619 | 1619, Eplan Language Korean |\n| **Language\\_nl\\_NL** | 1604 | 1604, Eplan Language Dutch |\n| **Language\\_pl\\_PL** | 1611 | 1611, Eplan Language Polish |\n| **Language\\_pt\\_BR** | 1618 | 1618, Eplan Language Brazilian |\n| **Language\\_pt\\_PT** | 1610 | 1610, Eplan Language Portuguese |\n| **Language\\_ro\\_RO** | 1621 | 1621, Eplan Language Rumanian |\n| **Language\\_ru\\_RU** | 1612 | 1612, Eplan Language Russian |\n| **Language\\_sv\\_SE** | 1615 | 1615, Eplan Language Swedish |\n| **Language\\_tr\\_TR** | 1608 | 1608, Eplan Language Turkish |\n| **Language\\_zh\\_CN** | 1617 | 1617, Eplan Language Chinese Simplified |\n| **Language\\_zh\\_TW** | 1865 | 1865, Eplan Language Chinese Traditional |\n| **MultiLanguageTranslation** | 720 | 720, Eplan Multi Language Translation |\n| **MultiLine** | 4755 | 4755, Eplan Multi Line |\n| **Multiuser** | 719 | 719, Multi-user |\n| **MultiuserManagement** | 605 | 605, Eplan Multiuser Management |\n| **MultiuserMonitor** | 568 | 568, Eplan Multiuser Monitor |\n| **NetBasedWiring** | 370 | 370, Eplan Net Based Wiring |\n| **OldExcelInterface** | 1969 | 1969, Eplan Old Excel Interface |\n| **OpcUaInterface** | 1360 | 1360, Eplan OPC UA Interface |\n| **OperationalSequence** | 602 | 602, Eplan Operational Sequence |\n| **PageNumbering** | 379 | 379, Page numbering |\n| **Pages40** | 708 | 708, Page limit: 40 pages |\n| **Pages80** | 707 | 707, Page limit: 80 pages |\n| **PagesUnlimited** | 706 | 706, No page limit |\n| **PanelLayout** | 724 | 724, Eplan Mounting Panel |\n| **PID** | 851 | 851, Eplan P&ID (Add-on) |\n| **PlaceholderAssignObjects** | 392 | 392, Placeholder Assign Objects |\n| **PlaceholderObjects** | 784 | 784, Placeholder objects |\n| **PLCAssignmentLists** | 383 | 383, PLC assignment lists |\n| **PLCBusExtension** | 732 | 732, Eplan PLC & BUS Extension |\n| **PotentialAndSignal** | 821 | 821, Potential and signal |\n| **PreplanningExport** | 1973 | 1973, Preplanning export |\n| **PreplanningObjectsBase** | 1125 | 1125, Eplan Preplanning Objects Base |\n| **PreplanningObjectsPID** | 1124 | 1124, Eplan Preplanning Objects P&ID |\n| **PreplanningPID** | 1122 | 1122, Eplan Preplanning |\n| **ProcessCopper** | 929 | 929, Eplan Pro Panel Process Copper |\n| **ProcessNC** | 908 | 908, Eplan Pro Panel Process NC |\n| **ProcessTubing** | 1039 | 1039, Eplan Pro Panel Process Tubing |\n| **ProcessWiring** | 909 | 909, Eplan Pro Panel Process Wiring |\n| **ProductionCopperDXF** | 960 | 960, Eplan Pro Panel Production Copper DXF |\n| **ProductionCopperNC** | 959 | 959, Eplan Pro Panel Production Copper NC |\n| **ProductionNC** | 910 | 910, Production NC (Add-on) |\n| **ProductionNCDXF** | 576 | 576, Eplan Pro Panel Production NC DXF |\n| **ProductionNCPerforex** | 574 | 574, Eplan Pro Panel Production Rittal - Perforex / Secarex |\n| **ProductionNCSteinhauer** | 572 | 572, Eplan Pro Panel Production NC Steinhauer |\n| **ProductionWiring** | 911 | 911, Production Wiring (Add-on) |\n| **ProductionWiringCableCenter** | 584 | 584, Eplan Pro Panel Production Wiring CableCenter |\n| **ProductionWiringCADCABEL** | 582 | 582, Eplan Pro Panel Production Wiring CadCabel |\n| **ProductionWiringKOMAX** | 578 | 578, Eplan Pro Panel Production Wiring KOMAX |\n| **ProductionWiringSchleunigerEASYProductionServer** | 580 | 580, Eplan Pro Panel Production Wiring Schleuniger EASY ProductionServer |\n| **ProductionWiringSteinhauerPWA** | 586 | 586, Eplan Pro Panel Production Wiring Steinhauer PWA |\n| **ProductstreamInterface** | 744 | 744, Eplan Productstream Interface |\n| **PROFILEConnector** | 4785 | 4785, Eplan PRO.FILE Connector |\n| **ProjectManagement** | 783 | 783, Eplan Project Management |\n| **ProjectOptions** | 797 | 797, Eplan Project Options |\n| **ProjectProcessing** | 692 | 692, Eplan Project Processing |\n| **ProjectReference** | 742 | 742, Eplan Project Reference |\n| **ProPanel** | 905 | 905, Eplan Pro Panel 3D |\n| **ProPanelCopper** | 955 | 955, Eplan Pro Panel Copper |\n| **ProPanelDesignSpaceExchange** | 1219 | 1219, Eplan Pro Panel - Design Space Exchange |\n| **ProPanelFluid** | 1051 | 1051, Eplan Pro Panel Fluid |\n| **ProPanelIFCExport** | 4546 | 4546, Eplan Pro Panel IFC-Export |\n| **ProPanelJTExport** | 4547 | 4547, Eplan Pro Panel JT-Export |\n| **ProPanelJTImport** | 4548 | 4548, Eplan Pro Panel JT-Import |\n| **ProPanelProductionAthex** | 1126 | 1126, Eplan Pro Panel Production Rittal - Athex |\n| **ProPanelProductionPiping** | 1362 | 1362, Eplan Pro Panel Production Piping |\n| **ProPanelProductionRittalAssembly** | 1861 | 1861, Eplan Pro Panel Production Rittal Assembly |\n| **ProPanelProductionRittalAutomationSystems** | 1744 | 1744, Eplan Pro Panel Production Rittal Configuration System |\n| **ProPanelProductionRittalCutting** | 1860 | 1860, Eplan Pro Panel Production Rittal Cutting |\n| **ProPanelProductionRittalMachining** | 1859 | 1859, Eplan Pro Panel Production Rittal Machining |\n| **ProPanelProductionRittalPerforexLC\\_Secarex** | 1538 | 1538, Eplan Pro Panel Production Rittal - Perforex LC / Secarex |\n| **ProPanelProductionRittalWireProcessing** | 1862 | 1862, Eplan Pro Panel Production Rittal Wire Processing |\n| **ProPanelProductionRittalWireTerminalWT** | 1743 | 1743, Eplan Pro Panel Production Wiring Rittal - Wire Terminal WT |\n| **ProPanelProductionSmartWiring** | 1740 | 1740, Eplan Pro Panel Production Smart Production |\n| **ProPanelProfessional** | 907 | 907, Eplan Pro Panel |\n| **ProPanelThermalDesignIntegrationMasterData** | 1259 | 1259, Eplan Pro Panel Thermal Design Integration Master Data |\n| **ProPanelThermalDesignIntegrationViewingData** | 1257 | 1257, Eplan Pro Panel Thermal Design Integration Viewing Data |\n| **RevisionManagement** | 723 | 723, Eplan Revision Management |\n| **RevisionMarkers** | 820 | 820, Revision markers |\n| **RidderIQConnector** | 4787 | 4787, Eplan Ridder IQ Connector |\n| **SAPECTRConnector** | 4789 | 4789, Eplan SAP ECTR Connector |\n| **SAPR\\_3DVSInterface** | 601 | 601, Eplan SAP Interface DMS |\n| **SAPR\\_3MaterialInterface** | 600 | 600, Eplan SAP Interface Material |\n| **SchematicGenerator** | 743 | 743, Eplan Schematic Generator |\n| **SchematicGeneratorExtension** | 397 | 397, Eplan Schematic Generator Extension |\n| **SingleLine** | 775 | 775, Eplan Single Line |\n| **SISTEMAInterface** | 1358 | 1358, Eplan SISTEMA |\n| **StepExport** | 608 | 608, Eplan Pro Panel - STEP Export |\n| **StoreShareViewPublisher** | 1651 | 1651, Eplan Store Share View Publisher |\n| **StoreShareViewRedliner** | 1653 | 1653, Eplan Store Share View Redliner |\n| **SwapSymbolPlacementType** | 384 | 384, Swap symbol placement type |\n| **SynchronizeProjectData** | 1739 | 1739, Eplan Synchronize project data |\n| **SystemMessages** | 819 | 819, System messages |\n| **TeamcenterConnector** | 4783 | 4783, Eplan Teamcenter Connector |\n| **ToSAPIntegration** | 745 | 745, Eplan to SAP Integration |\n| **UserRightsManagement** | 722 | 722, Eplan User Rights Management |\n| **UsingUserScripts** | 823 | 823, Using user scripts |\n| **VaultConnector** | 4788 | 4788, Eplan Vault Connector |\n| **View** | 701 | 701, Eplan View |\n| **ViewingOfElectricLogic** | 798 | 798, Viewing of electric logic |\n| **WindchillConnector** | 4784 | 4784, Eplan Windchill Connector |\n| **WireNumbering** | 381 | 381, Wire numbering |\n\nInheritance Hierarchy\n\nSystem.Object](#)  \n   [System.ValueType](#)  \n      [System.Enum](#)  \n         **Eplan.EplApi.ApplicationFramework.LicenseOptions**"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.QuietModes.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Enumerations",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.QuietModes",
        "content": "Quiet modes\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic enum QuietModes : System.Enum\n```\n```\n\n```\n```\npublic enum class QuietModes : public System.Enum\n```\n```\n\nMembers\n\n| Member | Value | Description |\n| --- | --- | --- |\n| **ShowAllDialogs** | 0 |  |\n| **ShowNoDialogs** | 1 |  |\n| **ShowSomeDialogs** | 2 |  |\n| **Undefined** | -1 |  |\n\nRemarks\n\nShowAllDialogs : all dialogs will be shown ShowNoDialogs : no dialogs will be shown ShowSomeDialogs : only some special dialogs will be shown, e.g.progress bars\n\nInheritance Hierarchy\n\n[System.Object](#)  \n   [System.ValueType](#)  \n      [System.Enum](#)  \n         **Eplan.EplApi.ApplicationFramework.QuietModes**"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IActionCallingContext.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IActionCallingContext",
        "content": "Interface class for the ActionCallingContext](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionCallingContext.html) class. Can be used instead of the class in function parameters.\n\nSyntax\n\n* [C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic interface IActionCallingContext\n```\n```\n\n```\n```\npublic interface class IActionCallingContext\n```\n```"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ICommandLineInterpreter.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ICommandLineInterpreter",
        "content": "For internal use only. A fixed interface ID is specified which is used to generate this interface in W3u.exe. This ID is specified in the source code and cannot be changed.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\n[Guid(\"68175996-AC53-3881-81F4-3C1A25B897C9\")]\npublic interface ICommandLineInterpreter\n```\n```\n\n```\n```\n[Guid(\"68175996-AC53-3881-81F4-3C1A25B897C9\")]\npublic interface class ICommandLineInterpreter\n```\n```\n\n\n\n\n\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Method | [Execute](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ICommandLineInterpreter~Execute.html) | Overloaded. For internal use only. |\n| Method | [IsExecutable](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ICommandLineInterpreter~IsExecutable.html) | For internal use only. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplAction.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplAction",
        "content": "Interface declaration for an action. When an action is to be registered for an add-in (an assembly) in the system, this interface must be implemented by a class of the add-in.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\n[Guid(\"83FAA39E-2215-3984-982F-29FFB4B3F5F2\")]\npublic interface IEplAction\n```\n```\n\n```\n```\n[Guid(\"83FAA39E-2215-3984-982F-29FFB4B3F5F2\")]\npublic interface class IEplAction\n```\n```\n\nRemarks\n\nAction names with . are not allowed.\n\nExample\n\nImplementation of a Action in an add-in\n\n* [C#](#i-tab-content-4251deee-74d5-4883-8300-852ad6ae6de8)\n\n```\npublic class NewAction: IEplAction\n{\t\n    public bool Execute(ActionCallingContext ctx)\n    {\n        // TODO: \n        // Add code\n  new Decider().Decide(EnumDecisionType.eOkDecision, \"NewAction was invoked!\", \"\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK);\n\n        return true;\n    }\n\n public bool OnRegister(ref string Name, ref int Ordinal)\n {\n     Name\t= \"NewAction\";\n     Ordinal\t= 20;\n     return true;\n }\n\n public  void GetActionProperties(ref ActionProperties actionProperties)\n {\n     actionProperties.Description= \"Description of NewAction\";\n }\n```\n\n\n\n\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Method | [Execute](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplAction~Execute.html) | Called by the framework when the action is to be performed. |\n| Method | [GetActionProperties](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplAction~GetActionProperties.html) | Returns descriptive data for the action. For documentation purposes only. |\n| Method | [OnRegister](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplAction~OnRegister.html) | The action can be registered under a name determined by the action and an overload level. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplActionChecked.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplActionChecked",
        "content": "Interface to switch the status on / off of an Action. If this interface is not used, the Action is off by default. If you implement this interface in an action class, you can set the state of the respective Action to on. If 0, unchecks; if 1, checks; and if 2, sets indeterminate.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic interface IEplActionChecked\n```\n```\n\n```\n```\npublic interface class IEplActionChecked\n```\n```\n\nExample\n\n* [c#\n\n```\npublic class TestAction : Eplan.EplApi.ApplicationFramework.IEplAction, Eplan.EplApi.ApplicationFramework.IEplActionChecked\n    {\n        //IEplAction Members\n\n        \\#region IEplActionChecked Members\n\n        public int Checked(string strActionName, Eplan.EplApi.ApplicationFramework.ActionCallingContext actionContext)\n        {\n            if (strActionName == \"TESTACTIONMIXED\")\n            {\n                return 2;\n            } \n\t\t\telse if (strActionName == \"TESTACTION\")\n            {\n                return 1;\n            }\n            else \n            {\n                return 0;\n            }\n\n        }\n\n        \\#endregion\n    }\n```\n\n\n\n\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Method | Checked](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplActionChecked~Checked.html) | One action can have the state on off or mixed. Return 0 for off, 1 for on, and 2 for mixed. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplActionEnable.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplActionEnable",
        "content": "Interface to enable or disable an Action. If this interface is not used, the Action is enabled by default. If you implement this interface in an action class, you can set the respective Action to disabled. If a ribbon item points to this Action, they will be also disabled (grayed out).\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic interface IEplActionEnable\n```\n```\n\n```\n```\npublic interface class IEplActionEnable\n```\n```\n\nExample\n\n* [c#](#i-tab-content-bd403255-ce68-4ae3-a18a-dc3010b1981e)\n\n```\npublic class TestAction : Eplan.EplApi.ApplicationFramework.IEplAction, Eplan.EplApi.ApplicationFramework.IEplActionEnable\n    {\n        //IEplAction Members\n\n        #region IEplActionEnable Members\n\n        public bool Enabled(string strActionName, Eplan.EplApi.ApplicationFramework.ActionCallingContext actionContext)\n        {\n            if (strActionName == \"TESTACTION\")\n            {\n                return false;\n            }\n            else\n            {\n                return true;\n            }\n        }\n        #endregion\n    }\n```\n\n\n\n\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Method | [Enabled](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplActionEnable~Enabled.html) | One action can be enabled or disabled. Return true when it is enabled. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplAddIn.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplAddIn",
        "content": "Interface declaration for an EPLAN add-in. If an assembly is to be loaded as an EPLAN add-in, exactly one class of the assembly must implement this interface.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\n[Guid(\"772B6E84-84D0-3597-8397-363C01BB41B6\")]\npublic interface IEplAddIn\n```\n```\n\n```\n```\n[Guid(\"772B6E84-84D0-3597-8397-363C01BB41B6\")]\npublic interface class IEplAddIn\n```\n```\n\n\n\n\n\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Method | [OnExit](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplAddIn~OnExit.html) | Is called at system shutdown if the add-in was loaded at system startup! |\n| Method | [OnInit](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplAddIn~OnInit.html) | Is called if the add-in is to be loaded at system start-up . |\n| Method | [OnInitGui](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplAddIn~OnInitGui.html) | Called by the framework if the user interface was initialized and the add-in can modify the user interface. Is only called if the add-in is loaded at system startup! |\n| Method | [OnRegister](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplAddIn~OnRegister.html) | Is called once when a new add-in is selected. |\n| Method | [OnUnregister](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplAddIn~OnUnregister.html) | Is called once, when the add-in is removed from the system. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplAddInShadowCopy.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplAddInShadowCopy",
        "content": "Provides a mechanism for framework to pass information about original location of the add-in assembly.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic interface IEplAddInShadowCopy\n```\n```\n\n```\n```\npublic interface class IEplAddInShadowCopy\n```\n```\n\nRemarks\n\nTo use this functionality the interface needs to be implemented by class which also implements the IEplAddIn interface. Framework calls the OnBeforeInit method before [IEplAddIn.OnInit](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplAddIn~OnInit.html). The argument for this method is an full path of loaded assembly.\n\nExample\n\n* [C#](#i-tab-content-a85e888b-64e4-43cf-a75e-62a91c28637f)\n\n```\n/// <summary>\n///  That is an example for using IEplAddInShadowCopy in EPLAN Add-in.  \n/// </summary>\npublic class AddInModule: IEplAddIn, IEplAddInShadowCopy\n{\n    /// <summary>\n    /// This function is called once the Add-ins through the Framework in the registering.\n    /// </summary>\n    /// <param name=\"bLoadOnStart\"> True:  The Add-in is loaded in the future in system start and the function <seealso cref=\"OnInit\"/> is called. </param>\n    /// <returns></returns>\n    public bool OnRegister(ref System.Boolean bLoadOnStart)\n    {\n        bLoadOnStart = true;\n        return true;\n    }\n    /// <summary>\n    /// This function will remove from called once the Add-ins through the Framework in that the system. \n    /// </summary>\n    /// <returns></returns>\n    public bool OnUnregister()\n    {\n        return true;\n    }\n\n    /// <summary>\n    /// Called by the framework before <see cref=\"Eplan::EplApi::ApplicationFramework::IEplAddIn.OnInit\" text=\"OnInit\"/> and passes the\n    /// location from which add-in assembly has been registered.\n    /// </summary>\n    public void OnBeforeInit(string strOriginalAssemblyPath)\n    {\n        m_strOriginalAssemblyPath = strOriginalAssemblyPath;\n    }\n\n    public String GetOriginalAssemblyPath()\n    {\n        return m_strOriginalAssemblyPath;\n    }\n\n    /// <summary>\n    /// This function is called in system start if the Add-in is supposed to be loaded in system start.<seealso cref=\"OnRegister\"/> \n    /// </summary>\n    public bool OnInit()\n    {\n        return true;\n    }\n    /// <summary>\n    /// This function is called of the Framework if the Framework has initializes already its waiter specialties and the Add-in can modify this surface.  \n    /// Only is called if the Add-in is loaded also in system system start.  \n    /// </summary>\n    public bool OnInitGui()\n    {\n        return true;\n    }\n\n    /// <summary>\n    ///This function is called through the Framework in Programmedne if the Add-in was loaded in system start. <seealso cref=\"OnRegister\"/>   \n    /// </summary>\n    public bool OnExit()\n    {\n        return true;\n    }\n\n    private String m_strOriginalAssemblyPath;\n}\n\n```\n\n\n\n\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Method | [OnBeforeInit](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplAddInShadowCopy~OnBeforeInit.html) | Called by the framework before [IEplAddIn.OnInit](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplAddIn~OnInit.html) and passes the location from which add-in assembly has been registered. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplanEvents.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplanEvents",
        "content": "Declaration of the interface for EPLAN events.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\n[InterfaceType(ComInterfaceType.InterfaceIsIDispatch)]\npublic interface IEplanEvents\n```\n```\n\n```\n```\n[InterfaceType(ComInterfaceType.InterfaceIsIDispatch)]\npublic interface class IEplanEvents\n```\n```\n\n\n\n\n\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Method | [EplanEvent](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplanEvents~EplanEvent.html) | this is the function prototype called when an Eplan event is raised. |\n| Method | [EplanNameEvent](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplanEvents~EplanNameEvent.html) | this is the function prototype called when an Eplan event is raised. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplanEventsWrapper.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplanEventsWrapper",
        "content": "For internal use only.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic interface IEplanEventsWrapper\n```\n```\n\n```\n```\npublic interface class IEplanEventsWrapper\n```\n```\n\n\n\n\n\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Method | [EplanEventLocally](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplanEventsWrapper~EplanEventLocally.html) | For internal use only. |\n| Method | [EplanNameEventLocally](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplanEventsWrapper~EplanNameEventLocally.html) | For internal use only. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEventParameter.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEventParameter",
        "content": "Base interface declaration for event parameters\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic interface IEventParameter\n```\n```\n\n```\n```\npublic interface class IEventParameter\n```\n```\n\n\n\n\n\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Method | [GetInternalParameter](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEventParameter~GetInternalParameter.html) | For internal use only. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IExtendedProcessor.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IExtendedProcessor",
        "content": "Interface for implementing an extended processor in connection with the IXMLProcessor.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic interface IExtendedProcessor : IInterface\n```\n```\n\n```\n```\npublic interface class IExtendedProcessor : public IInterface\n```\n```\n\n\n\n\n\nPublic Properties\n\n|  | Name | Description |\n| --- | --- | --- |\n| Property | [InterfaceName](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IInterface~InterfaceName.html) | This name is used to register the type as an interface. (Inherited from [Eplan.EplApi.ApplicationFramework.IInterface](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IInterface.html)) |\n\n[Top](#top)\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Method | [CanExportDirect](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IExtendedProcessor~CanExportDirect.html) | Indicates whether the converter provides an export. |\n| Method | [CanImportDirect](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IExtendedProcessor~CanImportDirect.html) | Indicates whether the converter can import external formats |\n| Method | [ExportDirect](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IExtendedProcessor~ExportDirect.html) | Exports to a special file. All Parameter are in the context. |\n| Method | [GetExtendedOptions](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IExtendedProcessor~GetExtendedOptions.html) | Function for extended Options. Set the parameters in the context |\n| Method | [ImportDirect](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IExtendedProcessor~ImportDirect.html) | Imports the file to the system EContext may point to an EProgress object to support a progress bar. Returns true if successful. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IInterface.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IInterface",
        "content": "A type implementing this interface can be registered as an EPLAN interface.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic interface IInterface\n```\n```\n\n```\n```\npublic interface class IInterface\n```\n```\n\n\n\n\n\nPublic Properties\n\n|  | Name | Description |\n| --- | --- | --- |\n| Property | [InterfaceName](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IInterface~InterfaceName.html) | This name is used to register the type as an interface. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IOptions.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IOptions",
        "content": "If a class implements this interface, a settings dialog can be assigned to the XML processor.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic interface IOptions\n```\n```\n\n```\n```\npublic interface class IOptions\n```\n```\n\n\n\n\n\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Method | [ShowOptions](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IOptions~ShowOptions.html) | Is called if the settings dialog for an XML processor is to be displayed. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IXMLProcessor.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IXMLProcessor",
        "content": "Interface for implementing an XML processor.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic interface IXMLProcessor : IInterface\n```\n```\n\n```\n```\npublic interface class IXMLProcessor : public IInterface\n```\n```\n\n\n\n\n\nPublic Properties\n\n|  | Name | Description |\n| --- | --- | --- |\n| Property | [InterfaceName](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IInterface~InterfaceName.html) | This name is used to register the type as an interface. (Inherited from [Eplan.EplApi.ApplicationFramework.IInterface](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IInterface.html)) |\n\n[Top](#top)\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Method | [CanExport](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IXMLProcessor~CanExport.html) | Indicates whether the converter provides an export option. |\n| Method | [CanImport](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IXMLProcessor~CanImport.html) | Indicates whether the converter can convert external formats to XML. |\n| Method | [Export](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IXMLProcessor~Export.html) | Converts the XML file to a special file. |\n| Method | [GetErrorMessage](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IXMLProcessor~GetErrorMessage.html) | Returns an error message if an error occured during export/import. |\n| Method | [GetFileFilter](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IXMLProcessor~GetFileFilter.html) | Returns the filter string for the file selection box. |\n| Method | [GetName](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IXMLProcessor~GetName.html) | Returns the name of the converter. |\n| Method | [GetOption](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IXMLProcessor~GetOption.html) | Returns a settings dialog for this processor. Dialog is only created, but not displayed! |\n| Method | [Import](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IXMLProcessor~Import.html) | Conversion from sImportFile to sXmlFile. sXmlFile might be passed as \"\". In this case, the converter must set a file name. EContext may point to an EProgress object to support a progress bar. Returns true if successful. |\n| Method | [PostExport](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IXMLProcessor~PostExport.html) | Is called after export has been completed. |\n| Method | [PostImport](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IXMLProcessor~PostImport.html) | Is called after import has been completed. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ICommandLineInterpreter_methods.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces/ICommandLineInterpreter",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ICommandLineInterpreter_methods",
        "content": "For a list of all members of this type, see ICommandLineInterpreter members](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ICommandLineInterpreter_members.html).\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Method | [Execute](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ICommandLineInterpreter~Execute.html) | Overloaded. For internal use only. |\n| Method | [IsExecutable](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ICommandLineInterpreter~IsExecutable.html) | For internal use only. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ICommandLineInterpreterExecute.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces/ICommandLineInterpreter/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ICommandLineInterpreterExecute",
        "content": "For internal use only.\n\nOverload List\n\n| Overload | Description |\n| --- | --- |\n| Execute(String)](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ICommandLineInterpreter~Execute(String).html) | For internal use only. |\n| [Execute(String,ActionCallingContext)](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ICommandLineInterpreter~Execute(String,ActionCallingContext).html) | For internal use only. |"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ICommandLineInterpreterIsExecutable.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces/ICommandLineInterpreter/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ICommandLineInterpreterIsExecutable",
        "content": "For internal use only.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\nbool IsExecutable( \n   string strExpression\n)\n```\n```\n\n```\n```\nbool IsExecutable( \n   String^ strExpression\n)\n```\n```\n\n#### Parameters\n\n*strExpression*\n:   For internal use only.\n\n#### Return Value\n\nFor internal use only."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ICommandLineInterpreterExecuteString.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces/ICommandLineInterpreter/Methods/Execute Method",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ICommandLineInterpreterExecuteString",
        "content": "For internal use only.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\nbool Execute( \n   string strExpression\n)\n```\n```\n\n```\n```\nbool Execute( \n   String^ strExpression\n)\n```\n```\n\n#### Parameters\n\n*strExpression*\n:   For internal use only.\n\n#### Return Value\n\nFor internal use only."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ICommandLineInterpreterExecuteStringActionCallingContext.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces/ICommandLineInterpreter/Methods/Execute Method",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.ICommandLineInterpreterExecuteStringActionCallingContext",
        "content": "For internal use only.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\nbool Execute( \n   string strExpression,\n   ActionCallingContext oContext\n)\n```\n```\n\n```\n```\nbool Execute( \n   String^ strExpression,\n   ActionCallingContext^ oContext\n)\n```\n```\n\n#### Parameters\n\n*strExpression*\n:   For internal use only.\n\n*oContext*\n:   For internal use only.\n\n#### Return Value\n\nFor internal use only."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplAction_methods.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces/IEplAction",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplAction_methods",
        "content": "For a list of all members of this type, see IEplAction members](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplAction_members.html).\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Method | [Execute](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplAction~Execute.html) | Called by the framework when the action is to be performed. |\n| Method | [GetActionProperties](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplAction~GetActionProperties.html) | Returns descriptive data for the action. For documentation purposes only. |\n| Method | [OnRegister](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplAction~OnRegister.html) | The action can be registered under a name determined by the action and an overload level. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplActionExecute.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces/IEplAction/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplActionExecute",
        "content": "Called by the framework when the action is to be performed.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\nbool Execute( \n   ActionCallingContext oActionCallingContext\n)\n```\n```\n\n```\n```\nbool Execute( \n   ActionCallingContext^ oActionCallingContext\n)\n```\n```\n\n#### Parameters\n\n*oActionCallingContext*\n:   Parameter for this call, see [ActionCallingContext](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionCallingContext.html).\n\n#### Return Value\n\ntrue, if the action was successfully performed; true, if the action was successfully registered in the system."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplActionGetActionProperties.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces/IEplAction/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplActionGetActionProperties",
        "content": "Returns descriptive data for the action. For documentation purposes only.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\nvoid GetActionProperties( \n   ref ActionProperties actionProperties\n)\n```\n```\n\n```\n```\nvoid GetActionProperties( \n   ActionProperties^% actionProperties\n)\n```\n```\n\n#### Parameters\n\n*actionProperties*\n:   The data structure [ActionProperties](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionProperties.html) is filled with the properties."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplActionOnRegister.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces/IEplAction/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplActionOnRegister",
        "content": "The action can be registered under a name determined by the action and an overload level.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI\n\n```\n```\nbool OnRegister( \n   ref string Name,\n   ref int Ordinal\n)\n```\n```\n\n```\n```\nbool OnRegister( \n   String^% Name,\n   int% Ordinal\n)\n```\n```\n\n#### Parameters\n\n*Name*\n:   Name under which the action is registered in the system. Note\\: Action names with . are not allowed.\n\n*Ordinal*\n:   Overload level of action\n\n#### Return Value\n\ntrue: the return parameters are valid. false: the action is registered under the name of the class that implements this interface;"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplActionChecked_methods.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces/IEplActionChecked",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplActionChecked_methods",
        "content": "For a list of all members of this type, see IEplActionChecked members](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplActionChecked_members.html).\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Method | [Checked](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplActionChecked~Checked.html) | One action can have the state on off or mixed. Return 0 for off, 1 for on, and 2 for mixed. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplActionCheckedChecked.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces/IEplActionChecked/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplActionCheckedChecked",
        "content": "One action can have the state on off or mixed. Return 0 for off, 1 for on, and 2 for mixed.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\nint Checked( \n   string strActionName,\n   ActionCallingContext actionContext\n)\n```\n```\n\n```\n```\nint Checked( \n   String^ strActionName,\n   ActionCallingContext^ actionContext\n)\n```\n```\n\n#### Parameters\n\n*strActionName*\n:   The name of this action\n\n*actionContext*\n:   The calling context.\n\n#### Return Value\n\n0: The return action has the state unchecked. 1: The return action has the state checked. 2: The return action has the state mixed.\n\nRemarks\n\nThis function is called often and should work fast."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplActionEnable_methods.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces/IEplActionEnable",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplActionEnable_methods",
        "content": "For a list of all members of this type, see IEplActionEnable members](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplActionEnable_members.html).\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Method | [Enabled](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplActionEnable~Enabled.html) | One action can be enabled or disabled. Return true when it is enabled. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplActionEnableEnabled.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces/IEplActionEnable/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplActionEnableEnabled",
        "content": "One action can be enabled or disabled. Return true when it is enabled.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\nbool Enabled( \n   string strActionName,\n   ActionCallingContext actionContext\n)\n```\n```\n\n```\n```\nbool Enabled( \n   String^ strActionName,\n   ActionCallingContext^ actionContext\n)\n```\n```\n\n#### Parameters\n\n*strActionName*\n:   The name of this action\n\n*actionContext*\n:   The calling context\n\n#### Return Value\n\ntrue: The return action is enabled.\n\nRemarks\n\nThis function is called often and should work efficiently ."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplAddIn_methods.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces/IEplAddIn",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplAddIn_methods",
        "content": "For a list of all members of this type, see IEplAddIn members](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplAddIn_members.html).\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Method | [OnExit](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplAddIn~OnExit.html) | Is called at system shutdown if the add-in was loaded at system startup! |\n| Method | [OnInit](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplAddIn~OnInit.html) | Is called if the add-in is to be loaded at system start-up . |\n| Method | [OnInitGui](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplAddIn~OnInitGui.html) | Called by the framework if the user interface was initialized and the add-in can modify the user interface. Is only called if the add-in is loaded at system startup! |\n| Method | [OnRegister](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplAddIn~OnRegister.html) | Is called once when a new add-in is selected. |\n| Method | [OnUnregister](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplAddIn~OnUnregister.html) | Is called once, when the add-in is removed from the system. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplAddInOnExit.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces/IEplAddIn/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplAddInOnExit",
        "content": "Is called at system shutdown if the add-in was loaded at system startup!\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\nbool OnExit()\n```\n```\n\n```\n```\nbool OnExit();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplAddInOnInit.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces/IEplAddIn/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplAddInOnInit",
        "content": "Is called if the add-in is to be loaded at system start-up .\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\nbool OnInit()\n```\n```\n\n```\n```\nbool OnInit();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplAddInOnInitGui.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces/IEplAddIn/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplAddInOnInitGui",
        "content": "Called by the framework if the user interface was initialized and the add-in can modify the user interface. Is only called if the add-in is loaded at system startup!\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\nbool OnInitGui()\n```\n```\n\n```\n```\nbool OnInitGui();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplAddInOnRegister.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces/IEplAddIn/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplAddInOnRegister",
        "content": "Is called once when a new add-in is selected.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\nbool OnRegister( \n   ref bool bLoadOnStart\n)\n```\n```\n\n```\n```\nbool OnRegister( \n   bool% bLoadOnStart\n)\n```\n```\n\n#### Parameters\n\n*bLoadOnStart*\n:   true: The module is loaded at system startup and OnInit() is called.\n\n#### Return Value\n\ntrue, if the add-in was successfully loaded and registered.\n\nRemarks\n\nWhen this function returns false, the add-in is not added to the system. At next start of EPLAN the add-in is not loaded. If bLoadOnStart is set to false, the API add-in assembly is registered but not loaded automatically on the next startup of EPLAN. Still all actions registered with the add-in are known in EPLAN and the add-in will be loaded once one of the actions is executed. Please mind, that in this case OnInitGui(), etc. is only called, when the dll is loaded, so normal ribbon items from the add-in are not created, when EPLAN starts."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplAddInOnUnregister.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces/IEplAddIn/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplAddInOnUnregister",
        "content": "Is called once, when the add-in is removed from the system.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\nbool OnUnregister()\n```\n```\n\n```\n```\nbool OnUnregister();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplAddInShadowCopy_methods.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces/IEplAddInShadowCopy",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplAddInShadowCopy_methods",
        "content": "For a list of all members of this type, see IEplAddInShadowCopy members](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplAddInShadowCopy_members.html).\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Method | [OnBeforeInit](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplAddInShadowCopy~OnBeforeInit.html) | Called by the framework before [IEplAddIn.OnInit](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplAddIn~OnInit.html) and passes the location from which add-in assembly has been registered. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplAddInShadowCopyOnBeforeInit.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces/IEplAddInShadowCopy/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplAddInShadowCopyOnBeforeInit",
        "content": "Called by the framework before IEplAddIn.OnInit](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplAddIn~OnInit.html) and passes the location from which add-in assembly has been registered.\n\nSyntax\n\n* [C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\nvoid OnBeforeInit( \n   string strOriginalAssemblyPath\n)\n```\n```\n\n```\n```\nvoid OnBeforeInit( \n   String^ strOriginalAssemblyPath\n)\n```\n```\n\n#### Parameters\n\n*strOriginalAssemblyPath*\n:   Full path to location from which the add-in assembly has been registered.\n\nRemarks\n\nAny exception thrown by this method don't influence the initialization process. Such exception is wrapped and logged into System messages."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplanEvents_methods.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces/IEplanEvents",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplanEvents_methods",
        "content": "For a list of all members of this type, see IEplanEvents members](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplanEvents_members.html).\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Method | [EplanEvent](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplanEvents~EplanEvent.html) | this is the function prototype called when an Eplan event is raised. |\n| Method | [EplanNameEvent](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplanEvents~EplanNameEvent.html) | this is the function prototype called when an Eplan event is raised. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplanEventsEplanEvent.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces/IEplanEvents/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplanEventsEplanEvent",
        "content": "this is the function prototype called when an Eplan event is raised.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\nvoid EplanEvent( \n   IEventParameter pIEventParameter\n)\n```\n```\n\n```\n```\nvoid EplanEvent( \n   IEventParameter^ pIEventParameter\n)\n```\n```\n\n#### Parameters\n\n*pIEventParameter*\n:   The eventparameter for this event"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplanEventsEplanNameEvent.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces/IEplanEvents/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplanEventsEplanNameEvent",
        "content": "this is the function prototype called when an Eplan event is raised.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\nvoid EplanNameEvent( \n   IEventParameter pIEventParameter,\n   string strNameOfEvent\n)\n```\n```\n\n```\n```\nvoid EplanNameEvent( \n   IEventParameter^ pIEventParameter,\n   String^ strNameOfEvent\n)\n```\n```\n\n#### Parameters\n\n*pIEventParameter*\n:   The eventparameter for this event\n\n*strNameOfEvent*\n:   The original name of the event. This is useful when registered for more events with wildcards."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplanEventsWrapper_methods.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces/IEplanEventsWrapper",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplanEventsWrapper_methods",
        "content": "For a list of all members of this type, see IEplanEventsWrapper members](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplanEventsWrapper_members.html).\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Method | [EplanEventLocally](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplanEventsWrapper~EplanEventLocally.html) | For internal use only. |\n| Method | [EplanNameEventLocally](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplanEventsWrapper~EplanNameEventLocally.html) | For internal use only. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplanEventsWrapperEplanEventLocally.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces/IEplanEventsWrapper/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplanEventsWrapperEplanEventLocally",
        "content": "For internal use only.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\nvoid EplanEventLocally( \n   IEventParameter pEventParameter\n)\n```\n```\n\n```\n```\nvoid EplanEventLocally( \n   IEventParameter^ pEventParameter\n)\n```\n```\n\n#### Parameters\n\n*pEventParameter*"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplanEventsWrapperEplanNameEventLocally.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces/IEplanEventsWrapper/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEplanEventsWrapperEplanNameEventLocally",
        "content": "For internal use only.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\nvoid EplanNameEventLocally( \n   IEventParameter pEventParameter,\n   string strNameOfEvent\n)\n```\n```\n\n```\n```\nvoid EplanNameEventLocally( \n   IEventParameter^ pEventParameter,\n   String^ strNameOfEvent\n)\n```\n```\n\n#### Parameters\n\n*pEventParameter*\n\n\n*strNameOfEvent*"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEventParameter_methods.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces/IEventParameter",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEventParameter_methods",
        "content": "For a list of all members of this type, see IEventParameter members](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEventParameter_members.html).\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Method | [GetInternalParameter](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEventParameter~GetInternalParameter.html) | For internal use only. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEventParameterGetInternalParameter.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces/IEventParameter/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IEventParameterGetInternalParameter",
        "content": "For internal use only.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\nAfEventParameter GetInternalParameter()\n```\n```\n\n```\n```\nAfEventParameter GetInternalParameter();\n```\n```\n\n#### Return Value\n\nFor internal use only."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IExtendedProcessor_methods.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces/IExtendedProcessor",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IExtendedProcessor_methods",
        "content": "For a list of all members of this type, see IExtendedProcessor members](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IExtendedProcessor_members.html).\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Method | [CanExportDirect](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IExtendedProcessor~CanExportDirect.html) | Indicates whether the converter provides an export. |\n| Method | [CanImportDirect](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IExtendedProcessor~CanImportDirect.html) | Indicates whether the converter can import external formats |\n| Method | [ExportDirect](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IExtendedProcessor~ExportDirect.html) | Exports to a special file. All Parameter are in the context. |\n| Method | [GetExtendedOptions](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IExtendedProcessor~GetExtendedOptions.html) | Function for extended Options. Set the parameters in the context |\n| Method | [ImportDirect](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IExtendedProcessor~ImportDirect.html) | Imports the file to the system EContext may point to an EProgress object to support a progress bar. Returns true if successful. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IExtendedProcessorCanExportDirect.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces/IExtendedProcessor/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IExtendedProcessorCanExportDirect",
        "content": "Indicates whether the converter provides an export.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\nbool CanExportDirect( \n   Context oContext,\n   ref bool bSupportsProgress\n)\n```\n```\n\n```\n```\nbool CanExportDirect( \n   Context^ oContext,\n   bool% bSupportsProgress\n)\n```\n```\n\n#### Parameters\n\n*oContext*\n:   Context with parameters\n\n*bSupportsProgress*\n:   Indicates whether the converter supports a progress bar.\n\n#### Return Value\n\ntrue: export is possible; false: export is not possible"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IExtendedProcessorCanImportDirect.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces/IExtendedProcessor/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IExtendedProcessorCanImportDirect",
        "content": "Indicates whether the converter can import external formats\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\nbool CanImportDirect( \n   Context oContext,\n   ref bool bSupportsProgress\n)\n```\n```\n\n```\n```\nbool CanImportDirect( \n   Context^ oContext,\n   bool% bSupportsProgress\n)\n```\n```\n\n#### Parameters\n\n*oContext*\n:   Context with parameters\n\n*bSupportsProgress*\n:   Indicates whether the converter supports a progress bar.\n\n#### Return Value\n\ntrue: conversion is possible; false: conversion is not possible"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IExtendedProcessorExportDirect.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces/IExtendedProcessor/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IExtendedProcessorExportDirect",
        "content": "Exports to a special file. All Parameter are in the context.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\nbool ExportDirect( \n   string strOutputFile,\n   Context oContext\n)\n```\n```\n\n```\n```\nbool ExportDirect( \n   String^ strOutputFile,\n   Context^ oContext\n)\n```\n```\n\n#### Parameters\n\n*strOutputFile*\n:   Output file\n\n*oContext*\n:   Context with parameters\n\n#### Return Value\n\nReturns true if successful."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IExtendedProcessorGetExtendedOptions.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces/IExtendedProcessor/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IExtendedProcessorGetExtendedOptions",
        "content": "Function for extended Options. Set the parameters in the context\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\nbool GetExtendedOptions( \n   Context oContext\n)\n```\n```\n\n```\n```\nbool GetExtendedOptions( \n   Context^ oContext\n)\n```\n```\n\n#### Parameters\n\n*oContext*\n:   Context with parameters\n\n#### Return Value\n\nReturns true if successful."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IExtendedProcessorImportDirect.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces/IExtendedProcessor/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IExtendedProcessorImportDirect",
        "content": "Imports the file to the system EContext may point to an EProgress object to support a progress bar. Returns true if successful.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\nbool ImportDirect( \n   string strInputFile,\n   Context oContext\n)\n```\n```\n\n```\n```\nbool ImportDirect( \n   String^ strInputFile,\n   Context^ oContext\n)\n```\n```\n\n#### Parameters\n\n*strInputFile*\n:   Input file\n\n*oContext*\n:   Context with parameters"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IInterface_properties.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces/IInterface",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IInterface_properties",
        "content": "For a list of all members of this type, see IInterface members](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IInterface_members.html).\n\nPublic Properties\n\n|  | Name | Description |\n| --- | --- | --- |\n| Property | [InterfaceName](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IInterface~InterfaceName.html) | This name is used to register the type as an interface. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IInterfaceInterfaceName.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces/IInterface/Properties",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IInterfaceInterfaceName",
        "content": "This name is used to register the type as an interface.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\nstring InterfaceName {get;}\n```\n```\n\n```\n```\nproperty String^ InterfaceName {\n   String^ get();\n}\n```\n```"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IOptions_methods.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces/IOptions",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IOptions_methods",
        "content": "For a list of all members of this type, see IOptions members](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IOptions_members.html).\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Method | [ShowOptions](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IOptions~ShowOptions.html) | Is called if the settings dialog for an XML processor is to be displayed. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IOptionsShowOptions.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces/IOptions/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IOptionsShowOptions",
        "content": "Is called if the settings dialog for an XML processor is to be displayed.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\nvoid ShowOptions()\n```\n```\n\n```\n```\nvoid ShowOptions();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IXMLProcessor_methods.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces/IXMLProcessor",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IXMLProcessor_methods",
        "content": "For a list of all members of this type, see IXMLProcessor members](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IXMLProcessor_members.html).\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Method | [CanExport](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IXMLProcessor~CanExport.html) | Indicates whether the converter provides an export option. |\n| Method | [CanImport](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IXMLProcessor~CanImport.html) | Indicates whether the converter can convert external formats to XML. |\n| Method | [Export](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IXMLProcessor~Export.html) | Converts the XML file to a special file. |\n| Method | [GetErrorMessage](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IXMLProcessor~GetErrorMessage.html) | Returns an error message if an error occured during export/import. |\n| Method | [GetFileFilter](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IXMLProcessor~GetFileFilter.html) | Returns the filter string for the file selection box. |\n| Method | [GetName](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IXMLProcessor~GetName.html) | Returns the name of the converter. |\n| Method | [GetOption](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IXMLProcessor~GetOption.html) | Returns a settings dialog for this processor. Dialog is only created, but not displayed! |\n| Method | [Import](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IXMLProcessor~Import.html) | Conversion from sImportFile to sXmlFile. sXmlFile might be passed as \"\". In this case, the converter must set a file name. EContext may point to an EProgress object to support a progress bar. Returns true if successful. |\n| Method | [PostExport](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IXMLProcessor~PostExport.html) | Is called after export has been completed. |\n| Method | [PostImport](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IXMLProcessor~PostImport.html) | Is called after import has been completed. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IXMLProcessorCanExport.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces/IXMLProcessor/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IXMLProcessorCanExport",
        "content": "Indicates whether the converter provides an export option.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\nbool CanExport( \n   Context oContext,\n   ref bool bSupportsProgress\n)\n```\n```\n\n```\n```\nbool CanExport( \n   Context^ oContext,\n   bool% bSupportsProgress\n)\n```\n```\n\n#### Parameters\n\n*oContext*\n:   Context with parameters\n\n*bSupportsProgress*\n:   Indicates whether the converter supports a progress bar.\n\n#### Return Value\n\ntrue: export is possible; false: export is not possible"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IXMLProcessorCanImport.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces/IXMLProcessor/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IXMLProcessorCanImport",
        "content": "Indicates whether the converter can convert external formats to XML.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\nbool CanImport( \n   Context oContext,\n   ref bool bSupportsProgress\n)\n```\n```\n\n```\n```\nbool CanImport( \n   Context^ oContext,\n   bool% bSupportsProgress\n)\n```\n```\n\n#### Parameters\n\n*oContext*\n:   Context with parameters\n\n*bSupportsProgress*\n:   Indicates whether the converter supports a progress bar.\n\n#### Return Value\n\ntrue: conversion is possible; false: conversion is not possible"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IXMLProcessorExport.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces/IXMLProcessor/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IXMLProcessorExport",
        "content": "Converts the XML file to a special file.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\nbool Export( \n   string strXmlFile,\n   string strOutputFile,\n   Context oContext\n)\n```\n```\n\n```\n```\nbool Export( \n   String^ strXmlFile,\n   String^ strOutputFile,\n   Context^ oContext\n)\n```\n```\n\n#### Parameters\n\n*strXmlFile*\n:   Input file\n\n*strOutputFile*\n:   Output file\n\n*oContext*\n:   Context with parameters\n\n#### Return Value\n\nReturns true if successful."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IXMLProcessorGetErrorMessage.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces/IXMLProcessor/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IXMLProcessorGetErrorMessage",
        "content": "Returns an error message if an error occured during export/import.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\nstring GetErrorMessage()\n```\n```\n\n```\n```\nString^ GetErrorMessage();\n```\n```\n\n#### Return Value\n\nError message"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IXMLProcessorGetFileFilter.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces/IXMLProcessor/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IXMLProcessorGetFileFilter",
        "content": "Returns the filter string for the file selection box.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\nstring GetFileFilter()\n```\n```\n\n```\n```\nString^ GetFileFilter();\n```\n```\n\n#### Return Value\n\nFilter string"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IXMLProcessorGetName.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces/IXMLProcessor/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IXMLProcessorGetName",
        "content": "Returns the name of the converter.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\nstring GetName()\n```\n```\n\n```\n```\nString^ GetName();\n```\n```\n\n#### Return Value\n\nName of converter, is shown in selection list."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IXMLProcessorGetOption.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces/IXMLProcessor/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IXMLProcessorGetOption",
        "content": "Returns a settings dialog for this processor. Dialog is only created, but not displayed!\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\nIOptions GetOption()\n```\n```\n\n```\n```\nIOptions^ GetOption();\n```\n```\n\n#### Return Value\n\nInterface of the created dialog."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IXMLProcessorImport.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces/IXMLProcessor/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IXMLProcessorImport",
        "content": "Conversion from sImportFile to sXmlFile. sXmlFile might be passed as \"\". In this case, the converter must set a file name. EContext may point to an EProgress object to support a progress bar. Returns true if successful.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\nbool Import( \n   string strInputFile,\n   string strXmlFile,\n   Context oContext\n)\n```\n```\n\n```\n```\nbool Import( \n   String^ strInputFile,\n   String^ strXmlFile,\n   Context^ oContext\n)\n```\n```\n\n#### Parameters\n\n*strInputFile*\n:   Input file\n\n*strXmlFile*\n:   Output file\n\n*oContext*\n:   Context with parameters"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IXMLProcessorPostExport.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces/IXMLProcessor/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IXMLProcessorPostExport",
        "content": "Is called after export has been completed.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\nbool PostExport()\n```\n```\n\n```\n```\nbool PostExport();\n```\n```\n\n#### Return Value\n\nIf true, an Information dialog box is displayed."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IXMLProcessorPostImport.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiApplicationFramework Namespace/Interfaces/IXMLProcessor/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.ApplicationFramework.IXMLProcessorPostImport",
        "content": "Is called after import has been completed.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\nbool PostImport()\n```\n```\n\n```\n```\nbool PostImport();\n```\n```\n\n#### Return Value\n\nIf true, an Information dialog box is displayed."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.BaseRemoting_namespace.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiBaseRemoting Namespace",
        "title": "Eplan.EplApi.AFuEplan.EplApi.BaseRemoting_namespace",
        "content": "This namespace is used for working with EPLAN Remoting.\n\nEnumerations\n\n|  | Enumeration | Description |\n| --- | --- | --- |\n| Enumeration | [\\_kResponse](Eplan.EplApi.AFu~Eplan.EplApi.BaseRemoting._kResponse.html) |  |\n| Enumeration | [\\_SynchronizationMode](Eplan.EplApi.AFu~Eplan.EplApi.BaseRemoting._SynchronizationMode.html) |  |"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.BaseRemoting._kResponse.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiBaseRemoting Namespace/Enumerations",
        "title": "Eplan.EplApi.AFuEplan.EplApi.BaseRemoting._kResponse",
        "content": "Syntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic enum _kResponse : System.Enum\n```\n```\n\n```\n```\npublic enum class _kResponse : public System.Enum\n```\n```\n\nMembers\n\n| Member | Value | Description |\n| --- | --- | --- |\n| **clientNotConnectedToServer** | 6 | Client not connected to server |\n| **reqExceptionRaisedInClient** | 9 | Exception raised on Eplan client side |\n| **reqExceptionRaisedInServer** | 8 | Exception raised on Eplan server side |\n| **reqExecuted** | 2 | client request executed |\n| **reqNotExecuted** | 3 | client request not executed |\n| **reqRejected** | 1 | client request rejected |\n| **reqTransmitted** | 4 | client request transmitted to Eplan remoting server |\n| **reqUndefined** | 0 | undefined client request |\n| **serverBusy** | 5 | Eplan remoting server is busy |\n| **timeOutIntervalElapsed** | 7 | Time out on server side. This is the maxi time set to execute a request. |\n\nInheritance Hierarchy\n\n[System.Object](#)  \n   [System.ValueType](#)  \n      [System.Enum  \n         **Eplan.EplApi.BaseRemoting.\\_kResponse**"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.BaseRemoting._SynchronizationMode.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiBaseRemoting Namespace/Enumerations",
        "title": "Eplan.EplApi.AFuEplan.EplApi.BaseRemoting._SynchronizationMode",
        "content": "Syntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic enum _SynchronizationMode : System.Enum\n```\n```\n\n```\n```\npublic enum class _SynchronizationMode : public System.Enum\n```\n```\n\nMembers\n\n| Member | Value | Description |\n| --- | --- | --- |\n| **NoWait** | 2 |  |\n| **Undefined** | 0 |  |\n| **Wait** | 1 |  |\n\nInheritance Hierarchy\n\n[System.Object](#)  \n   [System.ValueType](#)  \n      [System.Enum  \n         **Eplan.EplApi.BaseRemoting.\\_SynchronizationMode**"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer_namespace.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiRemoteServer Namespace",
        "title": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer_namespace",
        "content": "This namespace is used for working with EPLAN Remoting.\n\nClasses\n\n|  | Class | Description |\n| --- | --- | --- |\n| Class | RemotingCallingContext](Eplan.EplApi.AFu~Eplan.EplApi.RemoteServer.RemotingCallingContext.html) |  |\n\nInterfaces\n\n|  | Interface | Description |\n| --- | --- | --- |\n| Interface | [IRemotePostServer](Eplan.EplApi.AFu~Eplan.EplApi.RemoteServer.IRemotePostServer.html) |  |\n| Interface | [IRemotingSynchronizer](Eplan.EplApi.AFu~Eplan.EplApi.RemoteServer.IRemotingSynchronizer.html) |  |"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.RemotingCallingContext.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiRemoteServer Namespace/Classes",
        "title": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.RemotingCallingContext",
        "content": "Inheritance Hierarchy\n\nSystem.Object](#)  \n   **Eplan.EplApi.RemoteServer.RemotingCallingContext**\n\nSyntax\n\n* [C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic class RemotingCallingContext\n```\n```\n\n```\n```\npublic ref class RemotingCallingContext\n```\n```\n\n\n\nPublic Constructors\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Constructor | [RemotingCallingContext Constructor](Eplan.EplApi.AFu~Eplan.EplApi.RemoteServer.RemotingCallingContext~_ctor.html) | Overloaded. |\n\n[Top\n\nPublic Fields\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Field | [m\\_bDeselectAll](Eplan.EplApi.AFu~Eplan.EplApi.RemoteServer.RemotingCallingContext~m_bDeselectAll.html) |  |\n| Public Field | [m\\_StringCollection](Eplan.EplApi.AFu~Eplan.EplApi.RemoteServer.RemotingCallingContext~m_StringCollection.html) |  |\n| Public Field | [m\\_StringDictionary](Eplan.EplApi.AFu~Eplan.EplApi.RemoteServer.RemotingCallingContext~m_StringDictionary.html) |  |\n| Public Field | [m\\_strOperationType](Eplan.EplApi.AFu~Eplan.EplApi.RemoteServer.RemotingCallingContext~m_strOperationType.html) |  |\n| Public Field | [m\\_strProjectName](Eplan.EplApi.AFu~Eplan.EplApi.RemoteServer.RemotingCallingContext~m_strProjectName.html) |  |\n\nTop](#top)\n\n\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [AddParameter](Eplan.EplApi.AFu~Eplan.EplApi.RemoteServer.RemotingCallingContext~AddParameter.html) |  |\n| Public Method | [Clear](Eplan.EplApi.AFu~Eplan.EplApi.RemoteServer.RemotingCallingContext~Clear.html) |  |\n| Public Method | [CloneTo](Eplan.EplApi.AFu~Eplan.EplApi.RemoteServer.RemotingCallingContext~CloneTo.html) |  |\n| Public Method | [Dispose](Eplan.EplApi.AFu~Eplan.EplApi.RemoteServer.RemotingCallingContext~Dispose().html) | Destructor for deterministic finalization of RemotingCallingContext object. |\n| Public Method | [ExistParameter](Eplan.EplApi.AFu~Eplan.EplApi.RemoteServer.RemotingCallingContext~ExistParameter.html) | Check if the parameter `strParameterName` exists |\n| Public Method | [GetParameter](Eplan.EplApi.AFu~Eplan.EplApi.RemoteServer.RemotingCallingContext~GetParameter.html) |  |\n| Public Method | [IsValid](Eplan.EplApi.AFu~Eplan.EplApi.RemoteServer.RemotingCallingContext~IsValid.html) |  |\n| Public Method | [RemoveParameter](Eplan.EplApi.AFu~Eplan.EplApi.RemoteServer.RemotingCallingContext~RemoveParameter.html) |  |\n| Public Method | [SetValid](Eplan.EplApi.AFu~Eplan.EplApi.RemoteServer.RemotingCallingContext~SetValid.html) |  |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.RemotingCallingContext_ctor.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiRemoteServer Namespace/Classes/RemotingCallingContext",
        "title": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.RemotingCallingContext_ctor",
        "content": "Syntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic RemotingCallingContext()\n```\n```\n\n```\n```\npublic:\nRemotingCallingContext();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.RemotingCallingContext_fields.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiRemoteServer Namespace/Classes/RemotingCallingContext",
        "title": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.RemotingCallingContext_fields",
        "content": "For a list of all members of this type, see RemotingCallingContext members.\n\nPublic Fields\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Field | [m\\_bDeselectAll](Eplan.EplApi.AFu~Eplan.EplApi.RemoteServer.RemotingCallingContext~m_bDeselectAll.html) |  |\n| Public Field | [m\\_StringCollection](Eplan.EplApi.AFu~Eplan.EplApi.RemoteServer.RemotingCallingContext~m_StringCollection.html) |  |\n| Public Field | [m\\_StringDictionary](Eplan.EplApi.AFu~Eplan.EplApi.RemoteServer.RemotingCallingContext~m_StringDictionary.html) |  |\n| Public Field | [m\\_strOperationType](Eplan.EplApi.AFu~Eplan.EplApi.RemoteServer.RemotingCallingContext~m_strOperationType.html) |  |\n| Public Field | [m\\_strProjectName](Eplan.EplApi.AFu~Eplan.EplApi.RemoteServer.RemotingCallingContext~m_strProjectName.html) |  |\n\nTop](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.RemotingCallingContext_methods.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiRemoteServer Namespace/Classes/RemotingCallingContext",
        "title": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.RemotingCallingContext_methods",
        "content": "For a list of all members of this type, see RemotingCallingContext members](Eplan.EplApi.AFu~Eplan.EplApi.RemoteServer.RemotingCallingContext_members.html).\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [AddParameter](Eplan.EplApi.AFu~Eplan.EplApi.RemoteServer.RemotingCallingContext~AddParameter.html) |  |\n| Public Method | [Clear](Eplan.EplApi.AFu~Eplan.EplApi.RemoteServer.RemotingCallingContext~Clear.html) |  |\n| Public Method | [CloneTo](Eplan.EplApi.AFu~Eplan.EplApi.RemoteServer.RemotingCallingContext~CloneTo.html) |  |\n| Public Method | [Dispose](Eplan.EplApi.AFu~Eplan.EplApi.RemoteServer.RemotingCallingContext~Dispose().html) | Destructor for deterministic finalization of RemotingCallingContext object. |\n| Public Method | [ExistParameter](Eplan.EplApi.AFu~Eplan.EplApi.RemoteServer.RemotingCallingContext~ExistParameter.html) | Check if the parameter `strParameterName` exists |\n| Public Method | [GetParameter](Eplan.EplApi.AFu~Eplan.EplApi.RemoteServer.RemotingCallingContext~GetParameter.html) |  |\n| Public Method | [IsValid](Eplan.EplApi.AFu~Eplan.EplApi.RemoteServer.RemotingCallingContext~IsValid.html) |  |\n| Public Method | [RemoveParameter](Eplan.EplApi.AFu~Eplan.EplApi.RemoteServer.RemotingCallingContext~RemoveParameter.html) |  |\n| Public Method | [SetValid](Eplan.EplApi.AFu~Eplan.EplApi.RemoteServer.RemotingCallingContext~SetValid.html) |  |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.RemotingCallingContextm_bDeselectAll.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiRemoteServer Namespace/Classes/RemotingCallingContext/Fields",
        "title": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.RemotingCallingContextm_bDeselectAll",
        "content": "Syntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic bool m_bDeselectAll\n```\n```\n\n```\n```\npublic:\nbool m_bDeselectAll\n```\n```"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.RemotingCallingContextm_StringCollection.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiRemoteServer Namespace/Classes/RemotingCallingContext/Fields",
        "title": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.RemotingCallingContextm_StringCollection",
        "content": "Syntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic StringCollection m_StringCollection\n```\n```\n\n```\n```\npublic:\nStringCollection^ m_StringCollection\n```\n```"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.RemotingCallingContextm_StringDictionary.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiRemoteServer Namespace/Classes/RemotingCallingContext/Fields",
        "title": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.RemotingCallingContextm_StringDictionary",
        "content": "Syntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic StringDictionary m_StringDictionary\n```\n```\n\n```\n```\npublic:\nStringDictionary^ m_StringDictionary\n```\n```"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.RemotingCallingContextm_strOperationType.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiRemoteServer Namespace/Classes/RemotingCallingContext/Fields",
        "title": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.RemotingCallingContextm_strOperationType",
        "content": "Syntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic string m_strOperationType\n```\n```\n\n```\n```\npublic:\nString^ m_strOperationType\n```\n```"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.RemotingCallingContextm_strProjectName.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiRemoteServer Namespace/Classes/RemotingCallingContext/Fields",
        "title": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.RemotingCallingContextm_strProjectName",
        "content": "Syntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic string m_strProjectName\n```\n```\n\n```\n```\npublic:\nString^ m_strProjectName\n```\n```"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.RemotingCallingContextAddParameter.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiRemoteServer Namespace/Classes/RemotingCallingContext/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.RemotingCallingContextAddParameter",
        "content": "Syntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void AddParameter( \n   string strParameterName,\n   string strNewParameterValue\n)\n```\n```\n\n```\n```\npublic:\nvoid AddParameter( \n   String^ strParameterName,\n   String^ strNewParameterValue\n)\n```\n```\n\n#### Parameters\n\n*strParameterName*\n:   Parameter name\n\n*strNewParameterValue*\n:   Parameter value"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.RemotingCallingContextClear.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiRemoteServer Namespace/Classes/RemotingCallingContext/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.RemotingCallingContextClear",
        "content": "Syntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void Clear()\n```\n```\n\n```\n```\npublic:\nvoid Clear();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.RemotingCallingContextCloneTo.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiRemoteServer Namespace/Classes/RemotingCallingContext/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.RemotingCallingContextCloneTo",
        "content": "Syntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void CloneTo( \n   ref RemotingCallingContext rc\n)\n```\n```\n\n```\n```\npublic:\nvoid CloneTo( \n   RemotingCallingContext^% rc\n)\n```\n```\n\n#### Parameters\n\n*rc*"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.RemotingCallingContextDispose.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiRemoteServer Namespace/Classes/RemotingCallingContext/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.RemotingCallingContextDispose",
        "content": "Destructor for deterministic finalization of RemotingCallingContext object.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void Dispose()\n```\n```\n\n```\n```\npublic:\nvoid Dispose();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.RemotingCallingContextExistParameter.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiRemoteServer Namespace/Classes/RemotingCallingContext/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.RemotingCallingContextExistParameter",
        "content": "Check if the parameter `strParameterName` exists\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic bool ExistParameter( \n   string strParameterName\n)\n```\n```\n\n```\n```\npublic:\nbool ExistParameter( \n   String^ strParameterName\n)\n```\n```\n\n#### Parameters\n\n*strParameterName*\n:   Paramtername\n\n#### Return Value\n\nTrue if `strParameterName` found."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.RemotingCallingContextGetParameter.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiRemoteServer Namespace/Classes/RemotingCallingContext/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.RemotingCallingContextGetParameter",
        "content": "Syntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void GetParameter( \n   string strParameterName,\n   ref string strParameterValue\n)\n```\n```\n\n```\n```\npublic:\nvoid GetParameter( \n   String^ strParameterName,\n   String^% strParameterValue\n)\n```\n```\n\n#### Parameters\n\n*strParameterName*\n:   Paramter name (input parameter)\n\n*strParameterValue*\n:   Parameter value (output parameter)\n\nRemarks\n\nIf the parameter exists, strParameterValue contains its value after executing this method. If the parameter is not found, strParameterValue is set to nullptr."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.RemotingCallingContextIsValid.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiRemoteServer Namespace/Classes/RemotingCallingContext/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.RemotingCallingContextIsValid",
        "content": "Syntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic bool IsValid()\n```\n```\n\n```\n```\npublic:\nbool IsValid();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.RemotingCallingContextRemoveParameter.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiRemoteServer Namespace/Classes/RemotingCallingContext/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.RemotingCallingContextRemoveParameter",
        "content": "Syntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void RemoveParameter( \n   string strParameterName\n)\n```\n```\n\n```\n```\npublic:\nvoid RemoveParameter( \n   String^ strParameterName\n)\n```\n```\n\n#### Parameters\n\n*strParameterName*\n:   Parameter name"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.RemotingCallingContextSetValid.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiRemoteServer Namespace/Classes/RemotingCallingContext/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.RemotingCallingContextSetValid",
        "content": "Syntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void SetValid( \n   bool bValid\n)\n```\n```\n\n```\n```\npublic:\nvoid SetValid( \n   bool bValid\n)\n```\n```\n\n#### Parameters\n\n*bValid*"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.RemotingCallingContext_ctorRemotingCallingContext.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiRemoteServer Namespace/Classes/RemotingCallingContext/RemotingCallingContext Constructor",
        "title": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.RemotingCallingContext_ctorRemotingCallingContext",
        "content": "Syntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic RemotingCallingContext( \n   ref RemotingCallingContext rc\n)\n```\n```\n\n```\n```\npublic:\nRemotingCallingContext( \n   RemotingCallingContext^% rc\n)\n```\n```\n\n#### Parameters\n\n*rc*"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.IRemotePostServer.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiRemoteServer Namespace/Interfaces",
        "title": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.IRemotePostServer",
        "content": "Syntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic interface IRemotePostServer\n```\n```\n\n```\n```\npublic interface class IRemotePostServer\n```\n```\n\n\n\n\n\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Method | [Execute](Eplan.EplApi.AFu~Eplan.EplApi.RemoteServer.IRemotePostServer~Execute.html) |  |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.IRemotingSynchronizer.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiRemoteServer Namespace/Interfaces",
        "title": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.IRemotingSynchronizer",
        "content": "Syntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic interface IRemotingSynchronizer\n```\n```\n\n```\n```\npublic interface class IRemotingSynchronizer\n```\n```\n\n\n\n\n\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Method | [Execute](Eplan.EplApi.AFu~Eplan.EplApi.RemoteServer.IRemotingSynchronizer~Execute.html) | Overloaded. |\n| Method | [GetSynchronizationMode](Eplan.EplApi.AFu~Eplan.EplApi.RemoteServer.IRemotingSynchronizer~GetSynchronizationMode.html) |  |\n| Method | [SetSynchronizationMode](Eplan.EplApi.AFu~Eplan.EplApi.RemoteServer.IRemotingSynchronizer~SetSynchronizationMode.html) |  |\n| Method | [SetTemporarySynchronizationMode](Eplan.EplApi.AFu~Eplan.EplApi.RemoteServer.IRemotingSynchronizer~SetTemporarySynchronizationMode.html) |  |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.IRemotePostServer_methods.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiRemoteServer Namespace/Interfaces/IRemotePostServer",
        "title": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.IRemotePostServer_methods",
        "content": "For a list of all members of this type, see IRemotePostServer members](Eplan.EplApi.AFu~Eplan.EplApi.RemoteServer.IRemotePostServer_members.html).\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Method | [Execute](Eplan.EplApi.AFu~Eplan.EplApi.RemoteServer.IRemotePostServer~Execute.html) |  |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.IRemotePostServerExecute.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiRemoteServer Namespace/Interfaces/IRemotePostServer/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.IRemotePostServerExecute",
        "content": "Syntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\nvoid Execute( \n   RemotingCallingContext pRemotingDataIn,\n   ref RemotingCallingContext pRemotingDataOut\n)\n```\n```\n\n```\n```\nvoid Execute( \n   RemotingCallingContext^ pRemotingDataIn,\n   RemotingCallingContext^% pRemotingDataOut\n)\n```\n```\n\n#### Parameters\n\n*pRemotingDataIn*\n\n\n*pRemotingDataOut*"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.IRemotingSynchronizer_methods.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiRemoteServer Namespace/Interfaces/IRemotingSynchronizer",
        "title": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.IRemotingSynchronizer_methods",
        "content": "For a list of all members of this type, see IRemotingSynchronizer members](Eplan.EplApi.AFu~Eplan.EplApi.RemoteServer.IRemotingSynchronizer_members.html).\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Method | [Execute](Eplan.EplApi.AFu~Eplan.EplApi.RemoteServer.IRemotingSynchronizer~Execute.html) | Overloaded. |\n| Method | [GetSynchronizationMode](Eplan.EplApi.AFu~Eplan.EplApi.RemoteServer.IRemotingSynchronizer~GetSynchronizationMode.html) |  |\n| Method | [SetSynchronizationMode](Eplan.EplApi.AFu~Eplan.EplApi.RemoteServer.IRemotingSynchronizer~SetSynchronizationMode.html) |  |\n| Method | [SetTemporarySynchronizationMode](Eplan.EplApi.AFu~Eplan.EplApi.RemoteServer.IRemotingSynchronizer~SetTemporarySynchronizationMode.html) |  |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.IRemotingSynchronizerExecute.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiRemoteServer Namespace/Interfaces/IRemotingSynchronizer/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.IRemotingSynchronizerExecute",
        "content": "Overload List\n\n| Overload | Description |\n| --- | --- |\n| [Execute(RemotingCallingContext,RemotingCallingContext,\\_SynchronizationMode)](topic1.html) |  |\n| Execute(RemotingCallingContext,RemotingCallingContext)](topic2.html) |  |"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.IRemotingSynchronizerGetSynchronizationMode.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiRemoteServer Namespace/Interfaces/IRemotingSynchronizer/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.IRemotingSynchronizerGetSynchronizationMode",
        "content": "Syntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\nvoid GetSynchronizationMode( \n   ref _SynchronizationMode nMode\n)\n```\n```\n\n```\n```\nvoid GetSynchronizationMode( \n   _SynchronizationMode% nMode\n)\n```\n```\n\n#### Parameters\n\n*nMode*"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.IRemotingSynchronizerSetSynchronizationMode.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiRemoteServer Namespace/Interfaces/IRemotingSynchronizer/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.IRemotingSynchronizerSetSynchronizationMode",
        "content": "Syntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\nvoid SetSynchronizationMode( \n   _SynchronizationMode nMode\n)\n```\n```\n\n```\n```\nvoid SetSynchronizationMode( \n   _SynchronizationMode nMode\n)\n```\n```\n\n#### Parameters\n\n*nMode*"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.IRemotingSynchronizerSetTemporarySynchronizationMode.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiRemoteServer Namespace/Interfaces/IRemotingSynchronizer/Methods",
        "title": "Eplan.EplApi.AFuEplan.EplApi.RemoteServer.IRemotingSynchronizerSetTemporarySynchronizationMode",
        "content": "Syntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\nvoid SetTemporarySynchronizationMode( \n   _SynchronizationMode nMode\n)\n```\n```\n\n```\n```\nvoid SetTemporarySynchronizationMode( \n   _SynchronizationMode nMode\n)\n```\n```\n\n#### Parameters\n\n*nMode*"
    },
    {
        "source": "topic1.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiRemoteServer Namespace/Interfaces/IRemotingSynchronizer/Methods/Execute Method",
        "title": "topic1",
        "content": "Syntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\n_kResponse Execute( \n   RemotingCallingContext pRemotingDataIn,\n   ref RemotingCallingContext pRemotingDataOut,\n   _SynchronizationMode nMode\n)\n```\n```\n\n```\n```\n_kResponse Execute( \n   RemotingCallingContext^ pRemotingDataIn,\n   RemotingCallingContext^% pRemotingDataOut,\n   _SynchronizationMode nMode\n)\n```\n```\n\n#### Parameters\n\n*pRemotingDataIn*\n\n\n*pRemotingDataOut*\n\n\n*nMode*"
    },
    {
        "source": "topic2.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiRemoteServer Namespace/Interfaces/IRemotingSynchronizer/Methods/Execute Method",
        "title": "topic2",
        "content": "Syntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\n_kResponse Execute( \n   RemotingCallingContext pRemotingDataIn,\n   ref RemotingCallingContext pRemotingDataOut\n)\n```\n```\n\n```\n```\n_kResponse Execute( \n   RemotingCallingContext^ pRemotingDataIn,\n   RemotingCallingContext^% pRemotingDataOut\n)\n```\n```\n\n#### Parameters\n\n*pRemotingDataIn*\n\n\n*pRemotingDataOut*"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.Scripting_namespace.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiScripting Namespace",
        "title": "Eplan.EplApi.AFuEplan.EplApi.Scripting_namespace",
        "content": "The classes of the Scripting namespace provide the attributes for scripts.\n\nClasses\n\n|  | Class | Description |\n| --- | --- | --- |\n| Class | DeclareAction](Eplan.EplApi.AFu~Eplan.EplApi.Scripting.DeclareAction.html) | Attribute used to mark a method of a class in a [Scripts so that this method will be registered as an **Eplan.EplApi.Scripting.Action** in the system. If a method, which is marked by the DeclareAction attribute has string parameters, these \\parameters will be recognized as parameters of the Action. |\n| Class | DeclareEventHandler](Eplan.EplApi.AFu~Eplan.EplApi.Scripting.DeclareEventHandler.html) | When a script function is to respond to events in the system, the function has to be marked with this attribute. |\n| Class | [DeclareMenu](Eplan.EplApi.AFu~Eplan.EplApi.Scripting.DeclareMenu.html) | Declares a function that adds only context menu items. |\n| Class | [DeclareRegister](Eplan.EplApi.AFu~Eplan.EplApi.Scripting.DeclareRegister.html) | When a new script is loaded in P8, this function is called. |\n| Class | [DeclareUnregister](Eplan.EplApi.AFu~Eplan.EplApi.Scripting.DeclareUnregister.html) | When a new script is unloaded from P8, this function is called before removing it. |\n| Class | [Start](Eplan.EplApi.AFu~Eplan.EplApi.Scripting.Start.html) | Used to mark a function of a class in a [Scripts](Scripts.html). Once the script is run, this function is called. This function may also have [SimpleScriptWithParameters](SimpleScriptWithParameters.html). |"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.Scripting.DeclareAction.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiScripting Namespace/Classes",
        "title": "Eplan.EplApi.AFuEplan.EplApi.Scripting.DeclareAction",
        "content": "Attribute used to mark a method of a class in a Scripts so that this method will be registered as an **Eplan.EplApi.Scripting.Action** in the system. If a method, which is marked by the DeclareAction attribute has string parameters, these \\parameters will be recognized as parameters of the Action.\n\nInheritance Hierarchy\n\nSystem.Object](#)  \n   [System.Attribute](#)  \n      **Eplan.EplApi.Scripting.DeclareAction**\n\nSyntax\n\n* [C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\n[AttributeUsage(AttributeTargets.Method)]\npublic class DeclareAction : System.Attribute\n```\n```\n\n```\n```\n[AttributeUsage(AttributeTargets.Method)]\npublic ref class DeclareAction : public System.Attribute\n```\n```\n\n\n\nPublic Constructors\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Constructor | [DeclareAction Constructor](Eplan.EplApi.AFu~Eplan.EplApi.Scripting.DeclareAction~_ctor.html) | Overloaded. |\n\n[Top](#top)\n\n\n\nPublic Properties\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Property | [Name](Eplan.EplApi.AFu~Eplan.EplApi.Scripting.DeclareAction~Name.html) | Name of the action. |\n| Public Property | [Ordinal](Eplan.EplApi.AFu~Eplan.EplApi.Scripting.DeclareAction~Ordinal.html) | Overload level of the action. |\n| Public Property | [TypeId](#) | (Inherited from [System.Attribute](#)) |\n\n[Top](#top)\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [Equals](#) | (Inherited from [System.Attribute](#)) |\n| Public Method | [GetHashCode](#) | (Inherited from [System.Attribute](#)) |\n| Public Method | [IsDefaultAttribute](#) | (Inherited from [System.Attribute](#)) |\n| Public Method | [Match](#) | (Inherited from [System.Attribute](#)) |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.Scripting.DeclareEventHandler.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiScripting Namespace/Classes",
        "title": "Eplan.EplApi.AFuEplan.EplApi.Scripting.DeclareEventHandler",
        "content": "When a script function is to respond to events in the system, the function has to be marked with this attribute.\n\nInheritance Hierarchy\n\nSystem.Object](#)  \n   [System.Attribute](#)  \n      **Eplan.EplApi.Scripting.DeclareEventHandler**\n\nSyntax\n\n* [C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\n[AttributeUsage(AttributeTargets.Method)]\npublic class DeclareEventHandler : System.Attribute\n```\n```\n\n```\n```\n[AttributeUsage(AttributeTargets.Method)]\npublic ref class DeclareEventHandler : public System.Attribute\n```\n```\n\n\n\nPublic Constructors\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Constructor | [DeclareEventHandler Constructor](Eplan.EplApi.AFu~Eplan.EplApi.Scripting.DeclareEventHandler~_ctor.html) | This function of the script is registered as an event handler in the system. |\n\n[Top](#top)\n\n\n\nPublic Properties\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Property | [Name](Eplan.EplApi.AFu~Eplan.EplApi.Scripting.DeclareEventHandler~Name.html) |  |\n| Public Property | [TypeId](#) | (Inherited from [System.Attribute](#)) |\n\n[Top](#top)\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [Equals](#) | (Inherited from [System.Attribute](#)) |\n| Public Method | [GetHashCode](#) | (Inherited from [System.Attribute](#)) |\n| Public Method | [IsDefaultAttribute](#) | (Inherited from [System.Attribute](#)) |\n| Public Method | [Match](#) | (Inherited from [System.Attribute](#)) |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.Scripting.DeclareMenu.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiScripting Namespace/Classes",
        "title": "Eplan.EplApi.AFuEplan.EplApi.Scripting.DeclareMenu",
        "content": "Declares a function that adds only context menu items.\n\nInheritance Hierarchy\n\nSystem.Object](#)  \n   [System.Attribute](#)  \n      **Eplan.EplApi.Scripting.DeclareMenu**\n\nSyntax\n\n* [C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\n[AttributeUsage(AttributeTargets.Method)]\npublic class DeclareMenu : System.Attribute\n```\n```\n\n```\n```\n[AttributeUsage(AttributeTargets.Method)]\npublic ref class DeclareMenu : public System.Attribute\n```\n```\n\n\n\nPublic Constructors\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Constructor | [DeclareMenu Constructor](Eplan.EplApi.AFu~Eplan.EplApi.Scripting.DeclareMenu~_ctor.html) | Creates a new attribute. |\n\n[Top](#top)\n\n\n\nPublic Properties\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Property | [TypeId](#) | (Inherited from [System.Attribute](#)) |\n\n[Top](#top)\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [Equals](#) | (Inherited from [System.Attribute](#)) |\n| Public Method | [GetHashCode](#) | (Inherited from [System.Attribute](#)) |\n| Public Method | [IsDefaultAttribute](#) | (Inherited from [System.Attribute](#)) |\n| Public Method | [Match](#) | (Inherited from [System.Attribute](#)) |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.Scripting.DeclareRegister.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiScripting Namespace/Classes",
        "title": "Eplan.EplApi.AFuEplan.EplApi.Scripting.DeclareRegister",
        "content": "When a new script is loaded in P8, this function is called.\n\nInheritance Hierarchy\n\nSystem.Object](#)  \n   [System.Attribute](#)  \n      **Eplan.EplApi.Scripting.DeclareRegister**\n\nSyntax\n\n* [C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\n[AttributeUsage(AttributeTargets.Method)]\npublic class DeclareRegister : System.Attribute\n```\n```\n\n```\n```\n[AttributeUsage(AttributeTargets.Method)]\npublic ref class DeclareRegister : public System.Attribute\n```\n```\n\n\n\nPublic Constructors\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Constructor | [DeclareRegister Constructor](Eplan.EplApi.AFu~Eplan.EplApi.Scripting.DeclareRegister~_ctor.html) | Creates a new attribute. |\n\n[Top](#top)\n\n\n\nPublic Properties\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Property | [TypeId](#) | (Inherited from [System.Attribute](#)) |\n\n[Top](#top)\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [Equals](#) | (Inherited from [System.Attribute](#)) |\n| Public Method | [GetHashCode](#) | (Inherited from [System.Attribute](#)) |\n| Public Method | [IsDefaultAttribute](#) | (Inherited from [System.Attribute](#)) |\n| Public Method | [Match](#) | (Inherited from [System.Attribute](#)) |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.Scripting.DeclareUnregister.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiScripting Namespace/Classes",
        "title": "Eplan.EplApi.AFuEplan.EplApi.Scripting.DeclareUnregister",
        "content": "When a new script is unloaded from P8, this function is called before removing it.\n\nInheritance Hierarchy\n\nSystem.Object](#)  \n   [System.Attribute](#)  \n      **Eplan.EplApi.Scripting.DeclareUnregister**\n\nSyntax\n\n* [C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\n[AttributeUsage(AttributeTargets.Method)]\npublic class DeclareUnregister : System.Attribute\n```\n```\n\n```\n```\n[AttributeUsage(AttributeTargets.Method)]\npublic ref class DeclareUnregister : public System.Attribute\n```\n```\n\n\n\nPublic Constructors\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Constructor | [DeclareUnregister Constructor](Eplan.EplApi.AFu~Eplan.EplApi.Scripting.DeclareUnregister~_ctor.html) | Creates a new attribute. |\n\n[Top](#top)\n\n\n\nPublic Properties\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Property | [TypeId](#) | (Inherited from [System.Attribute](#)) |\n\n[Top](#top)\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [Equals](#) | (Inherited from [System.Attribute](#)) |\n| Public Method | [GetHashCode](#) | (Inherited from [System.Attribute](#)) |\n| Public Method | [IsDefaultAttribute](#) | (Inherited from [System.Attribute](#)) |\n| Public Method | [Match](#) | (Inherited from [System.Attribute](#)) |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.Scripting.Start.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiScripting Namespace/Classes",
        "title": "Eplan.EplApi.AFuEplan.EplApi.Scripting.Start",
        "content": "Used to mark a function of a class in a Scripts](Scripts.html). Once the script is run, this function is called. This function may also have [SimpleScriptWithParameters](SimpleScriptWithParameters.html).\n\nInheritance Hierarchy\n\n[System.Object](#)  \n   [System.Attribute](#)  \n      **Eplan.EplApi.Scripting.Start**\n\nSyntax\n\n* [C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\n[AttributeUsage(AttributeTargets.Method)]\npublic class Start : System.Attribute\n```\n```\n\n```\n```\n[AttributeUsage(AttributeTargets.Method)]\npublic ref class Start : public System.Attribute\n```\n```\n\n\n\nPublic Constructors\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Constructor | [Start Constructor](Eplan.EplApi.AFu~Eplan.EplApi.Scripting.Start~_ctor.html) |  |\n\n[Top](#top)\n\n\n\nPublic Properties\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Property | [TypeId](#) | (Inherited from [System.Attribute](#)) |\n\n[Top](#top)\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [Equals](#) | (Inherited from [System.Attribute](#)) |\n| Public Method | [GetHashCode](#) | (Inherited from [System.Attribute](#)) |\n| Public Method | [IsDefaultAttribute](#) | (Inherited from [System.Attribute](#)) |\n| Public Method | [Match](#) | (Inherited from [System.Attribute](#)) |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.Scripting.DeclareAction_ctor.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiScripting Namespace/Classes/DeclareAction",
        "title": "Eplan.EplApi.AFuEplan.EplApi.Scripting.DeclareAction_ctor",
        "content": "Overload List\n\n| Overload | Description |\n| --- | --- |\n| DeclareAction Constructor(String,Int32)](Eplan.EplApi.AFu~Eplan.EplApi.Scripting.DeclareAction~_ctor(String,Int32).html) | Used to mark a function of a class in a script if the function of this script is to be registered as an action in the system. |\n| [DeclareAction Constructor(String)](Eplan.EplApi.AFu~Eplan.EplApi.Scripting.DeclareAction~_ctor(String).html) | Used to mark a function of a class in a script if the function of this script is to be registered as an **Eplan.EplApi.Scripting.Action** in the system. |"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.Scripting.DeclareAction_properties.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiScripting Namespace/Classes/DeclareAction",
        "title": "Eplan.EplApi.AFuEplan.EplApi.Scripting.DeclareAction_properties",
        "content": "For a list of all members of this type, see DeclareAction members](Eplan.EplApi.AFu~Eplan.EplApi.Scripting.DeclareAction_members.html).\n\nPublic Properties\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Property | [Name](Eplan.EplApi.AFu~Eplan.EplApi.Scripting.DeclareAction~Name.html) | Name of the action. |\n| Public Property | [Ordinal](Eplan.EplApi.AFu~Eplan.EplApi.Scripting.DeclareAction~Ordinal.html) | Overload level of the action. |\n| Public Property | [TypeId](#) | (Inherited from [System.Attribute](#)) |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.Scripting.DeclareAction_ctorString.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiScripting Namespace/Classes/DeclareAction/DeclareAction Constructor",
        "title": "Eplan.EplApi.AFuEplan.EplApi.Scripting.DeclareAction_ctorString",
        "content": "Used to mark a function of a class in a script if the function of this script is to be registered as an **Eplan.EplApi.Scripting.Action** in the system.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic DeclareAction( \n   string strActionName\n)\n```\n```\n\n```\n```\npublic:\nDeclareAction( \n   String^ strActionName\n)\n```\n```\n\n#### Parameters\n\n*strActionName*\n:   The function is saved with this name as an **Eplan.EplApi.Scripting.Action** in the system."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.Scripting.DeclareAction_ctorStringInt32.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiScripting Namespace/Classes/DeclareAction/DeclareAction Constructor",
        "title": "Eplan.EplApi.AFuEplan.EplApi.Scripting.DeclareAction_ctorStringInt32",
        "content": "Used to mark a function of a class in a script if the function of this script is to be registered as an action in the system.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic DeclareAction( \n   string strActionName,\n   int iOrdinal\n)\n```\n```\n\n```\n```\npublic:\nDeclareAction( \n   String^ strActionName,\n   int iOrdinal\n)\n```\n```\n\n#### Parameters\n\n*strActionName*\n:   The function is saved with this name as an action in the system.\n\n*iOrdinal*\n:   This overload level is used when registering the action in the system."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.Scripting.DeclareActionName.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiScripting Namespace/Classes/DeclareAction/Properties",
        "title": "Eplan.EplApi.AFuEplan.EplApi.Scripting.DeclareActionName",
        "content": "Name of the action.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic string Name {get;}\n```\n```\n\n```\n```\npublic:\nproperty String^ Name {\n   String^ get();\n}\n```\n```\n\n#### Property Value\n\nReturns the name of the action."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.Scripting.DeclareActionOrdinal.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiScripting Namespace/Classes/DeclareAction/Properties",
        "title": "Eplan.EplApi.AFuEplan.EplApi.Scripting.DeclareActionOrdinal",
        "content": "Overload level of the action.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic int Ordinal {get;}\n```\n```\n\n```\n```\npublic:\nproperty int Ordinal {\n   int get();\n}\n```\n```\n\n#### Property Value\n\nReturns the overload level of the action."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.Scripting.DeclareEventHandler_ctor.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiScripting Namespace/Classes/DeclareEventHandler",
        "title": "Eplan.EplApi.AFuEplan.EplApi.Scripting.DeclareEventHandler_ctor",
        "content": "This function of the script is registered as an event handler in the system.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic DeclareEventHandler( \n   string strEventName\n)\n```\n```\n\n```\n```\npublic:\nDeclareEventHandler( \n   String^ strEventName\n)\n```\n```\n\n#### Parameters\n\n*strEventName*\n:   The event handler responds to this event."
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.Scripting.DeclareEventHandler_properties.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiScripting Namespace/Classes/DeclareEventHandler",
        "title": "Eplan.EplApi.AFuEplan.EplApi.Scripting.DeclareEventHandler_properties",
        "content": "For a list of all members of this type, see DeclareEventHandler members](Eplan.EplApi.AFu~Eplan.EplApi.Scripting.DeclareEventHandler_members.html).\n\nPublic Properties\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Property | [Name](Eplan.EplApi.AFu~Eplan.EplApi.Scripting.DeclareEventHandler~Name.html) |  |\n| Public Property | [TypeId](#) | (Inherited from [System.Attribute](#)) |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.Scripting.DeclareEventHandlerName.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiScripting Namespace/Classes/DeclareEventHandler/Properties",
        "title": "Eplan.EplApi.AFuEplan.EplApi.Scripting.DeclareEventHandlerName",
        "content": "Syntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic string Name {get;}\n```\n```\n\n```\n```\npublic:\nproperty String^ Name {\n   String^ get();\n}\n```\n```"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.Scripting.DeclareMenu_ctor.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiScripting Namespace/Classes/DeclareMenu",
        "title": "Eplan.EplApi.AFuEplan.EplApi.Scripting.DeclareMenu_ctor",
        "content": "Creates a new attribute.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic DeclareMenu()\n```\n```\n\n```\n```\npublic:\nDeclareMenu();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.Scripting.DeclareRegister_ctor.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiScripting Namespace/Classes/DeclareRegister",
        "title": "Eplan.EplApi.AFuEplan.EplApi.Scripting.DeclareRegister_ctor",
        "content": "Creates a new attribute.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic DeclareRegister()\n```\n```\n\n```\n```\npublic:\nDeclareRegister();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.Scripting.DeclareUnregister_ctor.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiScripting Namespace/Classes/DeclareUnregister",
        "title": "Eplan.EplApi.AFuEplan.EplApi.Scripting.DeclareUnregister_ctor",
        "content": "Creates a new attribute.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic DeclareUnregister()\n```\n```\n\n```\n```\npublic:\nDeclareUnregister();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.AFuEplan.EplApi.Scripting.Start_ctor.md",
        "path": "/API Reference/Assemblies/EplanEplApiAFu Assembly/Namespaces/EplanEplApiScripting Namespace/Classes/Start",
        "title": "Eplan.EplApi.AFuEplan.EplApi.Scripting.Start_ctor",
        "content": "Syntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic Start()\n```\n```\n\n```\n```\npublic:\nStart();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.Baseu.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly",
        "title": "Eplan.EplApi.Baseu",
        "content": "Namespaces\n\n| Namespace | Description |\n| --- | --- |\n| Eplan.EplApi.Base](Eplan.EplApi.Baseu~Eplan.EplApi.Base_namespace.html) | This namespace exposes base functionality of EPLAN, like a base class for exceptions, and classes to access the EPLAN settings. |\n| [Eplan.EplApi.Base.Enums](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Enums_namespace.html) | This namespace contains all available enums in base namespace. |\n| [Eplan.EplApi.Base.Internal |  |"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base_namespace.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base_namespace",
        "content": "This namespace exposes base functionality of EPLAN, like a base class for exceptions, and classes to access the EPLAN settings.\n\nClasses\n\n|  | Class | Description |\n| --- | --- | --- |\n| Class | BaseException](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException.html) | Exception class derived from ApplicationException. This is the base class for the exceptions that might occur in the API. |\n| Class | [Context](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context.html) | The Context classes are used to pass information about the current state of the environment as well as generic parameters to objects that can be registered such as actions, dialogs, etc. |\n| Class | [ContextParameterBlock](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ContextParameterBlock.html) | A Parameter block for a context. This parameterblock can have System::Object^ as parameters. This block can be used to add objects to a context and work with this objects p.e. inside an action. |\n| Class | [Decider](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Decider.html) | This class implements the standard EPLAN decider dialog. |\n| Class | [EplAssert](Eplan.EplApi.Baseu~Eplan.EplApi.Base.EplAssert.html) | The EplAssert class. When the advaced mode is activated in ELogFileConfigTool, Asserts are written to the epllog.txt Its also possible to activate a debugger break. Set the registry value User / Software / Eplan / Eplan W3 / Assert / BreakOnAssert to true, and the debugger will stop at a failed assert. |\n| Class | [EplTrace | Trace the output to the EplLog.txt file. This Trace class works in debug and release mode, while the trace listener works only in debug mode. Traces are written when the registry key HKCU / Software / Eplan / Eplan W3 / Trace / \\-ModuleName- is found. |\n| Class | FileSelectDecisionContext](Eplan.EplApi.Baseu~Eplan.EplApi.Base.FileSelectDecisionContext.html) | This class can be used for an standard eplan decider |\n| Class | [ISOCode](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ISOCode.html) | Class for managing language codes (abbreviations). [MultiLangString](Eplan.EplApi.Baseu~Eplan.EplApi.Base.MultiLangString.html) can handle these languages. |\n| Class | [LanguageList](Eplan.EplApi.Baseu~Eplan.EplApi.Base.LanguageList.html) | Class for managing a list of languages. |\n| Class | [Languages](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Languages.html) | Class for language information. |\n| Class | [ListSelectDecisionContext](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ListSelectDecisionContext.html) | This class can be used for a standard Eplan decider |\n| Class | [LockingException](Eplan.EplApi.Baseu~Eplan.EplApi.Base.LockingException.html) | Exception class that signals locking errors in DataModel. |\n| Class | [MultiLangString](Eplan.EplApi.Baseu~Eplan.EplApi.Base.MultiLangString.html) | This class can save strings in various languages at the same time. Each string can be added, queried, and deleted individually. |\n| Class | [ParserParameter](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ParserParameter.html) | Parameter Class for the usage with UnitParser. Configure the unit and the look of the Parser result. |\n| Class | [PathMap](Eplan.EplApi.Baseu~Eplan.EplApi.Base.PathMap.html) | This class enables you access to the functions used for processing strings that could contain EPLAN path variables. |\n| Class | [Progress](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Progress.html) | This class enables you to access the functions of the progress bar in EPLAN. |\n| Class | [ProgressFactory](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ProgressFactory.html) | This class can be used for OfflineApplications. With RegisterProgress a progress can be installed in Eplan. UnregisterProgress removes this progress from Eplan again. |\n| Class | [Range](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Range.html) | Range of setting values |\n| Class | [SchemeSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting.html) | Class for editing settings that are grouped into schemes |\n| Class | [SettingNode](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode.html) | Allows access to settings and relative access to setting-nodes. A setting key consists of a number of sections separated by '.' Each section except the last one is called a setting-node. Setting-nodes and settings together build the settings tree. The settings are the leaves of this tree. The SettingNode class helps iterating trough the nodes and e.g. gives you the possibility to delete a node completely. |\n| Class | [Settings](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Settings.html) | Settings are used to save values of variables beyond the runtime of the program and to make them available again the next time program is run (similar to the Windows registry). A setting has a unique identifier in the system. A value or a list of values can be saved to a setting. It is possible to group settings into structures [SchemeSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting.html). |\n| Class | [SysMessagesCollection](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SysMessagesCollection.html) | Class that represents the system-wide message tree. The collection contains the system messages as BaseException objects. |\n| Class | [SysMessagesEnumerator](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SysMessagesEnumerator.html) | supports a simple iteration over [SysMessagesCollection](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SysMessagesCollection.html) |\n| Class | [TraceListener](Eplan.EplApi.Baseu~Eplan.EplApi.Base.TraceListener.html) | Output of trace messages to the EPLAN system message management (incl. EPLAN log file) |\n| Class | [UnitParser](Eplan.EplApi.Baseu~Eplan.EplApi.Base.UnitParser.html) | The UnitParser class. Here it is possible to read the unit from a string and convert it in other units (of the same unit group) |\n\nInterfaces\n\n|  | Interface | Description |\n| --- | --- | --- |\n| Interface | [IContext](Eplan.EplApi.Baseu~Eplan.EplApi.Base.IContext.html) | IContext is an abstract interface for Context classes. |\n| Interface | [IEplProgress](Eplan.EplApi.Baseu~Eplan.EplApi.Base.IEplProgress.html) | Interface declaration for a progress. When a progress is to be registered for an add-in (an assembly) in the system, this interface must be implemented by a class of the add-in. |\n| Interface | [ISettings](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ISettings.html) | The common interface to P8 settings. |\n\nStructures\n\n|  | Structure | Description |\n| --- | --- | --- |\n| Structure | [PointD](Eplan.EplApi.Baseu~Eplan.EplApi.Base.PointD.html) | This class represents a set of coordinates in EPLAN. |\n| Structure | [PointD3D](Eplan.EplApi.Baseu~Eplan.EplApi.Base.PointD3D.html) | This class represents a set of 3D coordinates in EPLAN. |\n| Structure | [RectangleD](Eplan.EplApi.Baseu~Eplan.EplApi.Base.RectangleD.html) | This class specifies an area in a coordinate space. |\n\nEnumerations\n\n|  | Enumeration | Description |\n| --- | --- | --- |\n| Enumeration | [EnumDecisionIcon](Eplan.EplApi.Baseu~Eplan.EplApi.Base.EnumDecisionIcon.html) | Used by the [Decider](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Decider.html), to determine which icon is to be shown. |\n| Enumeration | [EnumDecisionReturn](Eplan.EplApi.Baseu~Eplan.EplApi.Base.EnumDecisionReturn.html) | This enum is returned by the [Decider](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Decider.html) method. |\n| Enumeration | [EnumDecisionType](Eplan.EplApi.Baseu~Eplan.EplApi.Base.EnumDecisionType.html) | The type one setting can hold data in. |\n| Enumeration | [ISettings.CreationFlag](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ISettings+CreationFlag.html) | Creation flag |\n| Enumeration | [ISettings.SettingType](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ISettings+SettingType.html) | The type one setting can hold data in. |\n| Enumeration | [ISOCode.Language](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ISOCode+Language.html) | [MultiLangString](Eplan.EplApi.Baseu~Eplan.EplApi.Base.MultiLangString.html) can handle these languages. |\n| Enumeration | [MessageLevel](Eplan.EplApi.Baseu~Eplan.EplApi.Base.MessageLevel.html) | Severity of the error |\n| Enumeration | [Unit](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Unit.html) | A unit. Every unit enum starts with the group name. |\n| Enumeration | [UnitGroup](Eplan.EplApi.Baseu~Eplan.EplApi.Base.UnitGroup.html) | The group of one unit. Conversion is only possible inside groups |"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.BaseException.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.BaseException",
        "content": "Exception class derived from ApplicationException. This is the base class for the exceptions that might occur in the API.\n\nInheritance Hierarchy\n\nSystem.Object](#)  \n   [System.Exception](#)  \n      [System.ApplicationException](#)  \n         **Eplan.EplApi.Base.BaseException**  \n            [Eplan.EplApi.Base.LockingException](Eplan.EplApi.Baseu~Eplan.EplApi.Base.LockingException.html)  \n            [Eplan.EplApi.DataModel.DataModelException](Eplan.EplApi.DataModelu~Eplan.EplApi.DataModel.DataModelException.html)  \n            [Eplan.EplApi.MasterData.MasterDataException](Eplan.EplApi.MasterDatau~Eplan.EplApi.MasterData.MasterDataException.html)\n\nSyntax\n\n* [C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic class BaseException : System.ApplicationException\n```\n```\n\n```\n```\npublic ref class BaseException : public System.ApplicationException\n```\n```\n\n\n\nPublic Constructors\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Constructor | [BaseException Constructor](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException~_ctor.html) | Overloaded. |\n\n[Top](#top)\n\n\n\nPublic Properties\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Property | [Data](#) | (Inherited from [System.Exception](#)) |\n| Public Property | [HelpLink](#) | (Inherited from [System.Exception](#)) |\n| Public Property | [HResult](#) | (Inherited from [System.Exception](#)) |\n| Public Property | [InnerException](#) | (Inherited from [System.Exception](#)) |\n| Public Property | [Message](#) | (Inherited from [System.Exception](#)) |\n| Public Property | [MessageLevel](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException~MessageLevel.html) | Returns the level of message as [MessageLevel](Eplan.EplApi.Baseu~Eplan.EplApi.Base.MessageLevel.html). |\n| Public Property | [NumberOfOccurrences](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException~NumberOfOccurrences.html) | Returns number of repetitions of consecutive messages with the same text (i.e. error description) which are joined into one item in the system's message tree. |\n| Public Property | [Source](#) | (Inherited from [System.Exception](#)) |\n| Public Property | [StackTrace](#) | (Inherited from [System.Exception](#)) |\n| Public Property | [TargetSite](#) | (Inherited from [System.Exception](#)) |\n\n[Top](#top)\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [Dispose](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException~Dispose().html) | Destructor for deterministic finalization of BaseException object. |\n| Public Method | [FixMessage](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException~FixMessage.html) | Method enters a message in the system-wide message tree. |\n| Public Method | [GetBaseException](#) | (Inherited from [System.Exception](#)) |\n| Public Method | [GetBookmarkID](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException~GetBookmarkID.html) | Sets a label in the system error message management for getting a section of the 'message tree' |\n| Public Method | [GetMessageIndex](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException~GetMessageIndex.html) | returns the identifying S- number of a system message |\n| Public Method | [GetMessageText](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException~GetMessageText.html) | Returns the text of the system message without the index |\n| Public Method | [GetObjectData](#) | (Inherited from [System.Exception](#)) |\n| Public Method | [GetType](#) | (Inherited from [System.Exception](#)) |\n| Public Method | [ToString](#) | (Inherited from [System.Exception](#)) |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.Context.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.Context",
        "content": "The Context classes are used to pass information about the current state of the environment as well as generic parameters to objects that can be registered such as actions, dialogs, etc.\n\nInheritance Hierarchy\n\nSystem.Object](#)  \n   **Eplan.EplApi.Base.Context**  \n      [Eplan.EplApi.ApplicationFramework.ActionCallingContext](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.ActionCallingContext.html)  \n      [Eplan.EplApi.EServices.Ged.InteractionContext](Eplan.EplApi.EServicesu~Eplan.EplApi.EServices.Ged.InteractionContext.html)\n\nSyntax\n\n* [C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic class Context : IContext\n```\n```\n\n```\n```\npublic ref class Context : public IContext\n```\n```\n\n\n\nPublic Constructors\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Constructor | [Context Constructor](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context~_ctor.html) | Overloaded. |\n\n[Top](#top)\n\n\n\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [AddParameter](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context~AddParameter.html) | Adds a parameter to the Context. |\n| Public Method | [Dispose](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context~Dispose().html) | Destructor for deterministic finalization of Context object. |\n| Public Method | [GetContextParameter](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context~GetContextParameter.html) | Get the Block of Context Parameters of this Context. |\n| Public Method | [GetEContext](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context~GetEContext.html) | For internal use only. |\n| Public Method | [GetParameter](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context~GetParameter.html) | Gets a parameter from the Context. |\n| Public Method | [GetParameterCount](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context~GetParameterCount.html) | Gets the count of the Parameters in this context |\n| Public Method | [GetParameters](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context~GetParameters.html) | Gets array filled with parameters names from the context. |\n| Public Method | [GetStrings](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context~GetStrings.html) | Gets the array filled with strings from the context. (Additional to the parameters) |\n| Public Method | [SetContextParameter](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context~SetContextParameter.html) | Sets a block of context parameters (as ContextParameterBlock object). |\n| Public Method | [SetEContext](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context~SetEContext.html) | For internal use only. |\n| Public Method | [SetStrings](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context~SetStrings.html) | Sets the array filled with strings from the context. (Additional to the parameters) |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ContextParameterBlock.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ContextParameterBlock",
        "content": "A Parameter block for a context. This parameterblock can have System::Object^ as parameters. This block can be used to add objects to a context and work with this objects p.e. inside an action.\n\nInheritance Hierarchy\n\nSystem.Object](#)  \n   **Eplan.EplApi.Base.ContextParameterBlock**\n\nSyntax\n\n* [C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic class ContextParameterBlock\n```\n```\n\n```\n```\npublic ref class ContextParameterBlock\n```\n```\n\n\n\nPublic Constructors\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Constructor | [ContextParameterBlock Constructor](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ContextParameterBlock~_ctor.html) | Default constructor. |\n\n[Top](#top)\n\n\n\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [Dispose](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ContextParameterBlock~Dispose().html) | Destructor for deterministic finalization of ContextParameter object. |\n| Public Method | [Get](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ContextParameterBlock~Get.html) | Get one object with this name |\n| Public Method | [GetList](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ContextParameterBlock~GetList.html) | Get the list saved in this block |\n| Public Method | [Set](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ContextParameterBlock~Set.html) | Set one object with a name |\n| Public Method | [SetList](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ContextParameterBlock~SetList.html) | Set a list for this block |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.Decider.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.Decider",
        "content": "This class implements the standard EPLAN decider dialog.\n\nInheritance Hierarchy\n\nSystem.Object](#)  \n   **Eplan.EplApi.Base.Decider**\n\nSyntax\n\n* [C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic class Decider\n```\n```\n\n```\n```\npublic ref class Decider\n```\n```\n\nExample\n\nExample of using Decider class:\n\n* [c#](#i-tab-content-4e39bc0f-70e1-49f0-8a40-08762d250e2b)\n\n```\nDecider eDecision = new Decider();\nEnumDecisionReturn eAnswer = eDecision.Decide(eOkCancelDecision, \"Show some dialog text\", \"Eplan Decider\", eOK, eOK);\nif (eAnswer == eOK)\n{\n    // Do your work\n}\n```\n\nPublic Constructors\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Constructor | [Decider Constructor](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Decider~_ctor.html) | Create a new Decider Object. |\n\n[Top](#top)\n\n\n\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [Decide](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Decider~Decide.html) | Overloaded. Decide shows a list select dialog. |\n| Public Method | [Dispose](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Decider~Dispose().html) | Destructor for deterministic finalization of Decider object. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.EplAssert.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.EplAssert",
        "content": "The EplAssert class. When the advaced mode is activated in ELogFileConfigTool, Asserts are written to the epllog.txt Its also possible to activate a debugger break. Set the registry value User / Software / Eplan / Eplan W3 / Assert / BreakOnAssert to true, and the debugger will stop at a failed assert.\n\nInheritance Hierarchy\n\nSystem.Object](#)  \n   **Eplan.EplApi.Base.EplAssert**\n\nSyntax\n\n* [C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic class EplAssert\n```\n```\n\n```\n```\npublic ref class EplAssert\n```\n```\n\nExample\n\nExample of EplAssert:\n\n* [C#](#i-tab-content-b6606e67-dc0f-4d7d-8c73-ad098196ebeb)\n\n```\nobject testObject = null;\nEplan.EplApi.Base.EplAssert oAssert= new Eplan.EplApi.Base.EplAssert();\noAssert.Assert (testObject != null, \"The testobject must not be null!\");\n```\n\nPublic Constructors\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Constructor | [EplAssert Constructor](Eplan.EplApi.Baseu~Eplan.EplApi.Base.EplAssert~_ctor.html) |  |\n\n[Top](#top)\n\n\n\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [Assert](Eplan.EplApi.Baseu~Eplan.EplApi.Base.EplAssert~Assert.html) | A Delevoper Assertion. When the boolean Expression fails, the debugged application fails into the debugger. Some Text is written to the EplLog.txt |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.EplTrace.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.EplTrace",
        "content": "Trace the output to the EplLog.txt file. This Trace class works in debug and release mode, while the trace listener works only in debug mode. Traces are written when the registry key HKCU / Software / Eplan / Eplan W3 / Trace / \\-ModuleName- is found.\n\nInheritance Hierarchy\n\nSystem.Object](#)  \n   **Eplan.EplApi.Base.EplTrace**\n\nSyntax\n\n* [C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic class EplTrace\n```\n```\n\n```\n```\npublic ref class EplTrace\n```\n```\n\nExample\n\nExample of TRACE outputs\n\n* [c#](#i-tab-content-c840c37d-9b0a-4592-9a8a-e2b77ffdbe97)\n\n```\nEplan.EplApi.Base.EplTrace oTrace= new Eplan.EplApi.Base.EplTrace();\noTrace.Trace (\"Eplan.EplApi.Base\", \"Start executing function abc\");\n```\n\nPublic Constructors\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Constructor | [EplTrace Constructor](Eplan.EplApi.Baseu~Eplan.EplApi.Base.EplTrace~_ctor.html) |  |\n\n[Top](#top)\n\n\n\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [Trace](Eplan.EplApi.Baseu~Eplan.EplApi.Base.EplTrace~Trace.html) | Overloaded. Writes the text to EplLog.txt when Trace is on. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.FileSelectDecisionContext.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.FileSelectDecisionContext",
        "content": "This class can be used for an standard eplan decider\n\nInheritance Hierarchy\n\nSystem.Object](#)  \n   **Eplan.EplApi.Base.FileSelectDecisionContext**\n\nSyntax\n\n* [C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic class FileSelectDecisionContext\n```\n```\n\n```\n```\npublic ref class FileSelectDecisionContext\n```\n```\n\nExample\n\nExample of using Decider class with a FileSelectDecisionContext :\n\n* [C#](#i-tab-content-74bb2327-4348-4204-bb92-c0bd17a98922)\n\n```\n\nFileSelectDecisionContext fileContext = new FileSelectDecisionContext(\"ExlSheetSelector\", EnumDecisionReturn.eCANCEL);\nfileContext.Title = \"Select Excel file\";\nfileContext.AllowMultiSelect = false;\nfileContext.DefaultExtension = \"xls\";\nfileContext.AddFilter(\"Excel 97 files (*.xls)\", \"*.xls\");\nfileContext.AddFilter(\"Excel files (*.xlsx)\", \"*.xlsx\");\nfileContext.AddFilter(\"Fenstermakro, Symbolmakro (*.ema, *.ems)\", \"*.ema;*.ems\");\nfileContext.AddFilter(\"All files (*.*)\", \"*.*\");\n\nDecider oDecision = new Decider();\nEnumDecisionReturn eAnswer = oDecision.Decide(fileContext);\nif (eAnswer != EnumDecisionReturn.eOK)\n{\n    return true;\n}\nstring sExlFile = fileContext.GetFiles()[0];\n\n\n```\n\nPublic Constructors\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Constructor | [FileSelectDecisionContext Constructor](Eplan.EplApi.Baseu~Eplan.EplApi.Base.FileSelectDecisionContext~_ctor.html) | Overloaded. |\n\n[Top](#top)\n\n\n\nPublic Properties\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Property | [AllowMultiSelect](Eplan.EplApi.Baseu~Eplan.EplApi.Base.FileSelectDecisionContext~AllowMultiSelect.html) | Set or get the flag for multi selection. |\n| Public Property | [CustomDefaultPath](Eplan.EplApi.Baseu~Eplan.EplApi.Base.FileSelectDecisionContext~CustomDefaultPath.html) | Set or get the CustomDefaultPath. This is the path the File Select Dialog opens first. The second time the path is used the user has selected the last time. Then the context menu \"Set to standard\" will select this path again. |\n| Public Property | [DefaultExtension](Eplan.EplApi.Baseu~Eplan.EplApi.Base.FileSelectDecisionContext~DefaultExtension.html) | The default extension of the files to select. |\n| Public Property | [DefaultFilename](Eplan.EplApi.Baseu~Eplan.EplApi.Base.FileSelectDecisionContext~DefaultFilename.html) | The default name of a file. |\n| Public Property | [OpenFileFlag](Eplan.EplApi.Baseu~Eplan.EplApi.Base.FileSelectDecisionContext~OpenFileFlag.html) | Set or get the openfileflag. Set this flag when you want to open a file Do not set it when you want to save a file. |\n| Public Property | [Title](Eplan.EplApi.Baseu~Eplan.EplApi.Base.FileSelectDecisionContext~Title.html) | The title for the decider. |\n\n[Top](#top)\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [AddFilter](Eplan.EplApi.Baseu~Eplan.EplApi.Base.FileSelectDecisionContext~AddFilter.html) | Add a filter which files are shown. When the user selects one filter in the decider dialog, only files of this type are displayed. |\n| Public Method | [Dispose](Eplan.EplApi.Baseu~Eplan.EplApi.Base.FileSelectDecisionContext~Dispose().html) | Destructor for deterministic finalization of FileSelectDecisionContext object. |\n| Public Method | [GetFiles](Eplan.EplApi.Baseu~Eplan.EplApi.Base.FileSelectDecisionContext~GetFiles.html) | Get all the files the user has selected in the decider dialog. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ISOCode.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ISOCode",
        "content": "Class for managing language codes (abbreviations). MultiLangString](Eplan.EplApi.Baseu~Eplan.EplApi.Base.MultiLangString.html) can handle these languages.\n\nInheritance Hierarchy\n\n[System.Object](#)  \n   **Eplan.EplApi.Base.ISOCode**\n\nSyntax\n\n* [C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic class ISOCode\n```\n```\n\n```\n```\npublic ref class ISOCode\n```\n```\n\n\n\nPublic Constructors\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Constructor | [ISOCode Constructor](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ISOCode~_ctor.html) | Overloaded. |\n\n[Top](#top)\n\n\n\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [Dispose](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ISOCode~Dispose().html) | Destructor for deterministic finalization of ISOCode object. |\n| Public Method | [GetAllLanguages](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ISOCode~GetAllLanguages.html) | Determines all set languages. |\n| Public Method | [GetAllLongNames](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ISOCode~GetAllLongNames.html) | Returns a list of full names of all the languages. |\n| Public Method | [GetLongName | Overloaded. \\Returns the full name of the language |\n| Public Method | GetNumber](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ISOCode~GetNumber.html) | Overloaded. Convert language code to language number |\n| Public Method | [GetString](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ISOCode~GetString.html) | Overloaded. Returns the language code as a string. |\n| Public Method | [IsValid](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ISOCode~IsValid.html) | Determines whether a valid language has been set. |\n| Public Method | [SetNumber](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ISOCode~SetNumber.html) | Sets the language. |\n| Public Method | [SetString](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ISOCode~SetString.html) | Sets the language. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.LanguageList.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.LanguageList",
        "content": "Class for managing a list of languages.\n\nInheritance Hierarchy\n\nSystem.Object](#)  \n   [System.Collections.ArrayList](#)  \n      **Eplan.EplApi.Base.LanguageList**\n\nSyntax\n\n* [C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\n[DefaultMember(\"Item\")]\n[DebuggerTypeProxy(System.Collections.ArrayList/ArrayListDebugView)]\n[DebuggerDisplay(\"Count = {Count}\")]\npublic class LanguageList : System.Collections.ArrayList\n```\n```\n\n```\n```\n[DefaultMember(\"Item\")]\n[DebuggerTypeProxy(System.Collections.ArrayList/ArrayListDebugView)]\n[DebuggerDisplay(\"Count = {Count}\")]\npublic ref class LanguageList : public System.Collections.ArrayList\n```\n```\n\n\n\nPublic Constructors\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Constructor | [LanguageList Constructor](Eplan.EplApi.Baseu~Eplan.EplApi.Base.LanguageList~_ctor.html) |  |\n\n[Top](#top)\n\n\n\nPublic Properties\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Property | [Capacity](#) | (Inherited from [System.Collections.ArrayList](#)) |\n| Public Property | [Count](#) | (Inherited from [System.Collections.ArrayList](#)) |\n| Public Property | [IsFixedSize](#) | (Inherited from [System.Collections.ArrayList](#)) |\n| Public Property | [IsReadOnly](#) | (Inherited from [System.Collections.ArrayList](#)) |\n| Public Property | [IsSynchronized](#) | (Inherited from [System.Collections.ArrayList](#)) |\n| Public Property | [Item](#) | (Inherited from [System.Collections.ArrayList](#)) |\n| Public Property | [Language](Eplan.EplApi.Baseu~Eplan.EplApi.Base.LanguageList~Language.html) | Determines the ISO code of the given index. |\n| Public Property | [SyncRoot](#) | (Inherited from [System.Collections.ArrayList](#)) |\n\n[Top](#top)\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [Add](#) | (Inherited from [System.Collections.ArrayList](#)) |\n| Public Method | [AddRange](#) | (Inherited from [System.Collections.ArrayList](#)) |\n| Public Method | [BinarySearch](#) | Overloaded.  (Inherited from [System.Collections.ArrayList](#)) |\n| Public Method | [Clear](#) | (Inherited from [System.Collections.ArrayList](#)) |\n| Public Method | [Clone](#) | (Inherited from [System.Collections.ArrayList](#)) |\n| Public Method | [Contains](#) | (Inherited from [System.Collections.ArrayList](#)) |\n| Public Method | [CopyTo](#) | Overloaded.  (Inherited from [System.Collections.ArrayList](#)) |\n| Public Method | [GetEnumerator](#) | Overloaded.  (Inherited from [System.Collections.ArrayList](#)) |\n| Public Method | [GetRange](#) | (Inherited from [System.Collections.ArrayList](#)) |\n| Public Method | [IndexOf](#) | Overloaded.  (Inherited from [System.Collections.ArrayList](#)) |\n| Public Method | [Insert](#) | (Inherited from [System.Collections.ArrayList](#)) |\n| Public Method | [InsertRange](#) | (Inherited from [System.Collections.ArrayList](#)) |\n| Public Method | [LastIndexOf](#) | Overloaded.  (Inherited from [System.Collections.ArrayList](#)) |\n| Public Method | [Remove](#) | (Inherited from [System.Collections.ArrayList](#)) |\n| Public Method | [RemoveAt](#) | (Inherited from [System.Collections.ArrayList](#)) |\n| Public Method | [RemoveRange](#) | (Inherited from [System.Collections.ArrayList](#)) |\n| Public Method | [Reverse](#) | Overloaded.  (Inherited from [System.Collections.ArrayList](#)) |\n| Public Method | [SetRange](#) | (Inherited from [System.Collections.ArrayList](#)) |\n| Public Method | [Sort](#) | Overloaded.  (Inherited from [System.Collections.ArrayList](#)) |\n| Public Method | [ToArray](#) | Overloaded.  (Inherited from [System.Collections.ArrayList](#)) |\n| Public Method | [TrimToSize](#) | (Inherited from [System.Collections.ArrayList](#)) |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.Languages.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.Languages",
        "content": "Class for language information.\n\nInheritance Hierarchy\n\nSystem.Object](#)  \n   **Eplan.EplApi.Base.Languages**\n\nSyntax\n\n* [C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic class Languages\n```\n```\n\n```\n```\npublic ref class Languages\n```\n```\n\n\n\nPublic Constructors\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Constructor | [Languages Constructor](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Languages~_ctor.html) | Creates a new Language object. |\n\n[Top](#top)\n\n\n\nPublic Properties\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Property | [AlternativeLanguage](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Languages~AlternativeLanguage.html) | Gets alternative language. |\n| Public Property | [GuiLanguage](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Languages~GuiLanguage.html) | Gets Gui language. |\n\n[Top](#top)\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [Dispose](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Languages~Dispose().html) | Destructor for deterministic finalization of Languages object. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ListSelectDecisionContext.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ListSelectDecisionContext",
        "content": "This class can be used for a standard Eplan decider\n\nInheritance Hierarchy\n\nSystem.Object](#)  \n   **Eplan.EplApi.Base.ListSelectDecisionContext**\n\nSyntax\n\n* [C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic class ListSelectDecisionContext\n```\n```\n\n```\n```\npublic ref class ListSelectDecisionContext\n```\n```\n\nExample\n\nExample of using Decider class with a ListSelectDecisionContext :\n\n* [C#](#i-tab-content-45801c48-a94c-46b9-9604-963e3a777479)\n\n```\nStringCollection collection = new StringCollection();\ncollection.Add(\"Content 1\");\ncollection.Add(\"Content 2\");\ncollection.Add(\"Content 3\");\n\nListSelectDecisionContext listSelectDecisionContext = new ListSelectDecisionContext(collection, \"Content 2\", \"Dialog Title\");\n\nDecider oDecision = new Decider();\nEnumDecisionReturn eAnswer = oDecision.Decide(listSelectDecisionContext);\nif (eAnswer != EnumDecisionReturn.eOK)\n{\n    return false;\n}\n\nif (listSelectDecisionContext.AllowMultiSelect)\n{\n    StringCollection selectedEntries = listSelectDecisionContext.SelectedEntries;\n}\nelse\n{\n    long index = listSelectDecisionContext.SelectedIndex;\n    string strEntry = listSelectDecisionContext.SelectedEntry;\n}\n\n```\n\nPublic Constructors\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Constructor | [ListSelectDecisionContext Constructor](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ListSelectDecisionContext~_ctor.html) | Overloaded. |\n\n[Top](#top)\n\n\n\nPublic Properties\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Property | [AllowMultiSelect](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ListSelectDecisionContext~AllowMultiSelect.html) | Set or get the flag for multi selection. |\n| Public Property | [Entries](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ListSelectDecisionContext~Entries.html) | Gets all entries |\n| Public Property | [SelectedEntries](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ListSelectDecisionContext~SelectedEntries.html) | Gets all selected entries (Use this property if multi selection is enabled) |\n| Public Property | [SelectedEntry](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ListSelectDecisionContext~SelectedEntry.html) | Gets the selected entries |\n| Public Property | [SelectedIndex](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ListSelectDecisionContext~SelectedIndex.html) | Gets the selected index from Entries |\n| Public Property | [Title](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ListSelectDecisionContext~Title.html) | The title for the decider. |\n\n[Top](#top)\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [Dispose](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ListSelectDecisionContext~Dispose().html) | Destructor for deterministic finalization of ListSelectDecisionContext object. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.LockingException.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.LockingException",
        "content": "Exception class that signals locking errors in DataModel.\n\nInheritance Hierarchy\n\nSystem.Object](#)  \n   [System.Exception](#)  \n      [System.ApplicationException](#)  \n         [Eplan.EplApi.Base.BaseException](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException.html)  \n            **Eplan.EplApi.Base.LockingException**  \n               [Eplan.EplApi.DataModel.LockingExceptionFailedLockAttempt](Eplan.EplApi.DataModelu~Eplan.EplApi.DataModel.LockingExceptionFailedLockAttempt.html)\n\nSyntax\n\n* [C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic class LockingException : BaseException\n```\n```\n\n```\n```\npublic ref class LockingException : public BaseException\n```\n```\n\n\n\nPublic Constructors\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Constructor | [LockingException Constructor](Eplan.EplApi.Baseu~Eplan.EplApi.Base.LockingException~_ctor.html) | Overloaded. |\n\n[Top](#top)\n\n\n\nPublic Properties\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Property | [Data](#) | (Inherited from [System.Exception](#)) |\n| Public Property | [HelpLink](#) | (Inherited from [System.Exception](#)) |\n| Public Property | [HResult](#) | (Inherited from [System.Exception](#)) |\n| Public Property | [InnerException](#) | (Inherited from [System.Exception](#)) |\n| Public Property | [Message](#) | (Inherited from [System.Exception](#)) |\n| Public Property | [MessageLevel](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException~MessageLevel.html) | Returns the level of message as [MessageLevel](Eplan.EplApi.Baseu~Eplan.EplApi.Base.MessageLevel.html). (Inherited from [Eplan.EplApi.Base.BaseException](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException.html)) |\n| Public Property | [NumberOfOccurrences](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException~NumberOfOccurrences.html) | Returns number of repetitions of consecutive messages with the same text (i.e. error description) which are joined into one item in the system's message tree. (Inherited from [Eplan.EplApi.Base.BaseException](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException.html)) |\n| Public Property | [Source](#) | (Inherited from [System.Exception](#)) |\n| Public Property | [StackTrace](#) | (Inherited from [System.Exception](#)) |\n| Public Property | [TargetSite](#) | (Inherited from [System.Exception](#)) |\n\n[Top](#top)\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [Dispose](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException~Dispose().html) | Destructor for deterministic finalization of BaseException object. (Inherited from [Eplan.EplApi.Base.BaseException](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException.html)) |\n| Public Method | [FixMessage](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException~FixMessage.html) | Method enters a message in the system-wide message tree. (Inherited from [Eplan.EplApi.Base.BaseException](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException.html)) |\n| Public Method | [GetAllFailed2LockAsString](Eplan.EplApi.Baseu~Eplan.EplApi.Base.LockingException~GetAllFailed2LockAsString.html) | returns all object ids of the objects which were not locked. In case this exception was produced while accessing unlocked object in write mode, only one object will be returned (the one which was accessed first). |\n| Public Method | [GetBaseException](#) | (Inherited from [System.Exception](#)) |\n| Public Method | [GetBookmarkID](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException~GetBookmarkID.html) | Sets a label in the system error message management for getting a section of the 'message tree' (Inherited from [Eplan.EplApi.Base.BaseException](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException.html)) |\n| Public Method | [GetFirstFailed2LockAsString](Eplan.EplApi.Baseu~Eplan.EplApi.Base.LockingException~GetFirstFailed2LockAsString.html) | returns the object id of the first object which was not locked. . |\n| Public Method | [GetMessageIndex](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException~GetMessageIndex.html) | returns the identifying S- number of a system message (Inherited from [Eplan.EplApi.Base.BaseException](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException.html)) |\n| Public Method | [GetMessageText](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException~GetMessageText.html) | Returns the text of the system message without the index (Inherited from [Eplan.EplApi.Base.BaseException](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException.html)) |\n| Public Method | [GetObjectData](#) | (Inherited from [System.Exception](#)) |\n| Public Method | [GetType](#) | (Inherited from [System.Exception](#)) |\n| Public Method | [ToString](#) | (Inherited from [System.Exception](#)) |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.MultiLangString.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.MultiLangString",
        "content": "This class can save strings in various languages at the same time. Each string can be added, queried, and deleted individually.\n\nInheritance Hierarchy\n\nSystem.Object](#)  \n   **Eplan.EplApi.Base.MultiLangString**\n\nSyntax\n\n* [C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic class MultiLangString\n```\n```\n\n```\n```\npublic ref class MultiLangString\n```\n```\n\nRemarks\n\nWhen adding a new language string, language-independant string is removed. When adding a language-independant string, other languages are removed.\n\n\n\nPublic Constructors\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Constructor | [MultiLangString Constructor](Eplan.EplApi.Baseu~Eplan.EplApi.Base.MultiLangString~_ctor().html) | Default constructor |\n\n[Top](#top)\n\n\n\nPublic Properties\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Property | [InternalString](Eplan.EplApi.Baseu~Eplan.EplApi.Base.MultiLangString~InternalString.html) | Sets internal string representation with format validation. |\n\n[Top](#top)\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [AddString](Eplan.EplApi.Baseu~Eplan.EplApi.Base.MultiLangString~AddString.html) | Adds a string in the requested language. |\n| Public Method | [Clear](Eplan.EplApi.Baseu~Eplan.EplApi.Base.MultiLangString~Clear.html) | Removes the contents. |\n| Public Method | [ContainsData](Eplan.EplApi.Baseu~Eplan.EplApi.Base.MultiLangString~ContainsData.html) | Returns whether strings are saved in the MultiLanguageString. |\n| Public Method | [DeleteAllStringsExceptFor](Eplan.EplApi.Baseu~Eplan.EplApi.Base.MultiLangString~DeleteAllStringsExceptFor.html) | Removes unused translations. |\n| Public Method | [DeleteString](Eplan.EplApi.Baseu~Eplan.EplApi.Base.MultiLangString~DeleteString.html) | Deletes the language setting. |\n| Public Method | [Dispose](Eplan.EplApi.Baseu~Eplan.EplApi.Base.MultiLangString~Dispose().html) | Destructor for deterministic finalization of MultiLangString object. |\n| Public Method | [GetAsString](Eplan.EplApi.Baseu~Eplan.EplApi.Base.MultiLangString~GetAsString.html) | Converts an MultiLangString to a string. The languages are appended to one another, all having the same format. |\n| Public Method | [GetLanguageList](Eplan.EplApi.Baseu~Eplan.EplApi.Base.MultiLangString~GetLanguageList.html) | Returns the list of the languages currently saved in this [MultiLangString](Eplan.EplApi.Baseu~Eplan.EplApi.Base.MultiLangString.html). |\n| Public Method | [GetString](Eplan.EplApi.Baseu~Eplan.EplApi.Base.MultiLangString~GetString.html) | Returns the string in the requested language |\n| Public Method | [GetStringToDisplay](Eplan.EplApi.Baseu~Eplan.EplApi.Base.MultiLangString~GetStringToDisplay.html) | Returns the string that is to be displayed in accordance with the passed language. This may be the string saved for this language or, if there is no such string, a language-independent string. |\n| Public Method | [IsEqual](Eplan.EplApi.Baseu~Eplan.EplApi.Base.MultiLangString~IsEqual.html) | Compares every string in every language. If a string is different in one language, then == returns FALSE. If an language string exists in one of the MultiLangStrings but not in the others, this function returns FALSE even if the language string is empty. |\n| Public Method | [SetAsString | Sets the contents of a MultiLangString with a string passed as argument using language marker if necessary. If argument is in MultiLangString form, it will be parsed and saved under given languages. Otherwise '??\\_??@' prefix is added which means that the object is visible the same in every language. |\n| Public Method | ToString](Eplan.EplApi.Baseu~Eplan.EplApi.Base.MultiLangString~ToString.html) | Returns a string that represents the current object. |\n| Public Method | [Translatable](Eplan.EplApi.Baseu~Eplan.EplApi.Base.MultiLangString~Translatable.html) | Indicates whether the MultiLanguageString can be translated. |\n\n[Top](#top)\n\n\n\nPublic Operators\n\n|  |  |\n| --- | --- |\n| public Operator [Equality](Eplan.EplApi.Baseu~Eplan.EplApi.Base.MultiLangString~op_Equality.html) | Equality operator |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ParserParameter.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ParserParameter",
        "content": "Parameter Class for the usage with UnitParser. Configure the unit and the look of the Parser result.\n\nInheritance Hierarchy\n\nSystem.Object](#)  \n   **Eplan.EplApi.Base.ParserParameter**  \n      [Eplan.EplApi.DataModel.Graphics.ProjectParserParameter](Eplan.EplApi.DataModelu~Eplan.EplApi.DataModel.Graphics.ProjectParserParameter.html)\n\nSyntax\n\n* [C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic class ParserParameter\n```\n```\n\n```\n```\npublic ref class ParserParameter\n```\n```\n\n\n\nPublic Constructors\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Constructor | [ParserParameter Constructor](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ParserParameter~_ctor.html) | Constructor |\n\n[Top](#top)\n\n\n\nPublic Properties\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Property | [GridSize](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ParserParameter~GridSize.html) | The grid size in millimeters. p.e. \"4#\" means 4 times grid size |\n| Public Property | [Group](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ParserParameter~Group.html) | The UnitGroup Property. When first UnitID is set,the group is automatically defined by the unit. While setting a Group also the Unit can be changed to the first Unit in new Group if: - new Group is different than the Group of assigned Unit - there is no Unit and Group assigned When new assigned Group is the same like Unit Group, nothing will change. The unitparser can never convert units of different groups |\n| Public Property | [HideUnit](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ParserParameter~HideUnit.html) | Hide the unit of the parsed result. |\n| Public Property | [HideValue](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ParserParameter~HideValue.html) | Hide the value of the parsed result, all other texts (units and additional texts) will remain. |\n| Public Property | [OnlyFirstValue](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ParserParameter~OnlyFirstValue.html) | Display only the first Value. |\n| Public Property | [OnlyUnit](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ParserParameter~OnlyUnit.html) | Display only the Unit. |\n| Public Property | [Precision](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ParserParameter~Precision.html) | Set the precision of the result (Values used for calculation: 0 up to 8) |\n| Public Property | [SpaceBetweenUnitAndValue](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ParserParameter~SpaceBetweenUnitAndValue.html) | Add a space between Unit and the value |\n| Public Property | [SuppressFloatingZeroes](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ParserParameter~SuppressFloatingZeroes.html) | Suppress the last zeroes of a floating result. |\n| Public Property | [UnitFromParameter](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ParserParameter~UnitFromParameter.html) | Get if the unit needs extra parameter to get resolved. Use the project dependend parameter class if this is true. |\n| Public Property | [UnitID](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ParserParameter~UnitID.html) | The UnitId Property. Set or get the unit of the parameters. |\n| Public Property | [WithoutLimiters | The unit is NOT separated by one of this chars: blank (){}[].,:;!?/\\\\ |\n\nTop](#top)\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [CanParse](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ParserParameter~CanParse.html) | Parsing can start when the unitid is not empty |\n| Public Method | [Dispose](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ParserParameter~Dispose().html) | Destructor for deterministic finalization of ParserParameter object. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.PathMap.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.PathMap",
        "content": "This class enables you access to the functions used for processing strings that could contain EPLAN path variables.\n\nInheritance Hierarchy\n\nSystem.Object](#)  \n   **Eplan.EplApi.Base.PathMap**\n\nSyntax\n\n* [C#](#i-syntax-CS)\n* [C++/CLI\n\n```\n```\npublic class PathMap\n```\n```\n\n```\n```\npublic ref class PathMap\n```\n```\n\nRemarks\n\nHere are available EPLAN path variables: $(PROJPROP\\_<ID>)Project property. In order to identify such a path variable, the ID of the respective property is included in the name.\n\n| Path variable | Meaning |\n| --- | --- |\n| $(BIN) | A program directory generated on installation contains the program libraries (\\*.dll) of the individual modules. |\n| $(CFG) | A configuration directory generated on installation containing the xml files of the individual modules. |\n| $(CFG\\_COMPANY) | Configuration directory generated on installation, contains the company settings. |\n| $(CFG\\_STATION) | Configuration directory generated on installation, contains the station settings. |\n| $(CFG\\_USER) | Configuration directory generated on installation, contains the user settings. |\n| $(DOC) | Project-specific directory for documents. |\n| $(EPLAN) | An upper-level main directory generated on installation. |\n| $(EPLAN\\_DATA) | A superior directory for master data, generated on installation. |\n| $(EPLAN\\_EXECUTABLE) | The directory to Eplan.exe. |\n| $(ENVVAR\\_<Variable\\_Name>) | OS environment variable. |\n| $(EPLAN\\_VARIANT) | Name of the started product variant. |\n| $(EPLAN\\_VERSION) | Version number of the used Eplan. |\n| $(EPLAN\\_VERSION\\_SHORT) | Main version number of the used Eplan. |\n| $(IMG) | Project-specific directory for images. |\n| $(LOCALDATE) | Current local date. |\n| $(LOCALTIME) | Current local time. |\n| $(MD\\_DOCUMENTS) | The directory for documents defined under Options > Settings > User > Management > Directories. |\n| $(MD\\_DXFDWG) | The directory for DXF / DWG files defined under Options > Settings > User >Management > Directories. |\n| $(MD\\_FCTDEFS) | The directory for function definitions available under Options > Settings >User > Management > Directories. |\n| $(MD\\_FORMS) | The directory for forms defined under Options > Settings > User > Management > Directories. |\n| $(MD\\_FRAMES) | The directory for plot frames defined under Options > Settings > User >Management > Directories. |\n| $(MD\\_IMG) | The directory for images defined under Options > Settings > User > Management > Directories. |\n| $(MD\\_MACROS) | The directory for macros and outlines defined under Options > Settings >User > Management > Directories. |\n| $(MD\\_MECHANICALMODELS) | The directory for mechanical models defined under Options > Settings >User > Management > Directories. |\n| $(MD\\_PARTS) | The directory for parts defined under Options > Settings > User >Management > Directories. |\n| $(MD\\_PROJECTS) | The directory for projects defined under Options > Settings > User >Management > Directories. |\n| $(MD\\_SCHEME) | The directory for schemes defined under Options > Settings > User >Management > Directories. |\n| $(MD\\_SCRIPTS) | The directory for scripts defined under Options > Settings > User >Management > Directories. |\n| $(MD\\_SYMBOLS) | The directory for symbols defined under Options > Settings > User >Management > Directories. |\n| $(MD\\_TEMPLATES) | The directory for templates defined under Options > Settings > User >Management > Directories. |\n| $(MD\\_TRANSLATE) | The directory for translation files defined under Options > Settings >User > Management > Directories. |\n| $(MD\\_XML) | The directory for XML files defined under Options > Settings > User > Management > Directories. |\n| $(P) | Full project directory of the currently selected project. |\n| $(PROJECTNAME) | Project name of the currently selected project, without directory path and file extension. |\n| $(PROJECTPATH) | Full project directory of the currently selected project. |\n|  |\n|  |\n| $(RIGHTS\\_DB\\_PATH) | Directory of the user rights database. |\n| $(TMP) | The directory used by the operating system for temporary files. |\n\n  \nFor more information about path variables, please refer to EPLAN Help under the topic:  \nUsing EPLAN>User Interface>Reference>Dialog Select Path variable.\n\n\n\nPublic Constructors\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Constructor | PathMap Constructor](Eplan.EplApi.Baseu~Eplan.EplApi.Base.PathMap~_ctor.html) | Default constructor |\n\n[Top](#top)\n\n\n\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [Dispose](Eplan.EplApi.Baseu~Eplan.EplApi.Base.PathMap~Dispose().html) | Destructor for deterministic finalization of PathMap object. |\n| Public Methodstatic (Shared in Visual Basic) | [ReSubstitutePath](Eplan.EplApi.Baseu~Eplan.EplApi.Base.PathMap~ReSubstitutePath.html) | Overloaded. Substitute values with variable strVariableName. Returns the changed path. |\n| Public Methodstatic (Shared in Visual Basic) | [ReSubstitutePathForDisplay](Eplan.EplApi.Baseu~Eplan.EplApi.Base.PathMap~ReSubstitutePathForDisplay.html) | Substitute values with variables. Returns the changed path. Ignores all variables which are not visible in P8 Dialogs. |\n| Public Methodstatic (Shared in Visual Basic) | [SubstitutePath](Eplan.EplApi.Baseu~Eplan.EplApi.Base.PathMap~SubstitutePath.html) | Overloaded. Substitutes variables with their values for a partuclar Project. Returns the changed path. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.Progress.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.Progress",
        "content": "This class enables you to access the functions of the progress bar in EPLAN.\n\nInheritance Hierarchy\n\nSystem.Object](#)  \n   **Eplan.EplApi.Base.Progress**\n\nSyntax\n\n* [C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic class Progress\n```\n```\n\n```\n```\npublic ref class Progress\n```\n```\n\nRemarks\n\nThere are different kinds of progress bars. It can be created by functions and passed to another function as a parameter object (often in a Context). Please call Progress::EndPart(true) at the end to close the dialog. Please don't use steps (SetNeededSteps and Step methods) when a nested EPLAN progress (i.e. from API method) could be called afterwards.\n\nExample\n\nExample of using Progress class\n\n* [C#](#i-tab-content-517dd632-e92c-48b0-b4ca-ead347de6b60)\n\n```\n\nusing (var progress = new Progress(\"SimpleProgress\"))\n{\n    progress.ShowImmediately();\n\n    //part 1\n   progress.BeginPart(25.0, \"\");\n   progress.SetActionText(\"part1\");\n   progress.SetNeededSteps(1);\n   progress.Step(1);\n   System.Threading.Thread.Sleep(2500);    // TODO: Some processing\n   progress.EndPart(false);\n\n   //part 2\n   progress.BeginPart(30.0, \"\");\n   progress.SetNeededSteps(3);            // call SetNeededSteps with the count of steps following\n   progress.SetActionText(\"part2 step1\");\n   progress.Step(1);\n   System.Threading.Thread.Sleep(1000);    // TODO: Some processing\n\n   progress.SetActionText(\"part2 step2\");\n   progress.Step(1);\n   System.Threading.Thread.Sleep(1000);    // TODO: Some processing\n\n   progress.SetActionText(\"part2 step3\");\n   progress.Step(1);\n   System.Threading.Thread.Sleep(1000);    // TODO: Some processing\n   progress.EndPart(false);\n\n   //part 3\n   progress.BeginPart(45.0, \"\");          // Here is a sum of 100% reached!\n   progress.SetActionText(\"part3\");\n   progress.SetNeededSteps(1);\n   progress.Step(1);\n   System.Threading.Thread.Sleep(4500);    // TODO: Some processing\n   progress.EndPart(true);\n}\n\n\n```\n\n* [C#](#i-tab-content-2d68353c-d687-4e53-93bf-5206f2831db3)\n\n```\n\nusing (var progress = new Progress(\"SimpleProgress\"))\n{\n    progress.SetAllowCancel(true);\n    progress.SetAskOnCancel(true);\n    progress.SetTitle(\"Replace parts\");\n    progress.ShowImmediately();\n\n    var finder = new DMObjectsFinder(oProject);\n    var articleReferences = finder.GetArticleReferences(null);\n    var nIteration = 0;\n    var progressPartInPercentage = 100.0 / articleReferences.Length;\n    foreach (var articleReference in articleReferences)\n    {\n        // Set new values\n        progress.BeginPart(progressPartInPercentage, $\"Iteration : {nIteration++}\");\n        articleReference.PartNr = \"New part number\";\n        articleReference.VariantNr = \"New variant\";\n        articleReference.StoreToObject();\n        new DeviceService().UpdateDevice(articleReference.ParentObject);\n        progress.EndPart();\n    }\n}\n\n\n```\n\nPublic Constructors\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Constructor | [Progress Constructor](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Progress~_ctor.html) | Overloaded. |\n\n[Top](#top)\n\n\n\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [BeginPart](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Progress~BeginPart.html) | Starts a new segment. All parallel segments should result in a sum of 100%. |\n| Public Method | [Canceled](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Progress~Canceled.html) | Queries whether the operation was canceled. |\n| Public Method | [Dispose](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Progress~Dispose().html) | Destructor for deterministic finalization of Progress object. |\n| Public Method | [EndPart](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Progress~EndPart.html) | Overloaded. Ends segment and closes the window when it is not used. Don't forget to call it at the end, otherwise a progress dialog may lock P8. |\n| Public Method | [GetProgress](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Progress~GetProgress.html) | For internal use only. |\n| Public Method | [SetActionText](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Progress~SetActionText.html) | Sets a new action text. |\n| Public Method | [SetAllowCancel](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Progress~SetAllowCancel.html) | Allows canceling. |\n| Public Method | [SetAskOnCancel](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Progress~SetAskOnCancel.html) | Asks to confirm the cancel request. |\n| Public Method | [SetNeededParts](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Progress~SetNeededParts.html) | Specifies how many segments are required. |\n| Public Method | [SetNeededSteps](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Progress~SetNeededSteps.html) | Indicates how many steps are required to reach 100%. E.g. used for loops. |\n| Public Method | [SetOverallActionText](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Progress~SetOverallActionText.html) | Sets a new action text. |\n| Public Method | [SetTitle](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Progress~SetTitle.html) | Sets the title of the progress bar. |\n| Public Method | [ShowImmediately](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Progress~ShowImmediately.html) | Shows the progress bar without any further delay. When ShowImmediately isnt't called the dialog appears later (with delay), it prevents the dialog to show unnecessarily (to prevent that the progress flickers up for a short running actions). |\n| Public Method | [ShowLevel](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Progress~ShowLevel.html) | Specifies the nesting level up to which a display is made. |\n| Public Method | [Step](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Progress~Step.html) | Uses a step |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ProgressFactory.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ProgressFactory",
        "content": "This class can be used for OfflineApplications. With RegisterProgress a progress can be installed in Eplan. UnregisterProgress removes this progress from Eplan again.\n\nInheritance Hierarchy\n\nSystem.Object](#)  \n   **Eplan.EplApi.Base.ProgressFactory**\n\nSyntax\n\n* [C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic class ProgressFactory\n```\n```\n\n```\n```\npublic ref class ProgressFactory\n```\n```\n\n\n\nPublic Constructors\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Constructor | [ProgressFactory Constructor](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ProgressFactory~_ctor.html) |  |\n\n[Top](#top)\n\n\n\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Methodstatic (Shared in Visual Basic) | [RegisterProgress](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ProgressFactory~RegisterProgress.html) | Registers the progress in the eplan framework |\n| Public Methodstatic (Shared in Visual Basic) | [UnRegisterProgress](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ProgressFactory~UnRegisterProgress.html) | unRegisters the progress from the eplan framework |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.Range.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.Range",
        "content": "Range of setting values\n\nInheritance Hierarchy\n\nSystem.Object](#)  \n   **Eplan.EplApi.Base.Range**\n\nSyntax\n\n* [C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic class Range\n```\n```\n\n```\n```\npublic ref class Range\n```\n```\n\n\n\nPublic Constructors\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Constructor | [Range Constructor](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Range~_ctor.html) |  |\n\n[Top](#top)\n\nPublic Fields\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Field | [FromValue](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Range~FromValue.html) | Minimal value(begin, start) |\n| Public Field | [ToValue](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Range~ToValue.html) | Maximal value(end, stop) |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSetting.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSetting",
        "content": "Class for editing settings that are grouped into schemes\n\nInheritance Hierarchy\n\nSystem.Object](#)  \n   **Eplan.EplApi.Base.SchemeSetting**  \n      [Eplan.EplApi.DataModel.ProjectSchemeSetting](Eplan.EplApi.DataModelu~Eplan.EplApi.DataModel.ProjectSchemeSetting.html)\n\nSyntax\n\n* [C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic class SchemeSetting\n```\n```\n\n```\n```\npublic ref class SchemeSetting\n```\n```\n\nExample\n\nExample of using SchemeSetting class\n\n* [C#](#i-tab-content-99052eb7-c7b9-47bb-ad47-66644fb9af1c)\n\n```\nSchemeSetting oSchemeSetting = new SchemeSetting();\noSchemeSetting.Init(\"USER.DXF.SCHEMES\");\nstring strSchemeName = \"DXFSchemeToSelect\";\nif (oSchemeSetting.CheckIfSchemeExists(strSchemeName))\n{\n    oSchemeSetting.SetScheme(strSchemeName);\n    int iExportFormatVersion = oSchemeSetting.GetNumericSetting(\"EXPORT.FORMAT_VERSION\", 0);\n}\n\n```\n\nPublic Constructors\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Constructor | [SchemeSetting Constructor](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~_ctor.html) | Overloaded. |\n\n[Top](#top)\n\n\n\nPublic Properties\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Property | [Description](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~Description.html) | Returns a multilingual description text of the scheme. |\n| Public Property | [MLangName](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~MLangName.html) | Returns a multilingual scheme name. |\n| Public Property | [ReadOnly](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~ReadOnly.html) | Gives write permission to settings of this scheme. |\n\n[Top](#top)\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [CheckIfSchemeExists](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~CheckIfSchemeExists.html) | Checks whether a scheme is defined. |\n| Public Method | [CopyScheme](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~CopyScheme.html) | Copy an existing scheme. |\n| Public Method | [CountSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~CountSetting.html) | Number of additional settings existing under the specified setting name. |\n| Public Method | [CreateScheme](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~CreateScheme.html) | Create a new scheme with a specified name, description and the node name for the settings. The data for the new scheme is specified by P8 for each scheme type. The data is the same as the new button in the scheme dialog of P8. |\n| Public Method | [Dispose](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~Dispose().html) | For internal use only. Needed if the scheme exists in a project's settings Destructor for deterministic finalization of SchemeSetting object. |\n| Public Method | [ExportScheme](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~ExportScheme.html) | Export a scheme to file. |\n| Public Method | [ExportSchemes](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~ExportSchemes.html) | Export all schemes to file. |\n| Public Method | [GetBoolSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~GetBoolSetting.html) | Returns the value of a setting. If a setting is read that has no value for this index, the default value is returned. The index starts at 0. |\n| Public Method | [GetCount](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~GetCount.html) | Returns the number of various schemes in this scheme. |\n| Public Method | [GetDoubleSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~GetDoubleSetting.html) | Returns the value of a setting. If a setting is read that has no value for this index, the default value is returned. The index starts at 0. |\n| Public Method | [GetLastUsed](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~GetLastUsed.html) | Returns the last used scheme name (node LastUsed). |\n| Public Method | [GetLocalizedNameSettingPath](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~GetLocalizedNameSettingPath.html) | Returns Setting path to the localized name of this scheme. |\n| Public Method | [GetMultiLangStringSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~GetMultiLangStringSetting.html) | Returns the value of a setting. If a setting is read that has no value for this index, the default value is returned. The index starts at 0. |\n| Public Method | [GetName](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~GetName.html) | Returns a language-independent, internal scheme identifier. |\n| Public Method | [GetNodeHandle](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~GetNodeHandle.html) | Returns the [SettingNode](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode.html) of the data node of the current setting. The individual settings can now be accessed via the functions of the [SettingNode](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode.html). |\n| Public Method | [GetNumericSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~GetNumericSetting.html) | Reads numeric value from settings. It can be 16 bit or 32 bit, signed or unsigned setting. |\n| Public Method | [GetStringSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~GetStringSetting.html) | Returns the value of a setting. If a setting is read that has no value for this index, the default value is returned. The index starts at 0. |\n| Public Method | [ImportScheme](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~ImportScheme.html) | Import a scheme from file. |\n| Public Method | [ImportSchemes](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~ImportSchemes.html) | Import all schemes from file. |\n| Public Method | [Init](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~Init.html) | Initializes object with a settings node path. |\n| Public Method | [RemoveScheme](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~RemoveScheme.html) | Remove a new scheme. |\n| Public Method | [ResetScheme](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~ResetScheme.html) | Sets LastUsed as the current scheme. |\n| Public Method | [Set](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~Set.html) | Setup internal members |\n| Public Method | [SetBoolSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~SetBoolSetting.html) | Sets the value of a setting. If a setting is made and an index is specified that exceeds the number of values, the corresponding values are created, based on the predefined value. The index starts at 0. |\n| Public Method | [SetDoubleSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~SetDoubleSetting.html) | Sets the value of a setting. If a setting is made and an index is specified that exceeds the number of values, the corresponding values are created, based on the predefined value. The index starts at 0. |\n| Public Method | [SetLastUsed](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~SetLastUsed.html) | Sets the strName scheme as the current one. Value in node LastUsed will be strName |\n| Public Method | [SetMultiLangStringSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~SetMultiLangStringSetting.html) | Sets the value of a setting. If a setting is made and an index is specified that exceeds the number of values, the corresponding values are created, based on the predefined value. The index starts at 0. |\n| Public Method | [SetNumericSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~SetNumericSetting.html) | Sets the value of settings on a given path. Type of value will be converted to 16 bit, 32 bit, signed or unsigned value depending on setting type. |\n| Public Method | [SetScheme](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~SetScheme.html) | Overloaded. Sets a scheme by its name (LastUsed remains unchanged |\n| Public Method | [SetStringSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~SetStringSetting.html) | Sets the value of a setting. If a setting is made and an index is specified that exceeds the number of values, the corresponding values are created, based on the predefined value. The index starts at 0. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.SettingNode.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.SettingNode",
        "content": "Allows access to settings and relative access to setting-nodes. A setting key consists of a number of sections separated by '.' Each section except the last one is called a setting-node. Setting-nodes and settings together build the settings tree. The settings are the leaves of this tree. The SettingNode class helps iterating trough the nodes and e.g. gives you the possibility to delete a node completely.\n\nInheritance Hierarchy\n\nSystem.Object](#)  \n   **Eplan.EplApi.Base.SettingNode**  \n      [Eplan.EplApi.DataModel.ProjectSettingNode](Eplan.EplApi.DataModelu~Eplan.EplApi.DataModel.ProjectSettingNode.html)\n\nSyntax\n\n* [C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic class SettingNode\n```\n```\n\n```\n```\npublic ref class SettingNode\n```\n```\n\nRemarks\n\nDue to changes in EPLAN, it may happen that settings will change their type or name or that some settings will be completely removed. We cannot guarantee the long-term compatibility of settings. When updating to a newer version, please check your source code, whether the settings you use are still working.\n\nExample\n\nExample of using relative path to access entries\n\n* [C#](#i-tab-content-a73ebe75-93e0-4207-bc24-c2f4c13dd6b4)\n\n```\n// Create setting node with path STATION.AF.Service.Actions.ActionNewModell\nSettingNode oSettingNode = new SettingNode(\"STATION.AF.Services.Actions.ActionNewModell\");\n// Set or get setting relative to the path of the node\noSettingNode.SetStringSetting(\"ModuleName.10\", \"Service3DLog\", 0);\nstring str = oSettingNode.GetStringSetting(\"ModuleName.10\", 0);\n\n```\n\nExample of merging 2 nodes\n\n* [C#](#i-tab-content-61de88e8-898b-4fcf-944a-e92c0f289cb8)\n\n```\nSettingNode oTestNode1 = new SettingNode(\"STATION.AF.Services.Actions.ActionNewModell\");\nConsole.WriteLine(oTestNode1.GetCountOfNodes().ToString()); //  1\n\nSettingNode oTestNode2 = new SettingNode(\"STATION.AF.Services.Actions.AdjustFromAllLineToSingleLineAndOverview\");\nConsole.WriteLine(oTestNode2.GetCountOfNodes().ToString()); //  1\n\noTestNode1.MergeWithNode(oTestNode2);\nConsole.WriteLine(oTestNode1.GetCountOfNodes().ToString()); //  2\n\n```\n\nExample of listing sub-nodes\n\n* [C#](#i-tab-content-deec29e6-5077-45d0-9375-7b4329787558)\n\n```\nSettingNode oSettingNode = new SettingNode(\"STATION.AF.Modules\");\nStringCollection oSubnodes = new StringCollection();\noSettingNode.GetListOfNodes(ref oSubnodes, false);\nforeach (string sSubNode in oSubnodes)\n{\n    SettingNode oSubNode = oSettingNode.GetSubNode(sSubNode);\n    Console.WriteLine(oSubNode.GetNodePath());\n}\n\n```\n\nPublic Constructors\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Constructor | [SettingNode Constructor](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~_ctor.html) | Overloaded. |\n\n[Top](#top)\n\n\n\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [AddBoolDefault](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~AddBoolDefault.html) | Defines a new setting for a boolean default. |\n| Public Method | [AddBoolSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~AddBoolSetting.html) | Defines a new setting for a boolean value. |\n| Public Method | [AddDoubleDefault](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~AddDoubleDefault.html) | Defines a new setting for a double default. |\n| Public Method | [AddDoubleSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~AddDoubleSetting.html) | Defines a new setting for a double value. |\n| Public Method | [AddMultiLangStringDefault](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~AddMultiLangStringDefault.html) | Defines a new setting for a multilanguage string default. |\n| Public Method | [AddMultiLangStringSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~AddMultiLangStringSetting.html) | Defines a new setting for a multilanguage string value. |\n| Public Method | [AddNumericDefault](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~AddNumericDefault.html) | Defines a new setting for a numeric default. |\n| Public Method | [AddNumericSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~AddNumericSetting.html) | Defines a new setting for a numeric value. |\n| Public Method | [AddStringDefault](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~AddStringDefault.html) | Defines a new setting for a string default. |\n| Public Method | [AddStringSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~AddStringSetting.html) | Defines a new setting for a string value. |\n| Public Method | [ClearSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~ClearSetting.html) | Overloaded. Deletes the value. The setting definition is maintained. |\n| Public Method | [DeleteSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~DeleteSetting.html) | Resets an individual setting to the value of the corresponding default setting. If it has no default setting, the setting is deleted. |\n| Public Method | [Dispose](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~Dispose().html) | Destructor for deterministic finalization of SettingNode object. |\n| Public Method | [ExistSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~ExistSetting.html) | Verifies whether specified setting exists. |\n| Public Method | [ForceReload](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~ForceReload.html) | Reloads settings node. |\n| Public Method | [GetBoolSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~GetBoolSetting.html) | Returns the value of a setting. If a setting is read that has no value for this index, the default value is returned. The index starts at 0. |\n| Public Method | [GetCountOfNodes](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~GetCountOfNodes.html) | Determines the number of child nodes. |\n| Public Method | [GetCountOfSettings](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~GetCountOfSettings.html) | Determines the number of child settings (subordinate settings). |\n| Public Method | [GetDoubleSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~GetDoubleSetting.html) | Returns the value of a setting. If a setting is read that has no value for this index, the default value is returned. The index starts at 0. |\n| Public Method | [GetListOfAllSettings](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~GetListOfAllSettings.html) | Determines all settings. |\n| Public Method | [GetListOfNodes](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~GetListOfNodes.html) | Determines all settings nodes. |\n| Public Method | [GetListOfSettings](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~GetListOfSettings.html) | Determines all settings of this node. |\n| Public Method | [GetMultiLangStringSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~GetMultiLangStringSetting.html) | Returns the value of a setting. If a setting is read that has no value for this index, the default value is returned. The index starts at 0. |\n| Public Method | [GetNodePath](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~GetNodePath.html) | Determines the path of this node. |\n| Public Method | [GetNodePathDot](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~GetNodePathDot.html) | Determines the path of this node. |\n| Public Method | [GetNumericSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~GetNumericSetting.html) | Reads numeric value from settings. It can be 16 bit or 32 bit, signed or unsigned setting. |\n| Public Method | [GetParentNode](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~GetParentNode.html) | Determines the parent node. |\n| Public Method | [GetStringSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~GetStringSetting.html) | Returns the value of a setting. If a setting is read that has no value for this index, the default value is returned. The index starts at 0. |\n| Public Method | [GetSubNode](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~GetSubNode.html) | Determines a child node. |\n| Public Method | [MergeWithNode](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~MergeWithNode.html) | Merges settings nodes. |\n| Public Method | [ResetNode](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~ResetNode.html) | Resets the node to default. All settings inside are deleted and copied from defaults again. |\n| Public Method | [Set](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~Set.html) | Defines the path to the settings node. |\n| Public Method | [SetBoolSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~SetBoolSetting.html) | Sets the value of a setting. If a setting is made and an index is specified that exceeds the number of values, the corresponding values are created, based on the predefined value. The index starts at 0. |\n| Public Method | [SetDoubleSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~SetDoubleSetting.html) | Sets the value of a setting. If a setting is made and an index is specified that exceeds the number of values, the corresponding values are created, based on the predefined value. The index starts at 0. |\n| Public Method | [SetMultiLangStringSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~SetMultiLangStringSetting.html) | Sets the value of a setting. If a setting is made and an index is specified that exceeds the number of values, the corresponding values are created, based on the predefined value. The index starts at 0. |\n| Public Method | [SetNumericSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~SetNumericSetting.html) | Sets the value of project settings on a given path. Type of value will be converted to 16 bit, 32 bit, signed or unsigned value depending on setting type. |\n| Public Method | [SetStringSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~SetStringSetting.html) | Sets the value of a setting. If a setting is made and an index is specified that exceeds the number of values, the corresponding values are created, based on the predefined value. The index starts at 0. |\n| Public Method | [Write](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~Write.html) | Writes all settings to a file. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.BaseException_ctor.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/BaseException",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.BaseException_ctor",
        "content": "Default constructor\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic BaseException()\n```\n```\n\n```\n```\npublic:\nBaseException();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.BaseException_methods.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/BaseException",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.BaseException_methods",
        "content": "For a list of all members of this type, see BaseException members](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException_members.html).\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [Dispose](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException~Dispose().html) | Destructor for deterministic finalization of BaseException object. |\n| Public Method | [FixMessage](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException~FixMessage.html) | Method enters a message in the system-wide message tree. |\n| Public Method | [GetBaseException](#) | (Inherited from [System.Exception](#)) |\n| Public Method | [GetBookmarkID](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException~GetBookmarkID.html) | Sets a label in the system error message management for getting a section of the 'message tree' |\n| Public Method | [GetMessageIndex](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException~GetMessageIndex.html) | returns the identifying S- number of a system message |\n| Public Method | [GetMessageText](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException~GetMessageText.html) | Returns the text of the system message without the index |\n| Public Method | [GetObjectData](#) | (Inherited from [System.Exception](#)) |\n| Public Method | [GetType](#) | (Inherited from [System.Exception](#)) |\n| Public Method | [ToString](#) | (Inherited from [System.Exception](#)) |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.BaseException_properties.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/BaseException",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.BaseException_properties",
        "content": "For a list of all members of this type, see BaseException members](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException_members.html).\n\nPublic Properties\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Property | [Data](#) | (Inherited from [System.Exception](#)) |\n| Public Property | [HelpLink](#) | (Inherited from [System.Exception](#)) |\n| Public Property | [HResult](#) | (Inherited from [System.Exception](#)) |\n| Public Property | [InnerException](#) | (Inherited from [System.Exception](#)) |\n| Public Property | [Message](#) | (Inherited from [System.Exception](#)) |\n| Public Property | [MessageLevel](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException~MessageLevel.html) | Returns the level of message as [MessageLevel](Eplan.EplApi.Baseu~Eplan.EplApi.Base.MessageLevel.html). |\n| Public Property | [NumberOfOccurrences](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException~NumberOfOccurrences.html) | Returns number of repetitions of consecutive messages with the same text (i.e. error description) which are joined into one item in the system's message tree. |\n| Public Property | [Source](#) | (Inherited from [System.Exception](#)) |\n| Public Property | [StackTrace](#) | (Inherited from [System.Exception](#)) |\n| Public Property | [TargetSite](#) | (Inherited from [System.Exception](#)) |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.BaseException_ctorStringMessageLevel.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/BaseException/BaseException Constructor",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.BaseException_ctorStringMessageLevel",
        "content": "Constructor\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic BaseException( \n   string strErrorText,\n   MessageLevel eErrorLevel\n)\n```\n```\n\n```\n```\npublic:\nBaseException( \n   String^ strErrorText,\n   MessageLevel eErrorLevel\n)\n```\n```\n\n#### Parameters\n\n*strErrorText*\n:   Note on the exception that occurred.\n\n*eErrorLevel*\n:   Severity of the exception that occurred."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.BaseException_ctorStringMessageLevelBaseException.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/BaseException/BaseException Constructor",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.BaseException_ctorStringMessageLevelBaseException",
        "content": "Constructor\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic BaseException( \n   string strErrorText,\n   MessageLevel eErrorLevel,\n   BaseException innerException\n)\n```\n```\n\n```\n```\npublic:\nBaseException( \n   String^ strErrorText,\n   MessageLevel eErrorLevel,\n   BaseException^ innerException\n)\n```\n```\n\n#### Parameters\n\n*strErrorText*\n:   Note on the exception that occurred.\n\n*eErrorLevel*\n:   Severity of the exception that occurred.\n\n*innerException*\n:   The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.BaseExceptionDispose.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/BaseException/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.BaseExceptionDispose",
        "content": "Destructor for deterministic finalization of BaseException object.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void Dispose()\n```\n```\n\n```\n```\npublic:\nvoid Dispose();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.BaseExceptionFixMessage.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/BaseException/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.BaseExceptionFixMessage",
        "content": "Method enters a message in the system-wide message tree.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void FixMessage()\n```\n```\n\n```\n```\npublic:\nvoid FixMessage();\n```\n```\n\nExample\n\nWriting an error message to the system error message management.\n\n* [C#](#i-tab-content-25950f6c-9662-4050-b2b2-c2bf6dff455d)\n\n```\nEplan.EplApi.Base.BaseException exc= new Eplan.EplApi.Base.BaseException(\"Error message from API module\",\n                                                                          Eplan.EplApi.Base.MessageLevel.Error);\nexc.FixMessage();\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.BaseExceptionGetBookmarkID.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/BaseException/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.BaseExceptionGetBookmarkID",
        "content": "Sets a label in the system error message management for getting a section of the 'message tree'\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic int GetBookmarkID()\n```\n```\n\n```\n```\npublic:\nint GetBookmarkID();\n```\n```\n\n#### Return Value\n\na serial number. save this value for later use\n\nExample\n\nget all messages which have been declared since the given bookmark was set\n\n* [C#](#i-tab-content-265c92fc-9b7b-48e1-b238-a4f0cea55105)\n\n```\nint nBookmark = new Eplan.EplApi.Base.BaseException().GetBookmarkID(); //Starting point which sets the new bookmark\n...\nBaseException oBaseException = new BaseException(\"Exception message\", MessageLevel.Error);\noBaseException.FixMessage(); //This error will be saved under nBookmark\n\nSysMessagesCollection colSysMsg = new SysMessagesCollection(nBookmark, Eplan.EplApi.Base.MessageLevel.Error);\nSysMessagesEnumerator itSysMsg = colSysMsg.GetSysMsgEnumerator();\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.BaseExceptionGetMessageIndex.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/BaseException/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.BaseExceptionGetMessageIndex",
        "content": "returns the identifying S- number of a system message\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic string GetMessageIndex()\n```\n```\n\n```\n```\npublic:\nString^ GetMessageIndex();\n```\n```\n\n#### Return Value\n\nthe index as string; if the string is 'S000000' there is no ID defined until now"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.BaseExceptionGetMessageText.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/BaseException/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.BaseExceptionGetMessageText",
        "content": "Returns the text of the system message without the index\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic string GetMessageText()\n```\n```\n\n```\n```\npublic:\nString^ GetMessageText();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.BaseExceptionMessageLevel.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/BaseException/Properties",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.BaseExceptionMessageLevel",
        "content": "Returns the level of message as MessageLevel](Eplan.EplApi.Baseu~Eplan.EplApi.Base.MessageLevel.html).\n\nSyntax\n\n* [C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic MessageLevel MessageLevel {get;}\n```\n```\n\n```\n```\npublic:\nproperty MessageLevel MessageLevel {\n   MessageLevel get();\n}\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.BaseExceptionNumberOfOccurrences.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/BaseException/Properties",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.BaseExceptionNumberOfOccurrences",
        "content": "Returns number of repetitions of consecutive messages with the same text (i.e. error description) which are joined into one item in the system's message tree.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic int NumberOfOccurrences {get;}\n```\n```\n\n```\n```\npublic:\nproperty int NumberOfOccurrences {\n   int get();\n}\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.Context_ctor.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/Context",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.Context_ctor",
        "content": "Creates a new Context object.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic Context()\n```\n```\n\n```\n```\npublic:\nContext();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.Context_methods.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/Context",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.Context_methods",
        "content": "For a list of all members of this type, see Context members](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context_members.html).\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [AddParameter](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context~AddParameter.html) | Adds a parameter to the Context. |\n| Public Method | [Dispose](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context~Dispose().html) | Destructor for deterministic finalization of Context object. |\n| Public Method | [GetContextParameter](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context~GetContextParameter.html) | Get the Block of Context Parameters of this Context. |\n| Public Method | [GetEContext](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context~GetEContext.html) | For internal use only. |\n| Public Method | [GetParameter](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context~GetParameter.html) | Gets a parameter from the Context. |\n| Public Method | [GetParameterCount](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context~GetParameterCount.html) | Gets the count of the Parameters in this context |\n| Public Method | [GetParameters](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context~GetParameters.html) | Gets array filled with parameters names from the context. |\n| Public Method | [GetStrings](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context~GetStrings.html) | Gets the array filled with strings from the context. (Additional to the parameters) |\n| Public Method | [SetContextParameter](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context~SetContextParameter.html) | Sets a block of context parameters (as ContextParameterBlock object). |\n| Public Method | [SetEContext](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context~SetEContext.html) | For internal use only. |\n| Public Method | [SetStrings](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Context~SetStrings.html) | Sets the array filled with strings from the context. (Additional to the parameters) |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.Context_ctorEContext.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/Context/Context Constructor",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.Context_ctorEContext",
        "content": "For internal use only.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic Context( \n   EContext* pEContext\n)\n```\n```\n\n```\n```\npublic:\nContext( \n   EContext* pEContext\n)\n```\n```\n\n#### Parameters\n\n*pEContext*\n:   For internal use only."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.Context_ctorEContextBoolean.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/Context/Context Constructor",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.Context_ctorEContextBoolean",
        "content": "For internal use only.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic Context( \n   EContext* pEContext,\n   bool bDelete\n)\n```\n```\n\n```\n```\npublic:\nContext( \n   EContext* pEContext,\n   bool bDelete\n)\n```\n```\n\n#### Parameters\n\n*pEContext*\n:   For internal use only.\n\n*bDelete*"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ContextAddParameter.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/Context/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ContextAddParameter",
        "content": "Adds a parameter to the Context.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic virtual void AddParameter( \n   string strParameterName,\n   string strNewParameterValue\n)\n```\n```\n\n```\n```\npublic:\nvirtual void AddParameter( \n   String^ strParameterName,\n   String^ strNewParameterValue\n)\n```\n```\n\n#### Parameters\n\n*strParameterName*\n:   Indicates the name of the parameter. Leading and trailing white-space characters are ignored.\n\n*strNewParameterValue*\n:   Indicates the value of this parameter."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ContextDispose.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/Context/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ContextDispose",
        "content": "Destructor for deterministic finalization of Context object.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void Dispose()\n```\n```\n\n```\n```\npublic:\nvoid Dispose();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ContextGetContextParameter.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/Context/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ContextGetContextParameter",
        "content": "Get the Block of Context Parameters of this Context.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic virtual ContextParameterBlock GetContextParameter()\n```\n```\n\n```\n```\npublic:\nvirtual ContextParameterBlock^ GetContextParameter();\n```\n```\n\n#### Return Value\n\nThe Context Parameter Block when available."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ContextGetEContext.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/Context/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ContextGetEContext",
        "content": "For internal use only.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic EContext GetEContext()\n```\n```\n\n```\n```\npublic:\nEContext GetEContext();\n```\n```\n\n#### Return Value\n\nFor internal use only."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ContextGetParameter.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/Context/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ContextGetParameter",
        "content": "Gets a parameter from the Context.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic virtual void GetParameter( \n   string strParameterName,\n   ref string strParameterValue\n)\n```\n```\n\n```\n```\npublic:\nvirtual void GetParameter( \n   String^ strParameterName,\n   String^% strParameterValue\n)\n```\n```\n\n#### Parameters\n\n*strParameterName*\n:   Name of the parameter whose value is determined. Leading and trailing white-space characters are ignored.\n\n*strParameterValue*\n:   Value of the parameter you search for."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ContextGetParameterCount.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/Context/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ContextGetParameterCount",
        "content": "Gets the count of the Parameters in this context\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic virtual int GetParameterCount()\n```\n```\n\n```\n```\npublic:\nvirtual int GetParameterCount();\n```\n```\n\n#### Return Value\n\nthe count of the parameters."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ContextGetParameters.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/Context/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ContextGetParameters",
        "content": "Gets array filled with parameters names from the context.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic virtual string[] GetParameters()\n```\n```\n\n```\n```\npublic:\nvirtual array<String^>^ GetParameters();\n```\n```\n\n#### Return Value\n\narray containing all paramaters names from the context."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ContextGetStrings.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/Context/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ContextGetStrings",
        "content": "Gets the array filled with strings from the context. (Additional to the parameters)\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic virtual string[] GetStrings()\n```\n```\n\n```\n```\npublic:\nvirtual array<String^>^ GetStrings();\n```\n```\n\n#### Return Value\n\narray containing strings from the context"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ContextSetContextParameter.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/Context/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ContextSetContextParameter",
        "content": "Sets a block of context parameters (as ContextParameterBlock object).\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic virtual void SetContextParameter( \n   ContextParameterBlock pParams\n)\n```\n```\n\n```\n```\npublic:\nvirtual void SetContextParameter( \n   ContextParameterBlock^ pParams\n)\n```\n```\n\n#### Parameters\n\n*pParams*\n:   a block of parameters to set\n\nRemarks\n\nContextParameterBlock is added to the context."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ContextSetEContext.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/Context/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ContextSetEContext",
        "content": "For internal use only.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void SetEContext( \n   EContext* pEContext\n)\n```\n```\n\n```\n```\npublic:\nvoid SetEContext( \n   EContext* pEContext\n)\n```\n```\n\n#### Parameters\n\n*pEContext*\n:   For internal use only."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ContextSetStrings.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/Context/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ContextSetStrings",
        "content": "Sets the array filled with strings from the context. (Additional to the parameters)\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic virtual void SetStrings( \n   string[] stringArray\n)\n```\n```\n\n```\n```\npublic:\nvirtual void SetStrings( \n   array<String^>^ stringArray\n)\n```\n```\n\n#### Parameters\n\n*stringArray*\n:   the string array to set\n\nExceptions\n\n| Exception | Description |\n| --- | --- |\n| [System.ArgumentNullException](#) | Thrown when `stringArray` is `null`. |"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ContextParameterBlock_ctor.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ContextParameterBlock",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ContextParameterBlock_ctor",
        "content": "Default constructor.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic ContextParameterBlock()\n```\n```\n\n```\n```\npublic:\nContextParameterBlock();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ContextParameterBlock_methods.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ContextParameterBlock",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ContextParameterBlock_methods",
        "content": "For a list of all members of this type, see ContextParameterBlock members](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ContextParameterBlock_members.html).\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [Dispose](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ContextParameterBlock~Dispose().html) | Destructor for deterministic finalization of ContextParameter object. |\n| Public Method | [Get](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ContextParameterBlock~Get.html) | Get one object with this name |\n| Public Method | [GetList](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ContextParameterBlock~GetList.html) | Get the list saved in this block |\n| Public Method | [Set](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ContextParameterBlock~Set.html) | Set one object with a name |\n| Public Method | [SetList](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ContextParameterBlock~SetList.html) | Set a list for this block |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ContextParameterBlockDispose.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ContextParameterBlock/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ContextParameterBlockDispose",
        "content": "Destructor for deterministic finalization of ContextParameter object.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void Dispose()\n```\n```\n\n```\n```\npublic:\nvoid Dispose();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ContextParameterBlockGet.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ContextParameterBlock/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ContextParameterBlockGet",
        "content": "Get one object with this name\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic bool Get( \n   string strName,\n   ref object strObject\n)\n```\n```\n\n```\n```\npublic:\nbool Get( \n   String^ strName,\n   Object^% strObject\n)\n```\n```\n\n#### Parameters\n\n*strName*\n:   the name of this parameter.\n\n*strObject*\n:   the object saved in this block.\n\n#### Return Value\n\ntrue when a parameter with this name was found."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ContextParameterBlockGetList.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ContextParameterBlock/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ContextParameterBlockGetList",
        "content": "Get the list saved in this block\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic List<object> GetList()\n```\n```\n\n```\n```\npublic:\nList<Object^>^ GetList();\n```\n```\n\n#### Return Value\n\nthe list of objects."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ContextParameterBlockSet.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ContextParameterBlock/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ContextParameterBlockSet",
        "content": "Set one object with a name\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void Set( \n   string strName,\n   object strObject\n)\n```\n```\n\n```\n```\npublic:\nvoid Set( \n   String^ strName,\n   Object^ strObject\n)\n```\n```\n\n#### Parameters\n\n*strName*\n:   the name of this parameter.\n\n*strObject*\n:   the object saved in this block.\n\nRemarks\n\noverwrites the existing object when a parameter with this name already exists."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ContextParameterBlockSetList.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ContextParameterBlock/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ContextParameterBlockSetList",
        "content": "Set a list for this block\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void SetList( \n   List<object> pList\n)\n```\n```\n\n```\n```\npublic:\nvoid SetList( \n   List<Object^>^ pList\n)\n```\n```\n\n#### Parameters\n\n*pList*\n:   the list to set."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.Decider_ctor.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/Decider",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.Decider_ctor",
        "content": "Create a new Decider Object.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic Decider()\n```\n```\n\n```\n```\npublic:\nDecider();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.Decider_methods.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/Decider",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.Decider_methods",
        "content": "For a list of all members of this type, see Decider members](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Decider_members.html).\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [Decide](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Decider~Decide.html) | Overloaded. Decide shows a list select dialog. |\n| Public Method | [Dispose](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Decider~Dispose().html) | Destructor for deterministic finalization of Decider object. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.DeciderDecide.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/Decider/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.DeciderDecide",
        "content": "Decide shows a list select dialog.\n\nOverload List\n\n| Overload | Description |\n| --- | --- |\n| Decide(ListSelectDecisionContext)](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Decider~Decide(ListSelectDecisionContext).html) | Decide shows a list select dialog. |\n| [Decide(FileSelectDecisionContext)](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Decider~Decide(FileSelectDecisionContext).html) | Decide shows a file select dialog. |\n| [Decide(EnumDecisionType,String,String,EnumDecisionReturn,EnumDecisionReturn,String,Boolean,EnumDecisionIcon)](topic3.html) | decide shows the dialog. When the application id in quiet mode, the batch decision is returned. |\n| [Decide(EnumDecisionType,String,String,EnumDecisionReturn,EnumDecisionReturn)](topic4.html) | Decide shows the dialog. When the application id in quiet mode, the batch decision is returned. The icon used is an EXCLAMATION. |"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.DeciderDispose.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/Decider/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.DeciderDispose",
        "content": "Destructor for deterministic finalization of Decider object.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void Dispose()\n```\n```\n\n```\n```\npublic:\nvoid Dispose();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.DeciderDecideFileSelectDecisionContext.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/Decider/Methods/Decide Method",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.DeciderDecideFileSelectDecisionContext",
        "content": "Decide shows a file select dialog.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic EnumDecisionReturn Decide( \n   FileSelectDecisionContext fileselect\n)\n```\n```\n\n```\n```\npublic:\nEnumDecisionReturn Decide( \n   FileSelectDecisionContext^ fileselect\n)\n```\n```\n\n#### Parameters\n\n*fileselect*\n:   A fileselect context with all information\n\n#### Return Value\n\nThe return value is the pressed button or error."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.DeciderDecideListSelectDecisionContext.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/Decider/Methods/Decide Method",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.DeciderDecideListSelectDecisionContext",
        "content": "Decide shows a list select dialog.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic EnumDecisionReturn Decide( \n   ListSelectDecisionContext listSelectDecisionContext\n)\n```\n```\n\n```\n```\npublic:\nEnumDecisionReturn Decide( \n   ListSelectDecisionContext^ listSelectDecisionContext\n)\n```\n```\n\n#### Parameters\n\n*listSelectDecisionContext*\n:   A listselect context with all information\n\n#### Return Value\n\nThe return value is EnumDecisionReturn::eOK or EnumDecisionReturn::eCancel."
    },
    {
        "source": "topic3.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/Decider/Methods/Decide Method",
        "title": "topic3",
        "content": "decide shows the dialog. When the application id in quiet mode, the batch decision is returned.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic EnumDecisionReturn Decide( \n   EnumDecisionType type,\n   string strText,\n   string strTitle,\n   EnumDecisionReturn eDefaultDecision,\n   EnumDecisionReturn eBatchDecision,\n   string strDecisionId,\n   bool bShowCheckBox,\n   EnumDecisionIcon eIcon\n)\n```\n```\n\n```\n```\npublic:\nEnumDecisionReturn Decide( \n   EnumDecisionType type,\n   String^ strText,\n   String^ strTitle,\n   EnumDecisionReturn eDefaultDecision,\n   EnumDecisionReturn eBatchDecision,\n   String^ strDecisionId,\n   bool bShowCheckBox,\n   EnumDecisionIcon eIcon\n)\n```\n```\n\n#### Parameters\n\n*type*\n:   the type of the decider\n\n*strText*\n:   The text to show in the window.\n\n*strTitle*\n:   The title of the window\n\n*eDefaultDecision*\n:   A default decision, this one is preselected in the dialog.\n\n*eBatchDecision*\n:   The decision taken when no dialogs are allowed. used in quiet mode.\n\n*strDecisionId*\n:   The decision id. A unique text to identify this dialog. Needed when the checkbox should be shown.\n\n*bShowCheckBox*\n:   Show a checkbox like \"do not show this decision again\". Then the batch decision is returned the next time.\n\n*eIcon*\n:   The icon displayed on the dialog.\n\n#### Return Value\n\nThe return value includes the pressed button or error."
    },
    {
        "source": "topic4.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/Decider/Methods/Decide Method",
        "title": "topic4",
        "content": "Decide shows the dialog. When the application id in quiet mode, the batch decision is returned. The icon used is an EXCLAMATION.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic EnumDecisionReturn Decide( \n   EnumDecisionType type,\n   string strText,\n   string strTitle,\n   EnumDecisionReturn eDefaultDecision,\n   EnumDecisionReturn eBatchDecision\n)\n```\n```\n\n```\n```\npublic:\nEnumDecisionReturn Decide( \n   EnumDecisionType type,\n   String^ strText,\n   String^ strTitle,\n   EnumDecisionReturn eDefaultDecision,\n   EnumDecisionReturn eBatchDecision\n)\n```\n```\n\n#### Parameters\n\n*type*\n:   The type of the decider\n\n*strText*\n:   The text to show in the window.\n\n*strTitle*\n:   The title of the window\n\n*eDefaultDecision*\n:   A default decision, this one is preselected in the dialog.\n\n*eBatchDecision*\n:   The decision taken when no dialogs are allowed. used in quiet mode.\n\n#### Return Value\n\nThe return value includes the pressed button or error."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.EplAssert_ctor.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/EplAssert",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.EplAssert_ctor",
        "content": "Syntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic EplAssert()\n```\n```\n\n```\n```\npublic:\nEplAssert();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.EplAssert_methods.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/EplAssert",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.EplAssert_methods",
        "content": "For a list of all members of this type, see EplAssert members](Eplan.EplApi.Baseu~Eplan.EplApi.Base.EplAssert_members.html).\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [Assert](Eplan.EplApi.Baseu~Eplan.EplApi.Base.EplAssert~Assert.html) | A Delevoper Assertion. When the boolean Expression fails, the debugged application fails into the debugger. Some Text is written to the EplLog.txt |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.EplAssertAssert.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/EplAssert/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.EplAssertAssert",
        "content": "A Delevoper Assertion. When the boolean Expression fails, the debugged application fails into the debugger. Some Text is written to the EplLog.txt\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void Assert( \n   bool bExpression,\n   string strInformation\n)\n```\n```\n\n```\n```\npublic:\nvoid Assert( \n   bool bExpression,\n   String^ strInformation\n)\n```\n```\n\n#### Parameters\n\n*bExpression*\n\n\n*strInformation*\n:   The message to be traced to epllog.txt"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.EplTrace_ctor.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/EplTrace",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.EplTrace_ctor",
        "content": "Syntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic EplTrace()\n```\n```\n\n```\n```\npublic:\nEplTrace();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.EplTrace_methods.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/EplTrace",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.EplTrace_methods",
        "content": "For a list of all members of this type, see EplTrace members](Eplan.EplApi.Baseu~Eplan.EplApi.Base.EplTrace_members.html).\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [Trace](Eplan.EplApi.Baseu~Eplan.EplApi.Base.EplTrace~Trace.html) | Overloaded. Writes the text to EplLog.txt when Trace is on. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.EplTraceTrace.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/EplTrace/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.EplTraceTrace",
        "content": "Writes the text to EplLog.txt when Trace is on.\n\nOverload List\n\n| Overload | Description |\n| --- | --- |\n| Trace(Assembly,String)](Eplan.EplApi.Baseu~Eplan.EplApi.Base.EplTrace~Trace(Assembly,String).html) | Writes the text to EplLog.txt when Trace is on. |\n| [Trace(String)](Eplan.EplApi.Baseu~Eplan.EplApi.Base.EplTrace~Trace(String).html) | Writes the text to EplLog.txt when Trace is on. The Calling Assembly is asked for the trace switch state on or off. |"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.EplTraceTraceAssemblyString.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/EplTrace/Methods/Trace Method",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.EplTraceTraceAssemblyString",
        "content": "Writes the text to EplLog.txt when Trace is on.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic virtual void Trace( \n   Assembly assembly,\n   string strMessage\n)\n```\n```\n\n```\n```\npublic:\nvirtual void Trace( \n   Assembly^ assembly,\n   String^ strMessage\n)\n```\n```\n\n#### Parameters\n\n*assembly*\n:   The assembly calling this function. This when Trrace is on for this assembly, the output is written.\n\n*strMessage*\n:   The message to be traced to epllog.txt"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.EplTraceTraceString.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/EplTrace/Methods/Trace Method",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.EplTraceTraceString",
        "content": "Writes the text to EplLog.txt when Trace is on. The Calling Assembly is asked for the trace switch state on or off.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic virtual void Trace( \n   string strMessage\n)\n```\n```\n\n```\n```\npublic:\nvirtual void Trace( \n   String^ strMessage\n)\n```\n```\n\n#### Parameters\n\n*strMessage*\n:   The message to be traced to epllog.txt"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.FileSelectDecisionContext_ctor.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/FileSelectDecisionContext",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.FileSelectDecisionContext_ctor",
        "content": "Create a new FileSelectDecisionContext Object.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic FileSelectDecisionContext()\n```\n```\n\n```\n```\npublic:\nFileSelectDecisionContext();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.FileSelectDecisionContext_methods.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/FileSelectDecisionContext",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.FileSelectDecisionContext_methods",
        "content": "For a list of all members of this type, see FileSelectDecisionContext members](Eplan.EplApi.Baseu~Eplan.EplApi.Base.FileSelectDecisionContext_members.html).\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [AddFilter](Eplan.EplApi.Baseu~Eplan.EplApi.Base.FileSelectDecisionContext~AddFilter.html) | Add a filter which files are shown. When the user selects one filter in the decider dialog, only files of this type are displayed. |\n| Public Method | [Dispose](Eplan.EplApi.Baseu~Eplan.EplApi.Base.FileSelectDecisionContext~Dispose().html) | Destructor for deterministic finalization of FileSelectDecisionContext object. |\n| Public Method | [GetFiles](Eplan.EplApi.Baseu~Eplan.EplApi.Base.FileSelectDecisionContext~GetFiles.html) | Get all the files the user has selected in the decider dialog. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.FileSelectDecisionContext_properties.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/FileSelectDecisionContext",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.FileSelectDecisionContext_properties",
        "content": "For a list of all members of this type, see FileSelectDecisionContext members](Eplan.EplApi.Baseu~Eplan.EplApi.Base.FileSelectDecisionContext_members.html).\n\nPublic Properties\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Property | [AllowMultiSelect](Eplan.EplApi.Baseu~Eplan.EplApi.Base.FileSelectDecisionContext~AllowMultiSelect.html) | Set or get the flag for multi selection. |\n| Public Property | [CustomDefaultPath](Eplan.EplApi.Baseu~Eplan.EplApi.Base.FileSelectDecisionContext~CustomDefaultPath.html) | Set or get the CustomDefaultPath. This is the path the File Select Dialog opens first. The second time the path is used the user has selected the last time. Then the context menu \"Set to standard\" will select this path again. |\n| Public Property | [DefaultExtension](Eplan.EplApi.Baseu~Eplan.EplApi.Base.FileSelectDecisionContext~DefaultExtension.html) | The default extension of the files to select. |\n| Public Property | [DefaultFilename](Eplan.EplApi.Baseu~Eplan.EplApi.Base.FileSelectDecisionContext~DefaultFilename.html) | The default name of a file. |\n| Public Property | [OpenFileFlag](Eplan.EplApi.Baseu~Eplan.EplApi.Base.FileSelectDecisionContext~OpenFileFlag.html) | Set or get the openfileflag. Set this flag when you want to open a file Do not set it when you want to save a file. |\n| Public Property | [Title](Eplan.EplApi.Baseu~Eplan.EplApi.Base.FileSelectDecisionContext~Title.html) | The title for the decider. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.FileSelectDecisionContext_ctorStringEnumDecisionReturn.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/FileSelectDecisionContext/FileSelectDecisionContext Constructor",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.FileSelectDecisionContext_ctorStringEnumDecisionReturn",
        "content": "Create a new FileSelectDecisionContext Object.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic FileSelectDecisionContext( \n   string strDecisionId,\n   EnumDecisionReturn eDefaultDecision\n)\n```\n```\n\n```\n```\npublic:\nFileSelectDecisionContext( \n   String^ strDecisionId,\n   EnumDecisionReturn eDefaultDecision\n)\n```\n```\n\n#### Parameters\n\n*strDecisionId*\n:   The identifier for this fileselect. Use a unique one and the fileselect dialog remembers the user input and dialog position for the next time.\n\n*eDefaultDecision*\n:   A default decision, this one is preselected in the dialog."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.FileSelectDecisionContextAddFilter.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/FileSelectDecisionContext/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.FileSelectDecisionContextAddFilter",
        "content": "Add a filter which files are shown. When the user selects one filter in the decider dialog, only files of this type are displayed.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI\n\n```\n```\npublic void AddFilter( \n   string strDescription,\n   string strExtension\n)\n```\n```\n\n```\n```\npublic:\nvoid AddFilter( \n   String^ strDescription,\n   String^ strExtension\n)\n```\n```\n\n#### Parameters\n\n*strDescription*\n:   The description visible to the user, p.e. \"Text files \\*.txt\"\n\n*strExtension*\n:   The filter, p.e. \"\\*.txt\"\n\nRemarks\n\nWhen the strDescription is empty, the system fills it automatically. This is the description used in EPLAN when the same filter is registered there or a automatically formed one from the extensions. The filter also influence the path the file select dialog is opened first. Some of the registered extensions have a standard path. When the standard path is the same for all extensions, this standard path is used. It is possible to set a custom StandardPath with the function CustomDefaultPath."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.FileSelectDecisionContextDispose.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/FileSelectDecisionContext/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.FileSelectDecisionContextDispose",
        "content": "Destructor for deterministic finalization of FileSelectDecisionContext object.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void Dispose()\n```\n```\n\n```\n```\npublic:\nvoid Dispose();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.FileSelectDecisionContextGetFiles.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/FileSelectDecisionContext/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.FileSelectDecisionContextGetFiles",
        "content": "Get all the files the user has selected in the decider dialog.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic string[] GetFiles()\n```\n```\n\n```\n```\npublic:\narray<String^>^ GetFiles();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.FileSelectDecisionContextAllowMultiSelect.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/FileSelectDecisionContext/Properties",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.FileSelectDecisionContextAllowMultiSelect",
        "content": "Set or get the flag for multi selection.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic bool AllowMultiSelect {get; set;}\n```\n```\n\n```\n```\npublic:\nproperty bool AllowMultiSelect {\n   bool get();\n   void set (    bool value);\n}\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.FileSelectDecisionContextCustomDefaultPath.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/FileSelectDecisionContext/Properties",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.FileSelectDecisionContextCustomDefaultPath",
        "content": "Set or get the CustomDefaultPath. This is the path the File Select Dialog opens first. The second time the path is used the user has selected the last time. Then the context menu \"Set to standard\" will select this path again.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic string CustomDefaultPath {get; set;}\n```\n```\n\n```\n```\npublic:\nproperty String^ CustomDefaultPath {\n   String^ get();\n   void set (    String^ value);\n}\n```\n```\n\nRemarks\n\nWhen the strCustomDefaultPath is empty, the system fills it automatically again."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.FileSelectDecisionContextDefaultExtension.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/FileSelectDecisionContext/Properties",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.FileSelectDecisionContextDefaultExtension",
        "content": "The default extension of the files to select.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic string DefaultExtension {get; set;}\n```\n```\n\n```\n```\npublic:\nproperty String^ DefaultExtension {\n   String^ get();\n   void set (    String^ value);\n}\n```\n```\n\nRemarks\n\nDefaultExtension is added to the file when the user writes the filename and does not specify the extension."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.FileSelectDecisionContextDefaultFilename.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/FileSelectDecisionContext/Properties",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.FileSelectDecisionContextDefaultFilename",
        "content": "The default name of a file.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic string DefaultFilename {get; set;}\n```\n```\n\n```\n```\npublic:\nproperty String^ DefaultFilename {\n   String^ get();\n   void set (    String^ value);\n}\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.FileSelectDecisionContextOpenFileFlag.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/FileSelectDecisionContext/Properties",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.FileSelectDecisionContextOpenFileFlag",
        "content": "Set or get the openfileflag. Set this flag when you want to open a file Do not set it when you want to save a file.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic bool OpenFileFlag {get; set;}\n```\n```\n\n```\n```\npublic:\nproperty bool OpenFileFlag {\n   bool get();\n   void set (    bool value);\n}\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.FileSelectDecisionContextTitle.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/FileSelectDecisionContext/Properties",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.FileSelectDecisionContextTitle",
        "content": "The title for the decider.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic string Title {get; set;}\n```\n```\n\n```\n```\npublic:\nproperty String^ Title {\n   String^ get();\n   void set (    String^ value);\n}\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ISOCode_ctor.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ISOCode",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ISOCode_ctor",
        "content": "Default constructor\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic ISOCode()\n```\n```\n\n```\n```\npublic:\nISOCode();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ISOCode_methods.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ISOCode",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ISOCode_methods",
        "content": "For a list of all members of this type, see ISOCode members](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ISOCode_members.html).\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [Dispose](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ISOCode~Dispose().html) | Destructor for deterministic finalization of ISOCode object. |\n| Public Method | [GetAllLanguages](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ISOCode~GetAllLanguages.html) | Determines all set languages. |\n| Public Method | [GetAllLongNames](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ISOCode~GetAllLongNames.html) | Returns a list of full names of all the languages. |\n| Public Method | [GetLongName | Overloaded. \\Returns the full name of the language |\n| Public Method | GetNumber](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ISOCode~GetNumber.html) | Overloaded. Convert language code to language number |\n| Public Method | [GetString](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ISOCode~GetString.html) | Overloaded. Returns the language code as a string. |\n| Public Method | [IsValid](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ISOCode~IsValid.html) | Determines whether a valid language has been set. |\n| Public Method | [SetNumber](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ISOCode~SetNumber.html) | Sets the language. |\n| Public Method | [SetString](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ISOCode~SetString.html) | Sets the language. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ISOCode_ctorLanguage.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ISOCode/ISOCode Constructor",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ISOCode_ctorLanguage",
        "content": "Constructor\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic ISOCode( \n   ISOCode.Language lang\n)\n```\n```\n\n```\n```\npublic:\nISOCode( \n   ISOCode.Language lang\n)\n```\n```\n\n#### Parameters\n\n*lang*\n:   Language specification"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ISOCode_ctorString.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ISOCode/ISOCode Constructor",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ISOCode_ctorString",
        "content": "Constructor\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic ISOCode( \n   string lang\n)\n```\n```\n\n```\n```\npublic:\nISOCode( \n   String^ lang\n)\n```\n```\n\n#### Parameters\n\n*lang*\n:   Language specification"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ISOCodeDispose.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ISOCode/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ISOCodeDispose",
        "content": "Destructor for deterministic finalization of ISOCode object.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void Dispose()\n```\n```\n\n```\n```\npublic:\nvoid Dispose();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ISOCodeGetAllLanguages.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ISOCode/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ISOCodeGetAllLanguages",
        "content": "Determines all set languages.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic int GetAllLanguages( \n   ref LanguageList lstLanguages\n)\n```\n```\n\n```\n```\npublic:\nint GetAllLanguages( \n   LanguageList^% lstLanguages\n)\n```\n```\n\n#### Parameters\n\n*lstLanguages*\n:   List of set languages is returned.\n\n#### Return Value\n\nNumber of set languages."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ISOCodeGetAllLongNames.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ISOCode/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ISOCodeGetAllLongNames",
        "content": "Returns a list of full names of all the languages.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic int GetAllLongNames( \n   ref StringCollection collLanguages\n)\n```\n```\n\n```\n```\npublic:\nint GetAllLongNames( \n   StringCollection^% collLanguages\n)\n```\n```\n\n#### Parameters\n\n*collLanguages*\n:   List of language names\n\n#### Return Value\n\nNumber of full language names (number of list entries)"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ISOCodeGetLongName.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ISOCode/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ISOCodeGetLongName",
        "content": "\\Returns full language name of the language code.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI\n\n```\n```\npublic string GetLongName()\n```\n```\n\n```\n```\npublic:\nString^ GetLongName();\n```\n```\n\n#### Return Value\n\nLanguage code and full language name, for example: \"en\\_US (English US)\""
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ISOCodeGetNumber.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ISOCode/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ISOCodeGetNumber",
        "content": "Determines the language.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic ISOCode.Language GetNumber()\n```\n```\n\n```\n```\npublic:\nISOCode.Language GetNumber();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ISOCodeGetString.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ISOCode/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ISOCodeGetString",
        "content": "Determines string of language setting.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic string GetString()\n```\n```\n\n```\n```\npublic:\nString^ GetString();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ISOCodeIsValid.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ISOCode/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ISOCodeIsValid",
        "content": "Determines whether a valid language has been set.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic bool IsValid()\n```\n```\n\n```\n```\npublic:\nbool IsValid();\n```\n```\n\n#### Return Value\n\nTrue: Valid language is set.\n\nFalse: No valid language set."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ISOCodeSetNumber.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ISOCode/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ISOCodeSetNumber",
        "content": "Sets the language.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void SetNumber( \n   ISOCode.Language lang\n)\n```\n```\n\n```\n```\npublic:\nvoid SetNumber( \n   ISOCode.Language lang\n)\n```\n```\n\n#### Parameters\n\n*lang*\n:   Language setting"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ISOCodeSetString.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ISOCode/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ISOCodeSetString",
        "content": "Sets the language.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI\n\n```\n```\npublic void SetString( \n   string lang\n)\n```\n```\n\n```\n```\npublic:\nvoid SetString( \n   String^ lang\n)\n```\n```\n\n#### Parameters\n\n*lang*\n:   Language setting\n\nRemarks\n\nWhen a name of language which is passed as parameter will not be recognized then [ISOCode.Language.L\\_\\_\\_](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ISOCode+Language.html) is used."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ISOCodeGetLongNameLanguage.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ISOCode/Methods/GetLongName Method",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ISOCodeGetLongNameLanguage",
        "content": "\\Returns the full name of the language\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI\n\n```\n```\npublic string GetLongName( \n   ISOCode.Language lang\n)\n```\n```\n\n```\n```\npublic:\nString^ GetLongName( \n   ISOCode.Language lang\n)\n```\n```\n\n#### Parameters\n\n*lang*\n:   Language specification\n\n#### Return Value\n\nLanguage code and full language name, for example: \"en\\_US (English US)\""
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ISOCodeGetLongNameString.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ISOCode/Methods/GetLongName Method",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ISOCodeGetLongNameString",
        "content": "\\Returns the full name of the language\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI\n\n```\n```\npublic string GetLongName( \n   string strLang\n)\n```\n```\n\n```\n```\npublic:\nString^ GetLongName( \n   String^ strLang\n)\n```\n```\n\n#### Parameters\n\n*strLang*\n:   Language code (two letters), for \\example\\: \"en\\_US\"\n\n#### Return Value\n\nLanguage code and full language name, for example: \"en\\_US (English US)\""
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ISOCodeGetNumberString.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ISOCode/Methods/GetNumber Method",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ISOCodeGetNumberString",
        "content": "Convert language code to language number\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic ISOCode.Language GetNumber( \n   string strLang\n)\n```\n```\n\n```\n```\npublic:\nISOCode.Language GetNumber( \n   String^ strLang\n)\n```\n```\n\n#### Parameters\n\n*strLang*\n:   Language settings as a string.\n\n#### Return Value\n\nLanguage setting as a number (class language)"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ISOCodeGetStringLanguage.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ISOCode/Methods/GetString Method",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ISOCodeGetStringLanguage",
        "content": "Returns the language code as a string.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic string GetString( \n   ISOCode.Language lang\n)\n```\n```\n\n```\n```\npublic:\nString^ GetString( \n   ISOCode.Language lang\n)\n```\n```\n\n#### Parameters\n\n*lang*\n:   Language specification\n\n#### Return Value\n\nLanguage code as a string."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.LanguageList_ctor.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/LanguageList",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.LanguageList_ctor",
        "content": "Syntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic LanguageList()\n```\n```\n\n```\n```\npublic:\nLanguageList();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.LanguageList_properties.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/LanguageList",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.LanguageList_properties",
        "content": "For a list of all members of this type, see LanguageList members](Eplan.EplApi.Baseu~Eplan.EplApi.Base.LanguageList_members.html).\n\nPublic Properties\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Property | [Capacity](#) | (Inherited from [System.Collections.ArrayList](#)) |\n| Public Property | [Count](#) | (Inherited from [System.Collections.ArrayList](#)) |\n| Public Property | [IsFixedSize](#) | (Inherited from [System.Collections.ArrayList](#)) |\n| Public Property | [IsReadOnly](#) | (Inherited from [System.Collections.ArrayList](#)) |\n| Public Property | [IsSynchronized](#) | (Inherited from [System.Collections.ArrayList](#)) |\n| Public Property | [Item](#) | (Inherited from [System.Collections.ArrayList](#)) |\n| Public Property | [Language](Eplan.EplApi.Baseu~Eplan.EplApi.Base.LanguageList~Language.html) | Determines the ISO code of the given index. |\n| Public Property | [SyncRoot](#) | (Inherited from [System.Collections.ArrayList](#)) |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.LanguageListLanguage.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/LanguageList/Properties",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.LanguageListLanguage",
        "content": "Determines the ISO code of the given index.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic virtual ISOCode.Language Language( \n   int index\n) {get;}\n```\n```\n\n```\n```\npublic:\nvirtual property ISOCode.Language Language {\n   ISOCode.Language get(int index);\n}\n```\n```\n\n#### Parameters\n\n*index*\n:   Index."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.Languages_ctor.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/Languages",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.Languages_ctor",
        "content": "Creates a new Language object.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic Languages()\n```\n```\n\n```\n```\npublic:\nLanguages();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.Languages_methods.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/Languages",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.Languages_methods",
        "content": "For a list of all members of this type, see Languages members](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Languages_members.html).\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [Dispose](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Languages~Dispose().html) | Destructor for deterministic finalization of Languages object. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.Languages_properties.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/Languages",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.Languages_properties",
        "content": "For a list of all members of this type, see Languages members](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Languages_members.html).\n\nPublic Properties\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Property | [AlternativeLanguage](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Languages~AlternativeLanguage.html) | Gets alternative language. |\n| Public Property | [GuiLanguage](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Languages~GuiLanguage.html) | Gets Gui language. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.LanguagesDispose.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/Languages/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.LanguagesDispose",
        "content": "Destructor for deterministic finalization of Languages object.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void Dispose()\n```\n```\n\n```\n```\npublic:\nvoid Dispose();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.LanguagesAlternativeLanguage.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/Languages/Properties",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.LanguagesAlternativeLanguage",
        "content": "Gets alternative language.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic ISOCode AlternativeLanguage {get;}\n```\n```\n\n```\n```\npublic:\nproperty ISOCode^ AlternativeLanguage {\n   ISOCode^ get();\n}\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.LanguagesGuiLanguage.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/Languages/Properties",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.LanguagesGuiLanguage",
        "content": "Gets Gui language.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic ISOCode GuiLanguage {get;}\n```\n```\n\n```\n```\npublic:\nproperty ISOCode^ GuiLanguage {\n   ISOCode^ get();\n}\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ListSelectDecisionContext_ctor.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ListSelectDecisionContext",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ListSelectDecisionContext_ctor",
        "content": "Overload List\n\n| Overload | Description |\n| --- | --- |\n| ListSelectDecisionContext Constructor(StringCollection,String,String)](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ListSelectDecisionContext~_ctor(StringCollection,String,String).html) | Constructor |\n| [ListSelectDecisionContext Constructor(StringCollection,String,String,String,EnumDecisionReturn,EnumDecisionReturn)](topic5.html) | Constructor |"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ListSelectDecisionContext_methods.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ListSelectDecisionContext",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ListSelectDecisionContext_methods",
        "content": "For a list of all members of this type, see ListSelectDecisionContext members](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ListSelectDecisionContext_members.html).\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [Dispose](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ListSelectDecisionContext~Dispose().html) | Destructor for deterministic finalization of ListSelectDecisionContext object. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ListSelectDecisionContext_properties.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ListSelectDecisionContext",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ListSelectDecisionContext_properties",
        "content": "For a list of all members of this type, see ListSelectDecisionContext members](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ListSelectDecisionContext_members.html).\n\nPublic Properties\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Property | [AllowMultiSelect](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ListSelectDecisionContext~AllowMultiSelect.html) | Set or get the flag for multi selection. |\n| Public Property | [Entries](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ListSelectDecisionContext~Entries.html) | Gets all entries |\n| Public Property | [SelectedEntries](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ListSelectDecisionContext~SelectedEntries.html) | Gets all selected entries (Use this property if multi selection is enabled) |\n| Public Property | [SelectedEntry](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ListSelectDecisionContext~SelectedEntry.html) | Gets the selected entries |\n| Public Property | [SelectedIndex](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ListSelectDecisionContext~SelectedIndex.html) | Gets the selected index from Entries |\n| Public Property | [Title](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ListSelectDecisionContext~Title.html) | The title for the decider. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ListSelectDecisionContext_ctorStringCollectionStringString.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ListSelectDecisionContext/ListSelectDecisionContext Constructor",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ListSelectDecisionContext_ctorStringCollectionStringString",
        "content": "Constructor\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic ListSelectDecisionContext( \n   StringCollection entries,\n   string strDefault,\n   string strDlgTitle\n)\n```\n```\n\n```\n```\npublic:\nListSelectDecisionContext( \n   StringCollection^ entries,\n   String^ strDefault,\n   String^ strDlgTitle\n)\n```\n```\n\n#### Parameters\n\n*entries*\n\n\n*strDefault*\n\n\n*strDlgTitle*"
    },
    {
        "source": "topic5.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ListSelectDecisionContext/ListSelectDecisionContext Constructor",
        "title": "topic5",
        "content": "Constructor\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic ListSelectDecisionContext( \n   StringCollection entries,\n   string strDefault,\n   string strDlgTitle,\n   string strDecisionId,\n   EnumDecisionReturn eDefaultDecision,\n   EnumDecisionReturn eBatchDecision\n)\n```\n```\n\n```\n```\npublic:\nListSelectDecisionContext( \n   StringCollection^ entries,\n   String^ strDefault,\n   String^ strDlgTitle,\n   String^ strDecisionId,\n   EnumDecisionReturn eDefaultDecision,\n   EnumDecisionReturn eBatchDecision\n)\n```\n```\n\n#### Parameters\n\n*entries*\n\n\n*strDefault*\n\n\n*strDlgTitle*\n\n\n*strDecisionId*\n\n\n*eDefaultDecision*\n\n\n*eBatchDecision*"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ListSelectDecisionContextDispose.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ListSelectDecisionContext/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ListSelectDecisionContextDispose",
        "content": "Destructor for deterministic finalization of ListSelectDecisionContext object.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void Dispose()\n```\n```\n\n```\n```\npublic:\nvoid Dispose();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ListSelectDecisionContextAllowMultiSelect.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ListSelectDecisionContext/Properties",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ListSelectDecisionContextAllowMultiSelect",
        "content": "Set or get the flag for multi selection.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic bool AllowMultiSelect {get; set;}\n```\n```\n\n```\n```\npublic:\nproperty bool AllowMultiSelect {\n   bool get();\n   void set (    bool value);\n}\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ListSelectDecisionContextEntries.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ListSelectDecisionContext/Properties",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ListSelectDecisionContextEntries",
        "content": "Gets all entries\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic StringCollection Entries {get;}\n```\n```\n\n```\n```\npublic:\nproperty StringCollection^ Entries {\n   StringCollection^ get();\n}\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ListSelectDecisionContextSelectedEntries.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ListSelectDecisionContext/Properties",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ListSelectDecisionContextSelectedEntries",
        "content": "Gets all selected entries (Use this property if multi selection is enabled)\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic StringCollection SelectedEntries {get;}\n```\n```\n\n```\n```\npublic:\nproperty StringCollection^ SelectedEntries {\n   StringCollection^ get();\n}\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ListSelectDecisionContextSelectedEntry.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ListSelectDecisionContext/Properties",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ListSelectDecisionContextSelectedEntry",
        "content": "Gets the selected entries\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic string SelectedEntry {get;}\n```\n```\n\n```\n```\npublic:\nproperty String^ SelectedEntry {\n   String^ get();\n}\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ListSelectDecisionContextSelectedIndex.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ListSelectDecisionContext/Properties",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ListSelectDecisionContextSelectedIndex",
        "content": "Gets the selected index from Entries\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic int SelectedIndex {get;}\n```\n```\n\n```\n```\npublic:\nproperty int SelectedIndex {\n   int get();\n}\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ListSelectDecisionContextTitle.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ListSelectDecisionContext/Properties",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ListSelectDecisionContextTitle",
        "content": "The title for the decider.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic string Title {get;}\n```\n```\n\n```\n```\npublic:\nproperty String^ Title {\n   String^ get();\n}\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.LockingException_ctor.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/LockingException",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.LockingException_ctor",
        "content": "Default constructor\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic LockingException()\n```\n```\n\n```\n```\npublic:\nLockingException();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.LockingException_methods.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/LockingException",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.LockingException_methods",
        "content": "For a list of all members of this type, see LockingException members](Eplan.EplApi.Baseu~Eplan.EplApi.Base.LockingException_members.html).\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [Dispose](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException~Dispose().html) | Destructor for deterministic finalization of BaseException object. (Inherited from [Eplan.EplApi.Base.BaseException](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException.html)) |\n| Public Method | [FixMessage](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException~FixMessage.html) | Method enters a message in the system-wide message tree. (Inherited from [Eplan.EplApi.Base.BaseException](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException.html)) |\n| Public Method | [GetAllFailed2LockAsString](Eplan.EplApi.Baseu~Eplan.EplApi.Base.LockingException~GetAllFailed2LockAsString.html) | returns all object ids of the objects which were not locked. In case this exception was produced while accessing unlocked object in write mode, only one object will be returned (the one which was accessed first). |\n| Public Method | [GetBaseException](#) | (Inherited from [System.Exception](#)) |\n| Public Method | [GetBookmarkID](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException~GetBookmarkID.html) | Sets a label in the system error message management for getting a section of the 'message tree' (Inherited from [Eplan.EplApi.Base.BaseException](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException.html)) |\n| Public Method | [GetFirstFailed2LockAsString](Eplan.EplApi.Baseu~Eplan.EplApi.Base.LockingException~GetFirstFailed2LockAsString.html) | returns the object id of the first object which was not locked. . |\n| Public Method | [GetMessageIndex](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException~GetMessageIndex.html) | returns the identifying S- number of a system message (Inherited from [Eplan.EplApi.Base.BaseException](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException.html)) |\n| Public Method | [GetMessageText](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException~GetMessageText.html) | Returns the text of the system message without the index (Inherited from [Eplan.EplApi.Base.BaseException](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException.html)) |\n| Public Method | [GetObjectData](#) | (Inherited from [System.Exception](#)) |\n| Public Method | [GetType](#) | (Inherited from [System.Exception](#)) |\n| Public Method | [ToString](#) | (Inherited from [System.Exception](#)) |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.LockingException_ctorStringMessageLevel.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/LockingException/LockingException Constructor",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.LockingException_ctorStringMessageLevel",
        "content": "Constructor\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic LockingException( \n   string strErrorText,\n   MessageLevel eErrorLevel\n)\n```\n```\n\n```\n```\npublic:\nLockingException( \n   String^ strErrorText,\n   MessageLevel eErrorLevel\n)\n```\n```\n\n#### Parameters\n\n*strErrorText*\n:   Note on the exception that occurred.\n\n*eErrorLevel*\n:   Severity of the exception that occurred."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.LockingExceptionGetAllFailed2LockAsString.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/LockingException/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.LockingExceptionGetAllFailed2LockAsString",
        "content": "returns all object ids of the objects which were not locked. In case this exception was produced while accessing unlocked object in write mode, only one object will be returned (the one which was accessed first).\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic virtual string[] GetAllFailed2LockAsString()\n```\n```\n\n```\n```\npublic:\nvirtual array<String^>^ GetAllFailed2LockAsString();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.LockingExceptionGetFirstFailed2LockAsString.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/LockingException/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.LockingExceptionGetFirstFailed2LockAsString",
        "content": "returns the object id of the first object which was not locked. .\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic virtual string GetFirstFailed2LockAsString()\n```\n```\n\n```\n```\npublic:\nvirtual String^ GetFirstFailed2LockAsString();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.MultiLangString_ctor.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/MultiLangString",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.MultiLangString_ctor",
        "content": "Default constructor\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic MultiLangString()\n```\n```\n\n```\n```\npublic:\nMultiLangString();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.MultiLangString_methods.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/MultiLangString",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.MultiLangString_methods",
        "content": "For a list of all members of this type, see MultiLangString members](Eplan.EplApi.Baseu~Eplan.EplApi.Base.MultiLangString_members.html).\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [AddString](Eplan.EplApi.Baseu~Eplan.EplApi.Base.MultiLangString~AddString.html) | Adds a string in the requested language. |\n| Public Method | [Clear](Eplan.EplApi.Baseu~Eplan.EplApi.Base.MultiLangString~Clear.html) | Removes the contents. |\n| Public Method | [ContainsData](Eplan.EplApi.Baseu~Eplan.EplApi.Base.MultiLangString~ContainsData.html) | Returns whether strings are saved in the MultiLanguageString. |\n| Public Method | [DeleteAllStringsExceptFor](Eplan.EplApi.Baseu~Eplan.EplApi.Base.MultiLangString~DeleteAllStringsExceptFor.html) | Removes unused translations. |\n| Public Method | [DeleteString](Eplan.EplApi.Baseu~Eplan.EplApi.Base.MultiLangString~DeleteString.html) | Deletes the language setting. |\n| Public Method | [Dispose](Eplan.EplApi.Baseu~Eplan.EplApi.Base.MultiLangString~Dispose().html) | Destructor for deterministic finalization of MultiLangString object. |\n| Public Method | [GetAsString](Eplan.EplApi.Baseu~Eplan.EplApi.Base.MultiLangString~GetAsString.html) | Converts an MultiLangString to a string. The languages are appended to one another, all having the same format. |\n| Public Method | [GetLanguageList](Eplan.EplApi.Baseu~Eplan.EplApi.Base.MultiLangString~GetLanguageList.html) | Returns the list of the languages currently saved in this [MultiLangString](Eplan.EplApi.Baseu~Eplan.EplApi.Base.MultiLangString.html). |\n| Public Method | [GetString](Eplan.EplApi.Baseu~Eplan.EplApi.Base.MultiLangString~GetString.html) | Returns the string in the requested language |\n| Public Method | [GetStringToDisplay](Eplan.EplApi.Baseu~Eplan.EplApi.Base.MultiLangString~GetStringToDisplay.html) | Returns the string that is to be displayed in accordance with the passed language. This may be the string saved for this language or, if there is no such string, a language-independent string. |\n| Public Method | [IsEqual](Eplan.EplApi.Baseu~Eplan.EplApi.Base.MultiLangString~IsEqual.html) | Compares every string in every language. If a string is different in one language, then == returns FALSE. If an language string exists in one of the MultiLangStrings but not in the others, this function returns FALSE even if the language string is empty. |\n| Public Method | [SetAsString | Sets the contents of a MultiLangString with a string passed as argument using language marker if necessary. If argument is in MultiLangString form, it will be parsed and saved under given languages. Otherwise '??\\_??@' prefix is added which means that the object is visible the same in every language. |\n| Public Method | ToString](Eplan.EplApi.Baseu~Eplan.EplApi.Base.MultiLangString~ToString.html) | Returns a string that represents the current object. |\n| Public Method | [Translatable](Eplan.EplApi.Baseu~Eplan.EplApi.Base.MultiLangString~Translatable.html) | Indicates whether the MultiLanguageString can be translated. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.MultiLangString_properties.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/MultiLangString",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.MultiLangString_properties",
        "content": "For a list of all members of this type, see MultiLangString members](Eplan.EplApi.Baseu~Eplan.EplApi.Base.MultiLangString_members.html).\n\nPublic Properties\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Property | [InternalString](Eplan.EplApi.Baseu~Eplan.EplApi.Base.MultiLangString~InternalString.html) | Sets internal string representation with format validation. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.MultiLangStringAddString.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/MultiLangString/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.MultiLangStringAddString",
        "content": "Adds a string in the requested language.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void AddString( \n   ISOCode.Language lang,\n   string val\n)\n```\n```\n\n```\n```\npublic:\nvoid AddString( \n   ISOCode.Language lang,\n   String^ val\n)\n```\n```\n\n#### Parameters\n\n*lang*\n:   Language name as ISOCde.Language.\n\n*val*\n:   String to be added for the requested language 'lang'"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.MultiLangStringClear.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/MultiLangString/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.MultiLangStringClear",
        "content": "Removes the contents.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void Clear()\n```\n```\n\n```\n```\npublic:\nvoid Clear();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.MultiLangStringContainsData.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/MultiLangString/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.MultiLangStringContainsData",
        "content": "Returns whether strings are saved in the MultiLanguageString.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic bool ContainsData()\n```\n```\n\n```\n```\npublic:\nbool ContainsData();\n```\n```\n\n#### Return Value\n\nTrue: There are saved strings.\n\nFalse: No strings saved."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.MultiLangStringDeleteAllStringsExceptFor.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/MultiLangString/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.MultiLangStringDeleteAllStringsExceptFor",
        "content": "Removes unused translations.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void DeleteAllStringsExceptFor( \n   ref LanguageList goodLanguages\n)\n```\n```\n\n```\n```\npublic:\nvoid DeleteAllStringsExceptFor( \n   LanguageList^% goodLanguages\n)\n```\n```\n\n#### Parameters\n\n*goodLanguages*\n:   Languages that are to be kept in the string."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.MultiLangStringDeleteString.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/MultiLangString/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.MultiLangStringDeleteString",
        "content": "Deletes the language setting.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void DeleteString( \n   ISOCode.Language badLanguage\n)\n```\n```\n\n```\n```\npublic:\nvoid DeleteString( \n   ISOCode.Language badLanguage\n)\n```\n```\n\n#### Parameters\n\n*badLanguage*\n:   Language entry to be deleted."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.MultiLangStringDispose.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/MultiLangString/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.MultiLangStringDispose",
        "content": "Destructor for deterministic finalization of MultiLangString object.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void Dispose()\n```\n```\n\n```\n```\npublic:\nvoid Dispose();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.MultiLangStringGetAsString.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/MultiLangString/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.MultiLangStringGetAsString",
        "content": "Converts an MultiLangString to a string. The languages are appended to one another, all having the same format.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI\n\n```\n```\npublic string GetAsString()\n```\n```\n\n```\n```\npublic:\nString^ GetAsString();\n```\n```\n\n#### Return Value\n\nThe contents of the multi-language string as a simple string (e.g. 'de\\_DE@Winkelstahl;en\\_US@Angular steel;')"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.MultiLangStringGetLanguageList.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/MultiLangString/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.MultiLangStringGetLanguageList",
        "content": "Returns the list of the languages currently saved in this MultiLangString](Eplan.EplApi.Baseu~Eplan.EplApi.Base.MultiLangString.html).\n\nSyntax\n\n* [C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic int GetLanguageList( \n   ref LanguageList rLanguageList\n)\n```\n```\n\n```\n```\npublic:\nint GetLanguageList( \n   LanguageList^% rLanguageList\n)\n```\n```\n\n#### Parameters\n\n*rLanguageList*\n:   The existing language codes are entered in this list.\n\n#### Return Value\n\nNumber of all languages included in this [MultiLangString](Eplan.EplApi.Baseu~Eplan.EplApi.Base.MultiLangString.html)."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.MultiLangStringGetString.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/MultiLangString/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.MultiLangStringGetString",
        "content": "Returns the string in the requested language\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic string GetString( \n   ISOCode.Language lang\n)\n```\n```\n\n```\n```\npublic:\nString^ GetString( \n   ISOCode.Language lang\n)\n```\n```\n\n#### Parameters\n\n*lang*\n:   Language code [ISOCode.Language](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ISOCode+Language.html) for the language to be returned.\n\n#### Return Value\n\nString in the requested language."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.MultiLangStringGetStringToDisplay.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/MultiLangString/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.MultiLangStringGetStringToDisplay",
        "content": "Returns the string that is to be displayed in accordance with the passed language. This may be the string saved for this language or, if there is no such string, a language-independent string.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic string GetStringToDisplay( \n   ISOCode.Language lang\n)\n```\n```\n\n```\n```\npublic:\nString^ GetStringToDisplay( \n   ISOCode.Language lang\n)\n```\n```\n\n#### Parameters\n\n*lang*\n:   Language to be returned\n\n#### Return Value\n\nReturns the string in the requested language"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.MultiLangStringIsEqual.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/MultiLangString/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.MultiLangStringIsEqual",
        "content": "Compares every string in every language. If a string is different in one language, then == returns FALSE. If an language string exists in one of the MultiLangStrings but not in the others, this function returns FALSE even if the language string is empty.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic bool IsEqual( \n   MultiLangString otherVal\n)\n```\n```\n\n```\n```\npublic:\nbool IsEqual( \n   MultiLangString^ otherVal\n)\n```\n```\n\n#### Parameters\n\n*otherVal*\n:   MultiLangString to be compared.\n\n#### Return Value\n\nTrue: Values are identical.\n\nFalse: Values are not identical."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.MultiLangStringSetAsString.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/MultiLangString/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.MultiLangStringSetAsString",
        "content": "Sets the contents of a MultiLangString with a string passed as argument using language marker if necessary. If argument is in MultiLangString form, it will be parsed and saved under given languages. Otherwise '??\\_??@' prefix is added which means that the object is visible the same in every language.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void SetAsString( \n   string val\n)\n```\n```\n\n```\n```\npublic:\nvoid SetAsString( \n   String^ val\n)\n```\n```\n\n#### Parameters\n\n*val*\n:   String that is set."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.MultiLangStringToString.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/MultiLangString/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.MultiLangStringToString",
        "content": "Returns a string that represents the current object.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic override string ToString()\n```\n```\n\n```\n```\npublic:\nString^ ToString(); override\n```\n```\n\n#### Return Value\n\nA string that represents the current object."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.MultiLangStringTranslatable.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/MultiLangString/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.MultiLangStringTranslatable",
        "content": "Indicates whether the MultiLanguageString can be translated.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic bool Translatable()\n```\n```\n\n```\n```\npublic:\nbool Translatable();\n```\n```\n\n#### Return Value\n\nTrue: MultiLanguageString can be translated.\n\nFalse: MultiLanguageString cannot be translated."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.MultiLangStringop_Equality.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/MultiLangString/Operators",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.MultiLangStringop_Equality",
        "content": "Equality operator\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic bool operator ==( \n   MultiLangString leftVal,\n   MultiLangString rightVal\n)\n```\n```\n\n```\n```\npublic:\nbool operator ==( \n   MultiLangString^ leftVal,\n   MultiLangString^ rightVal\n)\n```\n```\n\n#### Parameters\n\n*leftVal*\n\n\n*rightVal*\n\n#### Return Value\n\nTrue: Values are identical.\n\nFalse: Values are not identical."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.MultiLangStringInternalString.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/MultiLangString/Properties",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.MultiLangStringInternalString",
        "content": "Sets internal string representation with format validation.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic string InternalString {get; set;}\n```\n```\n\n```\n```\npublic:\nproperty String^ InternalString {\n   String^ get();\n   void set (    String^ value);\n}\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ParserParameter_ctor.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ParserParameter",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ParserParameter_ctor",
        "content": "Constructor\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic ParserParameter()\n```\n```\n\n```\n```\npublic:\nParserParameter();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ParserParameter_methods.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ParserParameter",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ParserParameter_methods",
        "content": "For a list of all members of this type, see ParserParameter members](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ParserParameter_members.html).\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [CanParse](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ParserParameter~CanParse.html) | Parsing can start when the unitid is not empty |\n| Public Method | [Dispose](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ParserParameter~Dispose().html) | Destructor for deterministic finalization of ParserParameter object. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ParserParameter_properties.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ParserParameter",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ParserParameter_properties",
        "content": "For a list of all members of this type, see ParserParameter members](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ParserParameter_members.html).\n\nPublic Properties\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Property | [GridSize](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ParserParameter~GridSize.html) | The grid size in millimeters. p.e. \"4#\" means 4 times grid size |\n| Public Property | [Group](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ParserParameter~Group.html) | The UnitGroup Property. When first UnitID is set,the group is automatically defined by the unit. While setting a Group also the Unit can be changed to the first Unit in new Group if: - new Group is different than the Group of assigned Unit - there is no Unit and Group assigned When new assigned Group is the same like Unit Group, nothing will change. The unitparser can never convert units of different groups |\n| Public Property | [HideUnit](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ParserParameter~HideUnit.html) | Hide the unit of the parsed result. |\n| Public Property | [HideValue](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ParserParameter~HideValue.html) | Hide the value of the parsed result, all other texts (units and additional texts) will remain. |\n| Public Property | [OnlyFirstValue](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ParserParameter~OnlyFirstValue.html) | Display only the first Value. |\n| Public Property | [OnlyUnit](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ParserParameter~OnlyUnit.html) | Display only the Unit. |\n| Public Property | [Precision](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ParserParameter~Precision.html) | Set the precision of the result (Values used for calculation: 0 up to 8) |\n| Public Property | [SpaceBetweenUnitAndValue](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ParserParameter~SpaceBetweenUnitAndValue.html) | Add a space between Unit and the value |\n| Public Property | [SuppressFloatingZeroes](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ParserParameter~SuppressFloatingZeroes.html) | Suppress the last zeroes of a floating result. |\n| Public Property | [UnitFromParameter](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ParserParameter~UnitFromParameter.html) | Get if the unit needs extra parameter to get resolved. Use the project dependend parameter class if this is true. |\n| Public Property | [UnitID](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ParserParameter~UnitID.html) | The UnitId Property. Set or get the unit of the parameters. |\n| Public Property | [WithoutLimiters | The unit is NOT separated by one of this chars: blank (){}[].,:;!?/\\\\ |\n\nTop](#top)"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ParserParameterCanParse.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ParserParameter/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ParserParameterCanParse",
        "content": "Parsing can start when the unitid is not empty\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic bool CanParse()\n```\n```\n\n```\n```\npublic:\nbool CanParse();\n```\n```\n\n#### Return Value\n\nReturns true when the unitid is valid"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ParserParameterDispose.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ParserParameter/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ParserParameterDispose",
        "content": "Destructor for deterministic finalization of ParserParameter object.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void Dispose()\n```\n```\n\n```\n```\npublic:\nvoid Dispose();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ParserParameterGridSize.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ParserParameter/Properties",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ParserParameterGridSize",
        "content": "The grid size in millimeters. p.e. \"4#\" means 4 times grid size\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic double GridSize {get; set;}\n```\n```\n\n```\n```\npublic:\nproperty double GridSize {\n   double get();\n   void set (    double value);\n}\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ParserParameterGroup.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ParserParameter/Properties",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ParserParameterGroup",
        "content": "The UnitGroup Property. When first UnitID is set,the group is automatically defined by the unit. While setting a Group also the Unit can be changed to the first Unit in new Group if: - new Group is different than the Group of assigned Unit - there is no Unit and Group assigned When new assigned Group is the same like Unit Group, nothing will change. The unitparser can never convert units of different groups\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic UnitGroup Group {get; set;}\n```\n```\n\n```\n```\npublic:\nproperty UnitGroup Group {\n   UnitGroup get();\n   void set (    UnitGroup value);\n}\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ParserParameterHideUnit.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ParserParameter/Properties",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ParserParameterHideUnit",
        "content": "Hide the unit of the parsed result.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic bool HideUnit {get; set;}\n```\n```\n\n```\n```\npublic:\nproperty bool HideUnit {\n   bool get();\n   void set (    bool value);\n}\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ParserParameterHideValue.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ParserParameter/Properties",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ParserParameterHideValue",
        "content": "Hide the value of the parsed result, all other texts (units and additional texts) will remain.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic bool HideValue {get; set;}\n```\n```\n\n```\n```\npublic:\nproperty bool HideValue {\n   bool get();\n   void set (    bool value);\n}\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ParserParameterOnlyFirstValue.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ParserParameter/Properties",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ParserParameterOnlyFirstValue",
        "content": "Display only the first Value.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic bool OnlyFirstValue {get; set;}\n```\n```\n\n```\n```\npublic:\nproperty bool OnlyFirstValue {\n   bool get();\n   void set (    bool value);\n}\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ParserParameterOnlyUnit.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ParserParameter/Properties",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ParserParameterOnlyUnit",
        "content": "Display only the Unit.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic bool OnlyUnit {get; set;}\n```\n```\n\n```\n```\npublic:\nproperty bool OnlyUnit {\n   bool get();\n   void set (    bool value);\n}\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ParserParameterPrecision.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ParserParameter/Properties",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ParserParameterPrecision",
        "content": "Set the precision of the result (Values used for calculation: 0 up to 8)\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic int Precision {get; set;}\n```\n```\n\n```\n```\npublic:\nproperty int Precision {\n   int get();\n   void set (    int value);\n}\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ParserParameterSpaceBetweenUnitAndValue.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ParserParameter/Properties",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ParserParameterSpaceBetweenUnitAndValue",
        "content": "Add a space between Unit and the value\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic bool SpaceBetweenUnitAndValue {get; set;}\n```\n```\n\n```\n```\npublic:\nproperty bool SpaceBetweenUnitAndValue {\n   bool get();\n   void set (    bool value);\n}\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ParserParameterSuppressFloatingZeroes.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ParserParameter/Properties",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ParserParameterSuppressFloatingZeroes",
        "content": "Suppress the last zeroes of a floating result.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic bool SuppressFloatingZeroes {get; set;}\n```\n```\n\n```\n```\npublic:\nproperty bool SuppressFloatingZeroes {\n   bool get();\n   void set (    bool value);\n}\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ParserParameterUnitFromParameter.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ParserParameter/Properties",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ParserParameterUnitFromParameter",
        "content": "Get if the unit needs extra parameter to get resolved. Use the project dependend parameter class if this is true.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic bool UnitFromParameter {get;}\n```\n```\n\n```\n```\npublic:\nproperty bool UnitFromParameter {\n   bool get();\n}\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ParserParameterUnitID.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ParserParameter/Properties",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ParserParameterUnitID",
        "content": "The UnitId Property. Set or get the unit of the parameters.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic Unit UnitID {get; set;}\n```\n```\n\n```\n```\npublic:\nproperty Unit UnitID {\n   Unit get();\n   void set (    Unit value);\n}\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ParserParameterWithoutLimiters.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ParserParameter/Properties",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ParserParameterWithoutLimiters",
        "content": "The unit is NOT separated by one of this chars: blank (){}[].,:;!?/\\\\\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic bool WithoutLimiters {get; set;}\n```\n```\n\n```\n```\npublic:\nproperty bool WithoutLimiters {\n   bool get();\n   void set (    bool value);\n}\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.PathMap_ctor.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/PathMap",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.PathMap_ctor",
        "content": "Default constructor\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic PathMap()\n```\n```\n\n```\n```\npublic:\nPathMap();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.PathMap_methods.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/PathMap",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.PathMap_methods",
        "content": "For a list of all members of this type, see PathMap members](Eplan.EplApi.Baseu~Eplan.EplApi.Base.PathMap_members.html).\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [Dispose](Eplan.EplApi.Baseu~Eplan.EplApi.Base.PathMap~Dispose().html) | Destructor for deterministic finalization of PathMap object. |\n| Public Methodstatic (Shared in Visual Basic) | [ReSubstitutePath](Eplan.EplApi.Baseu~Eplan.EplApi.Base.PathMap~ReSubstitutePath.html) | Overloaded. Substitute values with variable strVariableName. Returns the changed path. |\n| Public Methodstatic (Shared in Visual Basic) | [ReSubstitutePathForDisplay](Eplan.EplApi.Baseu~Eplan.EplApi.Base.PathMap~ReSubstitutePathForDisplay.html) | Substitute values with variables. Returns the changed path. Ignores all variables which are not visible in P8 Dialogs. |\n| Public Methodstatic (Shared in Visual Basic) | [SubstitutePath](Eplan.EplApi.Baseu~Eplan.EplApi.Base.PathMap~SubstitutePath.html) | Overloaded. Substitutes variables with their values for a partuclar Project. Returns the changed path. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.PathMapDispose.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/PathMap/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.PathMapDispose",
        "content": "Destructor for deterministic finalization of PathMap object.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void Dispose()\n```\n```\n\n```\n```\npublic:\nvoid Dispose();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.PathMapReSubstitutePath.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/PathMap/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.PathMapReSubstitutePath",
        "content": "Substitute values with variable strVariableName. Returns the changed path.\n\nOverload List\n\n| Overload | Description |\n| --- | --- |\n| ReSubstitutePath(String,String)](Eplan.EplApi.Baseu~Eplan.EplApi.Base.PathMap~ReSubstitutePath(String,String).html) | Substitute values with variable strVariableName. Returns the changed path. |\n| [ReSubstitutePath(String)](Eplan.EplApi.Baseu~Eplan.EplApi.Base.PathMap~ReSubstitutePath(String).html) | Substitute values with variables. Returns the changed path. |"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.PathMapReSubstitutePathForDisplay.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/PathMap/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.PathMapReSubstitutePathForDisplay",
        "content": "Substitute values with variables. Returns the changed path. Ignores all variables which are not visible in P8 Dialogs.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic static string ReSubstitutePathForDisplay( \n   string strPath\n)\n```\n```\n\n```\n```\npublic:\nstatic String^ ReSubstitutePathForDisplay( \n   String^ strPath\n)\n```\n```\n\n#### Parameters\n\n*strPath*\n:   Path to be analyzed.\n\nExceptions\n\n| Exception | Description |\n| --- | --- |\n| [BaseException](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException.html) | Method failed. |"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.PathMapSubstitutePath.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/PathMap/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.PathMapSubstitutePath",
        "content": "Substitutes variables with their values for a partuclar Project. Returns the changed path.\n\nOverload List\n\n| Overload | Description |\n| --- | --- |\n| SubstitutePath(String,String)](Eplan.EplApi.Baseu~Eplan.EplApi.Base.PathMap~SubstitutePath(String,String).html) | Substitutes variables with their values for a partuclar Project. Returns the changed path. |\n| [SubstitutePath(String)](Eplan.EplApi.Baseu~Eplan.EplApi.Base.PathMap~SubstitutePath(String).html) | Substitutes variables with their values. Returns the changed path. |"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.PathMapReSubstitutePathString.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/PathMap/Methods/ReSubstitutePath Method",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.PathMapReSubstitutePathString",
        "content": "Substitute values with variables. Returns the changed path.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic static string ReSubstitutePath( \n   string strPath\n)\n```\n```\n\n```\n```\npublic:\nstatic String^ ReSubstitutePath( \n   String^ strPath\n)\n```\n```\n\n#### Parameters\n\n*strPath*\n:   Path to be analyzed.\n\nExceptions\n\n| Exception | Description |\n| --- | --- |\n| [BaseException](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException.html) | Method failed. |"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.PathMapReSubstitutePathStringString.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/PathMap/Methods/ReSubstitutePath Method",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.PathMapReSubstitutePathStringString",
        "content": "Substitute values with variable strVariableName. Returns the changed path.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic static string ReSubstitutePath( \n   string strVariableName,\n   string strPath\n)\n```\n```\n\n```\n```\npublic:\nstatic String^ ReSubstitutePath( \n   String^ strVariableName,\n   String^ strPath\n)\n```\n```\n\n#### Parameters\n\n*strVariableName*\n:   Indicates the name of the variable. The variable has to be passed without P8 variable pointing marks - $().\n\n*strPath*\n:   Path to be analyzed.\n\nExceptions\n\n| Exception | Description |\n| --- | --- |\n| [BaseException](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException.html) | Method failed. |"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.PathMapSubstitutePathString.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/PathMap/Methods/SubstitutePath Method",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.PathMapSubstitutePathString",
        "content": "Substitutes variables with their values. Returns the changed path.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic static string SubstitutePath( \n   string strPath\n)\n```\n```\n\n```\n```\npublic:\nstatic String^ SubstitutePath( \n   String^ strPath\n)\n```\n```\n\n#### Parameters\n\n*strPath*\n:   Path to be analyzed\n\nExceptions\n\n| Exception | Description |\n| --- | --- |\n| [BaseException](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException.html) | Method failed. |"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.PathMapSubstitutePathStringString.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/PathMap/Methods/SubstitutePath Method",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.PathMapSubstitutePathStringString",
        "content": "Substitutes variables with their values for a partuclar Project. Returns the changed path.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic static string SubstitutePath( \n   string strPath,\n   string strProjectPath\n)\n```\n```\n\n```\n```\npublic:\nstatic String^ SubstitutePath( \n   String^ strPath,\n   String^ strProjectPath\n)\n```\n```\n\n#### Parameters\n\n*strPath*\n:   Path to be analyzed\n\n*strProjectPath*\n:   Complete ProjectPath to be analyzed\n\nExceptions\n\n| Exception | Description |\n| --- | --- |\n| [BaseException](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException.html) | Method failed. |"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.Progress_ctor.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/Progress",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.Progress_ctor",
        "content": "Overload List\n\n| Overload | Description |\n| --- | --- |\n| Progress Constructor(EProgress)](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Progress~_ctor(EProgress).html) | For internal use only. |\n| [Progress Constructor(String)](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Progress~_ctor(String).html) | Creates a new progress bar. |"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.Progress_methods.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/Progress",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.Progress_methods",
        "content": "For a list of all members of this type, see Progress members](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Progress_members.html).\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [BeginPart](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Progress~BeginPart.html) | Starts a new segment. All parallel segments should result in a sum of 100%. |\n| Public Method | [Canceled](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Progress~Canceled.html) | Queries whether the operation was canceled. |\n| Public Method | [Dispose](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Progress~Dispose().html) | Destructor for deterministic finalization of Progress object. |\n| Public Method | [EndPart](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Progress~EndPart.html) | Overloaded. Ends segment and closes the window when it is not used. Don't forget to call it at the end, otherwise a progress dialog may lock P8. |\n| Public Method | [GetProgress](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Progress~GetProgress.html) | For internal use only. |\n| Public Method | [SetActionText](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Progress~SetActionText.html) | Sets a new action text. |\n| Public Method | [SetAllowCancel](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Progress~SetAllowCancel.html) | Allows canceling. |\n| Public Method | [SetAskOnCancel](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Progress~SetAskOnCancel.html) | Asks to confirm the cancel request. |\n| Public Method | [SetNeededParts](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Progress~SetNeededParts.html) | Specifies how many segments are required. |\n| Public Method | [SetNeededSteps](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Progress~SetNeededSteps.html) | Indicates how many steps are required to reach 100%. E.g. used for loops. |\n| Public Method | [SetOverallActionText](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Progress~SetOverallActionText.html) | Sets a new action text. |\n| Public Method | [SetTitle](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Progress~SetTitle.html) | Sets the title of the progress bar. |\n| Public Method | [ShowImmediately](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Progress~ShowImmediately.html) | Shows the progress bar without any further delay. When ShowImmediately isnt't called the dialog appears later (with delay), it prevents the dialog to show unnecessarily (to prevent that the progress flickers up for a short running actions). |\n| Public Method | [ShowLevel](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Progress~ShowLevel.html) | Specifies the nesting level up to which a display is made. |\n| Public Method | [Step](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Progress~Step.html) | Uses a step |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ProgressBeginPart.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/Progress/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ProgressBeginPart",
        "content": "Starts a new segment. All parallel segments should result in a sum of 100%.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void BeginPart( \n   double dPercentageNeeded,\n   string strSegmentName\n)\n```\n```\n\n```\n```\npublic:\nvoid BeginPart( \n   double dPercentageNeeded,\n   String^ strSegmentName\n)\n```\n```\n\n#### Parameters\n\n*dPercentageNeeded*\n:   Percentage value of using progress bar (or parent segment) in this segment.\n\n*strSegmentName*\n:   Name for this segment"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ProgressCanceled.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/Progress/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ProgressCanceled",
        "content": "Queries whether the operation was canceled.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic bool Canceled()\n```\n```\n\n```\n```\npublic:\nbool Canceled();\n```\n```\n\n#### Return Value\n\nTrue: The operation was canceled."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ProgressDispose.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/Progress/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ProgressDispose",
        "content": "Destructor for deterministic finalization of Progress object.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void Dispose()\n```\n```\n\n```\n```\npublic:\nvoid Dispose();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ProgressEndPart.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/Progress/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ProgressEndPart",
        "content": "End segment\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void EndPart()\n```\n```\n\n```\n```\npublic:\nvoid EndPart();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ProgressGetProgress.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/Progress/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ProgressGetProgress",
        "content": "For internal use only.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic EProgress GetProgress()\n```\n```\n\n```\n```\npublic:\nEProgress GetProgress();\n```\n```\n\n#### Return Value\n\nFor internal use only."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ProgressSetActionText.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/Progress/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ProgressSetActionText",
        "content": "Sets a new action text.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void SetActionText( \n   string strNewText\n)\n```\n```\n\n```\n```\npublic:\nvoid SetActionText( \n   String^ strNewText\n)\n```\n```\n\n#### Parameters\n\n*strNewText*\n:   The new text."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ProgressSetAllowCancel.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/Progress/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ProgressSetAllowCancel",
        "content": "Allows canceling.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void SetAllowCancel( \n   bool bAllow\n)\n```\n```\n\n```\n```\npublic:\nvoid SetAllowCancel( \n   bool bAllow\n)\n```\n```\n\n#### Parameters\n\n*bAllow*\n:   True: Cancel is possible; False: Cancel is not possible"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ProgressSetAskOnCancel.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/Progress/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ProgressSetAskOnCancel",
        "content": "Asks to confirm the cancel request.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void SetAskOnCancel( \n   bool bAsk\n)\n```\n```\n\n```\n```\npublic:\nvoid SetAskOnCancel( \n   bool bAsk\n)\n```\n```\n\n#### Parameters\n\n*bAsk*\n:   True: Prompt is displayed before termination; False: Termination without prompt"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ProgressSetNeededParts.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/Progress/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ProgressSetNeededParts",
        "content": "Specifies how many segments are required.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void SetNeededParts( \n   int neededParts\n)\n```\n```\n\n```\n```\npublic:\nvoid SetNeededParts( \n   int neededParts\n)\n```\n```\n\n#### Parameters\n\n*neededParts*\n:   Number of required segments"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ProgressSetNeededSteps.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/Progress/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ProgressSetNeededSteps",
        "content": "Indicates how many steps are required to reach 100%. E.g. used for loops.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void SetNeededSteps( \n   int neededSteps\n)\n```\n```\n\n```\n```\npublic:\nvoid SetNeededSteps( \n   int neededSteps\n)\n```\n```\n\n#### Parameters\n\n*neededSteps*\n:   Number of steps\n\nRemarks\n\nCaution: Keep in mind to call this function after having created a new segment ([BeginPart](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Progress~BeginPart.html)). Otherwise no steps are implemented."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ProgressSetOverallActionText.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/Progress/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ProgressSetOverallActionText",
        "content": "Sets a new action text.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void SetOverallActionText( \n   string strNewText\n)\n```\n```\n\n```\n```\npublic:\nvoid SetOverallActionText( \n   String^ strNewText\n)\n```\n```\n\n#### Parameters\n\n*strNewText*\n:   The new text."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ProgressSetTitle.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/Progress/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ProgressSetTitle",
        "content": "Sets the title of the progress bar.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void SetTitle( \n   string strTitle\n)\n```\n```\n\n```\n```\npublic:\nvoid SetTitle( \n   String^ strTitle\n)\n```\n```\n\n#### Parameters\n\n*strTitle*\n:   Title of progress bar"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ProgressShowImmediately.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/Progress/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ProgressShowImmediately",
        "content": "Shows the progress bar without any further delay. When ShowImmediately isnt't called the dialog appears later (with delay), it prevents the dialog to show unnecessarily (to prevent that the progress flickers up for a short running actions).\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void ShowImmediately()\n```\n```\n\n```\n```\npublic:\nvoid ShowImmediately();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ProgressShowLevel.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/Progress/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ProgressShowLevel",
        "content": "Specifies the nesting level up to which a display is made.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void ShowLevel( \n   int nPartLevelToBeShown\n)\n```\n```\n\n```\n```\npublic:\nvoid ShowLevel( \n   int nPartLevelToBeShown\n)\n```\n```\n\n#### Parameters\n\n*nPartLevelToBeShown*\n:   Nesting level"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ProgressStep.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/Progress/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ProgressStep",
        "content": "Uses a step\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void Step( \n   int nSteps\n)\n```\n```\n\n```\n```\npublic:\nvoid Step( \n   int nSteps\n)\n```\n```\n\n#### Parameters\n\n*nSteps*\n:   Number of steps to be used.\n\nRemarks\n\nPlease not use the method when a nested EPLAN progress (i.e. from API method) could be called afterwards."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ProgressEndPartBoolean.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/Progress/Methods/EndPart Method",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ProgressEndPartBoolean",
        "content": "Ends segment and closes the window when it is not used. Don't forget to call it at the end, otherwise a progress dialog may lock P8.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void EndPart( \n   bool bCloseWindow\n)\n```\n```\n\n```\n```\npublic:\nvoid EndPart( \n   bool bCloseWindow\n)\n```\n```\n\n#### Parameters\n\n*bCloseWindow*"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.Progress_ctorEProgress.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/Progress/Progress Constructor",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.Progress_ctorEProgress",
        "content": "For internal use only.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic Progress( \n   EProgress* pProgress\n)\n```\n```\n\n```\n```\npublic:\nProgress( \n   EProgress* pProgress\n)\n```\n```\n\n#### Parameters\n\n*pProgress*\n:   For internal use only."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.Progress_ctorString.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/Progress/Progress Constructor",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.Progress_ctorString",
        "content": "Creates a new progress bar.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic Progress( \n   string strProgressType\n)\n```\n```\n\n```\n```\npublic:\nProgress( \n   String^ strProgressType\n)\n```\n```\n\n#### Parameters\n\n*strProgressType*\n:   Type of the progress bar to be created. \"SimpleProgress\" or \"EnhancedProgress\""
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ProgressFactory_ctor.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ProgressFactory",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ProgressFactory_ctor",
        "content": "Syntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic ProgressFactory()\n```\n```\n\n```\n```\npublic:\nProgressFactory();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ProgressFactory_methods.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ProgressFactory",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ProgressFactory_methods",
        "content": "For a list of all members of this type, see ProgressFactory members](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ProgressFactory_members.html).\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Methodstatic (Shared in Visual Basic) | [RegisterProgress](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ProgressFactory~RegisterProgress.html) | Registers the progress in the eplan framework |\n| Public Methodstatic (Shared in Visual Basic) | [UnRegisterProgress](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ProgressFactory~UnRegisterProgress.html) | unRegisters the progress from the eplan framework |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ProgressFactoryRegisterProgress.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ProgressFactory/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ProgressFactoryRegisterProgress",
        "content": "Registers the progress in the eplan framework\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic static void RegisterProgress( \n   IEplProgress pProgress\n)\n```\n```\n\n```\n```\npublic:\nstatic void RegisterProgress( \n   IEplProgress^ pProgress\n)\n```\n```\n\n#### Parameters\n\n*pProgress*\n:   The progress object to register"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.ProgressFactoryUnRegisterProgress.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/ProgressFactory/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.ProgressFactoryUnRegisterProgress",
        "content": "unRegisters the progress from the eplan framework\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic static void UnRegisterProgress( \n   IEplProgress pProgress\n)\n```\n```\n\n```\n```\npublic:\nstatic void UnRegisterProgress( \n   IEplProgress^ pProgress\n)\n```\n```\n\n#### Parameters\n\n*pProgress*\n:   The progress object to unregister"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.Range_ctor.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/Range",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.Range_ctor",
        "content": "Syntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic Range()\n```\n```\n\n```\n```\npublic:\nRange();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.Range_fields.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/Range",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.Range_fields",
        "content": "For a list of all members of this type, see Range members](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Range_members.html).\n\nPublic Fields\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Field | [FromValue](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Range~FromValue.html) | Minimal value(begin, start) |\n| Public Field | [ToValue](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Range~ToValue.html) | Maximal value(end, stop) |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.RangeFromValue.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/Range/Fields",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.RangeFromValue",
        "content": "Minimal value(begin, start)\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic object FromValue\n```\n```\n\n```\n```\npublic:\nObject^ FromValue\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.RangeToValue.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/Range/Fields",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.RangeToValue",
        "content": "Maximal value(end, stop)\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic object ToValue\n```\n```\n\n```\n```\npublic:\nObject^ ToValue\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSetting_ctor.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/SchemeSetting",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSetting_ctor",
        "content": "Creates a new object for editing schemes.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic SchemeSetting()\n```\n```\n\n```\n```\npublic:\nSchemeSetting();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSetting_methods.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/SchemeSetting",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSetting_methods",
        "content": "For a list of all members of this type, see SchemeSetting members](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting_members.html).\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [CheckIfSchemeExists](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~CheckIfSchemeExists.html) | Checks whether a scheme is defined. |\n| Public Method | [CopyScheme](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~CopyScheme.html) | Copy an existing scheme. |\n| Public Method | [CountSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~CountSetting.html) | Number of additional settings existing under the specified setting name. |\n| Public Method | [CreateScheme](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~CreateScheme.html) | Create a new scheme with a specified name, description and the node name for the settings. The data for the new scheme is specified by P8 for each scheme type. The data is the same as the new button in the scheme dialog of P8. |\n| Public Method | [Dispose](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~Dispose().html) | For internal use only. Needed if the scheme exists in a project's settings Destructor for deterministic finalization of SchemeSetting object. |\n| Public Method | [ExportScheme](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~ExportScheme.html) | Export a scheme to file. |\n| Public Method | [ExportSchemes](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~ExportSchemes.html) | Export all schemes to file. |\n| Public Method | [GetBoolSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~GetBoolSetting.html) | Returns the value of a setting. If a setting is read that has no value for this index, the default value is returned. The index starts at 0. |\n| Public Method | [GetCount](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~GetCount.html) | Returns the number of various schemes in this scheme. |\n| Public Method | [GetDoubleSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~GetDoubleSetting.html) | Returns the value of a setting. If a setting is read that has no value for this index, the default value is returned. The index starts at 0. |\n| Public Method | [GetLastUsed](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~GetLastUsed.html) | Returns the last used scheme name (node LastUsed). |\n| Public Method | [GetLocalizedNameSettingPath](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~GetLocalizedNameSettingPath.html) | Returns Setting path to the localized name of this scheme. |\n| Public Method | [GetMultiLangStringSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~GetMultiLangStringSetting.html) | Returns the value of a setting. If a setting is read that has no value for this index, the default value is returned. The index starts at 0. |\n| Public Method | [GetName](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~GetName.html) | Returns a language-independent, internal scheme identifier. |\n| Public Method | [GetNodeHandle](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~GetNodeHandle.html) | Returns the [SettingNode](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode.html) of the data node of the current setting. The individual settings can now be accessed via the functions of the [SettingNode](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode.html). |\n| Public Method | [GetNumericSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~GetNumericSetting.html) | Reads numeric value from settings. It can be 16 bit or 32 bit, signed or unsigned setting. |\n| Public Method | [GetStringSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~GetStringSetting.html) | Returns the value of a setting. If a setting is read that has no value for this index, the default value is returned. The index starts at 0. |\n| Public Method | [ImportScheme](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~ImportScheme.html) | Import a scheme from file. |\n| Public Method | [ImportSchemes](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~ImportSchemes.html) | Import all schemes from file. |\n| Public Method | [Init](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~Init.html) | Initializes object with a settings node path. |\n| Public Method | [RemoveScheme](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~RemoveScheme.html) | Remove a new scheme. |\n| Public Method | [ResetScheme](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~ResetScheme.html) | Sets LastUsed as the current scheme. |\n| Public Method | [Set](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~Set.html) | Setup internal members |\n| Public Method | [SetBoolSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~SetBoolSetting.html) | Sets the value of a setting. If a setting is made and an index is specified that exceeds the number of values, the corresponding values are created, based on the predefined value. The index starts at 0. |\n| Public Method | [SetDoubleSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~SetDoubleSetting.html) | Sets the value of a setting. If a setting is made and an index is specified that exceeds the number of values, the corresponding values are created, based on the predefined value. The index starts at 0. |\n| Public Method | [SetLastUsed](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~SetLastUsed.html) | Sets the strName scheme as the current one. Value in node LastUsed will be strName |\n| Public Method | [SetMultiLangStringSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~SetMultiLangStringSetting.html) | Sets the value of a setting. If a setting is made and an index is specified that exceeds the number of values, the corresponding values are created, based on the predefined value. The index starts at 0. |\n| Public Method | [SetNumericSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~SetNumericSetting.html) | Sets the value of settings on a given path. Type of value will be converted to 16 bit, 32 bit, signed or unsigned value depending on setting type. |\n| Public Method | [SetScheme](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~SetScheme.html) | Overloaded. Sets a scheme by its name (LastUsed remains unchanged |\n| Public Method | [SetStringSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~SetStringSetting.html) | Sets the value of a setting. If a setting is made and an index is specified that exceeds the number of values, the corresponding values are created, based on the predefined value. The index starts at 0. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSetting_properties.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/SchemeSetting",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSetting_properties",
        "content": "For a list of all members of this type, see SchemeSetting members](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting_members.html).\n\nPublic Properties\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Property | [Description](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~Description.html) | Returns a multilingual description text of the scheme. |\n| Public Property | [MLangName](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~MLangName.html) | Returns a multilingual scheme name. |\n| Public Property | [ReadOnly](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~ReadOnly.html) | Gives write permission to settings of this scheme. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingCheckIfSchemeExists.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/SchemeSetting/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingCheckIfSchemeExists",
        "content": "Checks whether a scheme is defined.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic bool CheckIfSchemeExists( \n   string strName\n)\n```\n```\n\n```\n```\npublic:\nbool CheckIfSchemeExists( \n   String^ strName\n)\n```\n```\n\n#### Parameters\n\n*strName*\n:   Scheme name to check\n\n#### Return Value\n\nTrue: Scheme exists; False: No scheme defined"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingCopyScheme.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/SchemeSetting/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingCopyScheme",
        "content": "Copy an existing scheme.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void CopyScheme( \n   string strSettingsSourceNodeName,\n   string strSettingsTargetNodeName,\n   MultiLangString mlTargetNewName,\n   MultiLangString mlTargetDescription\n)\n```\n```\n\n```\n```\npublic:\nvoid CopyScheme( \n   String^ strSettingsSourceNodeName,\n   String^ strSettingsTargetNodeName,\n   MultiLangString^ mlTargetNewName,\n   MultiLangString^ mlTargetDescription\n)\n```\n```\n\n#### Parameters\n\n*strSettingsSourceNodeName*\n:   Node name of the source scheme\n\n*strSettingsTargetNodeName*\n:   Node name of the new scheme\n\n*mlTargetNewName*\n:   Displayed name of the new scheme\n\n*mlTargetDescription*\n:   Description of the new scheme\n\nExceptions\n\n| Exception | Description |\n| --- | --- |\n| [System.ArgumentNullException](#) | Thrown when a parameter is `null`. |\n| [System.ArgumentException](#) | Thrown when a parameter is empty. |\n| [BaseException](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException.html) | Thrown when strName is not a valid last used scheme. The scheme with this strSettingsTargetNodeName already exists or the source scheme does not exist. |"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingCountSetting.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/SchemeSetting/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingCountSetting",
        "content": "Number of additional settings existing under the specified setting name.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic int CountSetting( \n   string strSettingPath\n)\n```\n```\n\n```\n```\npublic:\nint CountSetting( \n   String^ strSettingPath\n)\n```\n```\n\n#### Parameters\n\n*strSettingPath*\n:   Indicates the path of the setting (relative to scheme, path starts after scheme name).\n\n#### Return Value\n\nNumber of indexed settings of this setting in the scheme."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingCreateScheme.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/SchemeSetting/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingCreateScheme",
        "content": "Create a new scheme with a specified name, description and the node name for the settings. The data for the new scheme is specified by P8 for each scheme type. The data is the same as the new button in the scheme dialog of P8.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void CreateScheme( \n   string strSettingsNodeName,\n   MultiLangString mlNewName,\n   MultiLangString mlDescription\n)\n```\n```\n\n```\n```\npublic:\nvoid CreateScheme( \n   String^ strSettingsNodeName,\n   MultiLangString^ mlNewName,\n   MultiLangString^ mlDescription\n)\n```\n```\n\n#### Parameters\n\n*strSettingsNodeName*\n:   The node name in the settings\n\n*mlNewName*\n:   The new name of the scheme\n\n*mlDescription*\n:   The description of the scheme\n\nExceptions\n\n| Exception | Description |\n| --- | --- |\n| [System.ArgumentNullException](#) | Thrown when a parameter is `null`. |\n| [System.ArgumentException](#) | Thrown when a parameter is empty. |\n| [BaseException](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException.html) | Thrown when strName is not a valid last used scheme. The scheme with this strSettingsNodeName already exists |"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingDispose.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/SchemeSetting/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingDispose",
        "content": "For internal use only. Needed if the scheme exists in a project's settings Destructor for deterministic finalization of SchemeSetting object.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void Dispose()\n```\n```\n\n```\n```\npublic:\nvoid Dispose();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingExportScheme.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/SchemeSetting/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingExportScheme",
        "content": "Export a scheme to file.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void ExportScheme( \n   string strSettingsNodeName,\n   string strFileName\n)\n```\n```\n\n```\n```\npublic:\nvoid ExportScheme( \n   String^ strSettingsNodeName,\n   String^ strFileName\n)\n```\n```\n\n#### Parameters\n\n*strSettingsNodeName*\n:   The node name in the settings\n\n*strFileName*\n:   The file to export to. Must include the complete path. The file is cleared before.\n\nExceptions\n\n| Exception | Description |\n| --- | --- |\n| [System.ArgumentNullException](#) | Thrown when a parameter is `null`. |\n| [System.ArgumentException](#) | Thrown when a parameter is empty. |\n| [BaseException](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException.html) | Thrown when strName is not a valid last used scheme. The scheme with this strSettingsNodeName does not exist |"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingExportSchemes.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/SchemeSetting/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingExportSchemes",
        "content": "Export all schemes to file.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void ExportSchemes( \n   string strFileName\n)\n```\n```\n\n```\n```\npublic:\nvoid ExportSchemes( \n   String^ strFileName\n)\n```\n```\n\n#### Parameters\n\n*strFileName*\n:   The file to export to. Must include the complete path. The file is cleared before.\n\nExceptions\n\n| Exception | Description |\n| --- | --- |\n| [System.ArgumentNullException](#) | Thrown when a parameter is `null`. |\n| [System.ArgumentException](#) | Thrown when a parameter is empty. |\n| [BaseException](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException.html) | Thrown when strName is not a valid last used scheme. |"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingGetBoolSetting.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/SchemeSetting/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingGetBoolSetting",
        "content": "Returns the value of a setting. If a setting is read that has no value for this index, the default value is returned. The index starts at 0.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic bool GetBoolSetting( \n   string strSettingPath,\n   int nIdx\n)\n```\n```\n\n```\n```\npublic:\nbool GetBoolSetting( \n   String^ strSettingPath,\n   int nIdx\n)\n```\n```\n\n#### Parameters\n\n*strSettingPath*\n:   Indicates the path of the setting (relative to scheme, path starts after scheme name).\n\n*nIdx*\n:   Indicates the index.\n\n#### Return Value\n\nReturns the value of the setting.\n\nExceptions\n\n| Exception | Description |\n| --- | --- |\n| [BaseException](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException.html) | The setting is not defined. |"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingGetCount.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/SchemeSetting/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingGetCount",
        "content": "Returns the number of various schemes in this scheme.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic int GetCount()\n```\n```\n\n```\n```\npublic:\nint GetCount();\n```\n```\n\n#### Return Value\n\nThe number of individual scheme groups in the initialized scheme [Init](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~Init.html)."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingGetDoubleSetting.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/SchemeSetting/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingGetDoubleSetting",
        "content": "Returns the value of a setting. If a setting is read that has no value for this index, the default value is returned. The index starts at 0.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic double GetDoubleSetting( \n   string strSettingPath,\n   int nIdx\n)\n```\n```\n\n```\n```\npublic:\ndouble GetDoubleSetting( \n   String^ strSettingPath,\n   int nIdx\n)\n```\n```\n\n#### Parameters\n\n*strSettingPath*\n:   Indicates the path of the setting (relative to scheme, path starts after scheme name).\n\n*nIdx*\n:   Indicates the index.\n\n#### Return Value\n\nReturns the value of the setting.\n\nExceptions\n\n| Exception | Description |\n| --- | --- |\n| [BaseException](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException.html) | The setting is not defined. |\n\nRemarks\n\nWarning: double values are stored with precision to 15 digits only!"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingGetLastUsed.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/SchemeSetting/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingGetLastUsed",
        "content": "Returns the last used scheme name (node LastUsed).\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic string GetLastUsed()\n```\n```\n\n```\n```\npublic:\nString^ GetLastUsed();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingGetLocalizedNameSettingPath.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/SchemeSetting/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingGetLocalizedNameSettingPath",
        "content": "Returns Setting path to the localized name of this scheme.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic string GetLocalizedNameSettingPath()\n```\n```\n\n```\n```\npublic:\nString^ GetLocalizedNameSettingPath();\n```\n```\n\n#### Return Value\n\nThe setting path of the data node of the current scheme."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingGetMultiLangStringSetting.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/SchemeSetting/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingGetMultiLangStringSetting",
        "content": "Returns the value of a setting. If a setting is read that has no value for this index, the default value is returned. The index starts at 0.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic MultiLangString GetMultiLangStringSetting( \n   string strSettingPath,\n   int nIdx\n)\n```\n```\n\n```\n```\npublic:\nMultiLangString^ GetMultiLangStringSetting( \n   String^ strSettingPath,\n   int nIdx\n)\n```\n```\n\n#### Parameters\n\n*strSettingPath*\n:   Indicates the path of the setting (relative to scheme, path starts after scheme name).\n\n*nIdx*\n:   Indicates the index.\n\n#### Return Value\n\nReturns the value of the setting.\n\nExceptions\n\n| Exception | Description |\n| --- | --- |\n| [BaseException](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException.html) | The setting is not defined. |"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingGetName.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/SchemeSetting/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingGetName",
        "content": "Returns a language-independent, internal scheme identifier.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic string GetName()\n```\n```\n\n```\n```\npublic:\nString^ GetName();\n```\n```\n\n#### Return Value\n\nIdentifier of the current scheme."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingGetNodeHandle.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/SchemeSetting/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingGetNodeHandle",
        "content": "Returns the SettingNode](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode.html) of the data node of the current setting. The individual settings can now be accessed via the functions of the [SettingNode](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode.html).\n\nSyntax\n\n* [C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic SettingNode GetNodeHandle()\n```\n```\n\n```\n```\npublic:\nSettingNode^ GetNodeHandle();\n```\n```\n\n#### Return Value\n\nThe [SettingNode](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode.html) of the data node of the current scheme."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingGetNumericSetting.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/SchemeSetting/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingGetNumericSetting",
        "content": "Reads numeric value from settings. It can be 16 bit or 32 bit, signed or unsigned setting.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic int GetNumericSetting( \n   string strSettingPath,\n   int nIdx\n)\n```\n```\n\n```\n```\npublic:\nint GetNumericSetting( \n   String^ strSettingPath,\n   int nIdx\n)\n```\n```\n\n#### Parameters\n\n*strSettingPath*\n:   Indicates the path of the setting (relative to scheme, path starts after scheme name).\n\n*nIdx*\n:   0-based index.\n\n#### Return Value\n\nvalue read from settings\n\nExceptions\n\n| Exception | Description |\n| --- | --- |\n| [BaseException](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException.html) | Thrown when the value cannot be read from settings |\n| [System.ArgumentNullException](#) | Thrown when `strSettingsPath` is `null`. |"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingGetStringSetting.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/SchemeSetting/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingGetStringSetting",
        "content": "Returns the value of a setting. If a setting is read that has no value for this index, the default value is returned. The index starts at 0.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic string GetStringSetting( \n   string strSettingPath,\n   int nIdx\n)\n```\n```\n\n```\n```\npublic:\nString^ GetStringSetting( \n   String^ strSettingPath,\n   int nIdx\n)\n```\n```\n\n#### Parameters\n\n*strSettingPath*\n:   Indicates the path of the setting (relative to scheme, path starts after scheme name).\n\n*nIdx*\n:   Indicates the index.\n\n#### Return Value\n\nReturns the value of the setting.\n\nExceptions\n\n| Exception | Description |\n| --- | --- |\n| [BaseException](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException.html) | The setting is not defined. |"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingImportScheme.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/SchemeSetting/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingImportScheme",
        "content": "Import a scheme from file.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void ImportScheme( \n   string strSettingsNodeName,\n   string strFileName,\n   bool bOverwriteExisting\n)\n```\n```\n\n```\n```\npublic:\nvoid ImportScheme( \n   String^ strSettingsNodeName,\n   String^ strFileName,\n   bool bOverwriteExisting\n)\n```\n```\n\n#### Parameters\n\n*strSettingsNodeName*\n:   The node name in the settings (of the file)\n\n*strFileName*\n:   The file to import from. Must include the complete path. Inside the node with the name strSettingsNodeName has to exist\n\n*bOverwriteExisting*\n:   Overwrite any existing scheme with the same name\n\nExceptions\n\n| Exception | Description |\n| --- | --- |\n| [System.ArgumentNullException](#) | Thrown when a parameter is `null`. |\n| [System.ArgumentException](#) | Thrown when a parameter is empty. |\n| [BaseException](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException.html) | The file passed to strFileName does not contain scheme with name from strSettingsNodeName parameter. Or scheme already exists but bOverwriteExisting is set to false. |"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingImportSchemes.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/SchemeSetting/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingImportSchemes",
        "content": "Import all schemes from file.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void ImportSchemes( \n   string strFileName,\n   bool bOverwriteExisting\n)\n```\n```\n\n```\n```\npublic:\nvoid ImportSchemes( \n   String^ strFileName,\n   bool bOverwriteExisting\n)\n```\n```\n\n#### Parameters\n\n*strFileName*\n:   The file to import from to. Must include the complete path\n\n*bOverwriteExisting*\n\nExceptions\n\n| Exception | Description |\n| --- | --- |\n| [System.ArgumentNullException](#) | Thrown when a parameter is `null`. |\n| [System.ArgumentException](#) | Thrown when a parameter is empty. |\n| [BaseException](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException.html) | Thrown when strName is not a valid last used scheme. |"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingInit.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/SchemeSetting/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingInit",
        "content": "Initializes object with a settings node path.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic virtual void Init( \n   string strScheme\n)\n```\n```\n\n```\n```\npublic:\nvirtual void Init( \n   String^ strScheme\n)\n```\n```\n\n#### Parameters\n\n*strScheme*\n:   Path to the settings node, for example USER.DXF.SCHEMES\n\nExceptions\n\n| Exception | Description |\n| --- | --- |\n| [BaseException](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException.html) | Thrown when scheme with given settings node path can not be found. |\n\nExample\n\nCreating a SchemeSetting object and initializing it with a settings node path\n\n* [C#](#i-tab-content-9027f146-f740-4eb1-a9e7-04e584bcd136)\n\n```\nSchemeSetting oSchemeSetting = new SchemeSetting();\noSchemeSetting.Init(\"USER.DXF.SCHEMES\");\n\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingRemoveScheme.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/SchemeSetting/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingRemoveScheme",
        "content": "Remove a new scheme.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void RemoveScheme( \n   string strSettingsNodeName\n)\n```\n```\n\n```\n```\npublic:\nvoid RemoveScheme( \n   String^ strSettingsNodeName\n)\n```\n```\n\n#### Parameters\n\n*strSettingsNodeName*\n:   The node name in the settings\n\nExceptions\n\n| Exception | Description |\n| --- | --- |\n| [System.ArgumentNullException](#) | Thrown when a parameter is `null`. |\n| [System.ArgumentException](#) | Thrown when a parameter is empty. |\n| [BaseException](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException.html) | Thrown when strName is not a valid last used scheme.The scheme with this strSettingsNodeName does not exist. |\n| [BaseException](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException.html) | The scheme has only one more scheme left. The last one is not allowed to delete. |\n\nRemarks\n\nA read-only scheme cannot be deleted."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingResetScheme.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/SchemeSetting/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingResetScheme",
        "content": "Sets LastUsed as the current scheme.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void ResetScheme()\n```\n```\n\n```\n```\npublic:\nvoid ResetScheme();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingSet.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/SchemeSetting/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingSet",
        "content": "Setup internal members\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic virtual void Set()\n```\n```\n\n```\n```\npublic:\nvirtual void Set();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingSetBoolSetting.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/SchemeSetting/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingSetBoolSetting",
        "content": "Sets the value of a setting. If a setting is made and an index is specified that exceeds the number of values, the corresponding values are created, based on the predefined value. The index starts at 0.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void SetBoolSetting( \n   string strSettingPath,\n   bool value,\n   int nIdx\n)\n```\n```\n\n```\n```\npublic:\nvoid SetBoolSetting( \n   String^ strSettingPath,\n   bool value,\n   int nIdx\n)\n```\n```\n\n#### Parameters\n\n*strSettingPath*\n:   Indicates the path of the setting (relative to scheme, path starts after scheme name).\n\n*value*\n:   Indicates the value of the setting.\n\n*nIdx*\n:   Indicates the index."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingSetDoubleSetting.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/SchemeSetting/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingSetDoubleSetting",
        "content": "Sets the value of a setting. If a setting is made and an index is specified that exceeds the number of values, the corresponding values are created, based on the predefined value. The index starts at 0.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void SetDoubleSetting( \n   string strSettingPath,\n   double value,\n   int nIdx\n)\n```\n```\n\n```\n```\npublic:\nvoid SetDoubleSetting( \n   String^ strSettingPath,\n   double value,\n   int nIdx\n)\n```\n```\n\n#### Parameters\n\n*strSettingPath*\n:   Indicates the path of the setting (relative to scheme, path starts after scheme name).\n\n*value*\n:   Indicates the value of the setting.\n\n*nIdx*\n:   Indicates the index.\n\nRemarks\n\nWarning: double values are stored with precision to 15 digits only!"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingSetLastUsed.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/SchemeSetting/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingSetLastUsed",
        "content": "Sets the strName scheme as the current one. Value in node LastUsed will be strName\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void SetLastUsed( \n   string strName\n)\n```\n```\n\n```\n```\npublic:\nvoid SetLastUsed( \n   String^ strName\n)\n```\n```\n\n#### Parameters\n\n*strName*\n:   Name of the scheme to which LastUsed is to be set.\n\nExceptions\n\n| Exception | Description |\n| --- | --- |\n| [System.ArgumentNullException](#) | Thrown when `strName` is `null`. |\n| [System.ArgumentException](#) | Thrown when `strName` is empty. |\n| [BaseException](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException.html) | Thrown when strName is not a valid last used scheme. |"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingSetMultiLangStringSetting.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/SchemeSetting/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingSetMultiLangStringSetting",
        "content": "Sets the value of a setting. If a setting is made and an index is specified that exceeds the number of values, the corresponding values are created, based on the predefined value. The index starts at 0.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void SetMultiLangStringSetting( \n   string strSettingPath,\n   MultiLangString value,\n   int nIdx\n)\n```\n```\n\n```\n```\npublic:\nvoid SetMultiLangStringSetting( \n   String^ strSettingPath,\n   MultiLangString^ value,\n   int nIdx\n)\n```\n```\n\n#### Parameters\n\n*strSettingPath*\n:   Indicates the path of the setting (relative to scheme, path starts after scheme name).\n\n*value*\n:   Indicates the value of the setting.\n\n*nIdx*\n:   Indicates the index."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingSetNumericSetting.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/SchemeSetting/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingSetNumericSetting",
        "content": "Sets the value of settings on a given path. Type of value will be converted to 16 bit, 32 bit, signed or unsigned value depending on setting type.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void SetNumericSetting( \n   string strSettingPath,\n   int nValue,\n   int nIdx\n)\n```\n```\n\n```\n```\npublic:\nvoid SetNumericSetting( \n   String^ strSettingPath,\n   int nValue,\n   int nIdx\n)\n```\n```\n\n#### Parameters\n\n*strSettingPath*\n:   path to settings\n\n*nValue*\n:   value to set.\n\n*nIdx*\n:   0-based index of the setting\n\nExceptions\n\n| Exception | Description |\n| --- | --- |\n| [System.ArgumentNullException](#) | Thrown when `strSettingsPath` is `null`. |\n| [BaseException](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException.html) | Thrown when the value cannot be set. |"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingSetScheme.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/SchemeSetting/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingSetScheme",
        "content": "Sets a scheme by its name (LastUsed remains unchanged\n\nOverload List\n\n| Overload | Description |\n| --- | --- |\n| SetScheme(String)](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~SetScheme(String).html) | Sets a scheme by its name (LastUsed remains unchanged |\n| [SetScheme(Int32)](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SchemeSetting~SetScheme(Int32).html) | Sets a scheme by its number (LastUsed remains unchanged |"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingSetStringSetting.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/SchemeSetting/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingSetStringSetting",
        "content": "Sets the value of a setting. If a setting is made and an index is specified that exceeds the number of values, the corresponding values are created, based on the predefined value. The index starts at 0.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void SetStringSetting( \n   string strSettingPath,\n   string strvalue,\n   int nIdx\n)\n```\n```\n\n```\n```\npublic:\nvoid SetStringSetting( \n   String^ strSettingPath,\n   String^ strvalue,\n   int nIdx\n)\n```\n```\n\n#### Parameters\n\n*strSettingPath*\n:   Indicates the path of the setting (relative to scheme, path starts after scheme name).\n\n*strvalue*\n:   Indicates the value of the setting.\n\n*nIdx*\n:   Indicates the index."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingSetSchemeInt32.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/SchemeSetting/Methods/SetScheme Method",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingSetSchemeInt32",
        "content": "Sets a scheme by its number (LastUsed remains unchanged\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void SetScheme( \n   int i\n)\n```\n```\n\n```\n```\npublic:\nvoid SetScheme( \n   int i\n)\n```\n```\n\n#### Parameters\n\n*i*\n:   Index of the requested scheme."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingSetSchemeString.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/SchemeSetting/Methods/SetScheme Method",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingSetSchemeString",
        "content": "Sets a scheme by its name (LastUsed remains unchanged\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void SetScheme( \n   string strName\n)\n```\n```\n\n```\n```\npublic:\nvoid SetScheme( \n   String^ strName\n)\n```\n```\n\n#### Parameters\n\n*strName*\n:   Name of the requested scheme."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingDescription.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/SchemeSetting/Properties",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingDescription",
        "content": "Returns a multilingual description text of the scheme.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic MultiLangString Description {get;}\n```\n```\n\n```\n```\npublic:\nproperty MultiLangString^ Description {\n   MultiLangString^ get();\n}\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingMLangName.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/SchemeSetting/Properties",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingMLangName",
        "content": "Returns a multilingual scheme name.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic MultiLangString MLangName {get;}\n```\n```\n\n```\n```\npublic:\nproperty MultiLangString^ MLangName {\n   MultiLangString^ get();\n}\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingReadOnly.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/SchemeSetting/Properties",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSettingReadOnly",
        "content": "Gives write permission to settings of this scheme.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic bool ReadOnly {get;}\n```\n```\n\n```\n```\npublic:\nproperty bool ReadOnly {\n   bool get();\n}\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSetting_ctorESchemeSetting.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/SchemeSetting/SchemeSetting Constructor",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.SchemeSetting_ctorESchemeSetting",
        "content": "For internal use only.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic SchemeSetting( \n   ESchemeSetting* pSchemeSetting\n)\n```\n```\n\n```\n```\npublic:\nSchemeSetting( \n   ESchemeSetting* pSchemeSetting\n)\n```\n```\n\n#### Parameters\n\n*pSchemeSetting*"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.SettingNode_ctor.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/SettingNode",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.SettingNode_ctor",
        "content": "Constructor\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic SettingNode()\n```\n```\n\n```\n```\npublic:\nSettingNode();\n```\n```"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.SettingNode_methods.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/SettingNode",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.SettingNode_methods",
        "content": "For a list of all members of this type, see SettingNode members](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode_members.html).\n\nPublic Methods\n\n|  | Name | Description |\n| --- | --- | --- |\n| Public Method | [AddBoolDefault](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~AddBoolDefault.html) | Defines a new setting for a boolean default. |\n| Public Method | [AddBoolSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~AddBoolSetting.html) | Defines a new setting for a boolean value. |\n| Public Method | [AddDoubleDefault](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~AddDoubleDefault.html) | Defines a new setting for a double default. |\n| Public Method | [AddDoubleSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~AddDoubleSetting.html) | Defines a new setting for a double value. |\n| Public Method | [AddMultiLangStringDefault](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~AddMultiLangStringDefault.html) | Defines a new setting for a multilanguage string default. |\n| Public Method | [AddMultiLangStringSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~AddMultiLangStringSetting.html) | Defines a new setting for a multilanguage string value. |\n| Public Method | [AddNumericDefault](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~AddNumericDefault.html) | Defines a new setting for a numeric default. |\n| Public Method | [AddNumericSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~AddNumericSetting.html) | Defines a new setting for a numeric value. |\n| Public Method | [AddStringDefault](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~AddStringDefault.html) | Defines a new setting for a string default. |\n| Public Method | [AddStringSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~AddStringSetting.html) | Defines a new setting for a string value. |\n| Public Method | [ClearSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~ClearSetting.html) | Overloaded. Deletes the value. The setting definition is maintained. |\n| Public Method | [DeleteSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~DeleteSetting.html) | Resets an individual setting to the value of the corresponding default setting. If it has no default setting, the setting is deleted. |\n| Public Method | [Dispose](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~Dispose().html) | Destructor for deterministic finalization of SettingNode object. |\n| Public Method | [ExistSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~ExistSetting.html) | Verifies whether specified setting exists. |\n| Public Method | [ForceReload](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~ForceReload.html) | Reloads settings node. |\n| Public Method | [GetBoolSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~GetBoolSetting.html) | Returns the value of a setting. If a setting is read that has no value for this index, the default value is returned. The index starts at 0. |\n| Public Method | [GetCountOfNodes](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~GetCountOfNodes.html) | Determines the number of child nodes. |\n| Public Method | [GetCountOfSettings](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~GetCountOfSettings.html) | Determines the number of child settings (subordinate settings). |\n| Public Method | [GetDoubleSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~GetDoubleSetting.html) | Returns the value of a setting. If a setting is read that has no value for this index, the default value is returned. The index starts at 0. |\n| Public Method | [GetListOfAllSettings](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~GetListOfAllSettings.html) | Determines all settings. |\n| Public Method | [GetListOfNodes](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~GetListOfNodes.html) | Determines all settings nodes. |\n| Public Method | [GetListOfSettings](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~GetListOfSettings.html) | Determines all settings of this node. |\n| Public Method | [GetMultiLangStringSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~GetMultiLangStringSetting.html) | Returns the value of a setting. If a setting is read that has no value for this index, the default value is returned. The index starts at 0. |\n| Public Method | [GetNodePath](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~GetNodePath.html) | Determines the path of this node. |\n| Public Method | [GetNodePathDot](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~GetNodePathDot.html) | Determines the path of this node. |\n| Public Method | [GetNumericSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~GetNumericSetting.html) | Reads numeric value from settings. It can be 16 bit or 32 bit, signed or unsigned setting. |\n| Public Method | [GetParentNode](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~GetParentNode.html) | Determines the parent node. |\n| Public Method | [GetStringSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~GetStringSetting.html) | Returns the value of a setting. If a setting is read that has no value for this index, the default value is returned. The index starts at 0. |\n| Public Method | [GetSubNode](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~GetSubNode.html) | Determines a child node. |\n| Public Method | [MergeWithNode](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~MergeWithNode.html) | Merges settings nodes. |\n| Public Method | [ResetNode](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~ResetNode.html) | Resets the node to default. All settings inside are deleted and copied from defaults again. |\n| Public Method | [Set](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~Set.html) | Defines the path to the settings node. |\n| Public Method | [SetBoolSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~SetBoolSetting.html) | Sets the value of a setting. If a setting is made and an index is specified that exceeds the number of values, the corresponding values are created, based on the predefined value. The index starts at 0. |\n| Public Method | [SetDoubleSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~SetDoubleSetting.html) | Sets the value of a setting. If a setting is made and an index is specified that exceeds the number of values, the corresponding values are created, based on the predefined value. The index starts at 0. |\n| Public Method | [SetMultiLangStringSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~SetMultiLangStringSetting.html) | Sets the value of a setting. If a setting is made and an index is specified that exceeds the number of values, the corresponding values are created, based on the predefined value. The index starts at 0. |\n| Public Method | [SetNumericSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~SetNumericSetting.html) | Sets the value of project settings on a given path. Type of value will be converted to 16 bit, 32 bit, signed or unsigned value depending on setting type. |\n| Public Method | [SetStringSetting](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~SetStringSetting.html) | Sets the value of a setting. If a setting is made and an index is specified that exceeds the number of values, the corresponding values are created, based on the predefined value. The index starts at 0. |\n| Public Method | [Write](Eplan.EplApi.Baseu~Eplan.EplApi.Base.SettingNode~Write.html) | Writes all settings to a file. |\n\n[Top](#top)"
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.SettingNodeAddBoolDefault.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/SettingNode/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.SettingNodeAddBoolDefault",
        "content": "Defines a new setting for a boolean default.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void AddBoolDefault( \n   string strSettingPath,\n   bool[] arrDefaults,\n   ISettings.CreationFlag eFlag\n)\n```\n```\n\n```\n```\npublic:\nvoid AddBoolDefault( \n   String^ strSettingPath,\n   array<bool>^ arrDefaults,\n   ISettings.CreationFlag eFlag\n)\n```\n```\n\n#### Parameters\n\n*strSettingPath*\n:   Indicates the path of the setting (relative to path of the node, path starts after the path of the node).\n\n*arrDefaults*\n:   Array of default values\n\n*eFlag*\n:   [ISettings.CreationFlag](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ISettings+CreationFlag.html)\n\nExceptions\n\n| Exception | Description |\n| --- | --- |\n| [System.ArgumentNullException](#) | Thrown when `strSettingPath` is `null`. |\n| [System.ArgumentException](#) | Thrown when `strSettingPath` is empty. |\n| [System.ArgumentNullException](#) | Thrown when `strDefBy` is `null`. |\n| [System.ArgumentException](#) | Thrown when `strDefBy` is empty. |\n| [BaseException](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException.html) | Thrown when setting cannot be added. |\n\nRemarks\n\nDefault definition settings are provided for settings that use default values such as FALSE, TRUE, 0, or spaces and that do not require ranges of values."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.SettingNodeAddBoolSetting.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/SettingNode/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.SettingNodeAddBoolSetting",
        "content": "Defines a new setting for a boolean value.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void AddBoolSetting( \n   string strSettingPath,\n   bool[] arrValues,\n   ISettings.CreationFlag eFlag\n)\n```\n```\n\n```\n```\npublic:\nvoid AddBoolSetting( \n   String^ strSettingPath,\n   array<bool>^ arrValues,\n   ISettings.CreationFlag eFlag\n)\n```\n```\n\n#### Parameters\n\n*strSettingPath*\n:   Indicates the path of the setting (relative to path of the node, path starts after the path of the node).\n\n*arrValues*\n:   Array of values added to the setting\n\n*eFlag*\n:   [ISettings.CreationFlag](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ISettings+CreationFlag.html)\n\nExceptions\n\n| Exception | Description |\n| --- | --- |\n| [System.ArgumentNullException](#) | Thrown when `strSettingPath` is `null`. |\n| [System.ArgumentException](#) | Thrown when `strSettingPath` is empty. |\n| [System.ArgumentNullException](#) | Thrown when `strDefBy` is `null`. |\n| [System.ArgumentException](#) | Thrown when `strDefBy` is empty. |\n| [BaseException](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException.html) | Thrown when setting cannot be added. |\n\nRemarks\n\nDefault definition settings are provided for settings that use default values such as FALSE, TRUE, 0, or spaces and that do not require ranges of values."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.SettingNodeAddDoubleDefault.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/SettingNode/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.SettingNodeAddDoubleDefault",
        "content": "Defines a new setting for a double default.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void AddDoubleDefault( \n   string strSettingPath,\n   double[] arrDefaults,\n   Range[] arrRange,\n   ISettings.CreationFlag eFlag\n)\n```\n```\n\n```\n```\npublic:\nvoid AddDoubleDefault( \n   String^ strSettingPath,\n   array<double>^ arrDefaults,\n   array<Range^>^ arrRange,\n   ISettings.CreationFlag eFlag\n)\n```\n```\n\n#### Parameters\n\n*strSettingPath*\n:   Indicates the path of the setting (relative to path of the node, path starts after the path of the node).\n\n*arrDefaults*\n:   Array of default values\n\n*arrRange*\n:   Array of [Range](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Range.html). Used for value validation.\n\n*eFlag*\n:   [ISettings.CreationFlag](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ISettings+CreationFlag.html)\n\nExceptions\n\n| Exception | Description |\n| --- | --- |\n| [System.ArgumentNullException](#) | Thrown when `strSettingPath` is `null`. |\n| [System.ArgumentException](#) | Thrown when `strSettingPath` is empty. |\n| [BaseException](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException.html) | Thrown when setting cannot be added. |\n\nRemarks\n\nDefault definition settings are provided for settings that use default values such as FALSE, TRUE, 0, or spaces and that do not require ranges of values. Precision: 15 numbers of significant digits are supported."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.SettingNodeAddDoubleSetting.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/SettingNode/Methods",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.SettingNodeAddDoubleSetting",
        "content": "Defines a new setting for a double value.\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic void AddDoubleSetting( \n   string strSettingPath,\n   double[] arrValues,\n   Range[] arrRange,\n   ISettings.CreationFlag eFlag\n)\n```\n```\n\n```\n```\npublic:\nvoid AddDoubleSetting( \n   String^ strSettingPath,\n   array<double>^ arrValues,\n   array<Range^>^ arrRange,\n   ISettings.CreationFlag eFlag\n)\n```\n```\n\n#### Parameters\n\n*strSettingPath*\n:   Indicates the path of the setting (relative to path of the node, path starts after the path of the node).\n\n*arrValues*\n:   Array of values added to the setting\n\n*arrRange*\n:   Array of [Range](Eplan.EplApi.Baseu~Eplan.EplApi.Base.Range.html). Used for value validation.\n\n*eFlag*\n:   [ISettings.CreationFlag](Eplan.EplApi.Baseu~Eplan.EplApi.Base.ISettings+CreationFlag.html)\n\nExceptions\n\n| Exception | Description |\n| --- | --- |\n| [System.ArgumentNullException](#) | Thrown when `strSettingPath` is `null`. |\n| [System.ArgumentException](#) | Thrown when `strSettingPath` is empty. |\n| [BaseException](Eplan.EplApi.Baseu~Eplan.EplApi.Base.BaseException.html) | Thrown when setting cannot be added. |\n\nRemarks\n\nDefault definition settings are provided for settings that use default values such as FALSE, TRUE, 0, or spaces and that do not require ranges of values. Precision: 15 numbers of significant digits are supported."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.SettingNode_ctorSSettingNodeBoolean.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/SettingNode/SettingNode Constructor",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.SettingNode_ctorSSettingNodeBoolean",
        "content": "Constructor\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic SettingNode( \n   SSettingNode* pEsNodeHandle,\n   bool bCopy\n)\n```\n```\n\n```\n```\npublic:\nSettingNode( \n   SSettingNode* pEsNodeHandle,\n   bool bCopy\n)\n```\n```\n\n#### Parameters\n\n*pEsNodeHandle*\n:   Indicates the path of the node.\n\n*bCopy*\n:   Indicates whether the settings node is to be copied."
    },
    {
        "source": "Eplan.EplApi.BaseuEplan.EplApi.Base.SettingNode_ctorString.md",
        "path": "/API Reference/Assemblies/EplanEplApiBaseu Assembly/Namespaces/EplanEplApiBase Namespace/Classes/SettingNode/SettingNode Constructor",
        "title": "Eplan.EplApi.BaseuEplan.EplApi.Base.SettingNode_ctorString",
        "content": "Constructor\n\nSyntax\n\n* C#](#i-syntax-CS)\n* [C++/CLI](#i-syntax-CPP2005)\n\n```\n```\npublic SettingNode( \n   string strNodePath\n)\n```\n```\n\n```\n```\npublic:\nSettingNode( \n   String^ strNodePath\n)\n```\n```\n\n#### Parameters\n\n*strNodePath*\n:   Indicates the path of the node."
    },
    {
        "source": "API_DataModel.md",
        "path": "/User Guide",
        "title": "API_DataModel",
        "content": "The electrotechnical data model (Eplan.EplApi.DataModel  namespace) contains all the classes / objects belonging to an Eplan project, such as the project itself, pages, functions, placements, etc. Each class is derived from the  StorableObject  base class and has its specific properties. In contrast to the Eplan 21 data model, Eplan does not strictly differentiate between the graphical and the logical information. For example, a page keeps record of both the functions (logical) and the placements (graphical). There is **no** device object that stores the functions with the same device tag.\n\n**Note**\n\nThe class  Function  is named like a keyword of Visual Basic. In order to get no compilation errors in VB, you need to always refer to a  Function  object by its complete name space:  Eplan.EplApi.DataModel.Function  or in square brackets:  Function].\n\nWe recommend you to explicitly release data model objects when they are no longer needed. This is especially true for loops that set a large number of properties. Make sure that the garbage collector has the opportunity to clean up these objects by frequently calling  System.GC.WaitForPendingFinalizers().\n\nPlease take into account that generally data model objects store length values in millimeters and dimensions are according to graphical coordinate system."
    },
    {
        "source": "API_Framework.md",
        "path": "/User Guide",
        "title": "API_Framework",
        "content": "The API Framework provides all necessary functionality to integrate API add-ins](AddIns.html) into Eplan, to process [scripts](Scripts.html), and to use base technology of the Eplan system, like e.g. creating [Actions](Actions.html), writing system messages and managing Eplan settings. The framework encloses the namespaces  Eplan.EplApi.ApplicationFramework,  Eplan.EplApi.Base,  Eplan.EplApi.EServices,  Eplan.EplApi.Gui, Eplan.EplApi.Scripting,  and  Eplan.EplApi.System.\n\nNo electrotechnical functions are made available by the framework."
    },
    {
        "source": "API_HEServices.md",
        "path": "/User Guide",
        "title": "API_HEServices",
        "content": "The  Eplan.EplApi.HEServices  namespace mainly contains functionality that is not directly connected to the data model. There are classes for backing up projects and master data, for creating reports or for printing. A lot of modules of EPLAN are represented in this namespace, such as the labeling module and the parts management."
    },
    {
        "source": "API_MasterData.md",
        "path": "/User Guide",
        "title": "API_MasterData",
        "content": "The API MasterData (Eplan.EplApi.MasterData) namespace provides functionality to access parts database items and symbol libraries."
    },
    {
        "source": "API_Other.md",
        "path": "/User Guide",
        "title": "API_Other",
        "content": "Other programming interface functionality"
    },
    {
        "source": "DevelopmentEnvironment.md",
        "path": "/User Guide",
        "title": "DevelopmentEnvironment",
        "content": "The preferable way to develop Eplan API applications is to reference the API assemblies directly in a .NET project using CLI programming languages like C# (C Sharp), Visual Basic .NET, C++/CLI.  You could do this by just using a text editor and calling the compiler from a DOS box â like described in the topics \"Creating add-ins in CSharp](CSharpAddins.html)\" or \"[Creating add-ins in Visual Basic .NET](VisualBasicAddins.html)\".\n\nThe much more convenient way of developing involves the use of an Integrated Development Environment (IDE). We recommend the use of Microsoft Visual Studio, but there are also free development environments like SharpDevelop. How to start an API project in the Visual Studio is described in the topic \"[Eplan .NET API\".\n\nThe Eplan API has explicitly been tested and released for Microsoft Windows 7, 8 and 10.\n\nIt is not recommended to use Eplan API in separate child threads. This could lead to problems because such configuration wasn't tested nor predicted by API designers.\n\n### Debugging applications\n\nCurrently, when debugging applications, the  w3u.exe  process is detached at the beginning of the debug. This happens because  w3u.exe  from the \"Electric P8\" folder calls  eplan.exe  from the \"Platform\" folder. In order to continue debugging, please attach to the process  eplan.exe  from \"Platform\" folder. Another solution is to start debugging  eplan.exe  in the \"Platform\" folder, with the  Variant  argument, for example:\n\n/Variant:\"Electric P8\""
    },
    {
        "source": "EServices.md",
        "path": "/User Guide",
        "title": "EServices",
        "content": "The namespace Eplan.EplApi.EServices](Eplan.EplApi.EServicesu.html) provides the following functionality:\n\n- Getting registered messages, verifications\n\n- Retrieving project messages\n\n- Interfaces for registering custom messages / verifications\n\nThe namespace [Eplan.EplApi.EServices.Ged provides functionality for creating custom interactions."
    },
    {
        "source": "APIPre-planning.md",
        "path": "/User Guide/API DataModel",
        "title": "APIPre-planning",
        "content": "The Eplan API now provides full access to pre-planning data. The following extensions were created for this purpose:\n\n- Project-related classes from  Eplan.EplApi.DataModel.Planning  namespace\n\n- The PrePlanningMacro  class and  Insert::PrePlanning  for the macro access\n\n- PrePlanningService  for more complex operations\n\n- New enum values\n\n### Eplan.EplApi.DataModel.Planning namespace\n\nPre-Planning related objects are stored in the  Eplan.EplApi.DataModel.Planning  namespace. Here is an UML class diagram that shows their inheritance hierarchy:\n\n!]()\n\n### Migration of PPE API to Preplanning\n\nSince Eplan 2.4, there is a new product for the pre-planning and basic engineering of plant and machinery:\n\n**Eplan Preplanning Professional**\n\nThe product was developed on the basis of the Eplan Platform and in parallel to the Eplan PPE solution. Now it is the replacement of the Eplan PPE.\n\nBecause of this, Eplan PPE is no longer supported nor described in API Help since version 2.7. So please migrate your applications using PPE API to Preplanning API.\n\nAs a replacement, use classes from Eplan.EplApi.DataModel.Planning namespace and PrePlanningService.\n\nPlease note also, there will be no further development of the Eplan PPE system."
    },
    {
        "source": "API_Pro_Panel.md",
        "path": "/User Guide/API DataModel",
        "title": "API_Pro_Panel",
        "content": "Eplan API currently provides users with access to Eplan Pro Panel objects. In general, any functionality that can be done via the user interface is also available in the API Pro Panel.\n\nThis chapter gives the user an overview of how API objects can be used in Eplan Pro Panel. The following pages show how to create particular objects and how they look in the GUI.\n\n### Basics\n\nAPI Pro Panel was created as an extension to the standard API DataModel (Eplan.EplApi.DataModelu.dll  assembly).\n\nSo there is a new namespace  Eplan:EplApi:DataModel:E3D  for 3D classes and  HEServices  methods that operate on them.\n\nUsually it is enough to have Eplan Electric P8 to use API Pro Panel. However, some methods / properties however may require the installation of Eplan Pro Panel with appropriate license.\n\n### UML class diagram\n\nThe diagram below shows the hierarchy of the most important classes in the Pro Panel API.\n\n!]()"
    },
    {
        "source": "CreateOpenProject.md",
        "path": "/User Guide/API DataModel",
        "title": "CreateOpenProject",
        "content": "The most important object in the  Eplan.EplApi.DataModel  namespace is the  Project. The project must be opened in Eplan in order to be able to work with it. In an add-in, you will usually work with the project that the user has opened interactively via the GUI. You can get the project currently selected by the user via the  SelectionSet  object described in the \"Getting the current selection](HE_Selectionset.html)\" topic.\n\nHowever, you may also want to open or create a project in Eplan via the API â this will certainly be the case with [offline programs. For this and other project-related tasks, the  Eplan.EplApi.DataModel  namespace provides the  ProjectManager  class.\n\nTo create a project, use the  CreateProject  method. It takes two parameters, the full filename of the new project link file to be created and the project template link file. The project template can be a basic project in  \\*.zw9  format or a project backup in  \\*.zw1  format. After successfully creating the project, it is opened and the method returns the new  Project  object.\n\nThe following example shows how to create a project.\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n Project oProject = new ProjectManager().CreateProject(\"$(MD_PROJECTS)\\\\Example_003.elk\", \"$(MD_TEMPLATES)\\\\IEC_bas003.zw9\");\n ``` | |\n\nTo open a project, use the  OpenProject  method. Its only parameter is the full name and path of the project link file.\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n Project oProject = new ProjectManager().OpenProject(\"$(MD_PROJECTS)\\\\EPLAN_Sample_Project.elk\");\n ``` | |\n\n### Remarks\n\nIn offline programs, you need to open a LockingStep, before you open or create an Eplan project or use any other data model object."
    },
    {
        "source": "CreatePages.md",
        "path": "/User Guide/API DataModel",
        "title": "CreatePages",
        "content": "To create a page in a project, the  Eplan.EplApi.DataModel.Page  class provides a  Create  method. You first instantiate an empty  Page  object and then call  Create. The method takes three parameters: first the project, in which the page is to be created, then the type of the page, and finally a  PagePropertyList  with the identifying properties of the page.\n\nThe types of pages you can create are listed in the  DocumentTypeManager.DocumentType  enumeration.\n\nThe following example shows how to create a schematic page:\n\n* C#](#i-tab-content-CS)\n* [VB\n\n```\n\n// Create new schematic page in current project\nPagePropertyList oPagePropList = new PagePropertyList();\n// Set Plant\noPagePropList[Properties.Page.DESIGNATION_PLANT] = \"P1\";\n// Set Location\noPagePropList[Properties.Page.DESIGNATION_LOCATION] = \"L1\";\nPage oNewPage = new Page();\noNewPage.Create(m_oTestProject, DocumentTypeManager.DocumentType.Circuit, oPagePropList);\n```\n\n```\n\n' Create new schematic page in current project\nDim oPagePropList As New PagePropertyList()\n' Set Plant\noPagePropList(Properties.Page.DESIGNATION_PLANT) = PropertyValue.op_Implicit(\"P1\")\n' Set Location\noPagePropList(Properties.Page.DESIGNATION_LOCATION) = PropertyValue.op_Implicit(\"L1\")\n' Set Counter\noPagePropList(Properties.Page.PAGE_COUNTER) = PropertyValue.op_Implicit(4)\nDim oNewPage As New Page()\noNewPage.Create(m_oTestProject, DocumentTypeManager.DocumentType.Circuit, oPagePropList)\n```\n\nRemarks\n\nPlease mind that when you create a page, you cannot set descriptive properties in the  PropertyList  mentioned above. Only parts of the page name can be set using this list.\n\nOther properties need to be set after creating the page by  Page.Properties."
    },
    {
        "source": "DM_ProjectSettings.md",
        "path": "/User Guide/API DataModel",
        "title": "DM_ProjectSettings",
        "content": "Every project has its own set of settings. To get and set these settings, as well as to create new settings, the  DataModel  namespace provides a class called  ProjectSettings. It has similar methods as the settings class in  Eplan.EplApi.Base, but an instance of this class is initialized with the project object. Unlike the \"normal\" settings, the project settings keys **don't** start with \"PROJECT\", where the other settings start with \"USER\", \"STATION\", or \"COMPANY\".\n\nExample for project related settings Projects > <project name> > Connections > General:\n\n| Example Title | Copy Code |\n| --- | --- |\n| ``` \n <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n <Settings ver=\"2.4.1\" format=\"2\">\n  <CAT name=\"PROJECT\">\n   <MOD name=\"EsConnection\">\n    <Setting name=\"ManageConnectionsInNDPDialog\" type=\"bool\">\n     <Val>0</Val>\n    </Setting>\n    <Setting name=\"ManageSaddleJumperConnPointsInNDPDialog\" type=\"bool\">\n     <Val>0</Val>\n    </Setting>\n    <Setting name=\"SortConnectionsByPlacement\" type=\"bool\" desc=\"2058\">\n     <Val>0</Val>\n    </Setting>\n   </MOD>\n  </CAT>\n </Settings>\n ``` | |\n\nThe following example shows how to get the project setting for the project display languages.\n\n* C#](#i-tab-content-CS)\n* [VB](#i-tab-content-VB)\n\n```\n\nEplan.EplApi.DataModel.ProjectSettings projectSettings =\n          new Eplan.EplApi.DataModel.ProjectSettings(oProject);\nstring languages = projectSettings.GetExpandedStringSetting(\"TRANSLATEGUI.DISPLAYED_LANGUAGES\", 0)\n```\n\n```\n\nDim projectSettings As New Eplan.EplApi.DataModel.ProjectSettings(oProject)\nDim languages As String\nlanguages = projectSettings.GetExpandedStringSetting(\"TRANSLATEGUI.DISPLAYED_LANGUAGES\", _\n                                                       System.Convert.ToUInt32(0))\n```"
    },
    {
        "source": "EPLAN_Properties.md",
        "path": "/User Guide/API DataModel",
        "title": "EPLAN_Properties",
        "content": "The Eplan API allows accessing object properties, i.e. characteristics that are visible in GUI in the Properties dialog.\n\nThis is possible through the  Properties  property which is defined for almost all data model objects.\n\nThe list of all available properties for a particular object can be found in the properties of the  Properties  class (for example  Properties::AllMDSymbolLibraryPropIDs).\n\n### Property types\n\nEplan properties are typed. The property values can have one of the following types:\n\n* bool\n* int\n* double\n* DateTime\n* PointD\n* MultiLangString\n\nWith help of the PropertyDefinition.PropertyType, you can determine the type of a property:\n\n| PropertyDefinition.PropertyType | Corresponding .NET Framework type |\n| --- | --- |\n| Point |  |\n| MultilangString |  |\n| Variable | System.String |\n| String | System.String |\n| Time | System.DateTime |\n| Bool | System.Boolean |\n| Double | System.Double |\n| Coord | System.Double |\n| Long | System.Int64 |\n\nThe following example gets the type of a page property:\n\n* C#](#i-tab-content-CS)\n* [VB](#i-tab-content-VB)\n\n```\n\nPropertyDefinition.PropertyType oPropType = oPage.Properties[Properties.Page.DESIGNATION_PLANT].Definition.Type;\n```\n\n```\n\nDim oPropType As PropertyDefinition.PropertyType = oPage.Properties(Properties.Page.DESIGNATION_PLANT).Definition.Type\n```\n\n### Setting and getting a property\n\nThe following example shows how to set a  bool  property:\n\n* [C#](#i-tab-content-CS)\n* [VB](#i-tab-content-VB)\n\n```\n\noFunction.Properties[Properties.Function.FUNC_ARTICLE_SUPPRESSINPARTSLIST] = true;\n```\n\n```\n\noFunction.Properties(Properties.Function.FUNC_ARTICLE_SUPPRESSINPARTSLIST) = PropertyValue.op_Implicit(True)\n```\n\n```\n\n \n```\n\nThe following example shows how to get a  MultiLangString  property (project description):\n\n* [C#](#i-tab-content-CS)\n* [VB](#i-tab-content-VB)\n\n```\n\nMultiLangString mlTest = oProject.Properties[Properties.Project.PROJ_INSTALLATIONNAME];\n```\n\n```\n\nDim mlTest As MultiLangString = oProject.Properties(Properties.Project.PROJ_INSTALLATIONNAME).ToMultiLangString()\n```\n\nAs an alternative syntax, you can also write:\n\n* [C#](#i-tab-content-CS)\n* [VB](#i-tab-content-VB)\n\n```\n\nMultiLangString mlTest = oProject.Properties.PROJ_INSTALLATIONNAME;\n```\n\n```\n\nDim mlTest As MultiLangString = oProject.Properties.PROJ_INSTALLATIONNAME.ToMultiLangString()\n```\n\nFinally an example that loops over all  string  properties of a project:\n\n* [C#](#i-tab-content-CS)\n* [VB](#i-tab-content-VB)\n\n```\n\n string strTmp = string.Empty;\n PropertyValue oPropValue;\n // Iterate over all project properties\n foreach (AnyPropertyId hPProp in Eplan.EplApi.DataModel.Properties.AllProjectPropIDs)\n {\n     // Check if exists\n     if (!m_oProject.Properties[hPProp].IsEmpty)\n     {\n         if (m_oProject.Properties[hPProp].Definition.Type == PropertyDefinition.PropertyType.String)\n         {\n             // Read string property\n             oPropValue = m_oProject.Properties[hPProp];\n             strTmp = oPropValue.ToString();\n         }\n     }\n }\n```\n\n```\n\nDim strTmp As String = String.Empty\nDim oPropValue As PropertyValue\n' Iterate over all project properties\nDim hPProp As AnyPropertyId\nFor Each hPProp In  Eplan.EplApi.DataModel.Properties.AllProjectPropIDs\n   ' Check if exists\n   If Not m_oProject.Properties(hPProp).IsEmpty Then\n      If m_oProject.Properties(hPProp).Definition.Type = PropertyDefinition.PropertyType.String Then\n         ' Read string property\n         oPropValue = m_oProject.Properties(hPProp)\n         strTmp = oPropValue.ToString()\n      End If\n   End If\nNext hPProp\n```\n\n### Setting name properties\n\nIn the case of the name properties, their setting must be done through the  .NameParts  property, for example:\n\n* [C#\n\n```\n\nvar functionBasePropertyList = new FunctionBasePropertyList();\n// Set function name\nfunctionBasePropertyList.DESIGNATION_LOCATION = \"A1\";\nfunctionBasePropertyList.DESIGNATION_PLANT = \"E01\";\noNewFunction.NameParts = functionBasePropertyList;\n```\n\nThe only difference is with  DESIGNATION\\_PRODUCT  property. It needs to be set by  FUNC\\_CODE  and  FUNC\\_COUNTER  then it is composed from them.\n\n### Conversion property value to another types\n\nIt is possible to get a property as a value of the .NET Framework type or Eplan API type (for example  Eplan.EplApi.Base.MultiLangString). It can be done explicitly by the  PropertyValue.To<type>(), for example:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n string strStringValue = oFunction.Properties.FUNC_CODE.ToString();  \n ``` | |\n\nor implicitly:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n int nValue = oFunction.Properties.FUNC_CRAFT;\n ``` | |\n\nIt is not allowed to convert the property value to a non-matching type, for example  MultiLangString  to  int. In such cases, a runtime warning is generated (as an Eplan system message) or an exception is thrown:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n string strValue = oArticle.Properties.ARTICLE_DEPTH.ToString(); // Will generate a system warning\n double dValue = oArticle.Properties.ARTICLE_DEPTH.ToDouble(); // OK\n string strValue2 = oArticle.Properties.ARTICLE_DEPTH.ToDouble().ToString(\"0.00\", CultureInfo.InvariantCulture); // Also OK\n ``` | |\n\nHere is a table that shows which conversions are allowed:\n\n|  | Eplan.EplApi.Base.Point    PropertyValue.ToPointD() | Eplan.EplApi.Base.MultiLangString  PropertyValue.ToMultiLangString() | System.String                     PropertyValue.ToString() | System.DateTime             PropertyValue.ToTime() | bool                                   PropertyValue.ToBool() | double                                   PropertyValue.ToDouble() | long                               PropertyValue.ToInt() |\n| --- | --- | --- | --- | --- | --- | --- | --- |\n| PropertyType.Point | â |  |  |  |  |  |  |\n| PropertyType.MultilangString |  | â |  |  |  |  |  |\n| PropertyType.Variable |  |  | â |  |  |  |  |\n| PropertyType.String |  |  | â |  |  |  |  |\n| PropertyType.Time |  |  |  | â |  |  |  |\n| PropertyType.Bool |  |  |  |  | â |  |  |\n| PropertyType.Double |  |  |  |  |  | â |  |\n| PropertyType.Coord |  |  |  |  |  | â |  |\n| PropertyType.Long |  |  |  |  |  | â | â |\n\n### Indexed properties\n\nProperties can have more than one value. In this case, we call it an \"**indexed property**\". The index is passed after the property designation. The example gets the index 1 of the function property  FUNC\\_CONNECTIONDESIGNATION:\n\n* C#](#i-tab-content-CS)\n* [VB](#i-tab-content-VB)\n\n```\n\nstrConnDes1 = oFunction.Properties[Properties.Function.FUNC_CONNECTIONDESIGNATION, 1].ToString();\n```\n\n```\n\nstrConnDes1 = oFunction.Properties(Properties.Function.FUNC_CONNECTIONDESIGNATION, 1).ToString()\n```\n\nAlternatively:\n\n* [C#](#i-tab-content-CS)\n* [VB](#i-tab-content-VB)\n\n```\n\nstrConnDes1 = oFunction.Properties.FUNC_CONNECTIONDESIGNATION[1].ToString();\n```\n\n```\n\nstrConnDes1 = oFunction.FUNC_CONNECTIONDESIGNATION(1).ToString()\n```\n\n### User-defined properties\n\nEplan API supports also user-defined properties that were introduced in Eplan 2.4.\n\nThe following enhancements were added due to it:\n\n* Access to properties by case-sensitive  string  identifiers:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n // Setting user-defined property\n oProject.Properties[\"EPLAN.Project.UserSupplementaryField1\"] = \"test1\";\n // Getting user-defined property\n string strValue = oProject.Properties[\"EPLAN.Project.UserSupplementaryField1\"];\n ``` | |\n\n* UserDefinedPropertyDefinition  class extending  PropertyDefinition. The class allows creating custom property definitions or accessing information from existing ones:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n // Create a new property definition:\n UserDefinedPropertyDefinition oUDPDProject = UserDefinedPropertyDefinition.Create(oCurrentProject, \"API.Property.Project\", UserDefinedPropertyDefinition.Enums.ClientType.Project);\n oCurrentProject.Properties[\"API.Property.Project\"] = \"something\";\n \n var oCategory = oProject.Properties[\"EPLAN.Project.UserSupplementaryField1\"].Category;  // Gets the category information\n MultiLangString strDisplayedName = oProject.Properties[\"EPLAN.Project.UserSupplementaryField1\"].DisplayedName; // Gets the name that is displayed in the GUI properties window\n ``` | |\n\n* Import / export property definitions (ExportPropertyDefinitions,  ImportPropertyDefinitions  from the  PrePlanningService  class)\n\n* The new  AnyPropertyId  constructor allowing to create an ID of a user-defined property:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n public AnyPropertyId(\n     ref Eplan::EplApi::DataModel::Project pProject,\n     ref System::String strUserDefiniedPropertyIdentName\n );\n ``` | |\n\n* The  AnyPropertyId.AsString  propety to get the identifying name from  AnyPropertyId  which represents a user-defined property.\n\n* Actions that expect the ID of a property were extended to support also identifying names. Please go to the \"[API Reference\" section for details.\n\n### Accessing default user-defined properties\n\nSome user-defined properties are created by default, for example \"EPLAN.Project.UserSupplementaryField1\".\n\nThey have the same internal IDs as the old  \\*\\_CUSTOM\\_SUPPLEMENTARYFIELD\\*  properties (like \"PROJ\\_CUSTOM\\_SUPPLEMENTARYFIELD01\", etc).\n\nThe use of old identifiers is still possible for compatibility reasons, but they generate warnings and will be removed in the future.\n\nTherefore, please replace them with the new IDs to avoid problems in forthcoming Eplan versions:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n MultiLangString oMLS = oProject.Properties.PROJ_CUSTOM_SUPPLEMENTARYFIELD01;             // Old code, generates warning\n MultiLangString oMLS = oProject.Properties[\"EPLAN.Project.UserSupplementaryField1\"];     // New code\n \n m_oTestProject.Properties.FUNC_ARTICLE_CUSTOM_SUPPLEMENTARYFIELD01[1] = strTestValue;     // Old code, generates warning:\n ArticleReference oArticleReference = oProject.ArticleReferences[0];                       // New code\n oArticleReference.Properties[\"EPLAN.PartRef.UserSupplementaryField1\"] = strTestValue;\n oArticleReference.StoreToObject();\n ``` | |\n\n### Accessing user-defined properties through ArticleReference parent object\n\nIn the case of an  ArticleReference  object, when accessing a user-defined property through a parent  ArticleReference, it is necessary to add the  EPLAN.ArticleRef.  prefix to its identifying name. In addition, an index must be provided to indicate the position of the  ArticleReference  in the parent object.\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n var propertyValue1 = oArticleReference.Properties[\"UserProperty.1\"].ToString();  // Accessing user-defined property from ArticleReference\n var propertyValue2 = oArticleReference.Parent.Properties[\"EPLAN.ArticleRef.UserProperty.1\"][1].ToString(); // Accessing user-defined property from a parent of the ArticleReference                                \n                                 \n ``` | |"
    },
    {
        "source": "Locking.md",
        "path": "/User Guide/API DataModel",
        "title": "Locking",
        "content": "In computer science, locking is a synchronization mechanism for enforcing limits on access to a resource in a multi-threaded environment (multiple-user environment). Locks are one way of enforcing concurrency control policies.\n\nIn Eplan API, the term \"**locking an object**\" means to set an object reference to a state, where it can be edited by the current user / process, whereas no other user / process can edit it. In general, the user can always get an object in an un-locked / read-only way, even if it is locked by another user. If even this read-only access is not possible, we speak of an \"**exclusive lock**\". Exclusive locking is necessary, if e.g. the structure of an Eplan project is changed or if a project is copied, renamed or a backup is done.\n\nPlease take into account that API locking only wraps P8 locking techniques. For further details about this functionality please refer to Eplan Help > Editing and Managing Project > Multi-user Operation chapter of P8 help.\n\n### What can be locked \"automatically\"?\n\n* **All project data** â This can be done by getting the project from the  SelectionSet  (in add-ins) or by opening it via the  ProjectManager. This depends on the  LockProjectByDefault  property, which is set to \"true\" by default. Also getting the selected project by the  HeServices.SelectionSet.GetCurrentProject  method locks the project (and its data) completely. Please note that read-only access is still possible from other P8 instances.\n* **Exclusive project locking** â This is done by setting the  USER.TrDMProject.OperationMode.OpenProjectsExclusive  setting to \"true\" before opening the project. As mentioned above, some project-wide operations require such an exclusive lock of a project, where it can be used by only one single P8 instance.\n* **Selected elements** â This is possible by setting the  SelectionSet.LockSelectionByDefault  property  to \"true\". By default, the option is enabled (set to \"true\"), so when getting selected items of a project, they can be changed in the API without setting this property.\n\n### SafetyPoint\n\nThe  SafetyPoint  class provides automatic locking of data model objects. The mechanism is enabled from the time a  SafetyPoint  object is created until it is distroyed, so it is recommended to use it with the  using  keyword:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n var project = new ProjectManager {LockProjectByDefault = false}.OpenProject(@\"$(MD_PROJECTS)\\EPLAN-DEMO.elk\");\n // View placement '8' (on page =EB3+ETM/4)\n ViewPlacement viewPlacement8 = project\n .Pages42]\n .AllFirstLevelPlacements\n .OfType<ViewPlacement>()\n .FirstOrDefault(item => item.Properties.DMG_VIEWPLACEMENT_DESIGNATION.ToString() == \"8\");\n using (SafetyPoint safetyPoint = SafetyPoint.Create())\n {               \n     Console.WriteLine(viewPlacement8.IsLocked);     // False\n     viewPlacement8.Scale = 44.44;                   // Set another scale\n     Console.WriteLine(viewPlacement8.IsLocked);     // True                  \n     safetyPoint.Commit();                           // Necessary, otherwise changes are rolled back\n }\n Console.WriteLine(viewPlacement8.IsLocked);         // Again false\n ``` | |\n\n\"Automatic\" means that they are locked internally before any change is made and unlocked after  SafetyPoint  is disposed of. This way is recommended when you need to lock as little as possible and it is not clear which objects need to be locked to perform a change. After the SafetyPoint block, please call the  Commit  method, otherwise the changes will be rolled back.\n\n### What is a LockingStep?\n\nA  LockingStep  is an object used to automatically unlock API resources (such as projects, functions, etc). There are 2 ways to create this object:\n\n* **Explicitly** â Must be done in modeless dialog boxes and in offline API applications:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n using(LockingStep oLockingStep = new LockingStep())\n {\n    ....\n }\n ``` | |\n\nWhen there is necessary access to some resources and the LockingStep is not created, an exception will be thrown (NoLockingStepException).\n\n* **P8 framework a****ctions** **and scripts**\n\nAnyway, there is no \"Unlock\" method in any data model class. The  LockingStep  class remembers all locks set during its lifespan and releases them when the LockingStep is being disposed. This guarantees that objects are released, even if an exception was thrown within the block.\n\nIn rare cases, however, it may be necessary to switch off  LockingStep  creation (manual or automatical). This can be done using the  PauseManualLock()  and  ResumeManualLock()  methods of the  LockingVector  class. Please use them only in exceptional cases, i.e. when it is necessary to \"manually\" decide what to lock instead of relying on the P8 framework (see below).\n\n### Manual locking mode\n\nIn addition to the automatic locking mechanism, it is also possible to call locking methods directly on the required objects. This low-level type of locking can be used concurrently with \"automatic\" locking or as the only locking.\n\n* **Locking single StorableObject** â This is done by calling  LockObject  on the required object. Please note that only properties directly connected with objects can be locked this way (such as internal / normal properties, sub-functions or sub-placements are excluded).\n\n* **Locking all placements of a page in exclusive mode** â This can be done by calling  Page::LockAllObjects. Please consider that it is different than calling  Page::LockObject, which locks only properties of a page.\n\n* **Locking all objects of a project** â This can be done with  Project::LockAllObjects.\n\n* **Locking all objects of a device** â This is done with  Function::LockDevice. Calling this method also locks all functions placed on the same page as functions of a device.\n\n### Guideline to Locking of data model objects\n\nIf you don't need to mind multiple-user issues, e.g. when creating a new project with your own schematics generator, you should always lock the entire project. The project is locked by default when it is opened or created using the respective methods (OpenProject(...)  /  CreateProject(...)) of the  ProjectManager  class in  DataModel. Also, getting the selected project through the method  GetCurrentProject(...)  in the  HeServices.SelectionSet  class, will lock the project completely.\n\nIf you need to consider other users or processes working on the same project, you should lock **as little of the project data as possible**. To do this, you should first get, open, or create the project in an unlocked way. This can be done by setting the  LockProjectByDefault  property of a  ProjectManager  or the  SelectionSet  object to \"false\". With this unlocked project object, you simply lock the object (e.g. page) you want to change. Also mind that the locks are only released when disposing the respective LockingSteps, so set as few locks as possible in one locking step.\n\n### Differences between add-ins and offline API\n\nThe main difference between locking in add-ins and offline API applications is that the  Execute(...)  method of the  IEplAction  interface, is already surrounded by a locking step, while the API programmer needs to implement the locking step(s) in an offline application by himself.\n\n### API [Verifications](Verifications.html)\n\nVerification methods called by the Eplan framework are not surrounded by a locking step. If this is necessary, the user needs to implement it himself. Please have in mind that the creation of a locking step inside a verification method has a great influence on the performance of the entire check. Therefore, this should be done as little as possible.\n\n### Locking in service methods (HeServices/[Actions)\n\nAll service functionality to which you pass a project resource as a string parameter will always automatically lock / unlock that resource. If locking is not possible due to multi-user issues, an exception will be thrown. This applies to all command line actions that take only string parameters. The  HeServices  classes have most of the time method overloads with both string-based and object passed parameters. If you pass an object to the method, you need to take care for the locking.\n\n### Determining which users currently have the project open\n\nTo find out which users are currently working on the project, the  Project  class provides a  CurrentUsers  property that returns an array of  UserInfo  structures of the users who are accessing the project."
    },
    {
        "source": "NavigatingTheDatamodel.md",
        "path": "/User Guide/API DataModel",
        "title": "NavigatingTheDatamodel",
        "content": "There are two distinct methods of navigating through the Eplan project. The most common is to use the navigation properties which you can find on each data model object. In addition to that, there is the  DMObjectsFinder  class. By its methods, you can retrieve filtered lists (arrays) of certain objects in a project.\n\n### Navigating through properties\n\nRegardless of the underlying implementation of Eplan, the entire data model can be seen as a graph, with one to many and many to many relationships between the various object types in the graph. For example, a project has a one-to-many relationship with its pages. These relationships can be thought of as if they were simple basic arrays. Each of the objects of the Eplan data model have a set of properties, which return such arrays of dependant objects, as you can see in the topic \"Data model overview](DataModelHierarchyOverview.html)\".\n\nOne of the most common requirements of a program is to loop through all of the objects in an array performing some function or other on each element. As an example, the class  Eplan.EplApi.DataModel.Page  has the following navigation properties, with each of which you can loop over a different collection of objects:\n\n* AllFirstLevelPlacements\n* AllGraphicalPlacements\n* AllPlacements\n* BoxedDevices\n* Functions\n* PLCs\n* PlugStrips\n* TerminalStrips\n\nThere are also navigational properties with a one-to-one relationship, like  Page.Project.\n\nThe following code snippet shows how to loop over the functions on a page and get the name of the function:\n\n* [C#](#i-tab-content-CS)\n* [VB](#i-tab-content-VB)\n\n```\n\n// Get an array with all functions on the page\nFunction[] arrFuncs = oPage.Functions;\n// Loop over the functions and get their names\nforeach(Function oF in arrFuncs)\n{\n    string sName = oF.Name;\n    // Do something with the Name\n}\n```\n\n```\n\n' Get an array with all functions on the page\nDim arrFuncs As Function() = oPage.Functions\n' Loop over the functions and get their names\nDim oF As Function\nFor Each oF In  arrFuncs\n   Dim sName As String = oF.Name\n   ' Do something with the Name\nNext\n```\n\n```\n\n \n```\n\nYou can even filter these lists before getting them. The following example sets a filter to get only the functions that have the function category \"PLUG\".\n\n* [C#](#i-tab-content-CS)\n* [VB](#i-tab-content-VB)\n\n```\n\n// Set filter category to \"PLUG\"\noPage.Filter.resetFilter();\noPage.Filter.Category = Function.Enums.Category.PLUG;\n// Get all functions filtered by category=PLUG\nFunction[] arrFuncs = oPage.Functions;\nforeach(Function oF in arrFuncs)\n{\n    string sPlugName = oF.Name;\n    // Do something with the Name\n}\n```\n\n```\n\n' Set filter category to \"PLUG\"\noPage.Filter.resetFilter()\noPage.Filter.Category = Function.Enums.Category.PLUG\n' Get all functions filtered by category=PLUG\nDim arrFuncs As Function() = oPage.Functions\nDim oF As Function\nFor Each oF In  arrFuncs\n   Dim sPlugName As String = oF.Name\n   ' Do something with the Name\nNext\n```\n\nPlease mind that using navigation properties in order to set properties of an object in a nested way (e.g.  oRectangle.Pen.ColorId = 5) will not work. In the example you need to first get the  Pen  object from the rectangle and then change the color ID and afterwards set the changed  Pen  object back to the  Rectangle  class.\n\n### DMObjectsFinder\n\nThe  DMObjectsFinder  object is always initialized with a project. Starting with the project, it can get nearly any list of objects of a given type. Before getting the lists, they can be filtered by different means like a distinct set of properties. The following example gets all functions with a given device tag (\"name\"):\n\n* [C#](#i-tab-content-CS)\n* [VB](#i-tab-content-VB)\n\n```\n\nstring strFuncName = \"=AP+PT1-X4\";\n// Initialize the DMObjectsFinder with a project\nDMObjectsFinder oFinder = new DMObjectsFinder(m_oProject);\nFunctionsFilter oFunctionsFilter = new FunctionsFilter();\noFunctionsFilter.ExactNameMatching = true;\noFunctionsFilter.Name = strFuncName;\n// Get function with given name from project\nFunction[] arrFuncs = oFinder.GetFunctions(oFunctionsFilter);\n\nforeach(Function oF in arrFuncs)\n{\n    Console.Out.WriteLine(\"Function name: '{0}'\", oF.Name);\n}\n```\n\n```\n\nDim strFuncName As String = \"=AP+PT1-X4\"\n' Initialize the DMObjectsFinder with a project\nDim oFinder As New DMObjectsFinder(m_oProject)\nDim oFunctionsFilter As New FunctionsFilter()\noFunctionsFilter.ExactNameMatching = True\noFunctionsFilter.Name = strFuncName\n' Get function with given name from project\nDim arrFuncs As Function() = oFinder.GetFunctions(oFunctionsFilter)\n\nDim oF As Function\nFor Each oF In  arrFuncs\n   Console.Out.WriteLine(\"Function name: '{0}'\", oF.Name)\nNext oF\n```\n\n```\n\n \n```\n\n### Search class\n\nThe  Eplan.EplApi.HEServices.Search  class offers another way for finding objects in a project. The class corresponds to the dialogs Find > Find... and Find > Show Results... in the GUI of Eplan. As in this dialogs, you have two result lists to store your search results.\n\nUsing this class, you can search for any string in a specified range of objects. The following example demonstrates the usage of the  Search  class.\n\n* [C#](#i-tab-content-CS)\n* [VB\n\n```\n\nSearch oSearch = new Search();\n// Set all needed settings\noSearch[Search.Settings.CaseSensitive] = false;\noSearch[Search.Settings.WholeTexts] = false;\noSearch[Search.Settings.DeviceTag] = true;\noSearch[Search.Settings.AllProperties] = false;\noSearch[Search.Settings.Texts] = false;\noSearch[Search.Settings.PageData] = false;\noSearch[Search.Settings.ProjectData] = false;\noSearch[Search.Settings.GraphicPages] = false;\noSearch[Search.Settings.EvalutionPages] = false;\noSearch[Search.Settings.NotPlaced] = false;\n\noSearch.ClearSearchDB(oProject);\nif (oPage != null)\n{\n    // Either search in a page...\n    oSearch.Page(oPage, Name);\n}\nelse\n{\n    // ... or search the complete project\n    oSearch.Project(oProject, Name);\n}\nStorableObject[] oResults = oSearch.GetAllSearchDBEntries(oProject);\n```\n\n```\n\nDim oSearch As Search = New Search\noSearch.SearchDatabaseNr = 0\noSearch.ClearSearchDB(oProject, 0)\noSearch(Search.Settings.AllProperties) = True\noSearch(Search.Settings.CaseSensitive) = False\noSearch(Search.Settings.DeviceTag) = True\noSearch(Search.Settings.LogicPages) = True\noSearch(Search.Settings.GraphicPages) = False\noSearch(Search.Settings.EvalutionPages) = False\noSearch(Search.Settings.NotPlaced) = False\noSearch(Search.Settings.WholeTexts) = False\noSearch(Search.Settings.PageData) = True\noSearch(Search.Settings.ProjectData) = True\noSearch.Project(oProject, txtSearch.Text)\nDim oFoundObjects As StorableObject() = oSearch.GetAllSearchDBEntries(oProject, 0)\n```"
    },
    {
        "source": "Transactions.md",
        "path": "/User Guide/API DataModel",
        "title": "Transactions",
        "content": "The term \"**transaction**\" refers to a set of operations that form a working unit in the Eplan project database. They can be executed only all together or not a single one. This grouping ensures data integrity and consistency even in the case of a system failure. For example:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n using (Transaction oTransaction = new TransactionManager().CreateTransaction())\n {\n      oFunction1.Name = \"=+-NewTestFunctionName_1\";\n      oFunction2.Name = \"=+-NewTestFunctionName_2\";\n      oTransaction.Commit();\n }\n ``` | |\n\nSo if the execution of the code is aborted before the  Commit()  was called, the \"Name\"properties remain unchanged.\n\n### Nesting API transactions\n\nIt is also possible to nest transactions in API. For example:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n oFunction.Name = \"oFunction0\";\n using (Transaction oTransaction1 = new TransactionManager().CreateTransaction())\n {\n      using(Transaction oTransaction2 = new TransactionManager().CreateTransaction())\n      {\n           oFunction.Name = \"Function2\";\n           oTransaction2.Commit();\n      }\n      Console.Writeline(oFunction.Name) // Will be \"oFunction2\" returned,\n      oFunction.Name = \"Function1\";\n      Console.Writeline(oFunction.Name) // Will be \"oFunction1\" returned,\n }\n Console.Writeline(oFunction.Name) // Will be \"oFunction0\" returned, because outer transaction oTransaction1 wasn't committed\n ``` | |\n\nIn this case, an inner transaction is treated as one of the operations of the outer transaction.\n\n### Internal Eplan and API transactions\n\nWe distinguish two types of transaction:\n\n**1. API transactions** â They are opened explicitly or implicitly from API. Explicit opening is done by creating a  Transaction  object from the  TransactionManager:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n Transaction oTransaction = new TransactionManager().CreateTransaction();\n ``` | |\n\n```\n\n\n  \n```\n\n Implicit opening is done by creating the same  Transaction  object by some Eplan operations, (like creating new objects, changing a property) in a way that is invisible for API user\n\n**2. Eplan internal transactions** â They are started inside of the Eplan framework, so they are opened and closed implicitly.\n\n### Using API transactions and internal transactions at the same\n\nUsing API transactions and internal transactions at the same time can cause problems. So please consider the following rules to avoid them:\n\n* API transaction within an internal transaction\n\n!](images/Transaction_API_in_internal.jpg)\n\nAn API transaction may always be opened within an internal transaction. The API developer has a possibility to check whether an API transaction is opened using the following property:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n   TransactionManager::IsTransactionRunning\n ``` | |\n\nA commit of an API transaction does not result in a change to the database and is not saved in the database until the termination of the internal transaction. Aborting an API transaction does not abort an internal transaction, but throws an exception because an internal transaction is running and cannot be aborted.\n\n* An internal transaction within an API transaction\n\n![\n\nAn internal transaction may always be opened within an API transaction. The API developer has the possibility to check whether an internal transaction is opened using the following property:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n TransactionManager::IsEplanTransactionRunning\n ``` | |\n\n```\n\n  \n```\n\nIf an internal transaction is to be opened, the API transaction becomes committed. If an internal transaction is again closed (Abort  or  Commit), then the API transaction will be started again. The API transaction class also has a property that indicates whether an internal transaction was opened and closed within the API transaction:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n Transaction::IsImplicitEplanTransactionCommited\n ``` | |"
    },
    {
        "source": "WorkingWithParts.md",
        "path": "/User Guide/API DataModel",
        "title": "WorkingWithParts",
        "content": "As with other master data, all the information about parts that is required to work independently with a project is stored in the project itself. There are always two parts databases (redundant data management): the central parts database for all projects and the project internal parts database, which only contains parts placed into the project. The central parts database (system parts) can be either an Eplan database (\\*.alk) or an SQL database. The following image represents this situation:\n\n![](images/Parts1.svg)\n\nWithin a project, the parts from the parts project database are referenced, i.e. a part that is used 10 times â by a  Function, a  Connection, or as a project part by the project itself - is stored only once, and is referenced 10 times in the project (via the part number). Parts data can therefore be easily changed or synchronized via the central parts database.\n\n### How does it work in API?\n\nIn the P8 API, the part stored in the internal parts database of the project is represented by the  Eplan.EplApi.DataModel.Article  class. The reference to a particular part on a  Function, a  Connection  or the  Project, is represented by the  Eplan.EplApi.DataModel.ArticleReference  class. You can get the  ArticleReference  objects through the  ArticleReferences  property on the above-mentioned classes.\n\nIn order to add a new reference to a part, you can use the  AddArticleReference  methods on  Project,  Function  or  Connection. **Please mind**, that  AddArticleReference  just adds the reference to a part. An  Article  is also added to the object, but only if the referenced part already exists in the system or project database.\n\nIn general, articles stored in a P8 project are created explicitly.Therefore you use the method  void Article.Create(string partnr, string variant). This method creates an  Article  object. If there is already a part (Article) with that  partnr  and  variant, an exception will be thrown. After calling the  Create  method, the  Article  object is completely empty. Only the part number and the variant are set, but no other property is filled.\n\nTo fill an  Article  with properties of the master data, please use the explicit function  bool Article::LoadFromMasterdata. Using the current part data source, all (the configured) article data of the master data is loaded to the embedded part. If the article (partnr  +  variant) can't be found in the master data,  Article::LoadFromMasterdata  will return \"false\". On Success \"true\" is returned.\n\n### Adding Parts and referencing them\n\nThe following example shows how to add and reference an  Article  in Project, Function and Connection:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n     Article oArticle = new Article();\n     oArticle.Create(oProject, \"KUKA.KR30-3\", \"1\");            // An empty Article is created in a Project\n     bool bResult = oArticle.LoadFromMasterdata();             // Article is filled with data from system parts database\n \n     oProject.AddArticleReference(\"KUKA.KR30-3\", \"1\", 1);      // Reference to the Article is created on a Project\n     oFunction.AddArticleReference(\"KUKA.KR30-3\", \"1\", 1);     // Reference to the Article is created on a Function\n     oConnection.AddArticleReference(\"KUKA.KR30-3\", \"1\", 1);   // Reference to the Article is created on a Connection\n ``` | |\n\n```\n\n\n```"
    },
    {
        "source": "PCTLoop.md",
        "path": "/User Guide/API DataModel/API Pre-planning",
        "title": "PCTLoop",
        "content": "The  PCTLoop  class represents the PCT loops in a project. They are logical units to measure or control.\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n SegmentDefinition oSegmentDefinition = m_oTestProject.GetSegmentDefinition(\"Eplan.PCT.Loop\");\n PCTLoop oPCTLoop  = PCTLoop.Create(oSegmentDefinition) as PCTLoop;\n ``` | |\n\nIn the GUI, they are visible in Pre-planning navigator:\n\n![](images/PCTLoop.jpg)"
    },
    {
        "source": "Pre-planning_macro.md",
        "path": "/User Guide/API DataModel/API Pre-planning",
        "title": "Pre-planning_macro",
        "content": "For a Pre-planning module, the new  PrePlanningMacro  class has been created to represent macros.\n\nThese macros are created as follows:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n string strMacroPath = m_oDir.FullName + \"\\\\TestMacro.emv\";\n PrePlanningMacro oPrePlanningMacro = new PrePlanningMacro();\n oPrePlanningMacro.Create(new[] {oPlanningSegment1, oPlanningSegment2}, strMacroPath, oMultiLangString);\n ``` | |\n\n                   \n\nInserting macros requires parameters such as the parent planning segment, the path to macro and the project object:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n string strMacroPath = m_oDir.FullName + \"\\\\TestMacro.emv\";\n StorableObject[] arrInsertedPlaObjects = new Insert().PrePlanningMacro(strMacroPath, m_oTestProject, oPlanningSegment1);\n ``` | |"
    },
    {
        "source": "SegmentDefinition.md",
        "path": "/User Guide/API DataModel/API Pre-planning",
        "title": "SegmentDefinition",
        "content": "The  SegmentDefinition  class represents segment definition objects.\n\nThey define the behavior and properties of a segment.\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n SegmentDefinition oSegmentDefinition = new SegmentDefinition();\n oSegmentDefinition.Create(\"test_001\", m_oTestProject.SegmentDefinitions0]);\n ``` | |\n\nIn the GUI, they are visible in the Segment templates navigator:\n\n!["
    },
    {
        "source": "SegmentPlacement.md",
        "path": "/User Guide/API DataModel/API Pre-planning",
        "title": "SegmentPlacement",
        "content": "The  SegmentPlacement  class represents segment objects on a 2D page. Because of this, the class inherits from  SymbolReference.\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n // Prepare a segment\n StructureSegment oStructureSegment = StructureSegment.Create(m_oTestProject.SegmentDefinitions0]) as StructureSegment;\n oStructureSegment.Name = \"test1c\";\n \n // Prepare a page\n Page oNewPage = new Page(m_oTestProject, DocumentTypeManager.DocumentType.Planning, new PagePropertyList());\n oNewPage.Name = \"SegmentPlacement_Test001c\";\n           \n // Create SegmentPlacement\n SegmentPlacement oSegmentPlacement = new SegmentPlacement();\n oSegmentPlacement.Create(oStructureSegment, oNewPage);\n ``` | |\n\nSegmentPlacements  are visible in the GED, for example:\n\n!["
    },
    {
        "source": "SegmentTemplate.md",
        "path": "/User Guide/API DataModel/API Pre-planning",
        "title": "SegmentTemplate",
        "content": "The  SegmentTemplate  class represents segment template objects. They contain common values of some properties.   \nThe  Segment  inherits these values from a template.\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n SegmentTemplate oSegmentTemplate = new SegmentTemplate();\n oSegmentTemplate.Create(oSegmentDefinition);\n oSegmentTemplate.Name = \"SegmentTemplate_006\";\n ``` | |\n\nIn the GUI, they are visible in the Segment templates navigator:\n\n![](images/segment_template.jpg)"
    },
    {
        "source": "StructureSegment.md",
        "path": "/User Guide/API DataModel/API Pre-planning",
        "title": "StructureSegment",
        "content": "The  StructureSegment  class represents structure segment objects. They are used to represent a part of the project structure.\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n SegmentDefinition oSegmentDefinition = m_oTestProject.GetSegmentDefinition(\"Eplan.Base.StructureNode\");\n StructureSegment oStructureSegment = StructureSegment.Create(m_oTestProject.SegmentDefinitions0]) as StructureSegment;\n oStructureSegment.Name = \"test1b\";\n ``` | |\n\n In the GUI, they are visible in Pre-planning navigator:\n\n!["
    },
    {
        "source": "3D_macros.md",
        "path": "/User Guide/API DataModel/API Pro Panel",
        "title": "3D_macros",
        "content": "The standard  WindowMacro  class is used to represent both 3D and 2D window macros. It has been extended with methods that cover 3D functionality.\n\nCreating 3D window macros:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n MultiLangString oMultiLangString = new MultiLangString();\n oMultiLangString.AddString(ISOCode.Language.L_en_US, \"Window macro 3D description\");\n string strWindowMacro3DFilePath = m_oTestProject.ProjectDirectoryPath + \"\\\\test_window_macro3D.ema\";\n \n WindowMacro oWMacro = new WindowMacro();\n oWMacro.Create(strWindowMacro3DFilePath, 0, new Placement3D[] { oComponent1, oComponent2, oComponent3 }, true, oMultiLangString);\n ``` | |\n\n```\n\n                    \n```\n\nInserting:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n // Preparing transformation \n Matrix3D oMatrix = new Matrix3D(); \n Quaternion oQaternion = new Quaternion(new Vector3D(1.0, 1.0, 1.0), 0.2); \n oMatrix.Rotate(oQaternion); \n // Preparing WindowMacro object \n string strWindowMacroName = \"c:\\\\SIE.3LD9 284-1B.ema\"; \n WindowMacro oWMacro = new WindowMacro(); \n oWMacro.Open(strWindowMacroName, m_oTestProject, 0); \n // Insert macro into an InstallationSpace \n Insert3D oInsert3D = new Insert3D(); \n StorableObject[] arrStorableObjects = oInsert3D.WindowMacro(oWMacro, nVariant, oInstallationSpace, \n oMatrix, Insert3D.MoveKind.Absolute, WindowMacro.Enums.NumerationMode.None); \n ``` | |\n\n```\n\n            \n```"
    },
    {
        "source": "Area.md",
        "path": "/User Guide/API DataModel/API Pro Panel",
        "title": "Area",
        "content": "The  Area  is a part of the mounting surface on which 3D placements can not be placed. As soon as a parts placement is put into a restricted placing area, an error is generated (by verification no. 026012).\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n MountingPanel oMountingPanel = new MountingPanel();\n oMountingPanel.Create(m_oTestProject, 500.0, 500.0, 2.0);\n oMountingPanel.Parent = m_oInstallationSpace;\n MultiLangString oFunctionDefinitionName = new MultiLangString();\n \n oFunctionDefinitionName.AddString(ISOCode.Language.L_en_US, \"Restricted mounting area\");\n MultiLangString oGroup = new MultiLangString();\n oGroup.AddString(ISOCode.Language.L_en_US, \"Restricted area\");\n FunctionDefinition oFunctionDefinition = new FunctionDefinition(m_oTestProject, Function.Enums.Category.AreaDefinition, oGroup, oFunctionDefinitionName); Area oArea = new Area();\n oArea.Create(m_oTestProject, oFunctionDefinition);\n oArea.Parent = oMountingPanel.Planes0];\n oArea.Size = new PointD(200.0, 250.0);\n ``` | |\n\n!["
    },
    {
        "source": "BusBar.md",
        "path": "/User Guide/API DataModel/API Pro Panel",
        "title": "BusBar",
        "content": "The  BusBar  class represents \"Busbar (bending)\" items in Pro Panel.\n\nBusBar  object using an article with a graphical macro.\n\n* C#](#i-tab-content-31955c4d-15af-4727-a6cb-0968ff602223)\n\n```\n\n// InstallationSpace\nvar oInstallationSpace = new InstallationSpace();\noInstallationSpace.Create(oProject, \"BusBar_InstallationSpace_1\");\n\n// CopperBundle\nvar copperBundle = CopperBundle.Create(oProject, new List<Placement3D>());\ncopperBundle.Parent = oInstallationSpace;\ncopperBundle.Properties.COPPERBUNDLE_DESIGNATION = \"Connector kit below L1_3D 1 -BusBar\";\n\n// BusBar\nvar article = \"Connector kit below L1_3D\";\nvar variant = \"1\";\nBusBar.Create(copperBundle, article, variant);\n```\n\n![\n\n  \n\nBusBar  object with more parameters, e.g. bending radius and a path to a  \\*.fp1  file containing copper form.\n\n* C#\n\n```\n\n// InstallationSpace\nvar oInstallationSpace = new InstallationSpace();\noInstallationSpace.Create(oProject, \"BusBar_InstallationSpace_2\");\n\n// CopperBundle\nvar copperBundle = CopperBundle.Create(oProject, new List<Placement3D>());\ncopperBundle.Parent = oInstallationSpace;\ncopperBundle.Properties.COPPERBUNDLE_DESIGNATION = \"RIT.9684004_V - BusBar\";\n\n// BusBar\nvar fp1Path = \"D:\\\\winkel.fp1\";\nvar article = \"RIT.9684004_V\";\nvar variant = \"1\";\nvar bendingRadius = 5.0;\nvar listOfAdditionalObjects = new List<Placement3D>();\nBusBar.Create(oProject, article, variant, fp1Path, bendingRadius, copperBundle, listOfAdditionalObjects);\n```\n\n!](images/ProPanelAPI/BusBar_RIT.jpg)\n\nBusBar with flat bendings set by API\n\n* [C#\n\n```\n\n                var busBar = BusBar.Create(testProject, \"RIT.3589005\", \"1\",\"c:\\\\temp\\\\linie.fp1\",\n                    5.0, copperBundle, additionalObjects, 0);\n                var points = new]\n                {\n                    new PointD3D( 0.0, 0.0, 0.0),   //(start)\n                    new PointD3D( 0.0, 47.0, 0.0),  // 1st bending point\n                    new PointD3D( 0.0, 102.0, 0.0), // 2nd bending point\n                    new PointD3D( 0.0, 245.0, 0.0), // 3rd bending point\n                    new PointD3D( 0.0, 300.0, 0.0), //(end)\n                };\n                // Set bending points coordinates\n                busBar.BendingPoints = points;\n\n                // Set bending angles\n                var degreesToRadiansMultiplier = Math.PI / 180.0;\n                busBar.ChangeSegmentAngle(-45.0 * degreesToRadiansMultiplier, 1, 5); \n                busBar.ChangeSegmentAngle(45.0  * degreesToRadiansMultiplier, 2, 5);\n                busBar.ChangeSegmentAngle(-90.0 * degreesToRadiansMultiplier, 3, 5);\n```\n\nBusBar with edgewise bendings set by API\n\n* [C#\n\n```\n\n                var busBar = BusBar.Create(m_oTestProject, \"RIT.3589005\", \"1\",\"c:\\\\temp\\\\linie.fp1\",\n                    5.0, copperBundle, additionalObjects, BusBar.Enums.BendingType.Edgewise);\n                var points = new[]\n                {\n                    new PointD3D( 0.0, 0.0, 0.0),   //(start)\n                    new PointD3D( 0.0, 47.0, 0.0),  // 1st bending point\n                    new PointD3D( 0.0, 102.0, 0.0), // 2nd bending point\n                    new PointD3D( 0.0, 245.0, 0.0), // 3rd bending point\n                    new PointD3D( 0.0, 300.0, 0.0), //(end)\n                };\n\n                // Set bending points coordinates\n                busBar.BendingPoints = points;\n\n                // Set bending angles\n                var degreesToRadiansMultiplier = Math.PI / 180.0;\n                busBar.ChangeSegmentAngle(-45.0 * degreesToRadiansMultiplier, 1, 5, BusBar.Enums.BendingType.Edgewise);\n                busBar.ChangeSegmentAngle(45.0 * degreesToRadiansMultiplier, 2, 5, BusBar.Enums.BendingType.Edgewise);\n                busBar.ChangeSegmentAngle(-90.0 * degreesToRadiansMultiplier, 3, 5, BusBar.Enums.BendingType.Edgewise);\n```"
    },
    {
        "source": "BusBarSystem.md",
        "path": "/User Guide/API DataModel/API Pro Panel",
        "title": "BusBarSystem",
        "content": "BusBarSystem  class represent \"Busbar system\" items in Pro Panel.\n\n### \n\n* C#](#i-tab-content-fb671f88-b18f-41a0-8344-e50d8cfc933a)\n\n```\n\n// InstallationSpace\nvar oInstallationSpace = new InstallationSpace();\noInstallationSpace.Create(oProject, \"BusBarSystem_InstallationSpace\");\n\n// CopperBundle\nvar copperBundle = CopperBundle.Create(oProject, new List<Placement3D>());\ncopperBundle.Parent = oInstallationSpace;\ncopperBundle.Properties.COPPERBUNDLE_DESIGNATION = \"RIT.BBS.RiLine60_1_ECu15x05_2400 - BusBarSystem\";\n\n// BusBarSystem\nvar oBusBarSystem = new BusBarSystem();\nvar article = \"RIT.BBS.RiLine60_1_ECu15x05_2400\";\nvar variant = \"1\";\nvar numberOfHolders = 3;\nvar length = 240;\noBusBarSystem.Create(oProject, article, variant, numberOfHolders, length);\noBusBarSystem.Parent = copperBundle;\n```\n\n!["
    },
    {
        "source": "Cabinet.md",
        "path": "/User Guide/API DataModel/API Pro Panel",
        "title": "Cabinet",
        "content": "```\n\n \n```\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n Cabinet oCabinet = new Cabinet();\n oCabinet.Create(oTestProject, \"TS 8886.500\", \"1\");\n oCabinet.Parent = oInstallationSpace;\n ``` | |\n\n```\n\n\n```\n\n![](images/ProPanelAPI/Cabinet.jpg)"
    },
    {
        "source": "Component.md",
        "path": "/User Guide/API DataModel/API Pro Panel",
        "title": "Component",
        "content": "The  Component  class represents various Pro Panel items, such as doors, frame profiles, accessories, etc.\n\nTerminal:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n InstallationSpace oInstallationSpace = new InstallationSpace();\n oInstallationSpace.Create(m_oTestProject, \"Terminal installation space\");\n \n Component oTerminal = new Component();\n oTerminal.Create(m_oTestProject, \"PXC.3022276\", \"1\");\n oTerminal.Parent = oInstallationSpace;\n ``` | |\n\n!](images/ProPanelAPI/Terminal.jpg)\n\nPlug:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n InstallationSpace oInstallationSpace = new InstallationSpace();\n oInstallationSpace.Create(m_oTestProject, \"Plug installation space\");\n \n Component oComponent = new Component();\n oComponent.Create(m_oTestProject, \"Plug.3-pole+PE\", \"1\");\n oComponent.Parent = oInstallationSpace;\n ``` | |\n\n![](images/ProPanelAPI/Plug.jpg)\n\nPower supply:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n InstallationSpace oInstallationSpace = new InstallationSpace();\n oInstallationSpace.Create(m_oTestProject, \"Power supply unit installation space\");\n Component oComponent = new Component();\n oComponent.Create(m_oTestProject, @\"PXC.2938581\", \"1\");\n oComponent.Parent = oInstallationSpace;\n ``` | |\n\n!["
    },
    {
        "source": "Connection3D.md",
        "path": "/User Guide/API DataModel/API Pro Panel",
        "title": "Connection3D",
        "content": "The  Connection3D  class represents a 3D connection between two  Placement3D  objects.\n\nIt inherits from the \"normal\" Connection.\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n         \n // Creating a 3D connection that exists between two 3D functions\n Connection3D oConnection3DNoConnectionPoints = new Connection3D();\n oConnection3DNoConnectionPoints.Create(oFunction3D_1, oFunction3D_2);\n \n // Creating a 3D connection using connection point indexes\n Connection3D oConnection3D = new Connection3D();\n oConnection3D.Create(oComponent3D_1, 1, oComponent3D_2, 2);\n \n // Route connections\n List<StorableObject> olist = new List<StorableObject>();\n olist.Add(oPlacement3D_1);\n olist.Add(oPlacement3D_2);\n ConnectionService3D oConnectionService3D = new ConnectionService3D();\n oConnectionService3D.RouteConnections(olist);\n ``` | |\n\n![](images/ProPanelAPI/Connection3D.jpg)"
    },
    {
        "source": "Creating_3D_objects.md",
        "path": "/User Guide/API DataModel/API Pro Panel",
        "title": "Creating_3D_objects",
        "content": "Creating most 3D objects is done by using an article number and variant. The example below shows how to create and place a cabinet in the  InstallationSpace.\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n Cabinet oCabinet = new Cabinet();\n oCabinet.Create(oProject, \"TS 8886.500\", \"1\");\n // Parent will be set to installation space\n oCabinet.Parent = oProject.InstallationSpaces[0];\n // Create identity matrix\n System.Windows.Media.Media3D.Matrix3D oMatrix = new System.Windows.Media.Media3D.Matrix3D();\n // Change the location to (100, 150, 0)\n oMatrix.Transform(new System.Windows.Media.Media3D.Point3D(100, 150, 0));\n oCabinet.AbsoluteTransformation = oMatrix;\n ``` | |"
    },
    {
        "source": "Drilling_Cut-out_in_GUI.md",
        "path": "/User Guide/API DataModel/API Pro Panel",
        "title": "Drilling_Cut-out_in_GUI",
        "content": "The  Drilling  class represents the opening in construction items such as mounting panels and sheets, that are drilled or manufactured by NC robots.\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n Drilling oDrillingHole = Drilling.CreateTapHole(oProject, 50.0, null);\n oDrillingHole.SetParent(oPlane, true);\n oDrillingHole.GetSourceMates(true)0].SnapTo(oPlane.GetTargetMates(true)[0] as PlaneMate, 0.0, 0.0, 0.0);\n \n Drilling oDrillingHexagon = Drilling.CreateHexagon(oProject, 75.0, null);\n oDrillingHexagon.SetParent(oPlane, true); oDrillingHexagon.GetSourceMates(true)[0].SnapTo(oPlane.GetTargetMates(true)[0] as PlaneMate, 40.0, 30.0, 50.0);\n ``` | |\n\n!["
    },
    {
        "source": "Duct.md",
        "path": "/User Guide/API DataModel/API Pro Panel",
        "title": "Duct",
        "content": "The  Duct  class represents ducts that hold cables in an organized manner and route them to the connected components.\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n MountingPanel oMountingPanel = new MountingPanel();\n oMountingPanel.Create(m_oTestProject, 500.0, 400.0, 2.0);\n oMountingPanel.Parent = m_oInstallationSpace;\n Plane oPlane = oMountingPanel.Planes0];\n Duct oDuct = new Duct();\n oDuct.Create(m_oTestProject, \"KK3060\", \"1\", 250.0);\n oDuct.Parent = oPlane;\n oDuct.FindSourceMate(\"M4\", true).SnapTo(oPlane.GetTargetMates(true)[0] as PlaneMate, 0.0, 20.0, 300.0);\n ``` | |\n\n!["
    },
    {
        "source": "Getting_3d_objects.md",
        "path": "/User Guide/API DataModel/API Pro Panel",
        "title": "Getting_3d_objects",
        "content": "Getting 3D objects\n\nThe  DMObjectsFinder  class was enhanced with methods for searching 3D objects.\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n // Searching 3D functions with the name '=EB3+ET1-U1'\n string str3DFunction = \"=EB3+ET1-U1\";\n Functions3DFilter oFunctions3DFilter = new Functions3DFilter();\n Function3DPropertyList oFunction3DPropertyList = new Function3DPropertyList();\n oFunction3DPropertyList.FUNC_FULLDEVICETAG = str3DFunction;\n oFunctions3DFilter.SetFilteredPropertyList(oFunction3DPropertyList);\n Function3D[] oFunctions3D = new DMObjectsFinder(m_oEplanDemoProject).GetFunctions3D(oFunctions3DFilter);\n // Searching 3D and 2D functions with the name '=EB3+ET1-Q1'\n FunctionsFilter oFunctionsFilter = new FunctionsFilter();\n oFunctionsFilter.ExactNameMatching = true;\n oFunctionsFilter.Name = \"=EB3+ET1-Q1\";\n Functions3DFilter oFunctions3DFilter = new Functions3DFilter();\n Function3DPropertyList oFunction3DPropertyList = new Function3DPropertyList();\n oFunction3DPropertyList.FUNC_FULLNAME = \"=EB3+ET1-Q1\";\n oFunctions3DFilter.SetFilteredPropertyList(oFunction3DPropertyList);\n IFunctionBase[] oAllWithTheSameName = new DMObjectsFinder(m_oEplanDemoProject).GetFunctions(oFunctionsFilter, oFunctions3DFilter);\n // Searching 3D placements\n Placements3DFilter oPlacements3DFilter = new Placements3DFilter();\n oPlacements3DFilter.Category = Function.Enums.Category.AreaDefinition;\n Placement3D[] oPlacements3D = new DMObjectsFinder(oProject).GetPlacements3D(oPlacements3DFilter);\n ``` | |\n\n```\n\n \n```"
    },
    {
        "source": "Import_export_3G_graphics.md",
        "path": "/User Guide/API DataModel/API Pro Panel",
        "title": "Import_export_3G_graphics",
        "content": "### Export\n\nExport of 3D graphics is possible to the  STEP  or the  VRML  format:\n\nExport3D::ProjectToStep                          â Exports all installation spaces from a project.\n\nExport3D::InstallationSpacesToStep  â Exports installation spaces.\n\nExport3D::ProjectToVrml                          â Exports all installation spaces from a project.\n\nExport3D::InstallationSpacesToVrml  â Exports installation spaces.\n\n### Import\n\nThe item data must be available in the common international  STEP  format (Standard for the Exchange of Product model data).\n\nFor each import, a new layout space is generated with the name of the imported  STEP  file.\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n InstallationSpace oInstallationSpace = new Import().Graphics3D(oProject, \"c:\\\\temp\\\\BK3100\\\\BK3xxx.stp\");\n ``` | |\n\n```\n\n\n```"
    },
    {
        "source": "Installaction_space.md",
        "path": "/User Guide/API DataModel/API Pro Panel",
        "title": "Installaction_space",
        "content": "The  InstallationSpace  represents a 3-dimensional space where objects can be located.\n\nIt is also a root node for other 3D objects in the Layout spaces navigator.\n\nThe following example shows how to create an  InstallationSpace:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n InstallationSpace oInstallationSpace = new InstallationSpace();\n oInstallationSpace.Create(oProject, \"InstallationSpace test\");\n ``` | |\n\n```\n\n \n```\n\nWe can retrieve existing  InstallationSpaces  from a project this way:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n InstallationSpace] arrInstallationSpace = oProject.InstallationSpaces;\n ``` | |\n\nIn the GUI it is called Layout space. It is independent of pages in a project.\n\n!["
    },
    {
        "source": "Mates.md",
        "path": "/User Guide/API DataModel/API Pro Panel",
        "title": "Mates",
        "content": "It is also possible to transform 3D objects by snapping, i.e. by using auxiliary points called \"**mates**\".\n\nThere are 2 kinds of mates:\n\n* **Source mates** â Points of a source object that we want to transform. In the GUI they are grey.\n* **Target mates** â The ones that we snap to. In the GUI they are blue.\n\n!](images/ProPanelAPI/Mates.jpg)\n\nAnother division is based on the purpose and the shape of the mates:\n\n* **Point mates** (classes [PointMate](Eplan.EplApi.DataModelu~Eplan.EplApi.DataModel.E3D.PointMate.html), [HandleMate](Eplan.EplApi.DataModelu~Eplan.EplApi.DataModel.E3D.HandleMate.html), [BasePointMate](Eplan.EplApi.DataModelu~Eplan.EplApi.DataModel.E3D.BasePointMate.html), [MountingPointMate](Eplan.EplApi.DataModelu~Eplan.EplApi.DataModel.E3D.MountingPointMate.html), [PlacementAreaPointMate](Eplan.EplApi.DataModelu~Eplan.EplApi.DataModel.E3D.PlacementAreaPointMate.html))\n* **Line mates** (classes [LineMate](Eplan.EplApi.DataModelu~Eplan.EplApi.DataModel.E3D.LineMate.html), [MountingLineMate](Eplan.EplApi.DataModelu~Eplan.EplApi.DataModel.E3D.MountingLineMate.html))\n* **Plane mates** (class [PlaneMate](Eplan.EplApi.DataModelu~Eplan.EplApi.DataModel.E3D.PlaneMate.html))\n\n![](images/ProPanelAPI/Mates2.jpg)\n\n### Getting mates\n\nMates can be retrieved from a  Placement3D  using methods:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n         \n PointMate[] GetSourceMates(Mate.Enums.PlacementOptions ePlacementOptions)\n PointMate FindSourceMate(string name, Mate.Enums.PlacementOptions ePlacementOptions)\n Mate[] GetTargetMates(bool bConsiderMountingClearance)\n Mate FindTargetMate(string name, bool bConsiderMountingClearance)\n ``` | |\n\n### Snapping\n\nSnapping mates causes one object to be positioned close to the other, i.e. a source mate of one object is at the position of a target mate of another object. In this case, we need to find the relevant mates from both objects and then perform snapping usingm the SnapTo method. Here is an example of how to snap a cabinet to another one through a point target mate:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n Cabinet oCabinet2 = new Cabinet();\n oCabinet2.Create(oProject, \"TS 8886.500\", \"1\");\n // Placing a cabinet next to another cabinet with 0.0 offset\n oCabinet2.FindSourceMate(\"C3\", Mate.Enums.PlacementOptions.None)\n .SnapTo(oCabinet.FindTargetMate(\"CUB4\", false), 0.0);\n ``` | |\n\nHere are also examples of snapping to a line and a plane mate. They both are base mates, which means that snapping to them will automatically sets a source object as a child of a target. Also, the orientation of a source item is adjusted to a target:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n // Get front plane of mounting panel\n MountingPanel oMountingPanel = oCabinet.Children[1] as MountingPanel;\n Plane oFrontPlace = oCabinet.Planes[0];\n // Create a mounting rail with a length of 150\n MountingRail oRail = new MountingRail();\n oRail.Create(oProject, \"TS 110_15\", \"1\", 500.0);\n // Placing a rail by using a plane mate as a target (located 100,200 from start of mounting panel, \n // Without any rotation)\n oRail.GetSourceMates(Mate.Enums.PlacementOptions.None)[2]\n .SnapTo(oFrontPlace.BaseMate, 0.0, 100.0, 200.0);\n // Creating a terminal\n Component oTerminal = new Component();\n oTerminal.Create(oProject, \"SIE.4AV2400-2EB00-0A\", \"1\");\n // Placing it on a mounting rail with offset 100 from the beginning of it. \n // Target (oRail.BaseMate) is a line mate.\n oTerminal.FindSourceMate(\"M4\", false).SnapTo(oRail.BaseMate, 100.0);\n ``` | |\n\n```\n\n\n```\n\nPlease be aware that not all mates can be snapped to each other. This is determined by the [Mate.MatchingMateNames](Eplan.EplApi.DataModelu~Eplan.EplApi.DataModel.E3D.Mate~MatchingMateNames.html) property. To make sure that one mate can be snapped to another, please use the [PointMate::CanSnapTo](Eplan.EplApi.DataModelu~Eplan.EplApi.DataModel.E3D.PointMate~CanSnapTo.html) method.\n\n### Creating custom mates\n\nIt is also possible to create a custom mate, for example a mounting point or a handle. In this case, a mate is first created as a transient object and then needs to be saved on a Placement3D:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n // Create a handle relative to placement area\n var transformationToPlacementArea = new Matrix3D();\n transformationToPlacementArea.Translate(new Vector3D(50.0, 500.0, 0.0));\n var transformation = transformationToPlacementArea * placement3D.PlacementArea.RelativeTransformation;\n var handle = new HandleMate();\n handle.Create(new MultiLangString(), transformation);\n placement3D.AddMatePersistent(handle);\n \n // Create a handle with extended logic \n var handleWithExtendedLogic = new HandleMate();\n handleWithExtendedLogic.Create(new[] {\"V1\", \"V2\"}, new MultiLangString(), new Matrix3D());\n placement3D.AddMatePersistent(handleWithExtendedLogic);\n \n // Create a base point\n var basePoint = new BasePointMate();\n basePoint.Create(BasePointMate.Enums.Name.FrameProfileDownLeftRear, \n new MultiLangString(),\n new Matrix3D {OffsetX = 200.0, OffsetY = 300.0});\n placement3D.AddMatePersistent(basePoint);\n \n // Create a mounting point\n var mountingPoint = new MountingPointMate();\n mountingPoint.Create(\"Test mounting point\", \n new MultiLangString(),\n new Matrix3D{OffsetY = 100.0, OffsetZ = 400.0});\n placement3D.AddMatePersistent(mountingPoint);\n \n // Create a mounting line\n var mountingLineMate = new MountingLineMate();\n mountingLineMate.Create(\"Test mounting line\",\n new MultiLangString(),\n new PointD3D(10.0, 10.0, 10.0), new PointD3D(110.0, 210.0, 310.0));\n placement3D.AddMatePersistent(mountingLineMate);\n ``` | |\n\n```\n\n\n```\n\nPlease be aware that the coordinates of a mate are relative until it is not persistent, i.e. without a [Placement](Eplan.EplApi.DataModelu~Eplan.EplApi.DataModel.E3D.Mate~Placement.html) set. After calling [Placement3D::AddMatePersistent](Eplan.EplApi.DataModelu~Eplan.EplApi.DataModel.E3D.Placement3D~AddMatePersistent.html), they are recalculated and become absolute."
    },
    {
        "source": "MountingRail.md",
        "path": "/User Guide/API DataModel/API Pro Panel",
        "title": "MountingRail",
        "content": "The MountingRail  is an item used to hold devices, usually attached to a Plane or Cabinet](Cabinet.html).\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n InstallationSpace oInstallationSpace = new InstallationSpace();\n oInstallationSpace.Create(m_oTestProject, \"DataModel_081MountingRail_Test001\");\n \n // Create a mounting panel\n MountingPanel oMountingPanel = new MountingPanel();\n oMountingPanel.Create(m_oTestProject, \"MP AE 1057.500\", \"1\");\n oMountingPanel.SetParent(oInstallationSpace, false);\n Plane oPlane1 = oMountingPanel.Planes[0];\n \n // Create a mounting rail\n MountingRail oMountingRail = new MountingRail();\n oMountingRail.Create(m_oTestProject, \"TS 110_15\", \"1\", 500.0);\n oMountingRail.SetParent(oPlane1, false);\n oMountingRail.FindSourceMate(\"M4\", true).SnapTo(oPlane1.GetTargetMates(true)[0] as PlaneMate, 0.0, 10.0, 12.0);\n ``` | |\n\n!["
    },
    {
        "source": "Mounting_Panel.md",
        "path": "/User Guide/API DataModel/API Pro Panel",
        "title": "Mounting_Panel",
        "content": "### Mounting panel (with article):\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n MountingPanel oMountingPanel = new MountingPanel();\n oMountingPanel.Create(m_oTestProject, \"MP AE 1031.500\", \"1\");\n oMountingPanel.Parent = oCabinet; // Can also be, for example, InstallationSpace\n ``` | |\n\n!](images/ProPanelAPI/MountingPanel.jpg)\n\n### Free mounting panel:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n MountingPanel oMountingPanel = new MountingPanel();\n oMountingPanel.Create(m_oTestProject, 300.0, 400.0, 2.0);\n oMountingPanel.Parent = oCabinet;\n ``` | |\n\n!["
    },
    {
        "source": "Mounting_surface.md",
        "path": "/User Guide/API DataModel/API Pro Panel",
        "title": "Mounting_surface",
        "content": "The  Plane  class represents a surface object on which components can be placed.\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n MountingPanel oMountingPanel = new MountingPanel();\n oMountingPanel.Create(oTestProject, \"MP AE 1030.500\", \"1\");\n oMountingPanel.Parent = m_oInstallationSpace; Plane oPlane1 = oMountingPanel.Children0] as Plane;\n Plane oPlane2 = oMountingPanel.Children[1] as Plane;\n ``` | |\n\n!["
    },
    {
        "source": "Orientation_of_3d_objects.md",
        "path": "/User Guide/API DataModel/API Pro Panel",
        "title": "Orientation_of_3d_objects",
        "content": "In Pro Panel API it is sometimes necessary to recognize sides of a 3D object, for example to place them in a row with the same orientation.\n\nPlease mind that the sides of a  Placement3D  are something different than the sides of its minimal bounding box. They are related to the same part of the object 3D, independently of a transformation and a viewpoint.\n\nThe representation of sides is in the  .Corners  property, for example:\n\n**Placement3D.Corners.UpperRightBackAbsolute**  â Returns the upper right back coordinate in an absolute system.  \n**Placement3D.Corners.LowerRightFrontRelative**  â Returns the lower right front coordinate in a relative system.\n\n### Objects with placement area\n\nIn this case, orientation is according to placement area.\n\nExample terminal:\n\n!](images/ProPanelAPI/orientation_terminal1.jpg)\n\n![](images/ProPanelAPI/orientation_terminal2.jpg)\n\nExample rack:\n\n![](images/ProPanelAPI/orientation_rack.jpg)\n\n### Objects without placement area\n\nIn this case, orientation is according to the absolute axis origin (assumed identity transformation):\n\n|  |  |\n| --- | --- |\n| Front | side with the lowest Y |\n| Back | side with highest Y |\n| Right | side with highest X |\n| Left | side with lowest X |\n| Top | side with highest Z |\n| Bottom | side with lowest Z |\n\nSE isometric viewpoint:\n\n![](images/ProPanelAPI/orientation_without_pa1.jpg)\n\nSW isometric viewpoint :\n\n![](images/ProPanelAPI/orientation_without_pa2.jpg)"
    },
    {
        "source": "PlaceHolder3D_-_placeholder_in_3D_space.md",
        "path": "/User Guide/API DataModel/API Pro Panel",
        "title": "PlaceHolder3D_-_placeholder_in_3D_space",
        "content": "A new placeholder object has been created in EPLAN Pro Panel. A corresponding class  Placeholder3D  has been created in the APIt. This class  Placeholder3D  inherits from  StorableObject  and the  IPlaceHolder  interface.\n\nThe methods are similar to those of the standard  PlaceHolder:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n PlaceHolder3D oNewPlaceHolder3D = new PlaceHolder3D();\n oNewPlaceHolder3D.Create(m_oTestInstallationSpace);\n oNewPlaceHolder3D.Name = \"016PlaceHolder3DService_Test008\";\n oNewPlaceHolder3D.AddReference(oComponent);\n MultiLangString mlTest = new MultiLangString();\n mlTest.AddString(ISOCode.Language.L_en_US, \"<Test123_en>\");\n mlTest.AddString(ISOCode.Language.L_de_DE, \"<Test123_de>\");\n oNewPlaceHolder3D.SetPropertyEntry(oComponent, 20011, mlTest);\n oNewPlaceHolder3D.AddRecord(\"Record1\");\n oNewPlaceHolder3D.AddRecord(\"Record2\");\n \n // Setting values for English\n oNewPlaceHolder3D.set_Value(\"Record1\", \"Test123_en\", \"Value 1\");\n oNewPlaceHolder3D.set_Value(\"Record2\", \"Test123_en\", \"Value 2\");\n \n // Setting values for German\n oNewPlaceHolder3D.set_Value(\"Record1\", \"Test123_de\", \"Wert 1\");\n oNewPlaceHolder3D.set_Value(\"Record2\", \"Test123_de\", \"Wert 2\");\n oNewPlaceHolder3D.ApplyRecord(\"Record1\");\n ``` | |\n\n![](images/ProPanelAPI/Placeholder3d.jpg)"
    },
    {
        "source": "RoutingSegment.md",
        "path": "/User Guide/API DataModel/API Pro Panel",
        "title": "RoutingSegment",
        "content": "The  RoutingSegments  class represents an object in Eplan that can route connections.\n\nIt can be generated by 2 ways:\n\n1. using  RoutingSegment::Create\n2. using  ConnectionService3D::CreateRoutingSegments\n\n![](images/ProPanelAPI/RoutingSegment.jpg)"
    },
    {
        "source": "Transformations_in_3D_space.md",
        "path": "/User Guide/API DataModel/API Pro Panel",
        "title": "Transformations_in_3D_space",
        "content": "Each  Placement3D  has 2 read-write properties that describe its transformation:\n\n* Matrix3D Placement3D::AbsoluteTransformation  â absolute transformation\n* Matrix3D Placement3D::RelativeTransformation  â transformation relative to a parent object\n\nThe properties are represented by a 4x4 transformation matrix:\n\nM11      M12      M13     M14\n\nM21      M22      M23     M24\n\nM31      M32      M33     M34\n\nOffsetX OffsetY OffsetZ M44\n\nHere is an example of setting transformation matrix to a 3D object:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n Vector3D oVector3D = new Vector3D();\n oVector3D.X = 3.0;\n oVector3D.Y = 4.0;\n oVector3D.Z = 5.0;\n Quaternion oQuaternion = new Quaternion(oVector3D, 2.0);\n Matrix3D oMatrix3D = new Matrix3D();\n oMatrix3D.Rotate(oQuaternion);\n oMatrix3D.Translate(new Vector3D(1.0, 2.0, 3.0));\n oComponent1.AbsoluteTransformation = oMatrix3D;\n ``` | |\n\nIt is also possible to move a 3D object using the  Move()  method:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n oComponent1.Move(1.0, 2.0, 3.0);\n ``` | |\n\n### How to calculate transformation relative to a specified 3D object\n\nSometimes it is necessary to calculate local transformation, i. e. relative to a specified 3D object.  \nFor example, it could be the position of components on a rail from its beginning:\n\n!](images/ProPanelAPI/relative_positions.jpg)\n\nTo calculate the location of objects origin, it is necessary to use the  .RelativeTransformationOfMacro  property:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n Matrix3D terminalTransformation = terminal.RelativeTransformationOfMacro;\n var x_coordinate = terminalTransformation.Transform(new Point3D()).X;\n ``` | |\n\n Another way is to use absolute transformation:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n Matrix3D railTransformation = rail.AbsoluteTransformation;\n railTransformation.Invert();\n var x_coordinate = railTransformation.Transform(terminal.AbsoluteTransformation.Transform(new Point3D()))).X;\n ``` | |\n\n### Rotation angle of a 3D object\n\n It can also be useful to get information about how an item was rotated during insertion from Placement options dialog:\n\n![](images/ProPanelAPI/placement_options_angle.jpg)\n\nTo calculate this rotation, there should be used the  .RelativeTransformationOfMacro  property:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n Matrix3D matrix = oPlacement3D.RelativeTransformationOfMacro;\n double oRotationAngleZ = -1 * Math.Atan2(matrix.M21, matrix.M11) * (180.0 / Math.PI);\n ``` | |"
    },
    {
        "source": "ViewPlacement_model_view_in_GUI.md",
        "path": "/User Guide/API DataModel/API Pro Panel",
        "title": "ViewPlacement_model_view_in_GUI",
        "content": "Model views are objects used to show a 3D view on a standard EPLAN page.\n\nExample:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n // Creating 3D objects\n InstallationSpace oInstallationSpace = new InstallationSpace();\n oInstallationSpace.Create(m_oTestProject, \"DataModel_081MountingRail_Test001\");\n Cabinet oCabinet = new Cabinet();\n oCabinet.Create(m_oTestProject, \"TS 8286.500\", \"1\");\n oCabinet.Parent = oInstallationSpace;\n \n // Creating view placement\n ViewPlacement oViewPlacement = new ViewPlacement();\n oViewPlacement.Create(m_oTestProject, m_InstallationSpace);\n oViewPlacement.Page = oPage;\n oViewPlacement.Area = new RectangleD(new PointD(0.0, 0.0), new PointD(200.0, 200.0));\n oViewPlacement.RootElements = new Placement3D[]{oCabinet};\n oViewPlacement.Update();\n ``` | |\n\n```\n\n \n```"
    },
    {
        "source": "DataModelConnectionsOverview.md",
        "path": "/User Guide/API DataModel/Navigating the project data",
        "title": "DataModelConnectionsOverview",
        "content": "The following illustration shows how to navigate between functions, their pins and the connections.\n\n!](graphs/DataModel_ConnectionFunction.png)[![](graphs/DataModel_ConnOverview.png)"
    },
    {
        "source": "DataModelEObjectsOverview.md",
        "path": "/User Guide/API DataModel/Navigating the project data",
        "title": "DataModelEObjectsOverview",
        "content": "Class diagram of the Eplan data model in  Eplan.EplApi.DataModel.EObjects  namespace.\n\n![](graphs/DataModel_EObjects_Graph.PNG)"
    },
    {
        "source": "DataModelFilterOFOverview.md",
        "path": "/User Guide/API DataModel/Navigating the project data",
        "title": "DataModelFilterOFOverview",
        "content": "The following illustration shows how you can also access primary project objects using the  DMObjectsFinder  class.\n\n![](graphs/DataModel_DMObjectFinder_Graph.png)"
    },
    {
        "source": "DataModelFilterOverview.md",
        "path": "/User Guide/API DataModel/Navigating the project data",
        "title": "DataModelFilterOverview",
        "content": "The following diagram shows how to set filter classes used for example by the  DMObjectsFinder.\n\n![](graphs/DataModel_Filters_Graph.PNG)"
    },
    {
        "source": "DataModelGraphicsOverview.md",
        "path": "/User Guide/API DataModel/Navigating the project data",
        "title": "DataModelGraphicsOverview",
        "content": "Class diagram of the EPLAN data model in  Eplan.EplApi.DataModel.Graphics  namespace.\n\n![](graphs/DataModel_GraphicsGraph.PNG)"
    },
    {
        "source": "DataModelHierarchyOverview.md",
        "path": "/User Guide/API DataModel/Navigating the project data",
        "title": "DataModelHierarchyOverview",
        "content": "The following illustration shows the class diagram in the  Eplan.EplApi.DataModel  namespace.![](graphs/DatamodelClassDiagram.png)"
    },
    {
        "source": "DataModelMasterDataOverview.md",
        "path": "/User Guide/API DataModel/Navigating the project data",
        "title": "DataModelMasterDataOverview",
        "content": "Class diagram of the Eplan data model in the  Eplan.EplApi.DataModel.MasterData  namespace.\n\n![](graphs/DataModel_MasterData_Graph.PNG)"
    },
    {
        "source": "DataModelNavigationOverview.md",
        "path": "/User Guide/API DataModel/Navigating the project data",
        "title": "DataModelNavigationOverview",
        "content": "The following illustration shows how to access objects of the  Eplan.EplApi.DataModel  namespace.\n\n![](graphs/DatamodelNavigationOverview.png)"
    },
    {
        "source": "Interactions.md",
        "path": "/User Guide/API Electrotechnical services",
        "title": "Interactions",
        "content": "In the Eplan API, the term \"**interactions**\" refers to classes that are used to handle events related to interactive work in the GED (graphical editor).\n\nThe mechanism of interactions is mostly based on the  XGedStartInteractionAction  action, which is called by the Eplan framework when moving, adding or selecting an object in the GED. For example, when inserting a window macro on a page, the Eplan framework calls the action:\n\n```\n\nXGedStartInteractionAction /Name:XMIaInsertMacro\n\n```\n\nIts parameter  Name  is used to pass the name of an interaction.\n\nUsually, interactions are used for 2 purposes: creating custom ones or overriding the default (system).\n\nPlease note that interactions work only in the context of the currently open page or layout space (InstallationSpace  in API). So it is not possible to handle events from other windows, like navigators. Also, when leaving the current page, the interaction is aborted by default (i.e. the  OnCancel  method is called).\n\n### Creating custom interactions\n\nThe Eplan API enables programmers to create their own custom interactions.\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n public class DeleteTerminalsInteraction : Interaction\n {\n    public override RequestCode OnStart(InteractionContext pContext)\n    {\n       // The interaction has been stated.\n       // Set the initial state\n       m_state = State.Start;\n       // Activate the placement filter\n       IsPlacementFilterActive = true;\n       // Request point and set prompt for user\n       this.PromptForStatusLine = \"select Terminals\";\n       return  RequestCode.Select;\n   }\n   // Can be used to filter for selection or for highlight\n   public override bool OnFilterElement(StorableObject placement)\n   {\n      if (placement is Terminal)\n      {\n         return true;\n      }\n      return false;\n    }\n    public override RequestCode OnSelect(StorableObject] placements, SelectionContext context)\n    {\n       m_Terminals = placements.Cast<Terminal>().ToArray();\n       m_state = State.Select;\n       return RequestCode.Success;\n    }\n    public override void OnSuccess(InteractionContext result)\n    {\n       if (m_state == State.Select)\n       {\n          for (int i = 0; i < m_Terminals.Length; i++)\n          {\n             m_Terminals[i].Remove();\n          }\n       }\n    }\n    enum State\n    {\n       Start = 0,\n       Select,\n    };\n \n    State m_state;\n    Terminal[] m_Terminals;\n }\n ``` | |\n\n```\n\n    \n```\n\nTo add an interaction to Eplan, it must be included in an API add-in or add-on. The interaction is registered under the name of its class when the API add-in containing it is loaded.\n\nThere is also a special class  InsertInteraction  for interactions that insert objects on a page. It contains an additional property showing a placed object.\n\n### Deriving interactions\n\nThe programmer can derive a new interaction from an existing one in order to inherit its functionality. In this case, there should be the  Interaction  attribute set with  Name\n\nas the name of the new interaction,  NameOfBaseInteraction  as the name of the existing interaction to be hinherited. Also the  Ordinal  number must be set to a value higher than 30.\n\nThe following example shows how to create a new interaction derived from a standard symbol insertion interaction:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n     [Interaction(Name = \"DerivedSymbolInsertInteraction\", NameOfBaseInteraction = \"XEGedIaInsertSymRef\", Ordinal = 50)]\n     class DerivedSymbolInsertInteraction : InsertInteraction\n     {\n         public override RequestCode OnStart(InteractionContext pContext)\n         {\n             return base.OnStart(pContext);\n         }\n         public override void OnSuccess(InteractionContext result)\n         {\n             // Execute standard operation of symbol insert interaction\n             base.OnSuccess(result);\n \n             // Set property of inserted function\n             Placement[] placements = InsertedItems as Placement[];\n             for (int i = 0; i < placements.Length; i++)\n             {\n                 Function f = (Function)placements[i];\n                 if (f != null)\n                 {\n                     f.Properties[Properties.Function.FUNC_TEXT] = \"API_Demos : DerivedSymbolInsertInteraction\";\n                 }\n             }\n         }\n     }\n ``` | |\n\n### Overriding default interactions\n\nAPI interactions can also override default Eplan interactions. This way the execution will be passed to a user code instead of the Eplan core. As with derived interactions, such interactions must also be derived from the  Interaction  class. The only change that must be made is in the  Interaction  attribute, i.e both  Name  and  NameOfBaseInteraction  must be set to the same base interaction:\n\n```\n\n[Interaction(Name = \"XEGedIaInsertSymRef\", NameOfBaseInteraction = \"XEGedIaInsertSymRef\", Ordinal = 50)]\n\n```\n\nThis way, all events connected with the default interaction (i.e inserting a symbol in this case) are routed to the core interaction  XEGeIaInsertSymRef.\n\n### Getting feedback from the GED\n\nMost of the interaction methods return a [Eplan::EplApi::EServices::Ged::RequestCode](Eplan.EplApi.EServicesu~Eplan.EplApi.EServices.Ged.RequestCode.html) which is used to control the workflow of an interaction. The default implementation of the  Interaction::OnStart  method returns  RequestCode::Success, which causes the interaction to end. If it is overridden and returns  RequestCode::Point, the interaction remains active and when the user clicks the mouse button, the Interaction::OnPoint method is called by Eplan."
    },
    {
        "source": "Messages.md",
        "path": "/User Guide/API Electrotechnical services",
        "title": "Messages",
        "content": "As an API developer, you can add new electrotechnical messages to Eplan and write them to the message management.\n\nIn order to create a new message, add a class to your project that inherits from the Eplan.EplApi.EServices.Message class.\n\nThe  Eplan.EplApi.EServices.Message class declares 3 functions:\n\n1. The parameters of the  OnRegister()  function define the properties of the message and how it is registered in Eplan.\n2. The  GetMessageText()  function returns the message text that is displayed in dialogs if requested by Eplan.\n3. The  DoHelp()  function is called by the system if Eplan requests help on the message.\n\n* C#](#i-tab-content-CS)\n* [VB](#i-tab-content-VB)\n\n```\n\npublic class Message1 : Eplan.EplApi.EServices.Message\n{\n    public override void OnRegister(ref string creator, ref IMessage.Region eRegionId, ref int iMessageId,\n      ref IMessage.Classification eClassification, ref int iOrdinal)\n    {\n        creator = \"Creator name\";\n        eRegionId = IMessage.Region.Externals;\n        iMessageId = 25;\n        eClassification = IMessage.Classification.Error;\n        iOrdinal = 20;\n        return;\n    }\n    public override System.String GetMessageText()\n    {\n        // TODO: Provide text from resource in active GUI language\n        return \"Message text for %1!s! from Eplan.EplAddIn.Demo.Messages\";\n    }\n    public override void DoHelp()\n    {\n        new Decider().Decide(EnumDecisionType.eOkDecision, \"DoHelp was called!\", \"Eplan.EplAddIn.Demo.Messages\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK);\n        // TODO: activate help for this message\n    }\n}\n```\n\n```\n\nPublic Class Message1\n   Implements Eplan.EplApi.EServices.Message\n   Public Sub OnRegister(ByRef creator As System.String, ByRef eRegionId As IMessage.Region, ByRef iMessageId As Integer, _\n                          ByRef eClassification As IMessage.Classification, ByRef iOrdinal As Integer) _\n                          Implements Eplan.EplApi.EServices.IMessage.OnRegister\n      creator = \"Creator name\"\n      eRegionId = IMessage.Region.Externals\n      iMessageId = 25\n      eClassification = IMessage.Classification.Error\n      iOrdinal = 20\n      Return\n   End Sub 'OnRegister\n\n   Public Function GetMessageText() As System.String Implements Eplan.EplApi.EServices.IMessage.GetMessageText\n      ' TODO: Provide text from resource in active GUI language\n      Return \"Message text for %1!s! from Eplan.EplAddIn.Demo.Messages\"\n   End Function 'GetMessageText\n\n   Public Sub DoHelp() Eplan.EplApi.EServices.IMessage.DoHelp\n      Dim dec As Decider = New Decider\n      dec.Decide(EnumDecisionType.eOkDecision, \"DoHelp was called!\", \"Eplan.EplAddIn.Demo.Messages\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK)\n   End Sub 'DoHelp ' TODO: activate help for this message\nEnd Class 'Message\n```\n\nIt is also possible to create such classes automatically using the Eplan API Add-in Wizard.\n\n### Adding a new message\n\nA registered message can be now added to the message management of Eplan using the PrjMessagesCollection class.\n\n* [C#](#i-tab-content-CS)\n* [VB](#i-tab-content-VB)\n\n```\n\nvar projectMessageCollection = new PrjMessagesCollection(myProject);\n\nIMessage.Region region = IMessage.Region.Externals;\nint messageId = 25;\n\nvar storableObject1 = myProjectPage.Functions[0] as StorableObject;\nvar storableObject2 = myProjectPage.Functions[1] as StorableObject;\n\n//Add new message using AddMessage method\nprojectMessageCollection.AddMessage(\n    region,\n    messageId,\n    \"param text 1\",\n    storableObject1,\n    true,\n    storableObject2,\n    \"additional info 2\");\n\n//or using BaseProjectMessage class\nvar newMessage = new BaseProjectMessage(region, messageId, \"param text 2\", \"BECK.BK3100\", \"additional info 2\");\nprojectMessageCollection.Add(newMessage);\n```\n\n```\n\nDim projectMessageCollection = New PrjMessagesCollection(myProject)\n\nDim region As IMessage.Region = IMessage.Region.Externals\nDim messageId As Integer = 25\n\nDim storableObject1 = TryCast(myProjectPage.Functions(0), StorableObject)\nDim storableObject2 = TryCast(myProjectPage.Functions(1), StorableObject)\n\nprojectMessageCollection.AddMessage(region, messageId, \"param text 1\", storableObject1, True, storableObject2, \"additional info 2\")\n\nDim newMessage = New BaseProjectMessage(region, messageId, \"param text 2\", \"BECK.BK3100\", \"additional info 2\")\nprojectMessageCollection.Add(newMessage)\n```\n\n### Overriding the text of an existing message\n\nIt is **not** possible to change an existing verification by overriding it via API (by setting the same name and a higher Ordinal number). However, you can override an existing message and change the default message text to your own text. You need to implement a message with the same iMessageId and eRegion, but use a higher  iOrdinal, e.g. 50. Other properties of the message will not be affected.\n\nThe following example shows how to override the existing message 007005 \"Device without main function.\":\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n /// This function returns the message text.\n /// One verification needs always exactly one message text\n public string GetMessageText()\n {\n    return \"This device has absolutely no main function!!!!\";\n }\n \n /// This is the registration function of the message belonging to the verification.\n /// Parameters:\n ///   message region\n ///   message number\n ///   classification: error, message or info.\n ///   overload priority\n public void OnRegister(ref String strCreator, ref Eplan.EplApi.EServices.IMessage.Region eRegion, ref int iMessageId, ref Eplan.EplApi.EServices.IMessage.Classification eClassification, ref int iOrdinal)\n {\n    strCreator = \"de.Eplan.Demo\";\n    eRegion = IMessage.Region.Devices;\n    iMessageId = 5;\n    eClassification = IMessage.Classification.Error;\n    iOrdinal = 50; // Higher than 20\n }\n ``` | |"
    },
    {
        "source": "Verifications.md",
        "path": "/User Guide/API Electrotechnical services",
        "title": "Verifications",
        "content": "You can use an Eplan API add-in to add new verifications (in GUI called \"**check runs**\"). Eplan will use them in the same way as already existing internal verifications.\n\nFor a new verification, the add-in must  implement the  IVerification  interface.\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n public class NewVerification : Eplan.EplApi.EServices.Verification\n {\n     private int m_iMessageId = 30;\n \n     /// <summary>\n     /// Default constructor.\n     /// </summary>\n     public NewVerification()\n     {\n     }\n \n     /// <summary>\n     /// This function implements the test logic. \n     /// </summary>\n     /// <param name=\"oObject1\">\n     /// This object is tested. One can be certain that here only\n     /// function objects of the desired category arrive here.\n     /// </param>\n     public override void Execute(Eplan.EplApi.DataModel.StorableObject oObject1)\n     {\n         DoErrorMessage(oObject1, oObject1.Project, \"Verification dynamic text\");\n     }\n \n     /// <summary>\n     /// This function is called after end of all verifications run.\n     /// </summary>\n     public override void OnEndInspection()\n     {\n         // TODO:  Add NewVerification.OnEndInspection implementation\n     }\n \n     /// <summary>\n     /// Registration function of the verification\n     /// </summary>\n     /// <param name=\"strName\">\n     /// Under this name, the new verification registered  in the system.\n     /// </param>\n     /// <param name=\"iOrdinal\">\n     /// Overload priority\n     /// </param>\n     public override void OnRegister(ref string strName, ref int iOrdinal)\n     {\n         strName = \"NewVerification\";\n         iOrdinal = 30;\n         this.VerificationPermission = IVerification.Permission.OnlineOfflinePermitted;\n         this.VerificationState = IVerification.VerificationState.OnlineOfflineState;\n     }\n \n     /// <summary>\n     /// This function is called before start of all verifications run.\n     /// </summary>\n     /// <param name=\"bOnline\">\n     /// true: online verification\n     /// false: offline verification\n     /// </param>\n     public override void OnStartInspection(bool bOnline)\n     {\n         // TODO:  Add NewVerification.OnStartInspection implementation\n     }\n \n     /// <summary>\n     /// This function must deliver the accompanying message text. \n     /// A test has always exactly one accompanying message text. \n     /// </summary>\n     /// <returns>The message text</returns>\n     public override string GetMessageText()\n     {\n         return \"Verification static text . %1!s!\";\n     }\n \n     /// <summary>\n     /// This function is called when the aid text is supposed to be indicated in a message. \n     /// It lies in the responsibility of the implementation of the function to call\n     /// the suitable aid system in the correct language.\n     /// In the simplest case, for example only a simple dialog can be called. \n     /// </summary>\n     public override void DoHelp()\n     {\n         // TODO:  NewVerification.DoHelp implementation\n     }\n \n     /// <summary>\n     /// This function is called of the system if the message of this test\n     /// is supposed to be registered in the system. \n     /// </summary>\n     /// <param name=\"strCreator\">Creator of the message</param>\n     /// <param name=\"eRegion\">Message region</param>\n     /// <param name=\"iMessageId\">Number of the message</param>\n     /// <param name=\"eClassification\">Default classification</param>\n     /// <param name=\"iOrdinal\">Overload priority</param>\n     public override void OnRegister(ref String strCreator, ref Eplan.EplApi.EServices.IMessage.Region eRegion, ref int iMessageId, ref Eplan.EplApi.EServices.IMessage.Classification eClassification, ref int iOrdinal)\n     {\n         strCreator = \"Author\";\n         eRegion = IMessage.Region.Externals;\n         iMessageId = m_iMessageId;\n         eClassification = IMessage.Classification.Error;\n         iOrdinal = 20;\n     }\n }\n ``` | |\n\n```\n\n \n```\n\n```\n\n \n```\n\nIn order to simplify the creation of a verification, the Eplan API has some base classes that provide some service functions.\n\nThese base classes are:\n\n* FunctionVerification\n* PotentialVerification\n* InterruptionPointVerification\n* PartVerification\n\nIn your add-in, simply have your verification class inherit from one of these base classes and implement the necessary interface functions. For outputting messages, several variations of the  AddMessage()  function are available. In addition, the classes contain some functions for finding cross-referenced objects.\n\nIf you want to implement a verification that cheks something about potentials, then you implement a new verification derived from  PotentialVerification. In the  Execute  function of your new verification, you can use the  GetAllPotentialsWithSameName()  function to get the potential from the verification cache. It makes no sense to call this function in any other context than in the Execute()  verification.\n\nAll registered verifications are called by the system using Check project.... If you want to execute only your verification, you have to configure the check settings (create new scheme, disable other verifications (Type of check: \"No\")).\n\nPlease take into account that compared to 1.9 version, verifications inheriting from the  Verification  class must have the  override  keyword in the base methods definitions. This is required since the API extension has been migrated to C++/CLI .\n\n### How to start a verification\n\nVerifications can be invoked from API or GUI in 3 modes:\n\n* **Online mode** â This is called when a change was done and the  UndoStep  was disposed:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n using (UndoStep oUndo = new UndoManager().CreateUndoStep())\n {\n     oFunction.Location = new PointD(oFunction.Location.X + 10.0, oFunction.Location.Y + 10.0);\n }\n ``` | |\n\n```\n\n\n```\n\n* **Prevent errors mode** (restrictive mode) â This is similar to the online mode, but if  DoErrorMessage()  is called, the last  UndoStep  is automatically undone, so the last changes are reverted. For the \"Prevent errors mode\" you should set the following options in the  OnRegister  method of the verification:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n this.VerificationPermission = IVerification.Permission.RestrictivePermitted;\n this.VerificationState = IVerification.VerificationState.RestrictiveState;\n ``` | |\n\n```\n\n\n```\n\n* **Offline mode** â This can be done using:\n  + the  check  action\n  + the  Check  class (VerifyProject  and  VerifyPages  methods)\n  + the Check project dialog for project verification and the Parts management dialog for parts verification\n\nFor more detailed information on parts verifications, please take a look at the Verifying parts](file:///U:/EplanW3_master/Eplan/Extensions/API_Documentation/DocumentX/VerifyingParts.html) chapter."
    },
    {
        "source": "AddIns.md",
        "path": "/User Guide/API Framework",
        "title": "AddIns",
        "content": "Eplan has a modular architecture. It is possible to add functionality to Eplan and to change existing functionality.\n\nThese different means to modify the system are implemented in modules, which can be loaded by Eplan, so-called add-ins. So if you want to add functionality to Eplan, you first need to create an add-in.\n\nYou can enhance existing functionality for example by:\n\n* Adding new GUI items, such as ribbon buttons\n* Adding new actions, verifications, interactions, messages, XML processors\n* Handling Eplan events and raising ones\n\nAn add-in is an assembly, written in one of the .NET Framework programming languages. There are different ways to create such an assembly. Basically, you just need a simple text editor and the compiler provided by the .NET Framework. The rather more convenient way to create an add-in is by using an integrated development environment (IDE), like Visual Studio.\n\n### Remarks\n\nAdd-in assemblies should be named like  <YourCompanyName>.EplAddin.<NameOfTheProject>.dll.   \nThe add-in and all its references should be stored in a separate folder."
    },
    {
        "source": "Addons.md",
        "path": "/User Guide/API Framework",
        "title": "Addons",
        "content": "Eplan has a modular architecture. This architecture system provides the possibility to expand the standard scope of Eplan by including additional functionality and changing existing functionality.\n\nAdd-ons enable the user to extend an installed version of Eplan. Using an add-on, you can basically distribute and centrally administer the following kind of data:\n\n* Master data\n* Settings\n* API add-ins\n* Scripts\n\nWhen the Eplan version is started for the first time after an add-on has been installed, the new add-on is registered automatically to this Eplan version (if the add-on is set to  autoregister).\n\nAdd-ons can be installed and updated automatically or manually, locally or from a server.\n\nEach add-on can be automatically registered as an API DLL. It is also possible to register a script when the add-on is registered."
    },
    {
        "source": "EplanInOtherApplications.md",
        "path": "/User Guide/API Framework",
        "title": "EplanInOtherApplications",
        "content": "This topic describes various options for using Eplan functions outside of  a script or an Eplan add-in.\n\nBasically, there are three options to use Eplan functionality in other applications:\n\n1. Calling Eplan with command line parameters\n2. Using parts of Eplan (modules/DLLs) in other processes. Only the functionality of Eplan is used; no main frame and - with some exceptions - no dialogs of Eplan will be shown.\n3. Eplan runs as a separate process and functions, objects in this process are called by another process. (ActiveX automation, out-of-process server, EXE server) In this case, Eplan can be visible or invisible.\n\nIf you want to use the Eplan API together with office applications (e.g. Excel), you should consider the following order of choice when planning your code architecture:\n\n1. Create an Eplan add-in and use the other application as managed code via COM interop.\n2. Use Visual Studio Tools for Office (VSTO) together with managed Eplan API assemblies. (Eplan is in-process server or remoting client)."
    },
    {
        "source": "Events.md",
        "path": "/User Guide/API Framework",
        "title": "Events",
        "content": "EPLAN has its own mechanism to send notifications and to react on notifications. Notifications, also called \"**events**\", are identified in EPLAN by their names (string). This means there is no specific type of class you send as a notification.\n\nEPLAN and each module in EPLAN can send and handle events without any need to register the event in the system. The EPLAN event mechanism is very flexible. The API user can even send and handle events with new names.\n\nFor a list of EPLAN events, please refer to this link: Eplan.EplApi.ApplicationFramework.Events](API Events.html).\n\n### How to react on EPLAN events?\n\n To react on an event, just implement an event handler function and register it with the EPLAN  EventHandler  object.\n\n* [C#](#i-tab-content-CS)\n* [VB](#i-tab-content-VB)\n\n```\n\nclass MyEventListener\n{\n    // create an EventHandler object\n    Eplan.EplApi.ApplicationFramework.EventHandler myHandler = new\n    Eplan.EplApi.ApplicationFramework.EventHandler();\n    public MyEventListener()\n    {\n        // react on the EPLAN event \"onActionStart.String.*\"\n        myHandler.SetEvent(\"onActionStart.String.*\");\n        // If the event \"onActionStart.String.*\" is raised,\n        // the function myHandler_EplanEvent should be called\n        myHandler.EplanEvent +=  myHandler_EplanEvent;\n    }\n\n    private void myHandler_EplanEvent(IEventParameter iEventParameter)\n    {\n        // TODO: do something, when the event is caught\n    }\n}\n```\n\n```\n\nClass MyEventListener\n      ' create an EventHandler object\n      Dim myHandler As New Eplan.EplApi.ApplicationFramework.EventHandler()\n   Public Sub New()\n      ' react on the EPLAN event \"onActionStart.String.*\"\n      myHandler.SetEvent(\"onActionStart.String.*\")\n      ' If the event \"onActionStart.String.*\" is raised,\n      ' the function myHandler_EplanEvent should be called\n      Dim oEvent As EventHandlerFunction = New EventHandlerFunction(AddressOf myHandler_EplanEvent)\n      myHandler.EplanEvent = System.Delegate.Combine(myHandler.EplanEvent, oEvent)\n   End Sub 'New\n   Private Sub myHandler_EplanEvent(iEventParameter As IEventParameter)\n      ' TODO: do something, when the event is caught\n   End Sub 'myHandler_EplanEvent\nEnd Class 'MyEventListener\n```\n\nNow, you need to create an instance of your event listener class. During the lifetime of this object the event is handled. For example, you can instantiate the object in the API module class of your add-in:\n\n* [C#](#i-tab-content-CS)\n* [VB](#i-tab-content-VB)\n\n```\n\npublic class AddInModule: IEplAddIn\n{\n    private MyEventListener m_EventHandler;\n    ///<summary>\n    /// This function is called, when starting EPLAN,\n    /// if the add-in is loaded on system startup.\n    ///</summary>\n    /// <returns></returns>\n    ///<seealso cref=\"OnRegister\"/>\n     public bool OnInit()\n    {\n        m_EventHandler = new MyEventListener ();\n        return true;\n    }\n//...\n}\n```\n\n```\n\nPublic Class AddInModule\n   Implements IEplAddIn\n   Private m_EventHandler As MyEventListener\n\n   '''<summary>\n   ''' This function is called, when starting EPLAN,\n   ''' if the add-in is loaded on system startup.\n   '''</summary>\n   ''' <returns></returns>\n   '''<seealso cref=\"OnRegister\"/>\n   Public Function OnInit() As Boolean Implements IEplAddIn.OnInit\n      m_EventHandler = New MyEventListener()\n      Return True\n   End Function 'OnInit\n'...\nEnd Class 'AddInModule\n```\n\n### Event parameter\n\nEvery event may additionally have parameters of a certain type. For this purpose we have the  EventParameter  classes, like for example  EventParameterString.\n\nThe  OnEvent()  function has a generic interface as parameter. It takes the specific  EventParameter  classes as constructor argument. Subsequently it tries to create this parameter object. If the interface does not contain a suitable object, EPLAN throws an exception.\n\nSo, when you handle a specific event, you need to know the type of the event parameter beforehand in order to create the correct parameter from the interface.\n\n* [C#](#i-tab-content-CS)\n* [VB](#i-tab-content-VB)\n\n```\n\nprivate void myHandler_EplanEvent(IEventParameter iEventParameter)\n{\n    try\n    { \n        EventParameterString oEventParameterString = new\n        EventParameterString(iEventParameter);\n        String strActionName = oEventParameterString.String;\n    }\n    catch (System.InvalidCastException exc)\n    {\n        String strexc = exc.Message;\n    }\n}\n```\n\n```\n\nPrivate Sub myHandler_EplanEvent(iEventParameter As IEventParameter)\n    Try\n        Dim oEventParameterString As New EventParameterString(iEventParameter)\n        Dim strActionName As String = oEventParameterString.String \n    Catch exc As System.InvalidCastException\n        Dim strexc As String = exc.Message\n    End Try\nEnd Sub 'myHandler_EplanEvent\n```\n\n```\n\n\n\n```\n\n### Raising events\n\nYou can create and send your own events with arbitrary names. However, you have no influence on whether your event is handled somewhere. In the following example an event named \"EventFromCSharpAddIn\" is raised. The event has a parameter of the type  EventParameterString.\n\n* [C#](#i-tab-content-CS)\n* [VB\n\n```\n\nEventParameterString oEventParamString = new EventParameterString();\noEventParamString.String = \"ParameterFromCSharpAddIn\";\nlong lRetVal = new EventManager().Send(\"EventFromCSharpAddIn\", oEventParamString);\n```\n\n```\n\nDim oEventParamString As New EventParameterString()\noEventParamString.String = \"ParameterFromCSharpAddIn\"\nDim lRetVal As Long = New EventManager().Send(\"EventFromCSharpAddIn\", oEventParamString)\n```"
    },
    {
        "source": "Scripts.md",
        "path": "/User Guide/API Framework",
        "title": "Scripts",
        "content": "You can run scripts in Eplan without having licensed the Eplan API. Scripts are executable program code, written in C# (\\*.cs files) or Visual Basic.NET (\\*.vb files). Scripts always exist as source code. When you start a script, it will be loaded into the system, compiled and then executed.\n\nFor scripting, go to the ribbon item File > Extras > Interfaces. You will find the category Scripts.\n\n![](images/ScriptMenu.png)\n\nAfter calling File > Extras > Interfaces > Scripts > Run, a file dialog appears and a script file to execute can be selected.\n\nThe following assemblies can be used in scripts:\n\n* System\n  + Namespace System\n* System.Drawing\n* System.Windows.Forms\n  + Namespace System.Windows.Forms\n* System.Net.Http\n  + Namespace System.Net.Http\n* System.IO.Compression.FileSystem\n* System.Xml.LINQ\n* System.Xml\n* System.Core\n  + Namespace System.Linq\n* Newtonsoft.Json\n\nAlso these Eplan assemblies are referenced by default:\n\n* Eplan.EplApi.Baseu\n  + Namespace Eplan.EplApi.Base\n* Eplan.EplApi.ApplicationFrameworku\n  + Namespace Eplan.EplApi.ApplicationFramework\n  + Namespace Eplan.EplApi.Scripting\n* Eplan.EplApi.Guiu\n  + Namespace Eplan.EplApi.Gui\n  + NameSpace Eplan.EplApi.Scripting\n* Eplan.EplApi.MasterDatau\n  + Namespace Eplan.EplApi.MasterData\n* Eplan.IdentityClient.Authentification\n  + Namespace Eplan.IdentityClient.Authentification\n* Eplan.IdentityClient.Types\n  + Namespace Eplan.IdentityClient\n\n**There is no way to reference additional assemblies (.NET Framework, Eplan or other providers)!**\n\nThis feature is only available for Eplan API developers having \"Eplan API Extension\" license."
    },
    {
        "source": "Actions.md",
        "path": "/User Guide/API Framework/Add-ins",
        "title": "Actions",
        "content": "What is called an \"**action**\" in Eplan?\n\nAn action is a procedure or function that can be dynamically registered in Eplan. The action is identified by its name and its overload priority. An action can have any number of parameters, which are passed to and from the action via a so-called  ActionCallingContext. Each ribbon button in Eplan is associated with an action that is called up when the ribbon button is clicked.\n\nAn add-in can add new actions to Eplan. Actions can be called from the command line and they can be assigned to a new ribbon button. A new action can override an existing action with the same name.\n\nAn action is implemented by a class that inherits the interface  IEplAction. You need to add an implementation of all the functions of the interface. An add-in can contain an arbitrary number of actions.\n\n* C#](#i-tab-content-CS)\n* [VB](#i-tab-content-VB)\n\n```\n\npublic class CSharpAction: Eplan.EplApi.ApplicationFramework.IEplAction\n{\n    ///<summary>\n    ///This function is called when executing the action.\n    ///</summary>\n    ///<returns>true, if the action performed successfully</returns>\n    public bool Execute(Eplan.EplApi.ApplicationFramework.ActionCallingContext ctx )\n    {\n         new Decider().Decide(EnumDecisionType.eOkDecision, \"CSharpAction was called!\", \"Eplan.EplAddIn.Demo1\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK);\n         // TODO: Add your Code here\n\n         return true;\n    }\n    ///<summary>\n    ///This function is called by the application framework, when registering the add-in.\n    ///</summary>\n    ///<param name=\"Name\">The action is registered in Eplan under this name</param>\n    ///<param name=\"Ordinal\">The action is registered with this overload priority</param>\n    ///<returns>true, if OnRegister succeeds</returns>\n    public bool OnRegister(ref string Name, ref int Ordinal)\n    {\n         Name  = \"CSharpAction\";\n         Ordinal    = 20;\n         return true;\n    }\n    ///<summary>\n    /// Documentation function for the action, which is called by Eplan on demand\n    /// returns the descriptive text for the action itself and if the action takes string parameters\n    /// (command line), it also provides the name and description of each parameter\n    ///</summary>\n    ///<param name=\"actionProperties\"> This object needs to be filled with information about the action\n    ///</param>\n    public void GetActionProperties(ref Eplan.EplApi.ApplicationFramework.ActionProperties actionProperties)\n    {\n        actionProperties.Description= \"Action test with parameters.\";\n        // description of first parameter\n        Eplan.EplApi.ApplicationFramework.ActionParameterProperties firstParam= new ActionParameterProperties();\n        firstParam.Set(\"Param1\", \"first test parameter\");\n        actionProperties.AddParameter(firstParam);\n        // description of second parameter\n        // Eplan.EplApi.ApplicationFramework.ActionParameterProperties secondParam= new ActionParameterProperties();\n        // secondParam.Set(\"Param2\", \"Second parameter for test\");\n        // actionProperties.AddParameter(secondParam);\n    }\n}\n```\n\n```\n\nPublic Class VBAction\n   Implements Eplan.EplApi.ApplicationFramework.IEplAction\n\n   '''<summary>\n   '''This function is called when executing the action.\n   '''</summary>\n   '''<returns>true, if the action performed successfully</returns>\n   Public Function Execute(ctx As Eplan.EplApi.ApplicationFramework.ActionCallingContext) As Boolean _\n     Implements Eplan.EplApi.ApplicationFramework.IEplAction.Execute\n      Dim dec As Decider = New Decider\n      dec.Decide(EnumDecisionType.eOkDecision, \"VBAction was called!\", \"Eplan.EplAddIn.VBDemo1\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK)\n      ' TODO: Add your Code here\n      Return True\n   End Function 'Execute\n\n   '''<summary>\n   '''This function is called by the application framework, when registering the add-in.\n   '''</summary>\n   '''<param name=\"Name\">The action is registered in Eplan under this name</param>\n   '''<param name=\"Ordinal\">The action is registered with this overload priority</param>\n   '''<returns>true, if OnRegister succeeds</returns>\n   Public Function OnRegister(ByRef Name As String, ByRef Ordinal As Integer) As Boolean _\n    Implements Eplan.EplApi.ApplicationFramework.IEplAction.OnRegister\n      Name = \"CSharpAction\"\n      Ordinal = 20\n      Return True\n   End Function 'OnRegister\n\n   '''<summary>\n   ''' Documentation function for the action, which is called by Eplan on demand\n   ''' returns the descriptive text for the action itself and if the action takes string parameters\n   ''' (command line), it also provides the name and description of each parameter\n   '''</summary>\n   '''<param name=\"actionProperties\"> This object needs to be filled with information about the action\n   '''</param>\n   Public Sub GetActionProperties(ByRef actionProperties As Eplan.EplApi.ApplicationFramework.ActionProperties) _\n    Implements Eplan.EplApi.ApplicationFramework.IEplAction.GetActionProperties\n      actionProperties.Description = \"Action test with parameters.\"\n      ' description of first parameter\n      Dim firstParam As New Eplan.EplApi.ApplicationFramework.ActionParameterProperties()\n      firstParam.Set(\"Param1\", \"first test parameter\")\n      actionProperties.AddParameter(firstParam)\n   End Sub 'getActionProperties\nEnd Class 'VBAction ' description of second parameter\n```\n\nThe parameter of type  ActionCallingContext  can be used to pass parameters to the action. For extracting the parameter values and for setting parameters (as return parameters, the class  ActionCallingContext  provides a set of functions:\n\n* [C#](#i-tab-content-CS)\n* [VB](#i-tab-content-VB)\n\n```\n\npublic bool Execute(Eplan.EplApi.ApplicationFramework.ActionCallingContext ctx )\n{\n   String strParamValue=null;\n   ctx.GetParameter(\"Param1\", ref strParamValue);\n   // use string parameter ...\n   // fill parameter \"ReturnParam\" with value \"return value\".\n   // the caller of this action can extract the parameter by ctx.getParameter(\"ReturnParam\", ...)\n   String strReturnValue= \"return value\";\n   ctx.AddParameter(\"ReturnParam\", strReturnValue);\n   return true;\n}\n```\n\n```\n\nPublic Function Execute(ctx As Eplan.EplApi.ApplicationFramework.ActionCallingContext) As Boolean _\n      Implements Eplan.EplApi.ApplicationFramework.IEplAction.Execute\n   Dim strParamValue As String = String.Empty\n   ctx.GetParameter(\"Param1\", strParamValue)\n   ' use string parameter ...\n   ' fill parameter \"ReturnParam\" with value \"return value\".\n   ' the caller of this action can extract the parameter by ctx.getParameter(\"ReturnParam\", ...)\n   Dim strReturnValue As String = \"return value\"\n   ctx.AddParameter(\"ReturnParam\", strReturnValue)\n   Return True\nEnd Function 'Execute\n```\n\nWhen an action is assigned to a ribbon button, these items are only enabled if the action is registered and enabled. You can enable / disable a registered action via the  IEplActionEnable  interface.\n\n* [C#](#i-tab-content-CS)\n* [VB](#i-tab-content-VB)\n\n```\n\npublic class TestAction : Eplan.EplApi.ApplicationFramework.IEplAction, Eplan.EplApi.ApplicationFramework.IEplActionEnable\n    {\n        //IEplAction Members\n        #region IEplActionEnable Members\n        public bool Enabled(string strActionName, Eplan.EplApi.ApplicationFramework.ActionCallingContext actionContext)\n        {\n            if (strActionName == \"TESTACTION\")\n            {\n                return false;\n            }\n            else\n            {\n                return true;\n            }\n        }\n        #endregion\n    }\n```\n\n```\n\nPublic Class TestAction\n   Implements Eplan.EplApi.ApplicationFramework.IEplAction\n   Implements Eplan.EplApi.ApplicationFramework.IEplActionEnable\n   'IEplAction Members ...\n   Public Function Enabled(strActionName As String, actionContext As Eplan.EplApi.ApplicationFramework.ActionCallingContext) As Boolean _\nImplements Eplan.EplApi.ApplicationFramework.IEplActionEnable.Enabled\n      If strActionName = \"TESTACTION\" Then\n         Return False\n      Else\n         Return True\n      End If\n   End Function 'Enabled\nEnd Class 'TestAction\n```"
    },
    {
        "source": "AddingRibbonCommand.md",
        "path": "/User Guide/API Framework/Add-ins",
        "title": "AddingRibbonCommand",
        "content": "An add-in can add one or more ribbon commands to the Extensions > API command gropup. Therefore the class  Eplan.EplApi.Gui.RibbonBar  provides a function  AddCommand  which should be called in the  OnRegister()  method of the add-in class:\n\n* C#](#i-tab-content-CS)\n* [VB](#i-tab-content-VB)\n\n```\n\n/// <summary>\n/// The function is called once during registration add-in.\n/// </summary>\n/// <param name=\"bLoadOnStart\"> true: In the next Eplan session, add-in will be loaded during initialization</param>\n/// <returns></returns>\npublic bool OnRegister(ref System.Boolean bLoadOnStart)\n{\n   var ribbonBar= new Eplan.EplApi.Gui.RibbonBar();\n   ribbonBar.AddCommand(\"CSharpAction\", \"CSharpAction\");\n   return true;\n}\n\n/// <summary>\n/// The function is called during unregistration the add-in.\n/// </summary>\n/// <returns></returns>\npublic bool OnUnregister()\n{\n    var ribbonBar = new Eplan.EplApi.Gui.RibbonBar();\n    return ribbonBar.RemoveCommand(\"CSharpAction\");\n}\n```\n\n```\n\n''' <summary>\n''' This function is called once the Add-ins through the Framework in the registering.  \n''' </summary>\n''' <param name=\"bLoadOnStart\"> True:  The Add-in is loaded in the future in system start and the function <seealso cref=\"OnInit\"/> is called. </param>\n''' <returns></returns>\nPublic Function OnRegister(ByRef bLoadOnStart As System.Boolean) As Boolean Implements IEplAddIn.OnRegister\n   Dim ribbonBar As Eplan.EplApi.Gui.RibbonBar= New Eplan.EplApi.Gui.RibbonBar\n   ribbonBar.AddCommand(\"CSharpAction\", \"CSharpAction\")\n   Return True\nEnd Function 'OnInitGui\n\n''' <summary>\n''' This function will remove from called once the Add-ins through the Framework in that the system.\n''' </summary>\n''' <returns></returns>\nPublic Function OnUnregister() As Boolean Implements IEplAddIn.OnUnregister\n    Dim ribbonBar As New RibbonBar()\n    Return ribbonBar.RemoveCommand(\"CSharpAction\")\nEnd Function\n```\n\nThe function  AddCommand(text, command line)  adds a button (i.e ribbon command) with the text \"CSharpAction\" and assigns the action \"CSharpAction\" to it. The button is then visible in Extensions > API command group. It is also possible to add it to a custom command group that exists in either persistent or a custom tab.\n\nRibbon commands are always assigned to an action. This can be either a custom action (created using the API) or an already existing action."
    },
    {
        "source": "AddinInVisualStudio.md",
        "path": "/User Guide/API Framework/Add-ins",
        "title": "AddinInVisualStudio",
        "content": "Compared to using a text editor and the compiler provided by the .NET Framework, it is much easier to create an add-in with using a development environment such as Visual Studio 2022.\n\nEplan templates are installed in Visual Studio with the API setup, which can be downloaded from the Eplan homepage](https://www.eplan.de/services/downloads/eplan-api/).   \nTo create an add-in, just create a project in Visual Studio using the \"Eplan Api Addin\" template from C# Projects:\n\n![](images/New_Project.jpg)\n\n The new project already references the essential Eplan API assemblies and a file with the module class:\n\n![](images/New_Project2.jpg)\n\nYou can add a new Action class by the Add New Item menu point and selecting the template \"Eplan Action\":\n\n![\n\nFor Visual Basic, the work flow is identical."
    },
    {
        "source": "CSharpAddins.md",
        "path": "/User Guide/API Framework/Add-ins",
        "title": "CSharpAddins",
        "content": "This section shows how to create an Eplan add-in in C#. In order to show that the installation of the .NET Framework already provides all the necessary tools (C-Sharp compiler, etc.), the add-in is not created as a Visual Studio project, but simply using a text editor and the command line tools of the .NET Framework.\n\n### a) Getting started:\n\nFirst, it is useful to create a directory to store the source code for your add-in. For this example we create a folder named \"SimpleCSharpAddIn\".\n\nNow start your text editor of choice, e.g. notepad, and start writing the source code.\n\n### b) Creating the module class:\n\nEvery Eplan add-in, including the C# add-in we are going to create, requires a certain class for managing the add-in. This class must implement the functions declared by the  IEplAddIn  interface:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n public class AddInModule: Eplan.EplApi.ApplicationFramework.IEplAddIn\n        {\n             public bool OnRegister(ref System.Boolean bLoadOnStart)\n             {\n                   bLoadOnStart=true;\n                   return true;\n              }\n             public bool OnUnregister()\n             {\n                   return true;\n             }\n             public bool OnInit()\n             {\n                   return true;\n             }\n             public bool OnInitGui()\n             {\n                   return true;\n             }\n             public bool OnExit()\n             {\n                   return true;\n             }\n       }\n ``` | |\n\nNow save this source code in the folder \"SimpleCSharpAddIn\" as a file named \"AddInModule.cs\".\n\n### c) Compiling the assembly (DLL)\n\nNow it is time to use the C-Sharp compiler. The compiler is located in the directory of the .NET Framework, for example  C:\\WINDOWS\\Microsoft.NET\\Framework\\v2.0.50727. This folder should be in the search path. Open your favorite shell and change to the \"SimpleCSharpAddInwhere\" directory where you just saved \"AddInModul.cs\".\n\nRun the C-Sharp compiler (csc.exe) with the following parameters:\n\ncsc /target:library /reference:..\\..\\..\\..\\bin\\Eplan.EplApi.AFu.dll /out: Eplan.EplAddin.SimpleCSharp.dll AddinModule.cs \n\nWhat is the meaning of these parameters?\n\n1. /taget:library:  We want to create a DLL and no  exe  file.\n2. /reference:..\\..\\..\\..\\bin\\Eplan.EplApi.AFu.dll:  Search in  Eplan.EplApi.AFu.dll  for all missing data (e.g.  IEplAddIn)\n3. /out: Eplan.EplAddin.SimpleCSharp.dll:  Name of the DLL to build is \"Eplan.EplAddin.SimpleCSharp.dll\"\n4. AddinModul.cs:  Name of the source file to compile\n\nIf nothing went wrong with the compilation, you'll now find the DLL \"Eplan.EplAddin.SimpleCSharp.dll\" in the folder \"SimpleCSharpAddIn\". Copy this file to the Eplan platform  bin  folder.\n\n### d) Loading an add-in in Eplan\n\nNow start Eplan. If the following system extensions are loaded in Eplan (which should normally be the case):  EplanEplApiModuleu.erx,  EplanEplApiModuleGUIu.erx.   \nClick on the ribbon File > Extras > Interfaces. > API > Manage.\n\n!](images/Addin_Menu.jpg)\n\nAfter clicking on Manage, a dialog â as shown below â will appear. After pressing the button Load, you can select \"Eplan.EplAddin.SimpleCSharp.dll\" from the  bin  directory.\n\n![](images/AddInDialog.jpg)\n\nOur add-in now appears in the list of the API modules dialog and will be loaded when Eplan is started.That is about all it can do. What we need now is an action!\n\n### e) Adding an Action to the C-Sharp add-in\n\nTherefore, create a second source file and save it as \"SimpleCSharpAction.cs\" in your source directory. To create an action, we need a class that implements the  IEplAction  interface. For a more detailed explanation, see the \"[Actions\" topic.\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n using Eplan.EplApi.ApplicationFramework;\n public class CSharpAction: IEplAction\n {\n       public bool Execute(ActionCallingContext ctx )\n       {\n             new Decider().Decide(EnumDecisionType.eOkDecision, \"CSharpAction was called!\", \"\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK);\n             return true;\n       }\n       public bool OnRegister(ref string Name, ref int Ordinal)\n       {       \n             return true;\n       }\n       public  void GetActionProperties(ref ActionProperties actionProperties)\n       {                  \n       }\n }\n ``` | |\n\nNow the compiler call needs to be slightly extended:\n\ncsc /target:library /reference:..\\..\\..\\..\\bin\\Eplan.EplApi.AFu.dll /reference:..\\..\\..\\..\\bin\\Eplan.EplApi.Baseu.dll /out:SimpleCSharpAddIn.dll AddinModule.cs SimpleCSharpAction.cs \n\nIf you added an action to an already loaded add-in, the add-in needs to be unloaded and loaded again for the changes to take effect.\n\nSo you just open the API modules dialog again, select the add-in in the list and click the Unload button. Then load the add-in again.\n\nNow, you can call your new action in Eplan via a command line call:\n\nW3u.exe CSharpAction \n\nWhen you start the action, the  Execute()  function of the  CSharpAction  is called. This function just shows a message box with the text \"CSharpAction was called!\". (new Decider().Decide(EnumDecisionType.eOkDecision, \"CSharpAction was called!\", \"\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK);).\n\n### Remarks\n\nPlease mind that users may start Eplan in QUIET mode using  W3u.exe /Quiet  or the API could be initialized by an offline program](UsingEplanAssemblies.html). Because of this, it is not recommended to show any message boxes in the methods of the  IEplAddIn  interface. If you encounter some problem during registering or initializing an add-in, just create and throw a  BaseException  or use  BaseException.FixMessage(...)  to add the message to the system messages list."
    },
    {
        "source": "ShadowCopyingAPIAssemblies.md",
        "path": "/User Guide/API Framework/Add-ins",
        "title": "ShadowCopyingAPIAssemblies",
        "content": "### Introduction\n\nSince version 2.6, Eplan API assemblies are shadow copied, i.e. they are saved in a temporary folder during registration and loaded from there.\n\nThe benefit of the shadow copy technique is that the original assemblies are not locked, so that newer versions can be distributed via a network share even if they are currently being used by other workstations.\n\nThis applies to both add-ins and add-ons. For more information regarding add-ons, please refer to the Shadow copying for add-ons chapter.\n\n### Process for add-ins\n\nWhen an add-in is loaded by Eplan start or via API > Manage option, the **add-in** and its **referenced DLLs** (including all subdirectories) are copied to a user application roaming directory. The path of this shadow directory is:\n\n%appdata%\\EPLAN\\ShadowCopyAssemblies\\Process-ID\\Addin-Name\\bin\n\nExample:\n\n![](images/shadow_copying_addins.png)\n\nThis means that all referenced files (\\*.dll  and  \\*.exe) and all subdirectories that also contain references (language subdirectories, etc.) are also copied. After resolving, they will be copied to the shadow directory.\n\n### Possible issues and troubleshooting\n\n**Referencing relative paths**  \nThe shadow copy technique could lead to errors if the add-in references data from other directories using a relative path to the original add-in directory.\n\n**Solution**: Use the  IEplAddInShadowCopy](Eplan.EplApi.AFu~Eplan.EplApi.ApplicationFramework.IEplAddInShadowCopy.html)  interface, that allows you to get the original path of an add-in.\n\n**Using an assembly in different versions**  \nIn addition, conflicts can arise when multiple add-in projects in a solution refer to an assembly with a namespace and class of the same name, but different versions. The following scenario illustrates the problem:  \nLet's assume that you use the  Write  library of version 1.0.0 in one project (Project1) and the  Write  library of version 2.0.0 in the other project (Project2). This will lead to unwanted behavior in your solution: Depending on which project â be it Project1 or Project2 â you call first, it will be executed correctly and will reference the correct library. If you then execute the other project, it will reference the previous library, the first version is executed.\n\n**Solution**: To work around this behavior, sign the library versions independently of each other. You can then use the library with different versions at will. Signing gives the library a specific key token or \"strong name\" that helps distinguish the libraries."
    },
    {
        "source": "VisualBasicAddins.md",
        "path": "/User Guide/API Framework/Add-ins",
        "title": "VisualBasicAddins",
        "content": "Writing an add-in in Visual Basic .NET is basically the same as described in the topic \"Creating add-ins in CSharp\". The only difference is the source code syntax and the way the compiler is called.\n\nCreate a \"VBAddInModule.vb\" file with the following content:\n\n| VB | Copy Code |\n| --- | --- |\n| ``` \n Public Class AddInModule\n    Implements Eplan.EplApi.ApplicationFramework.IEplAddIn\n \n    Public Function OnRegister(ByRef bLoadOnStart As System.Boolean) As Boolean _\n      Implements Eplan.EplApi.ApplicationFramework.IEplAddIn.OnRegister\n       bLoadOnStart = True\n       Return True\n    End Function 'OnRegister\n \n    Public Function OnUnregister() As Boolean _\n     Implements Eplan.EplApi.ApplicationFramework.IEplAddIn.OnUnregister\n       Return True\n    End Function 'OnUnregister\n \n    Public Function OnInit() As Boolean _\n     Implements Eplan.EplApi.ApplicationFramework.IEplAddIn.OnInit\n       Return True\n    End Function 'OnInit\n \n    Public Function OnInitGui() As Boolean _\n     Implements Eplan.EplApi.ApplicationFramework.IEplAddIn.OnInitGui\n       Return True\n    End Function 'OnInitGui\n \n    Public Function OnExit() As Boolean _\n     Implements Eplan.EplApi.ApplicationFramework.IEplAddIn.OnExit\n       Return True\n    End Function 'OnExit\n End Class 'AddInModule\n ``` | |\n\nInvoke the Visual Basic compiler (vbc.exe) with the following parameters:\n\nvbc /target:library /reference:..\\..\\..\\..\\bin\\Eplan.EplApi.AFu.dll /out:SimpleVBAddIn.dll VBAddinModule.vb \n\nFor an action create the following source file and save it as \"SimpleVBAction.cs\" in your source directory. To create an action, we need a class that implements the  IEplAction  interface. For a more detailed explanation, see the \"Actions\" topic.\n\n| VB | Copy Code |\n| --- | --- |\n| ``` \n Imports Eplan.EplApi.ApplicationFramework\n \n Public Class VBAction\n    Implements IEplAction\n    Public Function Execute(ctx As ActionCallingContext) As Boolean Implements IEplAction.Execute\n       Dim dec As Decider = New Decider\n       dec.Decide(EnumDecisionType.eOkDecision, \"VBAction was called!\", \"\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK)\n       Return True\n    End Function 'Execute\n \n    Public Function OnRegister(ByRef Name As String, ByRef Ordinal As Integer) As Boolean _\n     Implements IEplAction.OnRegister\n       Name = \"VBAction\"\n       Ordinal = 20\n       Return True\n    End Function 'OnRegister\n \n    Public Sub GetActionProperties(ByRef actionProperties As ActionProperties) _\n     Implements IEplAction.GetActionProperties\n    End Sub 'GetActionProperties\n End Class 'VBAction\n ``` | |\n\nvbc /target:library /reference:..\\..\\..\\..\\bin\\Eplan.EplApi.AFu.dll /reference:..\\..\\..\\..\\bin\\Eplan.EplApi.Baseu.dll /out:SimpleVBAddIn.dll VBAddinModule.vb SimpleVBAction.vb"
    },
    {
        "source": "AutomaticActions.md",
        "path": "/User Guide/API Framework/Add-ins/Actions",
        "title": "AutomaticActions",
        "content": "This topic describes the automatic actions for the Eplan command line â we also call them \"**command line actions**\". In contrast to a normal ribbon action, an automatic action does a complete task without any user interaction. It will show no dialogs.\n\n### How do automatic actions work?\n\nA command line action first checks, whether all parameters passed to it are valid. It checks if a given parameter exists or if the given project is available, etc. It then processes the parameter values so that they can be passed to the parameters of the corresponding API  HEServices  class. Now, the  HEServices  function is called and performs the actual task. This approach ensures that command line actions and  HEServices  functions conduct exactly the same internal functionality.\n\nA command line action has either the complete or a subset of the functionality of the respective  HEServices  class. The following figure shows the principle:\n\n![](images/AutoAction.jpg)\n\nThese are some of the available command line actions:\n\n* Backup projects and master data\n* Restore projects and master data\n* Compress projects\n* Import\n* Export\n* Device list\n* Parts list\n* Connections and cable generation\n* Search\n* Edit\n* Print\n* Translate\n* Check\n* Labeling\n* Getting the selected project or page\n* ...\n\n### General remarks\n\n* If the project name parameter is not specified, the currently selected project is used. When calling the action from the Windows command line the  PROJECTNAME  parameter must be set.\n\n* Boolean values need to be set as  0  for \"false\" and  1  for \"true\".\n\n* You may not pass an empty string as parameter value (e.g.  /PARAMETER:\"\"). If you do not want to set a specific parameter, just skip it.\n\n* For most parameters that specify a scheme name, the last used scheme will be used, if the respective parameter is not set. You can easily check in GUI which scheme is last used.\n\n* In general, parameter names are not case sensitive, while parameter values may be case sensitive depending on their purpose."
    },
    {
        "source": "CallingActions.md",
        "path": "/User Guide/API Framework/Add-ins/Actions",
        "title": "CallingActions",
        "content": "All ribbon buttons in P8 are linked to an action. This means that when a ribbon button is called, the corresponding action is executed. In order to execute an action via Eplan API, you have to create an  Action  object and execute the action with the  Execute  method.\n\nIn order to create an  Action  object, you need to know the action by its name. You have to create a new  ActionManager  object and call the  FindAction  function, which takes the name of the action as parameter.\n\nTo pass and evaluate action parameters, you need the  ActionCallingContext  class:\n\n* C#](#i-tab-content-CS)\n* [VB\n\n```\n\nString strAction = \"TestAction\";\nActionManager oAMnr= new ActionManager();\nAction oAction= oAMnr.FindAction(strAction);\nif (oAction != null)\n{\n    ActionCallingContext ctx = new ActionCallingContext();\n    bool bRet=oAction.Execute(ctx);\n    if (bRet)\n    {               \n    new Decider().Decide(EnumDecisionType.eOkDecision, \"The Action \" + strAction + \" ended successfully!\", \"\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK);\n    }\n    else\n    {\n    new Decider().Decide(EnumDecisionType.eOkDecision, \"The Action \" + strAction + \" ended with errors!\", \"\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK);\n    }\n}\n```\n\n```\n\nDim strAction As String = \"TestAction\"\nDim oAMnr As New ActionManager()\nDim oAction As Action = oAMnr.FindAction(strAction)\nDim dec As Decider = New Decider\nIf Not (oAction Is Nothing) Then\n   Dim ctx As New ActionCallingContext()\n   Dim bRet As Boolean = oAction.Execute(ctx)\n   If bRet Then\n      dec.Decide(EnumDecisionType.eOkDecision, \"The Action \" + strAction + \" ended successfully!\", \"\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK)              \n   Else\n      dec.Decide(EnumDecisionType.eOkDecision, \"The Action \" + strAction + \" ended with errors!\", \"\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK)\n   End If\nEnd If\n```\n\nTo find out which action is linked to which ribbon button, you can evaluate the  onActionStart.String.\\*  event. Alternatively, after clicking the ribbon button, press [Ctrl] + [VK\\_OEM\\_5] to show the Diagnostics Dialog. [VK\\_OEM\\_5] corresponds to the [^] key on a German keyboard or to the [\\] on a United States 101 keyboard.\n\nFor a list of automatic actions, refer to the topic \"Automatic Actions\".\n\n**Important:**\n\nPlease mind that an action may modify the  ActionCallingContext  during its execution. For example, sometimes project IDs are added to the context and are passed to an inner action. Reusing the same  ActionCallingContext  for another action call may lead to unexpected results. So in most cases it is advisable to create a new  ActionCallingContext  for a new action call.\n\n### Command line call\n\nTo extend the Eplan command line with new commands and parameters, you need to implement an action. The action can have its own parameters and can call other API functions.\n\nIn this way an action is executed just after starting Eplan, for example:\n\nEPLAN.EXE /Variant:\"Electric P8\" /NoLoadWorkspace action /Param1:value1 /Param2:value2 /Param3:value3 \n\nThe parameter without a flag (/  or  -) is interpreted as the name of an action to be executed. All following parameters are passed to the action. Only one action is allowed per command line call.\n\nA script can also contain and register an action. This means that it can also evaluate action parameters.\n\nIt is necessary to pass more general command line parameters **before** the action name.\n\nList of general command line parameters evaluated by Eplan:\n\n|  |  |\n| --- | --- |\n| Parameter | Description |\n| /Variant | Select the product variant you want to start. E.g. \"Electric P8\" or \"Fluid\" |\n| /NoLoadWorkspace | No workspace is loaded or restored. |\n| /NoSplash | No splash screen is shown on system start. |\n| /Language:en\\_us | Eplan is started with GUI language \"English\". The language predefined in the settings of Eplan will not be changed. |\n| /Auto | Eplan is shut down after executing the command line. |\n| /Quiet | No dialogs are shown while a command line is being executed. |\n| /Frame:0 | * /Frame:0 â The Eplan main frame is invisible * /Frame:1 â The Eplan main frame is restored to its original size and position * /Frame:2 â The Eplan main frame is started minimized * /Frame:3 â The Eplan main frame is started maximized |\n| /Setup | All Settings are restored to their installation default |\n| <action name> | The action will be executed, all following parameters (starting with  /  or  â) are passed to the action as parameters. |\n\nAny command line parameter after the action name is passed as parameter to the action. The parameters are wrapped into an  ActionCallingContext  as string parameters and can be extracted by the action. Please note that the parameter names on the command line and in the  ActionCallingContext  must be spelled in the exactly the same:\n\nEPLAN.EXE /Variant:\"Electric P8\" action /Param1:value1 /Param2:value2 /Param3:value3 \n\n* C#](#i-tab-content-CS)\n* [VB](#i-tab-content-VB)\n\n```\n\npublic bool Execute(ActionCallingContext ctx )\n{\n   String strParamValue1=null;\n   ctx.GetParameter(\"Param1\", ref strParamValue1);\n   String strParamValue2=null;\n   ctx.GetParameter(\"Param2\", ref strParamValue2);\n   String strParamValue3=null;\n   ctx.GetParameter(\"Param3\", ref strParamValue3);\n   return true;\n}\n```\n\n```\n\nPublic Function Execute(ctx As ActionCallingContext) As Boolean Implements IEplAction\n   Dim strParamValue1 As String = Nothing\n   ctx.GetParameter(\"Param1\", strParamValue1)\n   Dim strParamValue2 As String = Nothing\n   ctx.GetParameter(\"Param2\", strParamValue2)\n   Dim strParamValue3 As String = Nothing\n   ctx.GetParameter(\"Param3\", strParamValue3)\n   Return True\nEnd Function 'Execute\n```\n\n Warning: When starting Eplan from the command line with an action, then no previously opened projects are opened at the beginning of the session."
    },
    {
        "source": "Registration.md",
        "path": "/User Guide/API Framework/Add-ons",
        "title": "Registration",
        "content": "## Manual registration of an add-on\n\nStart Eplan now. In ribbon item File > Extras > Interfaces you will find the category Add-ons > Manage.\n\n!](images/Addons_files/image004.jpg)\n\n*Figure 1: Ribbon option Add-ons*\n\nAfter clicking on Manage, a dialog â as shown below â will appear. By pressing the button ![](images/Addons_files/image005.png) you can select the  install.xml  file from the  CFG  directory.\n\n![](images/Addons_files/image006.jpg)\n\n*Figure 2: Manual registration of an add-on*\n\nThe add-on now appears in the add-on list. To register it, you have to check the corresponding check-box in the \"Registered\" column. Only then will the DLL file stored in the  BIN  folder appear in the list of the API modules dialog and will be loaded.\n\n### Registration of an add-on via an action\n\nIt is also possible to register an add-on via an action call. This is based on automatic actions for the Eplan command line functionalities â also called \"command line actions\".\n\n![](images/Addons_files/image003.gif)Tip:\n\nFor further information about \"[Automatic actions](AutomaticActions.html)\" see our API Help.\n\nFor the proper use of that command line action, it is necessary to pass further general command line parameters.\n\n|  |  |\n| --- | --- |\n| **Parameter** | **Description** |\n| Path | The path where the add-on is located |\n| InstallFile | The complete path to the  install.xml |\n\n![Example:\n\nRegistering Add-ons:\n\nXSettingsRegisterAction /Path:c:\\MyAddOn\n\nXSettingsRegisterAction /InstallFile: c:\\MyAddOn\\CFG\\Install.xml\n\nAfter registering the add-on via an action call, you have to verify if the add-on is registered in the add-ons dialog and the belonging add-in files are loaded."
    },
    {
        "source": "Registration.md",
        "path": "/User Guide/API Framework/Add-ons",
        "title": "Automatic registration of an add-on",
        "content": "There are two ways to initiate the automatic registration of an add-on when Eplan is started.\n\n### Automatic registration with registry settings\n\nIn the Registry Editor â see figure 3 â all Eplan installation can be found at:\n\nHKEY\\_LOCAL\\_MACHINE / SOFTWARE / EPLAN / EPLAN W3\n\n![](images/Addons_files/image008.jpg)\n\n*Figure 3: Automatic registration with registry settings in the Registry Editor*\n\nAn add-on can be found like this:\n\n<Add-on>\n\n<Version>\n\nAutoreg            TRUE\n\nXMLPath            C:\\Program Files\\EPLAN\\ApiTest Add-on\\2.9.0\\Cfg\\install.xml\n\nAutoreg: When this flag is \"TRUE\", the add-on can register automatically.\n\nXMLPath: The path to  install.xml  of the add-on.\n\nAfter double clicking on  Autoreg, a dialog â as shown below â will appear.\n\n!](images/Addons_files/image009.png)\n\n*Figure 4: Value editor*\n\nNow you can set the value for the automatic registration to \"TRUE\" or \"FALSE\".\n\n### Automatic registration with company settings\n\nStart Eplan now. Select the ribbon item File and select the option Settingsâ¦.\n\n![](images/Addons_files/image010.png)\n\n*Figure 5: Option Settings...*\n\nAfter clicking on Settings..., the settings service dialog â as shown below â will appear. By navigating to Company > Management > Add-ons you can then register a server path to Eplan.\n\n![\n\n*Figure 6: Settings: Add-ons*\n\nAt the startup of Eplan, this folder is searched for  install.xml  files. When an add-on  install.xml  is found (this means the  install.xml  is in the  CFG  folder, the version matches, etc.), the add-on will be registered."
    },
    {
        "source": "ShadowCopying.md",
        "path": "/User Guide/API Framework/Add-ons",
        "title": "ShadowCopying",
        "content": "### Introduction\n\nSince version 2.6, Eplan API assemblies are shadow copied, i.e. they are saved in a temporary folder during registration and loaded from there.\n\nThe benefit of the shadow copy technique is that the original assemblies are not locked, so that newer versions can be distributed via a network share even if they are currently being used by other workstations.\n\nThis applies to both add-ons and add-ins. For more information regarding add-ins, please refer to the Shadow copying for add-ins chapter.\n\n### Process for add-ons\n\nFor add-ons, the **entire  bin  directory** of the add-on with its subdirectories is copied to the user application roaming directory. The path of this shadow directory is:\n\n%appdata%\\EPLAN\\ShadowCopyAssemblies\\Process-ID\\Addon-Name\n\nExample:\n\n![](images/shadow_copying_addons.png)\n\nThis means that all files (\\*.dll  and  \\*.exe) and all  bin  subdirectories (language subdirectories, etc.) are also copied. This is done when Eplan is started and an add-on is registered or when an add-on is registered manually from the Add-ons dialog.\n\nEplan loads the assemblies of the add-on from the shadow directory and not from the original add-on directory. This allows an add-on to be updated without the need to stop all Eplan instances using the add-on.\n\n### What exactly does Eplan do?\n\nAt any start of Eplan, the registry or the path for server add-ons is scanned for new add-ons. The  install.xml  is read and the following things are done:\n\n* Does this add-on fit to the main version?\n* Is the correct license option booked?\n* Is the version correct?\n\nWhen everything is done so far, Eplan then registers the new add-on:\n\n* All  \\*.xml  files from the  CFG  folder are read. The settings are copied to the settings of the main version.\n* The  eplset<applicationmodifer>.xml  is read: All binaries defined there are loaded now.\n* The API modules are loaded.\n* The API references are registered.\n* The scripts are registered.\n* The base data of the add-on is copied to the base data of Eplan.\n\n### Possible issues and troubleshooting\n\n**Using an assembly in different versions**  \nConflicts can arise when multiple add-on projects in a solution refer to an assembly with a namespace and class of the same name, but different versions. The following scenario illustrates the problem:  \nLet's assume that you use the  Write  library of version 1.0.0 in one project (Project1) and the  Write  library of version 2.0.0 in the other project (Project2). This will lead to unwanted behavior in your solution: Depending on which project â be it Project1 or Project2 â you call first, it will be executed correctly and will reference the correct library. If you then execute the other project, it will reference the previous library, the first version is executed.\n\n**Solution**: To work around this behavior, sign the library versions independently of each other. You can then use the library with different versions at will. Signing gives the library a specific key token or \"strong name\" that helps distinguish the libraries."
    },
    {
        "source": "Structure.md",
        "path": "/User Guide/API Framework/Add-ons",
        "title": "Structure",
        "content": "### The folder structure\n\nEvery add-on has the same folder structure. The folder names are marked with  <>  when names are optional and can be changed by the add-on developer.\n\n!](images/Addons_files/image002.gif)Note:\n\nThis add-on folder can exist anywhere on the disk!\n\nAn add-on always consists of the same folder structure, which basically looks like this:\n\n<Add-on>\n\n<Add-on version>\n\nBIN         Here, all binaries of the add-on are installed.\n\nCFG         Here, all XML files and the  install.xml  are installed. The  install.xml  file is the base data.  \n                                            The names of the folders are listed in the  install.xml  for copying the data to the Eplan base data.\n\n<Images>\n\n<Scripts>\n\n<XML>\n\n<â¦>\n\n### The files\n\nThe most important file is the  install.xml. It contains all the information about the add-on and the Eplan version.\n\nThis paragraph shows an  install.xml  file example, which is created with the  EplAddonUtility.exe.\n\n![Tip:\n\nFor further information, about how to create an add-on with the  EplAddonUtility.exe  and which terms and conditions you should follow, see the \"EplAddonUtility\" documentation.\n\n| XML | Copy Code |\n| --- | --- |\n| ``` \n <Settings format=\"2\">\n   <CAT name=\"INSTALL\">\n     <MOD name=\"AF\">\n <!âThe application modifier is the unique identifier for this add-on. Either spaces or dots are allowed. Otherwise, the registration is not possible then. -->\n       <Setting name=\"ApplicationModifier\" type=\"string\" info=\"Name modification for specific application configuration\">\n         <Val>MyAddon</Val>\n       </Setting>\n     </MOD>\n   </CAT>\n   <CAT name=\"STATION\">\n     <MOD name=\"SYSTEM\">\n       <LEV1 name=\"MyAddon\">\n <!âThis is the path to the xml file. This setting is patched by the installer -->\n         <Setting name=\"XMLPath\" type=\"string\" info=\"patched path to install.xml\">\n           <Val>C:\\Users\\ Username \\Desktop\\MyAddon\\CFG\\</Val>\n         </Setting>\n <!âThis is the version of the add-on this setting is patched by the installer. -->\n         <Setting name=\"Version\" type=\"string\" info=\"version nr of this addon\">\n           <Val>1.0.0</Val>\n         </Setting>\n <!âThis node describe the main versions, this add-on belongsto.. -->\n         <LEV2 name=\"MainVersion\">\n           <LEV3 name=\"Basic\">\n <!âThis setting is the license identifier for the main version. All these licences MUST be available, only then this add-on will be registered -->\n             <Setting name=\"Licences\" type=\"string\" info=\"Licence of Main Product to identify it\">\n               <Val>700</Val>\n             </Setting>\n <!âThis setting is the version identifier for the main version. By multiple versions, ONE of this licenc-es MUST be identical to the main version number, then this add-on is registered. -->\n             <Setting name=\"Versions\" type=\"string\" info=\"Version of Main Product to identify it\">\n               <Val>2.9.0</Val>\n             </Setting>\n           </LEV3>\n           <LEV3 name=\"FLUID\">\n             <Setting name=\"Licences\" type=\"string\" info=\"Licence of Main Product to identify it\">\n               <Val>703</Val>\n             </Setting>\n             <Setting name=\"Versions\" type=\"string\" info=\"Version of Main Product to identify it\">\n               <Val>2.9.0</Val>\n             </Setting>\n           </LEV3>\n           <LEV3 name=\"VIEWER\">\n             <Setting name=\"Licences\" type=\"string\" info=\"Licence of Main Product to identify it\">\n               <Val>701</Val>\n             </Setting>\n             <Setting name=\"Versions\" type=\"string\" info=\"Version of Main Product to identify it\">\n               <Val>2.9.0</Val>\n             </Setting>\n           </LEV3>\n           <LEV3 name=\"EDUCATION\">\n             <Setting name=\"Licences\" type=\"string\" info=\"Licence of Main Product to identify it\">\n               <Val>790</Val>\n             </Setting>\n             <Setting name=\"Versions\" type=\"string\" info=\"Version of Main Product to identify it\">\n               <Val>2.9.0</Val>\n             </Setting>\n           </LEV3>\n           <LEV3 name=\"CPM\">\n             <Setting name=\"Licences\" type=\"string\" info=\"Licence of Main Product to identify it\">\n               <Val>786</Val>\n             </Setting>\n             <Setting name=\"Versions\" type=\"string\" info=\"Version of Main Product to identify it\">\n               <Val>2.9.0</Val>\n             </Setting>\n           </LEV3>\n           <LEV3 name=\"TRIAL\">\n             <Setting name=\"Licences\" type=\"string\" info=\"Licence of Main Product to identify it\">\n               <Val>702</Val>\n             </Setting>\n             <Setting name=\"Versions\" type=\"string\" info=\"Version of Main Product to identify it\">\n               <Val>2.9.0</Val>\n             </Setting>\n           </LEV3>\n           <LEV3 name=\"Preplanning\">\n             <Setting name=\"Licences\" type=\"string\" info=\"Licence of Main Product to identify it\">\n               <Val>1132</Val>\n             </Setting>\n             <Setting name=\"Versions\" type=\"string\" info=\"Version of Main Product to identify it\">\n               <Val>2.9.0</Val>\n             </Setting>\n           </LEV3>\n           <LEV3 name=\"FluidHoseConfigurator\">\n             <Setting name=\"Licences\" type=\"string\" info=\"Licence of Main Product to identify it\">\n               <Val>1192</Val>\n             </Setting>\n             <Setting name=\"Versions\" type=\"string\" info=\"Version of Main Product to identify it\">\n               <Val>2.9.0</Val>\n             </Setting>\n           </LEV3>\n           <LEV3 name=\"ProPanel\">\n             <Setting name=\"Licences\" type=\"string\" info=\"Licence of Main Product to identify it\">\n               <Val>565</Val>\n             </Setting>\n             <Setting name=\"Versions\" type=\"string\" info=\"Version of Main Product to identify it\">\n               <Val>2.9.0</Val>\n             </Setting>\n           </LEV3>\n         </LEV2>\n       </LEV1>\n <!âNow the base data the add-on has will be copied to the Eplan base data. Define as many pathes as possible. -->\n       <LEV1 name=\"Basedata\">\n         <LEV2 name=\"MyAddon\">\n <!âCopy all files behind this setting pathes to pathes for master dataâ¦ -->\n           <Setting name=\"CopyTo\" type=\"string\" info=\"copy-to pathes for masterData\">\n             <Val>USER.TrDMProject.Masterdata.Pathnames..Projects</Val>\n             <Val>USER.TrDMProject.Masterdata.Pathnames..Templates</Val>\n             <Val>USER.TrDMProject.Masterdata.Pathnames..Symbols</Val>\n             <Val>USER.TrDMProject.Masterdata.Pathnames..Forms</Val>\n             <Val>USER.TrDMProject.Masterdata.Pathnames..Frames</Val>\n             <Val>USER.TrDMProject.Masterdata.Pathnames..FctDefs</Val>\n             <Val>USER.TrDMProject.Masterdata.Pathnames..Revisions</Val>\n             <Val>USER.TrDMProject.Masterdata.Pathnames..Images</Val>\n             <Val>USER.TrDMProject.Masterdata.Pathnames..DXFDWG</Val>\n             <Val>USER.TrDMProject.Masterdata.Pathnames..MechanicalModels</Val>\n             <Val>USER.SYSTEM.Pathnames..ExternalDocuments</Val>\n             <Val>USER.SYSTEM.Pathnames..Scheme</Val>\n           </Setting>\n         </LEV2>\n <!ââ¦from pathes for master data. The count of the settings of âCopyToâ and âCopyFromâ has to be identical. -->\n         <Setting name=\"CopyFrom\" type=\"string\" info=\"copy-from pathes for masterData\">\n           <Val>USER.TrDMProject.Masterdata.Pathnames.MyAddon.Projects</Val>\n           <Val>USER.TrDMProject.Masterdata.Pathnames.MyAddon.Templates</Val>\n           <Val>USER.TrDMProject.Masterdata.Pathnames.MyAddon.Symbols</Val>\n           <Val>USER.TrDMProject.Masterdata.Pathnames.MyAddon.Forms</Val>\n           <Val>USER.TrDMProject.Masterdata.Pathnames.MyAddon.Frames</Val>\n           <Val>USER.TrDMProject.Masterdata.Pathnames.MyAddon.FctDefs</Val>\n           <Val>USER.TrDMProject.Masterdata.Pathnames.MyAddon.Macros</Val>\n           <Val>USER.TrDMProject.Masterdata.Pathnames.MyAddon.Images</Val>\n           <Val>USER.TrDMProject.Masterdata.Pathnames.MyAddon.DXFDWG</Val>\n           <Val>USER.TrDMProject.Masterdata.Pathnames.MyAddon.MechanicalModels</Val>\n           <Val>USER.SYSTEM.Pathnames.MyAddon.ExternalDocuments</Val>\n           <Val>USER.SYSTEM.Pathnames.MyAddon.Scheme</Val>\n         </Setting>\n       </LEV1>\n     </MOD>\n   </CAT>\n   <CAT name=\"USER\">\n     <MOD name=\"TrDMProject\">\n       <LEV1 name=\"Masterdata\">\n         <LEV2 name=\"Pathnames\">\n           <LEV3 name=\"MyAddon\">\n             <Setting name=\"Projects\" type=\"string\" info=\"file path to masterData\">\n               <Val>C:\\Users\\ Username \\Desktop\\MyAddon\\CFG\\MyAddon\\Projects</Val>\n             </Setting>\n             <Setting name=\"Templates\" type=\"string\" info=\"file path to masterData\">\n               <Val>C:\\Users\\ Username \\Desktop\\MyAddon\\CFG\\MyAddon\\Templates</Val>\n             </Setting>\n             <Setting name=\"Symbols\" type=\"string\" info=\"file path to masterData\">\n               <Val>C:\\Users\\ Username \\Desktop\\MyAddon\\CFG\\MyAddon\\Symbols</Val>\n             </Setting>\n             <Setting name=\"Forms\" type=\"string\" info=\"file path to masterData\">\n               <Val>C:\\Users\\ Username \\Desktop\\MyAddon\\CFG\\MyAddon\\Forms</Val>\n             </Setting>\n             <Setting name=\"Frames\" type=\"string\" info=\"file path to masterData\">\n               <Val>C:\\Users\\ Username \\Desktop\\MyAddon\\CFG\\MyAddon\\PlotFrames</Val>\n             </Setting>\n             <Setting name=\"FctDefs\" type=\"string\" info=\"file path to masterData\">\n               <Val>C:\\Users\\ Username \\Desktop\\MyAddon\\CFG\\MyAddon\\FunctionDefinition</Val>\n             </Setting>\n             <Setting name=\"Macros\" type=\"string\" info=\"file path to masterData\">\n               <Val>C:\\Users\\ Username \\Desktop\\MyAddon\\CFG\\MyAddon\\Macros</Val>\n             </Setting>\n             <Setting name=\"Images\" type=\"string\" info=\"file path to masterData\">\n               <Val>C:\\Users\\ Username \\Desktop\\MyAddon\\CFG\\MyAddon\\Images</Val>\n             </Setting>\n             <Setting name=\"DXFDWG\" type=\"string\" info=\"file path to masterData\">\n               <Val>C:\\Users\\ Username \\Desktop\\MyAddon\\CFG\\MyAddon\\DXF_DWG</Val>\n             </Setting>\n             <Setting name=\"MechanicalModels\" type=\"string\" info=\"file path to masterData\">\n               <Val>C:\\Users\\ Username \\Desktop\\MyAddon\\CFG\\MyAddon\\Mechanical models</Val>\n             </Setting>\n             <Setting name=\"Scripts\" type=\"string\" info=\"file path to masterData\">\n               <Val>C:\\Users\\ Username \\Desktop\\MyAddon\\CFG\\MyAddon\\Documents</Val>\n             </Setting>\n             <Setting name=\"Scheme\" type=\"string\" info=\"file path to masterData\">\n               <Val>C:\\Users\\Username\\Desktop\\MyAddon\\CFG\\MyAddon\\Schemes</Val>\n             </Setting>\n           </LEV3>\n         </LEV2>\n       </LEV1>\n     </MOD>\n     <MOD name=\"System\">\n       <LEV1 name=\"Pathnames\">\n         <LEV2 name=\"MyAddon\" />\n       </LEV1>\n     </MOD>\n   </CAT>\n </Settings>\n ``` | |\n\n### Information about the settings\n\nApplicationModifier:  \nThe identifier for this add-on. This has to be a unique name without blanks and dots.\n\nXMLPath:  \nLocation of CFG folder of add-on\n\nVersion:  \nThis is the version number of the add-on.\n\nMainVersion:  \nOne sub-node belongs to one Eplan version. The  Basic  node contains the licence information and version information for Eplan Electric P8.\n\nLicences:  \nAdd-on program validity. All of the licences must be available, so this add-on can be registered for this main version.\n\nVersions:  \nAdd-on version validity. One of the version numbers must match the Eplan version number, so this add-on can be registered. The version number can contain a \\* as a wildcard. This is interpreted as \"any\".\n\n### The API add-ins\n\nIt is possible to list the API add-ins in an XML file with any name.\n\n| XML | Copy Code |\n| --- | --- |\n| ``` \n <Settings format=\"2\">\n   <CAT name=\"STATION\">\n     <MOD name=\"AF\">\n       <LEV1 name=\"ApiModules\">\n         <Setting name=\"MyAddon\" type=\"string\" info=\"\">\n           <Val>Eplan.EplAddin.Addin_2_8</Val>\n         </Setting>\n       </LEV1>\n     </MOD>\n   </CAT>\n </Settings>\n ``` | |\n\nAll API modules in the setting  ApiModules  are registered and loaded.\n\nWhen an API add-in has a linked DLL in the add-on binary path, the DLL should be registered as a reference. This is the list in \"API Reference\". Then Eplan will always be able to resolve this API add-in.\n\n### The Scripts\n\nIf a script is to be registered when the add-on is registered, an XML file must have a content similar to this:\n\n| XML | Copy Code |\n| --- | --- |\n| ``` \n <Settings format=\"2\">\n   <CAT name=\"STATION\">\n     <MOD name=\"AF\">\n       <LEV1 name=\"Scripts\">\n         <Setting name=\"MyAddon\" type=\"string\" info=\"\">\n           <Val>BIN\\myScript.cs</Val>\n         </Setting>\n       </LEV1>\n     </MOD>\n   </CAT>\n </Settings>\n ``` | |\n\nThe script file location is either an absolute path or a relative one. The relative path is calculated from the add-on path, where the  BIN  folder and the  CFG  folder is in.\n\n### Ribbons\n\nWith the version 2022, it is possible to import a ribbon bar or rather ribbon tabs with their children (for more information, please take a look at the Ribbon Bar chapter) when the add-on is registered.\n\n| XML | Copy Code |\n| --- | --- |\n| ``` \n <Settings format=\"2\">\n   <CAT name=\"USER\">\n     <MOD name=\"AF\">\n       <LEV1 name=\"Ribbon\">\n         <Setting name=\"Ribbonbartest\" type=\"string\" info=\"\">\n           <Val>CFG\\myRibbonTab.xml</Val>\n         </Setting>\n       </LEV1>\n     </MOD>\n   </CAT>\n </Settings>\n ``` | |\n\nThe custom ribbon tab is imported from the XML file when the add-on is registered. The user can remove the ribbon tab by customizing the ribbon (i.e. when the user changes his workspace). Unregistering the add-on will also remove the ribbon tab."
    },
    {
        "source": "Unregistration.md",
        "path": "/User Guide/API Framework/Add-ons",
        "title": "Unregistration",
        "content": "## Manual unregistration of an add-on\n\nAfter clicking the Add-ons option (as shown in figure 1), the same dialog â as shown in figure 2 â will appear. After deactivating the add-on,  the button !](images/Addons_files/image012.png) will be enabled.\n\n![](images/Addons_files/image013.jpg)\n\n*Figure 7: Unregister add-ons*\n\nBy clicking on the delete button, the add-on will be deleted from the list and also will the belonging add-in be deleted from the list of the API module dialog.\n\n![](images/Addons_files/image014.gif)Warning:\n\nThe delete button ![](images/Addons_files/image012.png) will only be enabled, when the add-on was manually registered before.\n\n### Unregistration of an add-on via an action\n\nIt is also possible to unregister an add-on via an action call.\n\n|  |  |\n| --- | --- |\n| **Parameter** | **Description** |\n| Path | The path where the add-on is located |\n| InstallFile | The complete path to the  install.xml |\n\n![Example:\n\nRegistering Add-ons:\n\nXSettingsUnregisterAction /Path:c:\\MyAddOn\n\nXSettingsUnregisterAction /InstallFile: c:\\MyAddOn\\CFG\\Install.xml\n\nAfter you unregistered the add-on via the action call, you may want to verify if the add-on is actually unregistered in the Add-ons dialog and the belonging add-in files are unloaded."
    },
    {
        "source": "Unregistration.md",
        "path": "/User Guide/API Framework/Add-ons",
        "title": "Automatic unregistration of an add-on",
        "content": "Like there are two ways to initiate the automatic registration of an add-on when Eplan is started, there are two ways to reset this setting as well.\n\n### Automatic unregistration with registry settings\n\nTo reset the automatic registration with the Registry Editor, you only have to change the value data to \"FALSE\" (see figure 4).\n\n### Automatic unregistration with company settings\n\nTo reset the automatic registration with company settings, you should leave the File path for automatic add-on registration field in the Settings: Add-ons dialog â as shown in figure 6 â **empty**."
    },
    {
        "source": "RegisterAScript.md",
        "path": "/User Guide/API Framework/Scripts",
        "title": "RegisterAScript",
        "content": "You can load and unload scripts in Eplan. In this case, not the start function is executed, but special functions are registered in Eplan. You can add a new action to Eplan, add ribbon buttons to the Extension ribbon > API command group, and register functions to react on Eplan events.\n\nThe following example shows a script that registers a new action. Therefore, a function is marked by the attribute  DeclareAction]. The parameter of the attribute defines the name of the new action in Eplan.\n\n* [C#](#i-tab-content-CS)\n* [VB](#i-tab-content-VB)\n\n```\n\npublic class SimpleScriptAction\n{\n     [DeclareAction(\"MyScriptAction\")]\n     public void MyFunctionAsAction()\n     {\n           new Decider().Decide(EnumDecisionType.eOkDecision, \"MyFunctionAsAction was called!\", \"RegisterScriptAction\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK);\n           return;\n     }\n}\n```\n\n```\n\nPublic Class SimpleScriptAction\n\n   <DeclareAction(\"MyScriptAction\")>  _\n   Public Sub MyFunctionAsAction()\n      Dim dec As Decider = New Decider\n      dec.Decide(EnumDecisionType.eOkDecision, \"MyFunctionAsAction was called!\", \"RegisterScriptAction\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK)\n   End Sub 'MyFunctionAsAction\nEnd Class 'SimpleScriptAction\n```\n\nWhen a script with the above code is loaded, the function \"MyFunctionAsAction\" is registered in Eplan as action by the name \"MyScriptAction\". The new action can now be used like any other action in Eplan. For example, it can be called from the command line or assigned to a button.\n\nOnce the script has been loaded, it will be automatically loaded during the Startup of Eplan and the action will be available again.\n\nTo unload or unregister a script, you just call the ribbon File > Extras > Interfaces > [Scripts](Scripts.html) > Unload and select the respective script in the dialog:\n\n!["
    },
    {
        "source": "Script_EventHandling.md",
        "path": "/User Guide/API Framework/Scripts",
        "title": "Script_EventHandling",
        "content": "You can write a script to react on EPLAN events. To do this, you must declare at least one function of the script as an event handler using the  DeclareEventHandler()]  attribute and load the script.\n\nIt is even possible to handle event parameters. However, you need to know the event parameters in advance.\n\nThe following two examples show scripts that respond to events when loaded.\n\nThe script in the first example reacts to the  onMainStart  event. The function  MyEventHandlerFunction  in the class  SimpleEventHandler  is registered as event handler for the  onMainStart  event. When this event is raised in EPLAN, the function is called.\n\nThe second example shows an event handler script that catches any  onActionStart.String  event. There is an event parameter for the name of the action.\n\n* [C#](#i-tab-content-CS)\n* [VB](#i-tab-content-VB)\n\n```\n\npublic class SimpleEventHandler\n{\n    [DeclareEventHandler(\"onMainStart\")]\n     public void MyEventHandlerFunction()\n     {\n           new Decider().Decide(EnumDecisionType.eOkDecision, \"MyEventHandlerFunction was called!\",\"SimpleEventHandler\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK);\n           return;\n     }\n} \n\npublic class SimpleEventHandler\n{\n    [DeclareEventHandler(\"onActionStart.String.*\")]\n    public long MyEventHandlerFunction2(IEventParameter iEventParameter)\n    {\n        try\n        {\n            EventParameterString oEventParameterString= new EventParameterString(iEventParameter);\n            String strActionName= oEventParameterString.String;\n            new Decider().Decide(EnumDecisionType.eOkDecision, \"Action \" + strActionName + \" was started!\",\"MyEventHandler\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK);\n        }\n        catch (System.InvalidCastException exc)\n        {\n            String strExc= exc.Message;\n            new Decider().Decide(EnumDecisionType.eOkDecision, \"Parameter error: \" + strExc, \"MyEventHandler\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK);\n        }\n        return 0;\n    }\n}\n```\n\n```\n\nPublic Class SimpleEventHandler\n\n   <DeclareEventHandler(\"onMainStart\")>  _\n   Public Sub MyEventHandlerFunction()\n      Dim dec As Decider = New Decider\n      dec.Decide(EnumDecisionType.eOkDecision, \"MyEventHandlerFunction was called!\", \"SimpleEventHandler\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK)\n   End Sub 'MyEventHandlerFunction\nEnd Class 'SimpleEventHandler\n\n \n\nPublic Class SimpleEventHandler\n\n   <DeclareEventHandler(\"onActionStart.String.*\")>  _\n   Public Function MyEventHandlerFunction2(iEventParameter As IEventParameter) As Long\n   Dim dec As Decider = New Decider\n      Try\n         Dim oEventParameterString As New EventParameterString(iEventParameter)\n         Dim strActionName As [String] = oEventParameterString.String\n         dec.Decide(EnumDecisionType.eOkDecision, \"Action \" + strActionName + \" was started!\", \"MyEventHandler\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK)\n\n      Catch exc As System.InvalidCastException\n         Dim strExc As [String] = exc.Message\n         dec.Decide(EnumDecisionType.eOkDecision, \"Parameter error: \" + strExc, \"MyEventHandler\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK)\n      End Try\n\n      Return 0\n   End Function 'MyEventHandlerFunction2\nEnd Class 'SimpleEventHandler\n```"
    },
    {
        "source": "script_ribbon.md",
        "path": "/User Guide/API Framework/Scripts",
        "title": "script_ribbon",
        "content": "A script can add one or more items to the Elpan ribbon. The convenient place to add these items is a function with  DeclareRegister]  attribute, then the items are registered until the script is unloaded:\n\n* [C#](#i-tab-content-e608ccad-9848-44b6-8cf7-005725ad0a56)\n\n```\n\npublic class RegisterRibbonItems\n{   \n    string m_newTabName         = \"New API tab\";\n    string m_commandGroupName   = \"New API command group\";\n    string m_commandName        = \"New API command\";\n           \n    [DeclareRegister]\n    public void registerRibbonItems()\n    {               \n        cleanItems();\n        var newTab = new Eplan.EplApi.Gui.RibbonBar().AddTab(m_newTabName);\n        var commandGroup = newTab.AddCommandGroup(m_commandGroupName);                              \n        var command = commandGroup.AddCommand(m_commandName, \"XPartsManagementStart\");\n    }\n       \n    [DeclareUnregister]\n    public void unRegisterRibbonItems()\n    {   \n        cleanItems();\n    }\n   \n    void cleanItems()\n    {\n        var newTab = new Eplan.EplApi.Gui.RibbonBar().Tabs.FirstOrDefault(item => item.Name == m_newTabName);\n        if(newTab != null)\n            newTab.Remove();\n    }   \n}\n```\n\nRemoving a ribbon tab also removes its command groups and commands. Similarly, removing a command group also removes its commands.\n\nA ribbon command is always connected with an action, which is called when the command is clicked. This means that either the script registers an additional action, or the command is assigned to an already existing action.\n\nRemarks\n\nPlease mind that users may start Eplan in QUIET mode using  W3u.exe /Quiet  or the API could be initialized by an [offline program](UsingEplanAssemblies.html). Because of this, it is not recommended to show .NET dialogs in the method marked by  [DeclareRegister]. Please use  Eplan.EplApi.Base.Decider  class instead. If you encounter some problem during registering or initializing of a script, just create and throw a  BaseException  or use  BaseException.FixMessage(...)  to add the message to the system messages list.\n\nThe following example shows a script, which registers an action and a ribbon command.\n\n* [C#](#i-tab-content-CS)\n* [VB](#i-tab-content-VB)\n\n```\n\npublic class ButtonWithAction\n{\n    [DeclareAction(\"HelloWorldAction\")]\n    public void MyFunctionAsAction()\n    {\n       new Decider().Decide(EnumDecisionType.eOkDecision, \"Hello World!\", \"HelloWorldAction title\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK);\n       return;\n    }\n\n    [DeclareRegister]\n    public void registerButtonWithAction()\n    {\n        var ribbonBar= new Eplan.EplApi.Gui.RibbonBar();\n        ribbonBar.AddCommand(\"MyMenuText\", \"HelloWorldAction\", 2);\n    }\n\n    [DeclareUnregister]\n    public void unRegisterButtonWithAction()\n    {\n        var ribbonBar= new Eplan.EplApi.Gui.RibbonBar();\n        ribbonBar.RemoveCommand(\"HelloWorldAction\");\n    }\n\n}\n```\n\n```\n\nPublic Class ButtonWithAction\n\n   <DeclareAction(\"HelloWorldAction\")>  _\n   Public Sub MyFunctionAsAction()\n      Dim dec As Decider = New Decider\n      dec.Decide(EnumDecisionType.eOkDecision, \"Hello World!\", \"HelloWorldAction title\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK)\n      Return\n   End Sub 'MyFunctionAsAction\n\n   <DeclareRegister()>  _\n   Public Sub registerButtonWithAction()\n      Dim ribbonBar As New Eplan.EplApi.Gui.RibbonBar()\n      ribbonBar.AddCommand(\"MyMenuText\", \"HelloWorldAction\", 2)\n   End Sub 'registerButtonWithAction\n\n   <DeclareUnregister()>  _\n   Public Sub unRegisterButtonWithAction()\n      Dim ribbonBar As New Eplan.EplApi.Gui.RibbonBar()\n      ribbonBar.RemoveCommand(\"HelloWorldAction\")\n   End Sub 'unRegisterButtonWithAction\n\n\nEnd Class 'ButtonWithAction\n```\n\nThe  [DeclareRegister]  attribute calls the function  buttonWithAction()  when the script is loaded. The function creates a new ribbon command \"MyMenuText\" and binds the action \"HelloWorldAction\" to it.\n\nPossible problems with flickering and how to avoid them\n\nWhen loading or unloading a script in which many ribbon items (tabs, command groups and commands) are added, a temporary flickering of the page navigator and other parts of the GUI may occur. The following procedure reduces this flickering to a minimum:\n\nFirst, create a new RibbonBar object using the constructor that takes the boolean  executeApplyAfterChanges  parameter and set this parameter to \"true\".  \nThen, add all of your custom tabs, command groups and commands to this RibbonBar object, as in the following example:\n\n* [C#](#i-tab-content-b27fff78-54c8-470f-b475-91110773d30a)\n\n```\n\npublic class RegisterRibbonItems\n{   \n    // Create the RibbonBar object and set the \"executeApplyAfterChanges\" parameter in the constructor to \"true\"\n    Eplan.EplApi.Gui.RibbonBar myRibbonBar = new Eplan.EplApi.Gui.RibbonBar(true);\n    string m_newTabName1        = \"New API tab 1\";\n    string m_newTabName2        = \"New API tab 2\";\n    string m_newTabName3        = \"New API tab 3\";\n    string m_commandGroupName1  = \"New API command group 1\";\n    string m_commandGroupName2  = \"New API command group 2\";\n    string m_commandGroupName3  = \"New API command group 3\";\n    string m_commandGroupName4  = \"New API command group 4\";\n    string m_commandName1       = \"New API command 1\";\n    string m_commandName2       = \"New API command 2\";\n    string m_commandName3       = \"New API command 3\";\n    string m_commandName4       = \"New API command 4\";\n    string m_commandName5       = \"New API command 5\";\n    string m_commandName6       = \"New API command 6\";\n    string m_commandName7       = \"New API command 7\";      \n\n    [DeclareRegister]\n    public void registerRibbonItems()\n    {              \n        cleanItems();\n\n        // Add all the tabs to the RibbonBar object defined above \n        var newTab1 = myRibbonBar.AddTab(m_newTabName1);\n        var newTab2 = myRibbonBar.AddTab(m_newTabName2);\n        var newTab3 = myRibbonBar.AddTab(m_newTabName3);\n\n        // Add all the command groups and commands to these tabs\n        var commandGroup1 = newTab1.AddCommandGroup(m_commandGroupName1);     \n        var commandGroup2 = newTab2.AddCommandGroup(m_commandGroupName2);  \n        var commandGroup3 = newTab3.AddCommandGroup(m_commandGroupName3);    \n        var commandGroup4 = newTab3.AddCommandGroup(m_commandGroupName4);\n        var command1 = commandGroup1.AddCommand(m_commandName1, \"YourActionName1\");                        \n        var command2 = commandGroup1.AddCommand(m_commandName2, \"YourActionName2\");\n        var command3 = commandGroup2.AddCommand(m_commandName3, \"YourActionName3\");                        \n        var command4 = commandGroup3.AddCommand(m_commandName4, \"YourActionName4\");\n        var command5 = commandGroup4.AddCommand(m_commandName5, \"YourActionName5\");                        \n        var command6 = commandGroup4.AddCommand(m_commandName6, \"YourActionName6\");\n        var command7 = commandGroup4.AddCommand(m_commandName7, \"YourActionName7\");\n    }\n        \n    [DeclareUnregister]\n    public void unRegisterRibbonItems()\n    {   \n        cleanItems();\n    }\n    \n    void cleanItems()\n    {\n        // Clean up ALL commands, command groups and tabs as shown in the topmost example\n    }  \n}\n```"
    },
    {
        "source": "SimpleScriptWithParameters.md",
        "path": "/User Guide/API Framework/Scripts",
        "title": "SimpleScriptWithParameters",
        "content": "The script functionality does also accept parameters. However, this only makes sense if a parameter can be passed to the script when it is started. This can be done by invoking Eplan via the command line:\n\nW3u.exe ExecuteScript /ScriptFile:\"C:\\Program Files\\EPLAN\\EPLAN\\Basic\\Scripts\\EPLAN\\SimpleScriptWithParameters.cs\" /Param1:\"Hello\" /Param2:\"EPLAN\" /Param3:\"API developer!\" \n\nWhen starting Eplan via command line, in order to run a script, the first parameter is the name of the action to be executed. The action for executing scripts is called  ExecuteScript. This action takes the  /ScriptFile  parameter which specifies the name of the script file to be run. Any further parameter (<Param1>,  <Param2>,  <Param3>  etc.) is optional and will be passed to the start function (i.e. the function marked with the  Start]  attribute) of the script. You can name the further parameters as you wish. In the follwing example they are simply called \"Param1\", \"Param2\" and \"Param3\", but you can just as well give the parameters meaningful names like \"Textmodule1\", \"projectName\" or whatever makes sense in your use case.\n\n![](sectionminus.png)Example\n\nIn the following example, the script (i.e. the script function) requires 3 string parameters \"Param1\", \"Param2\" and \"Param3\":\n\n* [C#](#i-tab-content-CS)\n* [VB](#i-tab-content-VB)\n\n```\n\npublic class SimpleScriptWithParameters\n {\n    [Start]\n     public bool FunctionWithParameters(String Param1, String Param2, String Param3)\n     {\n        new Decider().Decide(EnumDecisionType.eOkDecision,  Param1 + Param2 + Param3 , \"SimpleScriptWithParams\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK);\n        return true;\n    }\n }\n```\n\n```\n\nPublic Class SimpleScriptWithParameters\n\n   <Start>  _\n   Public Function FunctionWithParameters(ByVal Param1 As String, ByVal Param2 As String, _\n                                            ByVal Param3 As String) as Boolean\n      Dim dec As Decider = New Decider\n      dec.Decide(EnumDecisionType.eOkDecision, Param1 + Param2 + Param3, \"SimpleScriptWithParams\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK)\n      Return True\n   End Sub 'FunctionWithParameters\nEnd Class 'SimpleScriptWithParameters\n```\n\nIt is important, that the identifiers (in this example \"Param1\", \"Param2\", \"Param3\") are exactly matching in the command line and in the function!\n\nIt is possible to use scripts with  ActionCallingContext  as a parameter. To do that, please look at the following example:\n\n* [C#](#i-tab-content-CS)\n* [VB](#i-tab-content-VB)\n\n```\n\npublic class ScriptWithActionCallingContext\n{\n    [Start]\n    public void FunctionWithActionCallingContext(ActionCallingContext oActionCallingContext)\n    {\n        string strFirstParam = \"\";\n        string strSecondParam = \"\";\n        oActionCallingContext.GetParameter(\"strFirstParam\", ref strFirstParam);\n        oActionCallingContext.GetParameter(\"strSecondParam\", ref strSecondParam);\n        string strNewParam = \"\";\n        oActionCallingContext.AddParameter(\"strNewParam\", strFirstParam + strSecondParam);\n        oActionCallingContext.GetParameter(\"strNewParam\", ref strNewParam);\n        if (strNewParam.Equals(strFirstParam + strSecondParam))\n        {\n            // TODO: Add some functionality here\n        }\n    }\n}\n```\n\n```\n\nPublic Class ScriptWithActionCallingContext\n\n<Start>  _\n    Public Sub FunctionWithActionCallingContext (ByVal oActionCallingContext As ActionCallingContext)\n        Dim strFirstParam As [String] = \"\"\n        Dim strSecondParam As [String] = \"\"\n        oActionCallingContext.GetParameter(\"strFirstParam\", strFirstParam)\n        oActionCallingContext.GetParameter(\"strSecondParam\", strSecondParam)\n        Dim strNewParam As [String] = \"\"\n        oActionCallingContext.AddParameter(\"strNewParam\", strFirstParam + strSecondParam)\n        oActionCallingContext.GetParameter(\"strNewParam\", strNewParam)\n        If strNewParam = strFirstParam + strSecondParam Then       \n            ' TODO: Add some functionality here\n        End If\n    End Sub 'FunctionWithActionCallingContext\nEnd Class 'ScriptWithActionCallingContext\n```\n\nUsing this feature, you can extend the scope of the Eplan command line by your own parameters. If you need to call some API functionality via command line, just create a script. The start function of this script may take parameters and can call other functions with these parameters."
    },
    {
        "source": "VerySimpleScript.md",
        "path": "/User Guide/API Framework/Scripts",
        "title": "VerySimpleScript",
        "content": "A script consists of at least one public class with at least one public function. This one required function needs to be marked with the attribute  Start].\n\nThe following example shows a very simple script.\n\n* [CS](#i-tab-content-CS)\n* [VB](#i-tab-content-VB)\n\n```\n\npublic class VerySimpleScript\n{\n     [Start]\n     public void MyFunction()\n     {\n           new Decider().Decide(EnumDecisionType.eOkDecision, \"MyFunction was called!\", \"VerySimpleScript\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK);\n           return;\n     }\n}\n```\n\n```\n\n Public Class VerySimpleScript\n   <Start> _\n    Public Sub MyFunction()\n      Dim dec As Decider = New Decider\n      dec.Decide(EnumDecisionType.eOkDecision, \"MyFunction was called!\", \"VerySimpleScript\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK)\n      Return\n   End Sub 'MyFunction\n End Class 'VerySimpleScript\n```\n\nIn this example the class \"VerySimpleScript\" with a function \"MyFunction\" was created. The function was marked with the attribute  [Start].  \nWhen this script is run using the ribbon **File** > **Extras** > **Interfaces** > **Scripts** > **Run**, the function \"MyFunction\" is executed and a message box appears:\n\n![This message boy appears, when you run the very simple script.\n\nA script may contain more than one function. There even can be several classes in a script. However, there may only be exactly one function marked with the  [Start]  attribute!"
    },
    {
        "source": "EPLANRemoting.md",
        "path": "/User Guide/API Framework/Using Eplan in other applications",
        "title": "EPLANRemoting",
        "content": "## Introduction to Remoting\n\nEplan remoting is a part of the API that enables users to connect to an Eplan platform variant and control it in remote way. It allows you to execute actions and some P8 operations in the remotely. Internally it uses gRPC and protocol buffers (protobuf) technology."
    },
    {
        "source": "EPLANRemoting.md",
        "path": "/User Guide/API Framework/Using Eplan in other applications",
        "title": "Libraries",
        "content": "Eplan remoting consists of the following libraries:\n\n**Internal** libraries:\n\n* Eplan.EplApi.RemoteClientu.dll  (namespace Eplan.EplApi.RemoteClient](Eplan.EplApi.RemoteClientu~Eplan.EplApi.RemoteClient_namespace.html))\n* Eplan.EplApi.Remotingu.dll  (namespace [Eplan.EplApi.Remoting)\n\n**External** libraries:\n\n* Google.Protobuf.dll\n* Grpc.Core.Api.dll\n* Grpc.Core.dll\n* Grpc\\_csharp\\_ext.x64.dll\n\n**.NET System** libraries:\n\n* System.Runtime.CompilerServices.Unsafe\n* System.Runtime.Remoting\n\nWarning!  \nIt is possible to compile a program without the  System.Runtime.CompilerServices.Unsafe  library, but it will not work at all.\n\nThe  Grpc\\_csharp\\_ext.x64.dll  is a runtime DLL that is used by the  Grpc.Core  and it is necessary to integrate it to the project. There are two ways to integrate it correctly:  \nEither you copy it into the build folder or add it to the project as an existing item (in Visual Studio Add > Exiting Item... or standard shortcut Shift + Alt + A).\n\nNotice:  \nThe name of the DLL must be entered explicitly in the search field.\n\nWhen added, please set the property Copy to Output Directory to \"Copy always\":\n\n![](images/GrpcProperty.png)\n\nAll the DLLs are stored in the Eplan platform  BIN  folder. Below are examples how to use it."
    },
    {
        "source": "EPLANRemoting.md",
        "path": "/User Guide/API Framework/Using Eplan in other applications",
        "title": "Eplan Remoting Overview",
        "content": "To use remoting, please proceed as follows:\n\n### Precondition of use\n\nAs a prerequisite, the Eplan variant must be started as a remoting server (without the  /NoRemoting  parameter).\n\nThe default port for an Eplan instance is 49152. It is possible to start a gRPC server on a different port by using the   /EplanServerPort  parameter when starting P8 application via the command line. The port should be in the range from 49152 to 65535.\n\n**Troubleshooting port problems**:\n\nIf you are having problems conneting to a supposedly free port in the specified range, you might find the reason for this in the Windows exluded port ranges. To query the range of ports that is currently excluded, run the following Netshell command:\n\nnetsh int <ipv4|ipv6> show excludedportrange [protocol=]tcp|udp [[store=]active|persistent]\n\nIf your designated port is in this list, you might be able to free it using this command (run as administrator):\n\nnet stop winnat && net start winnat\n\n### Connection\n\nFirst, a connection must be established form the client application (a .NET program written by the API user) to an existing Eplan instance that is available in the network. To open a new session, you have to connect your client to one of the existing P8 instances (to be precise to the gRPC server that is embedded inside it). The server can run locally or remotely.\n\n### Opertations\n\nAfter connecting, you can execute P8 actions (synchronously or asynchronously) and some P8 operations remotely. You can also pass or get parameters using an action calling context.\n\n### Disconnection\n\nFinally, to close your remote session, you have to disconnect. It is important to close the connection when all operations are finished.\n\n# Remoting Code Examples\n\nThe following examples show how to use Eplan remoting.\n\n### Establishing a connection with the localhost\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n EplanRemoteClient oClient = new EplanRemoteClient();\n bool bConnected = oClient.Connect(\"localhost\", \"49152\");  // Default port for Eplan instance is 49152\n ``` | |\n\n### Establishing a connection with a remote server\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n EplanRemoteClient oClient = new EplanRemoteClient();\n bool bConnected = oClient.Connect(\"remote_server\", \"49152\", new TimeSpan(0, 0, 0, 5));  // Wait 5 seconds\n ``` | |\n\n### Getting installed local servers\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n List<EplanServerData> oInstalledEplanVersions = new List<EplanServerData>();\n oClient.GetInstalledEplanVersionsOnLocalMachine(out oInstalledEplanVersions);\n foreach (EplanServerData oVersion in oInstalledEplanVersions)\n    Console.WriteLine(oVersion.EplanVariant + \",\" + oVersion.EplanVersion + \",\" + (oVersion.Is64Bit ? \"64\" : \"32\");\n ``` | |\n\n### Listing servers on a local machine\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n List<EplanServerData> oActiveEplanVersions = new List<EplanServerData>();\n oClient.GetActiveEplanServersOnLocalMachine(out oActiveEplanVersions);\n foreach (EplanServerData oVersion in oActiveEplanVersions)\n    Console.WriteLine(oVersion.EplanVariant + \",\" + oVersion.EplanVersion + \",\" + oVersion.ServerPort);\n ``` | |\n\n### Start an Eplan instance locally from a client\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n List<EplanServerData> oInstalledEplanVersions = new List<EplanServerData>();\n oClient.GetInstalledEplanVersionsOnLocalMachine(out oInstalledEplanVersions);\n EplanServerData oConnected = oClient.StartEplan(oInstalledEplanVersions[0].EplanPath);\n ``` | |\n\nTo make sure that the Eplan server was started, please check the registry key  HKEY\\_CURRENT\\_USER\\Software\\EPLAN\\RemoteServer\\<port\\_number>.\n\n### Calling an action\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n bool oResp = oClient.ExecuteAction(\"XPartsManagementStart\");\n ``` | |\n\n### Calling an action in an asynchronous mode\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n oClient.SynchronousMode = false;\n oClient.ResponseArrivedFromEplanServer += onCallbackArrivedFromEplan;\n oClient.ExecuteAction(\"XPartsManagementStart\");\n ``` | |\n\nIn this case, the program starts an action and continues running. onCallbackArrivedFromEplan method is called after action finished.\n\n### Calling an action in synchronous mode\n\nThis example shows how to get input from a user using context:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n oClient.SynchronousMode = true;\n CallingContext oCallingContext = new CallingContext();\n oClient.ExecuteAction(\"XPamSelectPart\", ref oCallingContext);\n ``` | |\n\nIn this case, the program waits until the action execution is finished.\n\n### Making a selection\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n StringCollection oObjects = new StringCollection();\n oObjects.Add(@\"17/688\");\n EplanResponse oResponse = oClient.SelectEplanObjects(@\"$(MD_PROJECTS)\\EPLAN_Sample_Project.elk\", oObjects, true);\n ``` | |\n\n### Disconnection\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n oClient.Disconnect();\n ``` | |\n\nDon't forget to close the connection when all operations are finished."
    },
    {
        "source": "UsingEplanAssemblies.md",
        "path": "/User Guide/API Framework/Using Eplan in other applications",
        "title": "UsingEplanAssemblies",
        "content": "The easiest way to use Eplan API objects in your program is to directly use the functionally of the API DLLs in your code. It is even easier, if your program is a .NET application: You just reference the managed Eplan API assemblies in your project. This type of application, we call an \"**offline application**\".\n\n!](images/EplApi_AssemlyReference.jpg)\n\nThen â in the appropriate place (e.g. in the main form) â you create an instance of the  Eplan.EplApi.System.EplApplication  class and initialize it:\n\n* [C#](#i-tab-content-CS)\n* [VB](#i-tab-content-VB)\n\n```\n\nprivate Eplan.EplApi.System.EplApplication m_oEplApp;\npublic MainForm()\n{\n   //\n   // Required for Windows Form Designer support\n   //\n   InitializeComponent();\n   m_oEplApp = new Eplan.EplApi.System.EplApplication();\n   System.String strAppModifier=\"\";\n   m_oEplApp.Init(strAppModifier);\n}\n```\n\n```\n\nPrivate m_oEplApp As Eplan.EplApi.System.EplApplication\nPublic Sub New()\n   '\n   ' Required for Windows Form Designer support\n   '\n   InitializeComponent()\n   m_oEplApp = New Eplan.EplApi.System.EplApplication()\n   Dim strAppModifier As System.String = \"\"\n   m_oEplApp.Init(strAppModifier)\nEnd Sub 'New MainForm\n```\n\nThe string parameter  strAppModifier  determines, which configuration file is used and thus which modules will be loaded. If you pass an empty string like in the above example, the  eplset.xml  of the standard version of the current user will be loaded.\n\nAfter executing the  Init()  function, all functions / objects of the Eplan API are available, with the exception of those that expose GUI functionality such as modal dialogs, docked dialogs or MDI windows. The API classes and methods, etc. are then used in the same way as if programming a normal Eplan add-in. A few selected modal dialogs of Eplan are provided by special methods of classes in  Eplan.EplApi.System.EplApplication.\n\nWhen you no longer need the Eplan API in your program, you should call the  Exit()  function of your  EplApplication  object to unload the API.\n\n### Usage with Windows Forms\n\nIn case of an offline application using Windows Forms, it is possible that the application changes its size after  EplApplication::Init. It happens if the font size in OS is set to other than 100%, which happens quite often in case of large monitors. Because of this, please set DPI awarness in  .config  file of the application, in order to avoid rescaling:\n\n|  | Copy Code |\n| --- | --- |\n| ``` \n <System.Windows.Forms.ApplicationConfigurationSection>\n      <add key=\"DpiAwareness\" value=\"PerMonitorV2\" />\n </System.Windows.Forms.ApplicationConfigurationSection>\n ``` | |\n\nAlso, please assure your  .manifest  file is Windows 10 compatible:\n\n|  | Copy Code |\n| --- | --- |\n| ``` \n <compatibility xmlns=\"urn:schemas-microsoft-com:compatibility.v1\">\n   <application>\n     <!-- Windows 10 compatibility -->\n     <supportedOS Id=\"{8e0f7a12-bfb3-4fe8-b9a5-48fd50a15a9a}\" />\n   </application>\n </compatibility>\n ``` | |\n\n### How to make sure, that the API assemblies are directly loaded from the Eplan platform BIN folder?\n\nAs briefly mentioned in the topic \"[Eplan .NET API\", a path must be set to the  <Eplan main path>\\Platform\\<version>\\BIN  folder. More precisely, you need to make sure to load the Eplan API assemblies from exactly this folder. The reason for this is, that the API assemblies have statically linked unmanaged dependencies, which need to be loaded directly from the current directory.\n\nThis is also the reason why it generally does not work to register the Eplan API DLLs in  GAC. The directory from which the references of your Visual Studio project are added has no influence on where the DLLs are actually loaded from.\n\nYou can make sure, the API assemblies are loaded from the correct  BIN  directory by different means:\n\n1. This is the easiest way: You can just copy the executable of your offline application to the  <Eplan main path>\\Platform\\<version>\\BIN  folder.\n2. Use Eplan API offline wizard. Then your assemblies will be bound to the correct Eplan variant by means of the  Eplan.EplApi.Starter  library:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n // Use the finder to find the correct Eplan version if not yet known\n EplanFinder oEplanFinder = new EplanFinder();\n String strBinPath = oEplanFinder.SelectEplanVersion(true);\n \n // Check if the user has selected any Eplan variant (Electric P8, etc.)\n if (String.IsNullOrEmpty(strBinPath))\n     return;\n \n // Use the AssemblyResolver to let the program know where all Eplan variants can be found.\n AssemblyResolver oResolver = new AssemblyResolver();\n oResolver.SetEplanBinPath(strBinPath);\n \n // Now pin to Eplan. This way all referenced Eplan assemblies are loaded from the platform BIN path.\n oResolver.PinToEplan();\n \n // Use a separate class to initialize EplApplication. Pass the path to the Eplan product variant BIN directory in order to set the EplApplication.EplanBinFolder property\n Form1 oForm = new Form1();\n oForm.EplanBinFolder = oResolver.GetEplanBinPath();\n Application.Run(oForm);\n ``` | |\n\n3. Publish the codebases of all needed API assemblies in the application  config  file. (An XML file, which is named like your executable with an additional extension  .config, e.g. \"MyApplication.exe.config\"). The following code shows an example for the contents of such a config file.\n\n| XML | Copy Code |\n| --- | --- |\n| ``` \n <?xml version=\"1.0\"?>\n <configuration>\n   <runtime>\n     <assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\n       <dependentAssembly>\n         <assemblyIdentity name=\"Eplan.EplApi.Systemu\" publicKeyToken=\"57aaa27e22f7b107\" />\n         <publisherPolicy apply=\"yes\" />\n         <codeBase version=\"1.0.0.0\" href=\"file:///C:\\Program Files\\EPLAN\\Platform\\2.2.0\\Bin\\Eplan.EplApi.Systemu.dll\" />\n       </dependentAssembly>\n       <dependentAssembly>\n         <assemblyIdentity name=\"Eplan.EplApi.AFu\" publicKeyToken=\"57aaa27e22f7b107\" />\n         <publisherPolicy apply=\"yes\" />\n         <codeBase version=\"1.0.0.0\" href=\"file:///C:\\Program Files\\EPLAN\\Platform\\2.2.0\\Bin\\Eplan.EplApi.AFu.dll\" />\n       </dependentAssembly>\n       <dependentAssembly>\n         <assemblyIdentity name=\"Eplan.EplApi.Baseu\" publicKeyToken=\"57aaa27e22f7b107\" />\n         <publisherPolicy apply=\"yes\" />\n         <codeBase version=\"1.0.0.0\" href=\"file:///C:\\Program Files\\EPLAN\\Platform\\2.2.0\\Bin\\Eplan.EplApi.Baseu.dll\" />\n       </dependentAssembly>\n       <dependentAssembly>\n         <assemblyIdentity name=\"Eplan.EplApi.DataModelu\" publicKeyToken=\"57aaa27e22f7b107\" />\n         <publisherPolicy apply=\"yes\" />\n         <codeBase version=\"1.0.0.0\" href=\"file:///C:\\Program Files\\EPLAN\\Platform\\2.2.0\\Bin\\Eplan.EplApi.DataModelu.dll\" />\n       </dependentAssembly>\n       <dependentAssembly>\n         <assemblyIdentity name=\"Eplan.EplApi.HEServicesu\" publicKeyToken=\"57aaa27e22f7b107\" />\n         <publisherPolicy apply=\"yes\" />\n         <codeBase version=\"1.0.0.0\" href=\"file:///C:\\Program Files\\EPLAN\\Platform\\2.2.0\\Bin\\Eplan.EplApi.HEServicesu.dll\" />\n       </dependentAssembly>\n       <dependentAssembly>\n         <assemblyIdentity name=\"Eplan.EplApi.EServicesu\" publicKeyToken=\"57aaa27e22f7b107\" />\n         <publisherPolicy apply=\"yes\" />\n         <codeBase version=\"1.0.0.0\" href=\"file:///C:\\Program Files\\EPLAN\\Platform\\2.2.0\\Bin\\Eplan.EplApi.EServicesu.dll\" />\n       </dependentAssembly>\n     </assemblyBinding>\n   </runtime>\n </configuration>\n ``` | |\n\n> 4. Last but not least, you can implement an  AssemblyResolve  event handler in your offline application, where you explicitly load the assemblies you are looking for. You will also need to set the current directory of the application to the respective  BIN  directory. The following code shows an example for this:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n         [STAThread]\n         static void Main()\n         {\n             Application.EnableVisualStyles();\n             Application.SetCompatibleTextRenderingDefault(false);\n             Environment.CurrentDirectory = @\"C:\\program files\\EPLAN\\platform\\x.x.x\\BIN\\\"; // x.x.x = your desired Eplan version\n             AppDomain appDomain = AppDomain.CurrentDomain;\n             appDomain.AssemblyResolve += new ResolveEventHandler(MyResolveEventHandler);\n \n             Application.Run(new Form1());\n         }\n         static Assembly MyResolveEventHandler(object sender, ResolveEventArgs args)\n         {\n             Console.WriteLine(\"Resolving...\");\n             string sAssemblyName = args.Name.Split(',')[0];\n             Assembly ass = Assembly.LoadFile(@\"C:\\program files\\EPLAN\\platform\\x.x.x\\BIN\\\" + sAssemblyName + \".dll\");\n             return ass ;\n         }\n     }\n ``` | |\n\nIn Visual Studio Tools for Office (**VSTO**) projects, the assembly resolver or the application  config  file is not working. Office still tries to copy the Eplan API assemblies to a temporary folder before loading. VSTO applications will only work, if you set the codebases of the API assemblies in the  machine.config  file, which is usually located in the  C:\\WINDOWS\\Microsoft.NET\\Framework\\v4.0.30319\\CONFIG  directory.\n\n### Remarks\n\nIf you want to use any object from the namespaces beginning with  Eplan.EplApi.DataModel, you need to open a LockingStep, before you e.g. open an Eplan project.\n\nMake sure to call  Exit()  only one time in your application. It is currently not possible to use  Init(\"\")  after  Exit(), while the application is still running.\n\nThe  EplApplication  instance should be explicitly de-initialized by the main thread. If the  <c>Exit</c>  method is called by the garbage collector thread or after leaving the main function of the application, it will cause the application to crash."
    },
    {
        "source": "UsingOtherApplications.md",
        "path": "/User Guide/API Framework/Using Eplan in other applications",
        "title": "UsingOtherApplications",
        "content": "The current topic describes, how you can use other applications, like for example Microsoft Excel in your Eplan API add-in.\n\nIf you want to access data of an other program, the application needs to have a suitable interface. Because an Eplan add-in is written in managed code (C# or VB.NET), you need to be able to set a reference to the other program. Either the other application already exposes its interface as .NET assembly, or the .NET Framework creates an interop assembly from a COM type library.\n\nThe following example shows the use of Microsoft Excel 2003. Excel exposes its functions as COM interface. In your Eplan add-in, you can add a reference to the registered type library of Excel:\n\n!](images/ExcelReference.jpg)\n\nAfter you added the reference, the development environment creates an interop assembly. The types of this assembly then can be used in managed code (C#, etc.):\n\n![](images/ExcelReference2.jpg)\n\nIn your application code, the use of Excel would look like in the following example:\n\n* [C#](#i-tab-content-CS)\n* [VB\n\n```\n\nExcel.ApplicationClass oExcel= new Excel.ApplicationClass();\noExcel.Visible=true;\nnew Decider().Decide(EnumDecisionType.eOkDecision, \"Now Excel should be visible!\" ,\"\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK);\nExcel.Workbooks iWorkBooks=oExcel.Workbooks;\nExcel.Workbook  iWorkBook= iWorkBooks.Add(Excel.XlWBATemplate.xlWBATWorksheet);\nExcel.Worksheet iSheet = (Excel.Worksheet)oExcel.ActiveSheet;\nnew Decider().Decide(EnumDecisionType.eOkDecision, \"All project messages are now written into an Excel worksheet!\", \"\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK);\nCheck oCheck = new Check();\noCheck.VerifyProject(oProject);\nPrjMessagesCollection colPrjMsg = new PrjMessagesCollection(oProject);\nPrjMessagesEnumerator itPrjMsg = colPrjMsg.GetPrjMsgEnumerator();\nitPrjMsg.MoveNext();\nint nNr=1;\ndo\n{\n   ProjectMessage oPrjMsg = itPrjMsg.Current as ProjectMessage;\n   if (oPrjMsg != null)\n   {\n       nNr++;\n       iSheet.Cells[nNr, 1] = oPrjMsg.GetGroup().ToString() + GetId().ToString();\n       iSheet.Cells[nNr, 2] = oPrjMsg.GetText();\n   }\n} while(itPrjMsg.MoveNext());\n\nnew Decider().Decide(EnumDecisionType.eOkDecision, \"Action completed!\", \"\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK);\noExcel.Quit();\n```\n\n```\n\nDim oExcel As New Excel.ApplicationClass()\noExcel.Visible = True\nDim dec As Decider = New Decider\ndec.Decide(EnumDecisionType.eOkDecision, \"Now Excel should be visible!\", \"\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK)\nDim iWorkBooks As Excel.Workbooks = oExcel.Workbooks\nDim iWorkBook As Excel.Workbook = iWorkBooks.Add(Excel.XlWBATemplate.xlWBATWorksheet)\nDim iSheet As Excel.Worksheet = CType(oExcel.ActiveSheet, Excel.Worksheet)\ndec.Decide(EnumDecisionType.eOkDecision, \"All project messages are now written into an Excel worksheet!\", \"\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK)\nDim oCheck As New Check()\noCheck.VerifyProject(oProject)\nDim colPrjMsg As New PrjMessagesCollection(oProject)\nDim itPrjMsg As PrjMessagesEnumerator = colPrjMsg.GetPrjMsgEnumerator()\nitPrjMsg.MoveNext()\nDim nNr As Integer = 1\nDo\n   Dim oPrjMsg As ProjectMessage = itPrjMsg.Current\n   If Not (oPrjMsg Is Nothing) Then\n      nNr += 1\n      iSheet.Cells(nNr, 1) = oPrjMsg.GetGroup().ToString() + GetId().ToString()\n      iSheet.Cells(nNr, 2) = oPrjMsg.GetText()\n   End If\nLoop While itPrjMsg.MoveNext()\ndec.Decide(EnumDecisionType.eOkDecision, \"Action completed!\", \"\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK)\noExcel.Quit()\n```\n\nExcel is started as a separate process. The only object, you create with  new  is the  Excel.ApplicationClass. All other objects like  Excel.Workbook, are created â or queried from Excel â through functions of the  Application  object.\n\nEach call of Excel functions is a communication between processes!"
    },
    {
        "source": "HE_Display.md",
        "path": "/User Guide/API Higher Electrotechnical services",
        "title": "HE_Display",
        "content": "The  Eplan.EplApi.HEServices  namespace provides the  DrawingService  class that contains functionality for outputting objects (WindowMacros,  SymbolVariants,  Placements,  or  Pages) on a window or control.\n\nDisplaying the preview takes two steps:\n\nThe first step is to create a so-called display list using the  CreateDisplayList  function. This actually processes the data into a list of graphical primitives that can be drawn. Depending on what kind of data you want to show, this function will take some time. For example, if you want to create a preview of a macro,  CreateDisplayList  loads the macro file, analyzes it and creates the items to display. You need to call this function just once for a given preview.\n\nThe second step actually shows the preview (the created display list) on a window. It takes a  System.Windows.Forms.PaintEventArgs  object as parameter, which is provided by any control in the  Paint callback.\n\nThe  DrawingService  class also provides the possibility to influence the appearance of the preview in many ways, such as zooming and changing the background color.\n\nThe following example creates a preview of a macro. The first code snippet shows the creation of the display list:\n\n* C#](#i-tab-content-CS)\n* [VB\n\n```\n\nEplan.EplApi.HEServices.DrawingService oDs = new DrawingService();\n// ...\nif(oDs == null)\n{\n    oDs = new Eplan.EplApi.HEServices.DrawingService();\n}\nif (!(gProject == null))\n{\n    try\n    {\n   oDs.DrawConnections = true;\n   oDs.MacroPreview = true;\n   oDs.CreateDisplayList(strObj, \"\", 0, gProject);\n    }\n    catch (System.Exception ex)\n    {\n        new Decider().Decide(EnumDecisionType.eOkDecision, \"Can't create display list: \\r\\n\" + ex.Message, \"\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK);\n    }\n    // Raise the Paint event\n    oForm.Picture1.Invalidate();\n}\n```\n\n```\n\nIf oDs Is Nothing Then\n   oDs = New Eplan.EplApi.HEServices.DrawingService\nEnd If\nIf Not gProject Is Nothing Then\n   Try\n      oDs.DrawConnections = True\n      oDs.MacroPreview = True\n      oDs.CreateDisplayList(strObj, \"\", 0, gProject)\n   Catch ex As System.Exception\n      Dim dec As Decider = New Decider\n      dec.Decide(EnumDecisionType.eOkDecision, \"Can't create display list:\" & vbCrLf & ex.Message, \"\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK)\n   End Try\n   'raise the Paint event\n   oForm.Picture1.Invalidate()\nEnd If\n```\n\n The next piece of source code shows drawing the display list in the  Paint  method of a picture box:\n\n* C#](#i-tab-content-CS)\n* [VB\n\n```\n\nprivate void Picture1_Paint(object sender, System.Windows.Forms.PaintEventArgs e)\n{\n if (!(m_DS == null)) {\n   try {\n     m_DS.DrawDisplayList(e);\n   } catch (System.Exception ex) {\n     new Decider().Decide(EnumDecisionType.eOkDecision, \"Can't draw display list:\" + \"\\r\\n\" + ex.Message, \"\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK);\n   }\n }\n}\n```\n\n```\n\nPrivate Sub Picture1_Paint(ByVal sender As Object, ByVal e As System.Windows.Forms.PaintEventArgs) Handles Picture1.Paint\n    If Not m_DS Is Nothing Then\n        Try\n            m_DS.DrawDisplayList(e)\n        Catch ex As System.Exception\n            Dim dec As Decider = New Decider\n            dec.Decide(EnumDecisionType.eOkDecision, \"Can't draw display list:\" & vbCrLf & ex.Message, \"\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK)\n        End Try\n    End If\nEnd Sub\n```\n\n### \n\n### Setting image size and the viewport\n\nTo draw more complex images, it may be necessary to set the resolution and a viewport of the drawn image.\n\nA viewport is a polygon that represents a part of a page that will be rendered:\n\n!](images/viewport.png)\n\nThis can be done using the  SetViewport  method. The coordinates should be passed in the graphical coordinate system.\n\nIf the given dimensions are not proportional to the drawing area, they are automatically adjusted to keep the aspect ratio:\n\n* [C#](#i-tab-content-24586b06-0aa8-4a75-b468-494121461af1)\n\n```\n\n m_Ds.SetViewport(10.0, 200.0, 300.0, 20.0);\n```\n\nIn case of 3D drawings, it is also necessary to set the image size, otherwise its quality may be worse than in the Eplan GED:\n\n* [C#\n\n```\n\n m_Ds.SetWindow(0, 600, 1200, 0);\n```"
    },
    {
        "source": "HE_PlaceMacros.md",
        "path": "/User Guide/API Higher Electrotechnical services",
        "title": "HE_PlaceMacros",
        "content": "An Eplan macro is a piece of schematics that can be introduced into a project â onto a page or as a page. Eplan uses file macros. They can have the extension  \\*.ema  for window macros,  \\*.emp  for page macros, and  \\*.ems  for symbol macros.\n\nFor placing macros, the Eplan API provides the class  Eplan.EplApi.HEServices.Insert. This class basically contains three overloaded methods for placing each type of macro. A window or symbol macro can be placed on a page either with absolute coordinates or with an offset relative to its original position.\n\nThe following example shows how to place a macro on a page at a given position:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n Insert oInsert = new Insert();\n oInsert.WindowMacro(\"$(MD_MACROS)\\BECK.KL1012.ema\", 0, m_oTestProject.Pages[9], new PointD(70.0, 0.0), Insert.MoveKind.Relative);\n ``` | |\n\n### Placing macros and assigning value sets\n\nIf there are  PlaceHolder  objects in a macro, you can assign value sets using the result of the  Insert.WindoMacro  function:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n         Insert oInsert = new Insert();\n         StorableObject[] oInsertedObjects = oInsert.WindowMacro(@\"$(MD_MACROS)MacroWithPlaceholder.ema\", 0, m_oTestProject.Pages[9], new PointD(70.0, 0.0), Insert.MoveKind.Relative);\n \n         foreach (StorableObject oSOTemp in oInsertedObjects)\n         {\n             // We are searching for PlaceHolder \"Three-Phase\" in the results\n              PlaceHolder oPlaceHoldeThreePhase = oSOTemp  as Eplan.EplApi.DataModel.Graphics.PlaceHolder;\n             if((oPlaceHoldeThreePhase != null)\n                 &&\n                 (oPlaceHoldeThreePhase.Name == \"Three-Phase\")\n                 )\n              {\n                  oPlaceHoldeThreePhase.ApplyRecord(\"Motor 0,75 KW\");\n              }\n         }\n ``` | |"
    },
    {
        "source": "HE_Selectionset.md",
        "path": "/User Guide/API Higher Electrotechnical services",
        "title": "HE_Selectionset",
        "content": "The advantage of an add-in is that it is called from within the context of a running Eplan version and can access the currently selected objects. This can be achieved by using the SelectionSet class. The class provides a number of methods for retrieving a list of items currently selected by the user.\n\nYou can either get the project the user is currently working on using the  SelectionSet::GetCurrentProject  method, or you can get the currently selected page(s) using the  SelectionSet::GetSelectedPages  method. Depending on whether the graphical editor or the page overview dialog currently has the focus, one or more pages can be selected.\n\nMost importantly, you can get any set of objects selected from any focused (non-modal) dialog through the  SelectionSet.Selection  property. The objects are returned by the function as an array of StorableObjects. You can loop over the array and determine the types (and any other information) about the objects.\n\nThe following example shows how to access the selection.\n\n* C#](#i-tab-content-CS)\n* [VB\n\n```\n\nSelectionSet selectionSet = new SelectionSet();\nStorableObject[] storableObjects = selectionSet.Selection;\nif (storableObjects.Length == 0)\n{\n    Console.WriteLine(\"No current selection!\");\n}\nelse\n{\n    foreach(StorableObject so in storableObjects)\n    {\n        if(so is Function)\n           Console.WriteLine(\" StorableObject is a function: \" + ((Function) so).Name);\n        else\n            Console.WriteLine(\" StorableObject: \" + so.ToString());\n    }\n}\n```\n\n```\n\nDim selectionSet As New SelectionSet()\nDim storableObjects As StorableObject() = selectionSet.Selection\nIf storableObjects.Length = 0 Then\n   Console.WriteLine(\"No current selection!\")\nElse\n   Dim so As StorableObject\n   For Each so In  storableObjects\n      If TypeOf so Is Function Then\n         Console.WriteLine((\" StorableObject is a function: \" + CType(so, Function).Name))\n      Else\n         Console.WriteLine((\" StorableObject: \" + so.ToString()))\n      End If\n   Next so\nEnd If\n```"
    },
    {
        "source": "BasicPartOperations.md",
        "path": "/User Guide/API MasterData",
        "title": "BasicPartOperations",
        "content": "The following example shows how to work with parts in the parts database:\n\n* C#\n\n```\n\n// Get all parts\nvar listOfAllParts = partsDatabase.Parts;\n\n// Export all parts to the EDZ format\nif (partsDatabase.ExportParts(\"D:\\\\exportDirectory\\\\export.edz\", MDPartsDatabase.DataFormat.EDZ))\n    new Decider().Decide(EnumDecisionType.eOkDecision, \"Part export successful\", \"Export Part\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK);\n\n        \n// Add a new part variant\nstring partName = \"MyTestPart-123\";\nif (!partsDatabase.ExistsPart(partName))\n{       \n    var part = partsDatabase.AddPart(partName, \"2\");       \n}\n\n// Get a part, export it and remove it\nif (partsDatabase.ExistsPart(partName));\n{\n    // Get a part by name\n    var part = partsDatabase.GetPart(partName);\n    new Decider().Decide(\n    EnumDecisionType.eOkDecision,\n    \"Part number: \" + part.PartNr + \" \\nVariant: \" + part.Variant,\n    \"Part Loaded\",\n    EnumDecisionReturn.eOK,\n    EnumDecisionReturn.eOK); \n\n    // Export selected part(s) to XML\n    MDPart[] partsToExport = new MDPart[] { part };\n    partsDatabase.ExportParts(\"C:\\\\exportDirectory\\\\exportFile.xml\", MDPartsDatabase.DataFormat.XML, partsToExport);          \n\n    // Remove part\n    partsDatabase.RemovePart(part);\n    if (!partsDatabase.ExistsPart(partName)) ;\n        new Decider().Decide(EnumDecisionType.eOkDecision, \"Part Removed\", \"Part Removed\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK);\n}\n\n// Export all database items: parts(true), addresses(true), constructions(true), terminals(true), accessory lists(true), accessory placements(true) to XML\nif (partsDatabase.ExportPartsDatabaseItems(\"C:\\\\exportDirectory\\\\exportFile.xml\", MDPartsDatabase.DataFormat.XML, true, true, true, true, true, true))\n     new Decider().Decide(EnumDecisionType.eOkDecision, \"Export successful\", \"Export Part\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK);\n```\n\nThese operations are also available for  AccessoryPlacement,  ConnectionInfoPoint,  Construction,  Customer,  Manufacturer  and  AccessoryList.\n\nFor example, to add or remove  AccessortList  use:\n\n* C#\n\n```\n\n// Add AccessoryList\nMDAccessoryList accessoryList = partsDatabase.AddAccessoryList(\"accessoryListName\");\n\n// Remove AccessoryList\npartsDatabase.RemoveAccessoryList(accessoryList);\n```"
    },
    {
        "source": "FilteringParts.md",
        "path": "/User Guide/API MasterData",
        "title": "FilteringParts",
        "content": "The following example shows how to filter the parts database using the  MDObjectFilter()  class:\n\n* C#\n\n```\n\nusing (MDPartsDatabase partsDatabase = new MDPartsManagement().OpenDatabase())\n{\n    // Get all parts with part number beginning with \"SIE\"\n    MDObjectFilter mDObjectFilter = new MDObjectFilter();           \n    mDObjectFilter.AddPropertyCondition(22001, MDObjectFilter.CompareOperator.OperatorEqual, \"SIE*\"); //22001 - enum Properties.MDPartsDatabaseItem\n    MDPart[] arrParts = partsDatabase.GetParts(mDObjectFilter);       \n    partsDatabase.ExportParts(\"C:\\\\exportDirectory\\\\exportFile.xml\", MDPartsDatabase.DataFormat.XML, arrParts);\n}\n```\n\nFiltering the parts database using a  Linq  query:\n\n* C#\n\n```\n\nusing (MDPartsDatabase partsDatabase = new MDPartsManagement().OpenDatabase())\n{\n    // Export only parts modified today\n    var today = DateTime.Today;\n    var partsModifiedToday = partsDatabase.Parts.Where(item => item.Properties.PART_LASTCHANGE_DATE.ToTime() > today);\n    partsDatabase.ExportPartsDatabaseItems(\"C:\\\\exportDirectory\\\\exportFile.xml\", MDPartsDatabase.DataFormat.XML, partsModifiedToday);\n}\n```"
    },
    {
        "source": "VerifyingParts.md",
        "path": "/User Guide/API MasterData",
        "title": "VerifyingParts",
        "content": "You can create your own parts verification (in GUI called \"**check run**\") and integrate it into the system.\n\nTo do this, you first need to create a class that implements these interfaces:\n\n* Eplan.EplApi.EServices.PartVerification\n* Eplan.EplApi.EServices.IVerificationBase\n* Eplan.EplApi.EServices.IMessage\n\nThe actual check logic can be implemented in the  Execute  method. The messages generated during a parts check run are stored in the message database, and displayed in the Parts management dialog > tab Messages.\n\nThe check logic in the  Execute  method can be adapted to your requirements. You can access and verify all kind of information a part provides. For example you could test if the part numbers correspond to a specific pattern, if the short name of the manufacturer has the correct length or if the part image file is corrupted.\n\nThe  OnStartInspection  method and the  OnEndInspection  method allow you to specify what should be executed at the start and end of the check run.\n\nIn order to use it, the check run must be registered / loaded in Eplan. It can then be executed for selected parts or all parts in various ways:\n\n* via the  check  action\n* via the  Check  class:  VerifyMDPartsDatabaseItems  method\n* in GUI using the Parts management dialog > context menu > Check project\n\nFor further information on verifications, please take a look at the Verifications](Verifications.html) chapter. In the example below, an error message is created if the ERP number is not empty:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n public class ERPNumberFoundVerification : Eplan.EplApi.EServices.PartVerification, Eplan.EplApi.EServices.IVerificationBase, Eplan.EplApi.EServices.IMessage\n {\n     private int m_iMessageId = 530;\n \n     /// <summary>\n     /// Default constructor\n     /// </summary>\n     public ERPNumberFoundVerification()\n     {\n         // TODO: Add constructor logic here\n     }\n \n     #region IVerification Members\n \n     /// <summary>\n     /// This function implements the test logic. \n     /// </summary>\n     /// <param name=\"oObject1\">\n     /// This object is tested. One can be certain that only\n     /// function objects of the desired category arrive here.\n     /// </param>\n     public override void Execute(Eplan.EplApi.MasterData.MDPartsDatabaseItem oMDPartItem)\n     {\n         if (oMDPartItem == null)\n             return;\n \n         MDPart part = oMDPartItem as MDPart;\n         if (part == null)\n             return;\n        \n         if (!part.Properties.ARTICLE_ERPNR.IsEmpty)\n         {\n             string message = part.Properties.ARTICLE_ERPNR.ToString();\n             if (!string.IsNullOrEmpty(message))\n             {\n                 DoErrorMessage(oMDPartItem.Properties.ARTICLE_PARTNR, oMDPartItem.Properties.ARTICLE_VARIANT, message);\n             }\n         }\n     }         \n \n     /// <summary>\n     /// Registration function of the verification\n     /// </summary>\n     /// <param name=\"strName\">\n     /// Under this name, the new verification is registered in the system.\n     /// </param>\n     /// <param name=\"iOrdinal\">\n     /// Overload priority \n     /// </param>\n     public override void OnRegister(ref string strName, ref int iOrdinal)\n     {\n         strName = \"ERPNumberFoundVerification\";\n         iOrdinal = 30;\n     }\n \n     /// <summary>\n     /// This function is called before the start of all verification runs.\n     /// </summary>\n     /// <param name=\"bOnline\">\n     /// true: online verification\n     /// false: offline verification\n     /// </param>\n     public override void OnStartInspection(bool bOnline)\n     {\n         // TODO: Add logic to execute before the start of the verification here\n     }\n \n     /// <summary>\n     /// This function is called after the end of all verification runs.\n     /// </summary>\n     public override void OnEndInspection()\n     {\n         // TODO: Add logic to execute after the end of the verification here\n     }\n \n     #endregion // #region IVerification Members\n \n     #region IMessage Members\n \n     /// <summary>\n     /// This function must deliver the accompanying message text. \n     /// A test has always exactly one accompanying message text. \n     /// </summary>\n     /// <returns>The message text</returns>\n     public override string GetMessageText()\n     { \n         ResourcesCulture.UseGuiLanguage();\n         return Resources.IDS_ERP_NUMBER_FOUND;\n     }\n \n     /// <summary>\n     /// This function is called if to a message the aid text is supposed to be indicated. \n     /// It lies in the responsibility of the implementation of the function to call\n     /// the suitable aid system in the correct language.\n     /// In the simplest case, for example only a simple dialog can be called. \n     ///</summary>\n     public override void DoHelp()\n     {\n         // TODO: Add implementation of ERPNumberFoundVerification.DoHelp here\n     }\n \n     /// <summary>\n     /// This function is called of the system if the message of this test\n     /// is supposed to be registered in the system. \n     /// </summary>\n     /// <param name=\"strCreator\">Creator of the message</param>\n     /// <param name=\"eRegion\">Message region</param>\n     /// <param name=\"iMessageId\">Number of the message</param>\n     /// <param name=\"eClassification\">Default classification</param>\n     /// <param name=\"iOrdinal\">Overload priority</param>\n     public override void OnRegister(ref String strCreator, ref Eplan.EplApi.EServices.IMessage.Region eRegion, ref int iMessageId, ref Eplan.EplApi.EServices.IMessage.Classification eClassification, ref int iOrdinal)\n     {\n         strCreator = \"de.eplan\";\n         eRegion = IMessage.Region.PartMasterData;\n         iMessageId = m_iMessageId;\n         eClassification = IMessage.Classification.Warning;\n         iOrdinal = 20;\n     }\n \n     #endregion // #region IMessage Members\n }\n ``` | |"
    },
    {
        "source": "WorkingWithPartsDataBase.md",
        "path": "/User Guide/API MasterData",
        "title": "WorkingWithPartsDataBase",
        "content": "The following example shows how to open the default parts database:\n\n* C#](#i-tab-content-f61f5169-d738-4dd6-a177-da8cc2e02a34)\n\n```\n\nMDPartsManagement oPartsManagement = new MDPartsManagement();\nMDPartsDatabase partsDatabase = oPartsManagement.OpenDatabase();\n```\n\nIt is also possible to open a selected parts database from a file:\n\n* [C#\n\n```\n\nMDPartsDatabase partsDatabase = new MDPartsManagement().OpenDatabase(\"C:\\\\PathToDirectory\\\\DataBase.alk\");\n```\n\nThen you can check information about the open database:\n\n* C#](#i-tab-content-d4e41da8-ce6b-4b1d-aa75-a6f2bd1c2f75)\n\n```\n\n// Show database name\nvar bdName = MDPartsManagement.SelectedPartsDatabaseAsString;\nnew Decider().Decide(EnumDecisionType.eOkDecision, bdName, \"DB\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK);\n\n// Check if database is open\nif (partsDatabase.IsOpen);\n    new Decider().Decide(EnumDecisionType.eOkDecision, \"DataBase is open\", \"DB\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK);\n\n// Check if database is readonly\nif (!partsDatabase.IsReadOnly) ;\n    new Decider().Decide(EnumDecisionType.eOkDecision, \"DataBase is not readolny\", \"DB\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK);\n\n// Get database version\nvar dataBaseVersion = partsDatabase.Version;\n\n// Get database type\nvar dataBaseType = partsDatabase.Type;\n\n// Check if database scheme is up to date\nif (partsDatabase.IsSchemeUpToDate) ;\n  new Decider().Decide(EnumDecisionType.eOkDecision, \"Scheme is up to date\", \"DB\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK);\n```\n\nFinally, close the database:\n\n* [C#\n\n```\n\npartsDatabase.Close();\n```"
    },
    {
        "source": "API_LABELING_MODIFICATION.md",
        "path": "/User Guide/API Miscellaneous",
        "title": "API_LABELING_MODIFICATION",
        "content": "The API Labeling Modification Interface allows you to modify the result of label generation via API.\n\nThe following steps must be perfomed to use it in an API program:\n\n### a) Create labeling scheme settings Action\n\nEach labeling scheme now contains a property, where you can set an action name:\n\n!](images/Label_Settings_Action.jpg)\n\nIf an action with this name is registered in Eplan, it is called during label generation.\n\nYou can use the action to influence the objects that are reported and the order in which they appear.\n\nThe action is called from the template with the following parameters:\n\nParameters:\n\nproject  â Input parameter; value: ID of a project\n\nmode  â Input parameter; value: \"ModifyObjectList\"\n\nobjects  â Input / output parameter; value: IDs of objects that will be evaluated separated by semicolon\n\nThis list can be modified (but not the objects themselves. You can add or remove object IDs from the list or change their order in the list.\n\n### b) Create label texts processing action\n\nYou can now add an action to a label:\n\n![\n\nThis action will be called, when the label is created. The action is called with the following parameters:\n\nobjects â Input parameter; value: main object for the line (can be more than one).\n\nActionCallingContext.SetStrings()  â Output parameter; call  SetStrings()  of the calling context to set the result text. More than one result text will generate new lines.\n\nPlease set only one string in the string array you pass to  SetStrings().\n\nLine breaks are always written to the output file as they are in the string. If necessary, remove line breaks from the strings."
    },
    {
        "source": "API_PARTS_SELECTION.md",
        "path": "/User Guide/API Miscellaneous",
        "title": "API_PARTS_SELECTION",
        "content": "In Eplan, you have the possibility to switch between different data sources for the part selection. You can get parts data via:\n\n* **Eplan database**\n* **SQL Server**\n* **API**\n\n Setting the data source to \"API\" means that an API action will be called in case of operations related to accessing parts, for example:\n\n- A new part (or reference) is added to a project.\n\n- The part reference is changed in a project.\n\n- The part information is loaded from system.\n\n- A part is synchronized to a project.\n\n- A new macro with parts is inserted to a project.\n\n- A new device is inserted to project.\n\n- A new device is selected (with device section).\n\n- A new device list item is inserted to project.\n\nIn this way, the user can create his own dialog for setting parts data, set additional properties when selecting a part, etc.\n\nAn example of its use is the \"Eplan Data Portal\" scheme â after setting it, the standard dialog for selecting parts is replaced by a custom one, which allows advanced selection of parts from the Data Portal database.\n\nPlease note that the API parts selection cannot completely substitute the parts management databases such as Eplan database or SQL Server. In some operations, they still have to be used.\n\nThis topic describes how to use the API parts selection interface.\n\n### a) Setting the API parts selection action\n\nTo be able to use the API parts selection interface, you first have to enable and configure it. To do this, you open the Settings dialog in Eplan and select User > Management > Parts. In this dialog you create a new scheme and activate the API radio button.\n\n!](images/Setting_Partselection.gif)\n\nBy clicking the ellipsis [...] button next to the API radio button, you can open a dialog with further settings for the API interface.\n\n![](images/API_PartSelection.gif)\n\nIn this dialog you enter the name of an API action that is called by Eplan when the parts selection is started.\n\nThe following describes how to develop the action and set its parameters.\n\n### b) Creating an action\n\nPlease create an action with the name that was set in Settings dialog. The best way is to use the Visual Studio wizard:\n\n![](images/API_PartSelectionAction.gif)\n\n### c) Handling action parameters\n\nThe part data is passed through the  ActionCallingContext  of the action. The object contains a set of input and output parameters that are passed as strings.\n\n* [C#](#i-tab-content-CS)\n* [VB\n\n```\n\npublic bool Execute(ActionCallingContext oActionCallingContext)\n```\n\n```\n\n    Public Function Execute(oActionCallingContext As Eplan.EplApi.ApplicationFramework.ActionCallingContext) As Boolean _\n        Implements Eplan.EplApi.ApplicationFramework.IEplAction.Execute\n```\n\n```\n\n```\n\nIn this way, it is possible to have an access to properties of a selected part, for example:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n string sMode = \"\";\n ctx.GetParameter(\"Modus\", ref sMode);\n string sProp00 = \"(int)Properties.Article.ARTICLE_DEPTH\" + sSeparator + \"1\";\n ctx.AddParameter(sProp00, \"44.0\");\n ``` | |\n\n```\n\n```\n\nThe  Modus  parameter is used to identify the mode in which the parts selection is called. It can take one of the following values:\n\n* Selection  â A part is selected.\n* Read  â A part is updated.\n* Create  â A part is created and parts selection action is called as alternative parts data source.\n* Exist  â Check if part exist.\n\nHere is also a table with other input parameters:\n\n|  |  |\n| --- | --- |\n| **Mode** (Modus  parameter) | **Input parameters** |\n| Selection | objectid  â The object ID of the function on which the part selection was started. You can use the object ID to locate the function in the project and get additional information about it.  separator  â Contains the separator between property number and part index in parameter name  SingleSelection  â Is set to \"1\" if only one part can be set. Otherwise it is \"0\" or an empty string.  ForceNoResolve  â Is set to \"1\" if the assembly should not be resolved. Otherwise it is \"0\" or an empty string.  GraphicalPreview  â Is set to \"1\" if the user wants a preview of the part. Otherwise, it is \"0\" or an empty string.  preselectpartnr  â Contains the part number in the table cell from which the part selection is started. If the cell is empty, the parameter contains an empty string.  preselectvariant  â Contains the part variant number in the table cell from which the part selection is started.  PartSelection  â Is set to \"1\" if only a selection dialog should be shown. If it is \"0\", the parts can also be edited.  DatabaseId  â  StorableObject.DatabaseIdentifier  of the current project.  UsePreSelection  â Is set to \"1\" if the preselection list should be considered. Otherwise it is \"0\" or an empty string.  codeletter  â  Identifier  property of selected symbol  symbollib  â Symbol library of selected symbol  symbolnr  â Symbol number of selected symbol  craft  â Trade number of selected part  \\_cmdline  â Name of calling action |\n| Read | Separator  â Contains separator between property number and part index in parameter name, for example:                          <property number><separator><part index>[<separator><property index>]  â e.g. \"22001\\_1\", value \"SIE.5SX2102-8\"  22024\\_<part index>  â part variant  \\_cmdline  â Name of calling action |\n| Create | Separator  â Contains separator between property number and part index in parameter name, for example:                          <property number><separator><part index>[<separator><property index>]  â e.g. \"22001\\_1\", value \"SIE.5SX2102-8\"  \\_cmdline  â Name of calling action |\n| Exist | Separator  â Contains separator between property number and part index in parameter name, for example                          <property number><separator><part index>[<separator><property index>]  â e.g. \"22001\\_1\", value \"SIE.5SX2102-8\"  22024\\_<part index>  â part variant  \\_cmdline  â Name of calling action |\n\nThe **output parameters** are the following:\n\n* The property to set.  \n  The parameter name has the format:  <property number><separator><part index>[<separator><property index>].  \n  It is required to set the part number property (22001). Other properties are optional.  \n  The  <part index>  is used to pass more than one part simultaneously.  \n  It starts from the 1. example : \"1234\\_1\". As a value, it can be any string for example â11.0â, etc.\n\n* Count of the parts to transmit.  \n  The parameter name is  count. The value is determined by the last  <part index>.\n\n* In case of the  Exists  mode, there is also a  Result  parameter that determines whether a part exists.\n\nA very important input parameter is the object ID (objectid). Using the object ID, you can locate the function in the project and get additional information about it.\n\nThe following example shows an API parts selection action that displays the FormPartSelection user dialog and passes the fields  Partnumber,  Typenumber  and  Description1.\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n public class MyPartSelectionAction : IEplAction\n {\n     public bool Execute(ActionCallingContext oActionCallingContext)\n     {\n         // Object ID from which part selection is started\n         string sObjectId = \"\";\n         oActionCallingContext.GetParameter(\"ObjectId\", ref sObjectId);\n         // Get Function object\n         Function oFunction = getFunction(sObjectId);\n         FormPartSelection frm = new FormPartSelection();\n         frm.Description = \"\";\n         frm.Typenumber = \"\";\n         frm.Partnumber = \"new part\";\n         // Start part selection dialog\n         if (frm.ShowDialog() == DialogResult.OK)\n         {\n             string sTypenumber = frm.Typenumber;\n             string sPartnumber = frm.Partnumber;\n             string sDescription = frm.Description;\n             // Count of parts\n             oActionCallingContext.addParameter(\"count\", \"1\");\n             // Get separator between property and index\n             string sSeparator = \"\";\n             oActionCallingContext.GetParameter(\"Separator\", ref sSeparator);\n             int prop;\n             int idx = 1;\n             string sProp;\n             // Set part number\n             prop = (int)Properties.Article.ARTICLE_PARTNR;\n             sProp = prop.ToString() + sSeparator + idx.ToString();\n             oActionCallingContext.AddParameter(sProp, sPartnumber);\n             // Set type number\n             prop = (int)Properties.Article.ARTICLE_TYPENR;\n             sProp = prop.ToString() + sSeparator + idx.ToString();\n             oActionCallingContext.AddParameter(sProp, sTypenumber);\n             // Set description 1\n             prop = (int)Properties.Article.ARTICLE_DESCR1;\n             sProp = prop.ToString() + sSeparator + idx.ToString();\n             oActionCallingContext.AddParameter(sProp, sDescription);\n             if ((oFunction != null))\n             {\n                string strArticleCharacteristics = (int)Properties.Article.ARTICLE_CHARACTERISTICS + sSeparator + \"1\";\n                ctx.AddParameter(strArticleCharacteristics, \"5,5kW\");      // Set characteristics to 5,5 kW\n             }\n         }\n         return true;\n     }\n     // Locate the function by its object ID\n         private Function getFunction(string sObjectId)\n         {\n             ProjectManager projectManager = new ProjectManager();\n             Project project = projectManager.CurrentProject;\n             DMObjectsFinder objectFinder = new DMObjectsFinder(project);\n             FunctionPropertyList functionPropertyList = new FunctionPropertyList();\n             functionPropertyList[Properties.StorableObject.PROPUSER_DBOBJECTID] = sObjectId;\n             FunctionsFilter functionsFilter = new FunctionsFilter();\n             functionsFilter.SetFilteredPropertyList(functionPropertyList);\n             Function[] aFunction = objectFinder.GetFunctions(functionsFilter);\n             if (aFunction.Length > 0)\n             {\n                 return aFunction[0];\n             }\n             return null;\n         }\n \n     public bool OnRegister(ref string Name, ref int Ordinal)\n     {\n         Name = \"MyPartSelectionAction\";\n         Ordinal = 20;\n         return true;\n     }\n     public MyPartSelectionAction()\n     {}\n }\n ``` | |\n\n```\n\n```"
    },
    {
        "source": "API_REPORTS_MODIFICATION.md",
        "path": "/User Guide/API Miscellaneous",
        "title": "API_REPORTS_MODIFICATION",
        "content": "The API Reports Modification Interface makes it possible to take influence on the result of report generation via an API action.\n\nIn this way, it is possible to filter or change the order of objects for a report.\n\nWarning: When a report action is used, please don't set a filter or sort settings because it can be inconsistent with the action!\n\nThe following steps need to be done to in order to use the interface:\n\n### a) Create a report processing action\n\nEach report template now contains a property that allows you to set an action name:\n\n!](images/report_action_field.jpg)\n\nIf an action with this name is registered in Eplan, it is called on several occasions during report generation.\n\nDuring these steps, you can influence the texts that appear in the report as well as the objects that are reported and the order in which they appear.\n\nThe steps are distinguished by the  mode  parameter of the called action.\n\nThe action from the template is called with the following parameters:\n\n*Step 1.*\n\nParameters:\n\nproject  â Input parameter; value: ID of a project\n\nmode  â Input parameter; value: \"Start\"\n\nobjects  â Input parameter; value: IDs of objects that will be updated (only if you UPDATE a report)\n\nPrepare project data for this report if necessary, fill caches etc.\n\n*Step 2.*\n\nParameters:\n\nproject  â Input parameter; value: ID of a project\n\nmode  â Input parameter; value: \"ModifyObjectList\"\n\nobjects  â Input / output parameter; value: IDs of objects that will be evaluated separated with semicolon\n\nThis list can be modified (but not the objects themselves. You can add or remove object IDs from the list or change their order in the list.\n\nThe  objects  parameter can be set only in \"ModifyObjectList\" mode!\n\n*Step 3.*\n\nParameters:\n\nproject  â Input parameter; value: ID of a project\n\nmode  â Input parameter; value: \"ModifyPages\"\n\npages  â Input parameter; value: IDs of created pages separated by semicolon\n\nThe created pages and their properties can be modified.\n\n*Step 4*.\n\nParameters:\n\nproject  â Input parameter; value: ID of a project\n\nmode  â Input parameter; value: \"Finish\"\n\nClean up caches or undo changes made in step 1.\n\n### b) Prepare a form to be processed\n\nIt is recommended to use a custom form that will be processed by the action described above.\n\nThis will ensure that reports can be created either in the \"standard\" way or in the new one.\n\nThe easiest way is to use a copy of an existing form. Such a form should be set in the Form field of the project template:\n\n![](images/report_form_field.jpg)\n\nThe form can have a custom actions assigned to the placeholder text. This can be set in the Form editor:\n\n![\n\nNow it is necessary to create the text processing action (see below).\n\n### c) Create a placeholder text processing action\n\nThis action is called when the placeholder text is evaluated during the report generation. The action is called with the following parameters:\n\nobjects  â Input parameter; value: main object for the line (can be more than one).\n\nActionCallingContext.SetStrings()  â Output parameter; call  SetStrings()  of the calling context to set the result text. More than one result text will generate new lines.\n\ncolor  â Input / output parameter; value: \"ColorId\". Set this parameter to change the color of the placeholder text. It works with one result text only.   \nPossible values are from 0 to 256. Please use \"-16002\" as \"From layer\" value.\n\nPredefined values for line color index are:\n\n0 = black\n\n1 = red\n\n2 = yellow\n\n3 = green\n\n4 = cyan\n\n5 = blue\n\n6 = magenta\n\n7 = white\n\n...\n\n252 = dark gray\n\n253 = gray\n\n...\n\n### d) Make sure that the new form is included in the project master data pool\n\nThis can be done using the  Eplan::EplApi::HEServices::Masterdata  class.\n\nThe following example shows how to create an embedded report with report a processing action:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n // Copy a form with placeholder text processing action to the master data directory\n File.Copy(\"c:\\\\temp\\\\PlugDiagramReportActionFormular.f22\", new ProjectManager().Paths.Forms + \"\\\\PlugDiagramReportActionFormular.f22\", true);\n //... and add it to project master data\n StringCollection oProjectNewEntries = new StringCollection();\n oProjectNewEntries.Add(@\"PlugDiagramReportActionFormular.f22\");\n System.Collections.Hashtable oResult = new Masterdata().AddToProjectEx(m_oReportActionProject, oProjectNewEntries);\n // Prepare the ReportBlock object\n ReportBlock oReportBlock = new ReportBlock();\n oReportBlock.Create(m_oReportActionProject);\n // Set a form with a placeholder text processing action\n oReportBlock.FormName = \"PlugDiagramReportActionFormular\";\n oReportBlock.Type = DocumentTypeManager.DocumentType.PlugDiagram;\n // Set the report processing action\n oReportBlock.Action = \"PlugDiagramReportAction\";\n // Generate the embedded report\n ReportBlockReference oReportBlockReference = new Reports().CreateEmbeddedReport(oReportBlock, oPage, new PointD(10.0, 300.0));\n ``` | |"
    },
    {
        "source": "Commandlineparameters.md",
        "path": "/User Guide/API Miscellaneous",
        "title": "Commandlineparameters",
        "content": "Here is a full list of parameters of the  EPLAN.exe  application.  \nBy default, it is installed in the  C:\\Program Files\\EPLAN\\Platform\\<version>\\Bin  directory.\n\n| Parameter | Description |\n| --- | --- |\n| ``` \n Auto\n ``` | ``` \n Eplan is shut down after executing the command line; it has no effects on showing dialogs or the mainframe. \n ``` |\n| ``` \n Quiet\n ``` | ``` \n Determines if dialogs are shown while a command line is executed:\n  â¢ 0: all dialogs will be shown\n  â¢ 1: no dialog will be shown (default)\n  â¢ 2: only some special dialogs will be shown, e.g. progress bars\n ``` |\n| ``` \n NoLicenseDialog\n ``` | ``` \n Turn off calling license dialog. \n ``` |\n| ``` \n NoUserRightsDialog\n ``` | ``` \n Turn off calling user rights dialog. If user rights check fails, Eplan application will terminate. This dialog will be shown per default if it is needed. \n ``` |\n| ``` \n Frame\n ``` | ``` \n Determines how the Eplan mainframe should be shown: \n  â¢ 0: Hides this window and passes activation to another window.\n  â¢ 1: Activates and displays the window. If the window is minimized or maximized, Windows restores it to its original size and position.\n  â¢ 2: Activates the window and displays it as an icon.\n  â¢ 3: Activates the window and displays it as a maximized window.\n  â¢ 4: Displays the window as an icon. The window that is currently active remains active.\n  â¢ 5: Activates the window and displays it in its current size and position.\n  â¢ 6: Minimizes the window and activates the top-level window in the system's list.\n  â¢ 7: Displays the window as an icon. The window that is currently active remains active.\n  â¢ 8: Displays the window in its current state. The window that is currently active remains active.\n  â¢ 9: Activates and displays the window. If the window is minimized or maximized, Windows restores it to its original size and position. \n ``` |\n| ``` \n Setup\n ``` | ``` \n Determines if default settings should be used:\n  â¢ 0: USER, STATION, COMPANY settings are restored to their installation default (on file level) and databases are backed (default)\n  â¢ 8: the actual adjusted settings will be used (on file level) ONLY FOR INTERNAL USE!\n  â¢ category (USER or STATION or COMPANY) is denoted: settings of that category are restored to their installation default (on file level) and the database is backed\n  â¢ path: all settings below this location will be deleted and then reloaded from the reference database, but only when more than the category is denoted\n  â¢ nobackup: same as setup:0, but no backup of the databases.\n ``` |\n| ``` \n SetupRestore\n ``` | ``` \n Determines if settings should be restored from last database backup (default: 0): \n  â¢ 0: USER, STATION, COMPANY settings are restored from their last backup (on file level)\n  â¢ category (USER or STATION or COMPANY) is denoted: settings of that category are restored from their last backup (on file level)\n ``` |\n| ``` \n User\n ``` | ``` \n Eplan login user. Settings will be used from this user.\n  As value for this parameter please enter the user name.\n ``` |\n| ``` \n Password\n ``` | ``` \n Eplan login password used for user rights.\n  As value for this parameter please enter the user password.\n ``` |\n| ``` \n Station\n ``` | ``` \n Settings will be used from another station.\n  As value for this parameter please enter the station name\n ``` |\n| ``` \n Company\n ``` | ``` \n Settings will be used from another company.\n  As value for this parameter please enter the company name.\n ``` |\n| ``` \n NoLoadWorkspace\n ``` | ``` \n No workspace is loaded or restored. \n ``` |\n| ``` \n NoSplash\n ``` | ``` \n No splash screen is shown on system start. \n ``` |\n| ``` \n NoRemoting\n ``` | ``` \n No Eplan Remoting functionalities are available. \n  For more information, please refer to the \"Eplan Remoting\" chapter. \n ``` |\n| ``` \n EplanServerPort\n ``` | ``` \n Set the gRPC server to a specific port number. The port should be in the range: 49152 - 65535. \n  If not set explicitly, the port number is set automatically (taking the first available port from the specified range). It is recommended to set the port manually. \n  For more information, please refer to the \"Eplan Remoting\" chapter. \n ``` |\n| ``` \n Language\n ``` | ``` \n Eplan will be started with chosen GUI language. The language predefined in the settings of Eplan will not be changed.\n  As value for this parameter please enter the chosen language (e.g. \"de_DE\" or \"en_US\").\n ``` |\n| ``` \n PathsScheme\n ``` | ``` \n Sets scheme of directories' paths, e.g. \"/PathsScheme:PredefinedPathScheme\". If a chosen scheme does not exist, the default scheme is used. \n ``` |\n| ``` \n autoRegAddon\n ``` | ``` \n New installed add-ons will be registered at startup.\n  Possible values: \"true\" or \"false\"\n ``` |\n| ``` \n License\n ``` | ``` \n Name of the file containing the license to use or to borrow (\"*.lis\")\n  As value for this parameter please enter the filename  of the \"*.lis\" file.\n ``` |\n| ``` \n ReturnLicense\n ``` | ``` \n Return the borrowed license. The parameter is the name of the file containing the borrowed license. This same file used by \"/license\"\n  As value for this parameter please enter the filename  of the \"*.lis\" file.\n ``` |\n| ``` \n RequestOfflineLicense\n ``` | ``` \n Create the request file to borrow license offline (\"*.egr\"). The parameter is the name of the file containing the license to borrow (\"*.lis\")\n  As value for this parameter please enter the filename  of the \"*.lis\" file.\n ``` |\n| ``` \n OfflineLicense\n ``` | ``` \n Use the file containing the borrowed license which is converted from a confirmation file. The parameter is the name of the file containing the license to borrow (\"*.lis\")\n  As value for this parameter please enter the filename  of the \"*.lis\" file.\n ``` |\n| ``` \n SystemConfiguration\n ``` | ``` \n Set system configuration scheme.\n  As value for this parameter please enter the scheme name of system configuration.\n ``` |\n| ``` \n Variant\n ``` | ``` \n Product name. It is used to call an Eplan platform-based product:\n  â¢ \"Electric P8\" \n  â¢ Fluid\n  â¢ FluidMan\n  â¢ ProPanel\n  â¢ PPE\n  â¢ View\n  â¢ CPM\n  â¢ FHC\n  â¢ Education\n  â¢ Trial\n ``` |\n| ``` \n VariantSharedEplDir\n ``` | ``` \n Product name directory. This is an alternative way of setting product name to \"Variant\" parameter, for example \"C:\\\\Program Files\\\\EPLAN\\\\Preplanning\\\\<version>\"\n ``` |\n| ``` \n AttachDebugger\n ``` | ``` \n Attach debugger to execution of Eplan.\n ``` |\n| ``` \n WebService\n ``` | ``` \n Starts a webservice on the specific URL.\n  As value for this parameter please enter the URL for the service\n ``` |\n| ``` \n RestartOnCrash\n ``` | ``` \n Restart Eplan after a crash occurred.\n ``` |\n| ``` \n UseLastOpenedProjects\n ``` | ``` \n Determines if last opened projects should be opened on start:\n  â¢ 0: No projects will be opened.\n  â¢ 1: Last used projects will be opened.\n  â¢ 2: Last used projects will be opened if no action is passed. Otherwise (i.e. with action parameter), no projects are opened (default).\n ``` |\n| ``` \n <action name>\n ``` | ``` \n Action that should be executed, all following parameters (starting with \"/\" or \"â\") are passed to the action as parameters. \n ``` |\n\n**Remarks**\n\n```\n\n By default, when starting P8 from command line with an action, no previously opened projects are opened at the beginning of the session.\n If your installation path is different from the default (\"C:\\Program Files\\EPLAN\\Platform\\<version>\\Bin\"), you must modify the code samples below accordingly.\n \"<version>\" must be replaced with the correct Eplan version, e.g. \"2026.0.3\" for version 2026.\n \n```\n\n**Example**\n\n```\n\n    \n \"C:\\\\Program Files\\\\EPLAN\\\\Platform\\\\<version>\\\\Bin\\\\EPLAN.exe\" /variant:\"Electric P8\"\n \n  \n```\n\n  \n\n```\n\n    \n \"C:\\\\Program Files\\\\EPLAN\\\\Platform\\\\<version>\\\\Bin\\\\EPLAN.exe\" action /Param1:wert1 /Param2:wert2 /Param3\n \n  \n```\n\n  \n\n```\n\n    \n \"C:\\\\Program Files\\\\EPLAN\\\\Platform\\\\<version>\\\\Bin\\\\EPLAN.exe\" /Setup:SS_USER_WORKSPACE_NAMED_PATH\n \n  \n```\n\n  \n\n```\n\n    \n \"C:\\\\Program Files\\\\EPLAN\\\\Platform\\\\<version>\\\\Bin\\\\EPLAN.exe\" /User:UserXYZ\n \n  \n```\n\n  \n\n```\n\n    \n \"C:\\\\Program Files\\\\EPLAN\\\\Platform\\\\<version>\\\\Bin\\\\EPLAN.exe\" /NoLoadWorkspace action /Param1:wert1\n \n  \n```\n\n  \n\n```\n\n    \n \"C:\\\\Program Files\\\\EPLAN\\\\Platform\\\\<version>\\\\Bin\\\\EPLAN.exe\" /Language:en_us\n \n  \n```\n\n  \n\n```\n\n    \n \"C:\\\\Program Files\\\\EPLAN\\\\Platform\\\\<version>\\\\Bin\\\\EPLAN.exe\" /Auto /Quiet /Frame:2 AnotherAction /ActionPar\n \n  \n```\n\n  \n\n```\n\n If the license dialog is needed, the flag \"NoLicenseDialog\" disables calling it.\n \n \"C:\\\\Program Files\\\\EPLAN\\\\Platform\\\\<version>\\\\Bin\\\\EPLAN.exe\" /NoLicenseDialog action /Param1:wert1 /Param2:wert2\n \n```\n\n  \n\n```\n\n If no user rights dialog is needed, the flag \"NoUserRightsDialog\" disables calling it. If user rights check fails, Eplan application will terminate.\n \n \"C:\\\\Program Files\\\\EPLAN\\\\Platform\\\\<version>\\\\Bin\\\\EPLAN.exe\" /NoUserRightsDialog action /Param1:wert1 /Param2:wert2\n \n```\n\n  \n\n```\n\n Use or borrow a License defined in \"myLicense.lis\". In \"myLicense.lis\" you can define a product variant and License modules to use or to borrow for a period of time.\n \n \"C:\\\\Program Files\\\\EPLAN\\\\Platform\\\\<version>\\\\Bin\\\\EPLAN.exe\" /License:\"D:\\\\myLicense.lis\"\n \n```\n\n  \n\n```\n\n Return a license\n \n \"C:\\\\Program Files\\\\EPLAN\\\\Platform\\\\<version>\\\\Bin\\\\EPLAN.exe\" /ReturnLicense:\"D:\\\\myLicense.lis\"\n \n```\n\n  \n\n```\n\n Request a license file\n \n \"C:\\\\Program Files\\\\EPLAN\\\\Platform\\\\<version>\\\\Bin\\\\EPLAN.exe\" /RequestOfflineLicense:\"D:\\\\myLicense.lis\"\n \n```\n\n  \n\n```\n\n Use a license offline\n \n \"C:\\\\Program Files\\\\EPLAN\\\\Platform\\\\<version>\\\\Bin\\\\EPLAN.exe\" /OfflineLicense:\"D:\\\\myLicense.lis\"\n \n```\n\n  \n\n```\n\n Use 49200 as port number for the gRPC server (API Remoting)\n \n \"C:\\\\Program Files\\\\EPLAN\\\\Platform\\\\<version>\\\\Bin\\\\EPLAN.exe\" /EplanServerPort:49200\n \n```"
    },
    {
        "source": "Get_EPLAN_Window.md",
        "path": "/User Guide/API Miscellaneous",
        "title": "Get_EPLAN_Window",
        "content": "How to display a MessageBox with the Eplan window as owner\n\nIf you would like to display a message box or a modal dialog that uses the Eplan window as owner window, you can do this as in the following example:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n Process oCurrent = Process.GetCurrentProcess();\n var ww = new WindowWrapper(oCurrent.MainWindowHandle);\n MessageBox.Show(ww, \"dialog with owner\");\n MessageBox.Show(\"dialog without owner\");\n public class WindowWrapper : System.Windows.Forms.IWin32Window\n {\n  public WindowWrapper(IntPtr handle)\n  {\n  _hwnd = handle;\n  }\n  public IntPtr Handle\n  {\n  get { return _hwnd; }\n  }\n  private IntPtr _hwnd;\n }\n ``` | |"
    },
    {
        "source": "IdentityClient.md",
        "path": "/User Guide/API Miscellaneous",
        "title": "IdentityClient",
        "content": "This chapter shows how to work with the  Eplan.IdentityClient.Authentification  and  Eplan.IdentityClient.Types  namespaces.\n\nFirst create an  IEIdentityClient  object and make sure you are signed in to the Eplan Cloud:\n\n* C#](#i-tab-content-3dfe2b7c-67de-4a42-ac0c-16f8f7f8014e)\n\n```\n\n// Create IdentityClient instance\nIEIdentityClient IdentityClient = EIdentityClient.Instance;\n\n// Make sure you are signed in to Eplan Cloud\nTask<AuthenticationData> signInData = IdentityClient.Signin();\nAuthenticationData signInResult = signInData.Result;\n\n// Check if success\nif (signInResult.IsSuccess)\n    new Decider().Decide(EnumDecisionType.eOkDecision, \"Sign in success\", \"Result\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK);\n```\n\nGet example information from the user cloud profile:\n\n* [C#\n\n```\n\n// User profile information\nTask<IdentityClientResponse> userProfile = IdentityClient.GetUserProfile();\nIdentityClientResponse getUserProfileResult = userProfile.Result;\n\n// Show exmaple information\nif (getUserProfileResult.IsSuccess)\n{\n    string message = $\"Organization Name: {getUserProfileResult.OrganizationName},\\nEmail: {getUserProfileResult.Email}\";\n    new Decider().Decide(EnumDecisionType.eOkDecision, message, \"UserProfile success\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK);\n}\n```\n\nSet the  **ClientId**  name to work with a specific API service in the Eplan Cloud:\n\n* C#](#i-tab-content-e4938a2e-cf6a-4589-80a9-9cf12125d8e0)\n\n```\n\n// ClientId of specific Eplan Cloud API application\nstring ClientId = \"Proper_Client_Id_Name\";\n```\n\nNotice:  \n**ClientId**  is case-sensitive and can be found on [Eplan Cloud Developer Portal](https://developer.eplan.com/) inside tooltip of product tag:\n\n![](images/ClientID_ToolTip.png)\n\nUse the  GetHttpClient()  method to work with Eplan Cloud API endpoints:\n\n* [C#\n\n```\n\n// Initialize httpClient object\nvar url = \"https://api.eplan.com/estockservice/v2.0/\";\nHttpClient httpClient = null;\nIdentityClientResponse httpClientRespone = IdentityClient.GetHttpClient(strClientId, url, ref httpClient);\n\n// Get collections\nif (httpClientRespone.IsSuccess)\n{\n     HttpResponseMessage GetAsyncResult = httpClient.GetAsync(\"collections\").Result;\n     string message = $\"Status: {GetAsyncResult.StatusCode.ToString()},\\nResult: {GetAsyncResult.Content.ReadAsStringAsync().Result}\";\n     new Decider().Decide(EnumDecisionType.eOkDecision, message, \"Get result\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK);\n}\n```\n\nThe  GetAccessToken()  is called internally by  GetHttpClient(), but it is still possible to use this method directly:\n\n* C#](#i-tab-content-c6adcdb6-197d-47a0-9673-e6d4c7f623d8)\n\n```\n\n// Get access Token\nIdentityClientResponse tokenResponse = IdentityClient.GetAccessToken(strClientId);\n```\n\nSign out and exit:\n\n* [C#](#i-tab-content-04046b69-3a3f-4906-9068-36d52ebc63d4)\n\n```\n\n// Sign out\nTask<IdentityClientResponse> response = IdentityClient.Signout();\nIdentityClientResponse signOutResult = response.Result;\n\nif (signOutResult.IsSuccess)\n    new Decider().Decide(EnumDecisionType.eOkDecision, \"Sign out success\", \"Result\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK);\n\n\n// Exit IdentityClient\nIdentityClientResponse exitResponse = IdentityClient.Exit();\n\nif (exitResponse.IsSuccess)\n    new Decider().Decide(EnumDecisionType.eOkDecision, \"Exit success\", \"Result\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK);\n```"
    },
    {
        "source": "IdentityClient.md",
        "path": "/User Guide/API Miscellaneous",
        "title": "Warning about deprecated endpoints",
        "content": "To receive a warning when a deprecated URL is addressed, the  EplanCloudResourceDeprecationEvent  must be subscribed to. In the following example, a message box will pop up as soon as a deprecated endpoint is addressed:\n\n![](images/Identity_Client/message-deprecated-endpoint.png)\n\nFor this purpose, an event handler is registered for the EplanCloudResourceDeprecationEvent.\n\n* [C#\n\n```\n\n// Create an IdentityClient instance\nIEIdentityClient IdentityClient = EIdentityClient.Instance;\n\n// Create an endpoint deprecation event handling\nEventHandler<EplanCloudResourceDeprecationArgs> DeprecationHandler = (sender, args) =>\n{\n    // Show a message box that displays the deprecated URL as well as the deprecation timestamp and sunset timestamp\n    string message = $\"The Eplan URL '{args.Uri}' is depreacted. Deprecation: {args.Deprecation}. Sunset: {args.Sunset}.\";\n    MessageBox.Show(message);\n};\n\ntry\n{\n    // Register an event handler for the EplanCloudResourceDeprecationEvent\n    IdentityClient.EplanCloudResourceDeprecationEvent += DeprecationHandler;\n\n    // Call an Eplan Cloud deprecated endpoint\n    string deprecatedURL = \"yourDeprecatedEndpointURL\";\n    HttpClient httpClient = null;\n    var result =\n        IdentityClient.GetHttpClient(strClientId, deprecatedURL, ref httpClient);\n\n    if (result.IsSuccess)\n    {\n        var response = httpClient.GetAsync(deprecatedURL).Result;\n\n        // Handle response\n        if (!response.IsSuccessStatusCode)\n        {\n            MessageBox.Show($\"Eplan Cloud call failed. Error = {response.ReasonPhrase}\");\n        }\n\n        // Give the deprecation message some time to pop up\n        MessageBox.Show(\"Waiting for event...\");\n    }\n    else\n    {\n        MessageBox.Show(result.Error);\n    }\n}\ncatch (Exception e)\n{\n    MessageBox.Show(e.Message);\n}\nfinally\n{\n    // Unregister the event handler for EplanCloudResourceDeprecationEvent\n    IdentityClient.EplanCloudResourceDeprecationEvent -= DeprecationHandler;\n}\n```"
    },
    {
        "source": "ModifyPartsWhenImportingFromTheDataPortal.md",
        "path": "/User Guide/API Miscellaneous",
        "title": "ModifyPartsWhenImportingFromTheDataPortal",
        "content": "You can influence the parts import process from the Eplan Data Portal by changing the behaviour just before the import to P8 and just after the import to P8. The  EDataPreImportAction  must be implemented in order to display or modify the parts before the import and the implementation of  EDataPostImportAction  is necessary for influencing the parts after the import.\n\nThe following example uses a custom add-in to show the part path in a message box before importing from the Data Portal using the  EDataPreImportAction:\n\n* C#\n\n```\n\npublic class EDataPreImportAction : IEplAction\n{\n    public bool OnRegister(ref string Name, ref int Ordinal)\n    {\n        Ordinal = 20;\n        Name = \"EDataPreImportAction\";\n        return true;\n    }\n\n    public bool Execute(ActionCallingContext oActionCallingContext)\n    {\n        string filename = null;\n        oActionCallingContext.GetParameter(\"filenames\", ref filename);\n        MessageBox.Show($\"This is the path to the imported part: {filename}\");\n        return true;\n    }\nâ¦\n}\n```\n\nIn the same way, the part can be queried or edited after the import via the  EDataPostImportAction."
    },
    {
        "source": "PartsManagementExtension.md",
        "path": "/User Guide/API Miscellaneous",
        "title": "PartsManagementExtension",
        "content": "The API parts management extension feature can be used to add your own custom information to parts stored in the Eplan parts database. It is intended for information that you don't want to set as part properties.\n\nYou store this information in your own database and can attach it to the part and visualize it. When a part that references such custom information is exported or stored in a project, the information is stored as a string in the indexed  ARTICLE\\_CUSTOM\\_DATA\\_INDEX  and  ARTICLE\\_CUSTOM\\_DATA\\_VALUE  properties. The first property contains the name of the add-in to which the information belongs, and the second property contains the data string at the same index position.\n\nTo use this feature, you need to create an add-in. In this add-in, you must call the  MDPartsManagement.RegisterAddin(<Add-inName>, <ActionName>)  and  MDPartsManagement.RegisterItem(<Add-inName>, <ItemType>)  methods.\n\n* <Add-inName>: Assembly name of your add-in, which is usually the DLL title without the extension  .dll.\n* <ActionName>: In your add-in, you implement an action with the name you set in the  <ActionName>  parameter. This action will be called on different events in the parts management.\n* <ItemType>: Specifies the kind of item for which you want to add the additional information or whose changes should trigger the events. Set the string  eplan.part  for parts or the following values:\n\n### Possible values of the ItemType parameter\n\n| ItemType value | Type of item |\n| --- | --- |\n| eplan.part | Parts |\n| eplan.construction | Drilling patterns |\n| eplan.connectionpointinfo | Connection point patterns |\n| eplan.customer | Customers |\n| eplan.manufacturer | Manufacturers / suppliers |\n| eplan.accessorylist | Accessory lists |\n| eplan.accessoryplacement | Accessory placements |\n\nYou can register multiple item types in your add-in:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n MDPartsManagement mDPartsManagement = new MDPartsManagement();\n mDPartsManagement.RegisterAddin(\"YourAddInName\", \"YourActionName\");\n mDPartsManagement.RegisterItem(\"YourAddInName\", \"eplan.part\");\n mDPartsManagement.RegisterItem(\"YourAddInName\", \"eplan.construction\");\n mDPartsManagement.RegisterItem(\"YourAddInName\", \"eplan.accessoryplacement\");\n ``` | |\n\n### Define a custom item type\n\nIt is also possible to define your own custom items in the parts management tree. You have to register your personal item as custom item type and use it instead of the predefined Eplan item types from the list above. For this, call the  MDPartsManagement.RegisterItem(<Add-inName>, <ItemType>)  method with your custom item type name as a string:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n mDPartsManagement.RegisterItem(\"YourAddInName\", \"YourCustomItemType\");\n ``` | |\n\n### Events that call your action\n\nThe action that you implemented in your add-in and specified as  <ActionName>  parameter will then be called on different events in the parts management. Depending on the event, different parameters are passed to and returned via the  ActionCallingContext  each time as you can see in the list below. The  action  parameter is always set and represents the name of the event that was invoked. The  action  parameter can contain the following values: \n\n### Possible values of the action parameter in the ActionCallingContext\n\n| action parameter value | Description | Parameters | |\n| --- | --- | --- | --- |\n| input | output |\n| GetRootLevel | The first tree level is requested. | itemtype: Type of the item for which the root node is being requested | key: Identifying key   text: Text to display in the tree   subnode: (bool) Are further sub nodes available? (1 = yes, 0 = no) |\n| GetNextLevel | The next level of the tree is requested. | itemtype: Type of the item being expanded in the tree  key: Node below which the next tree level is requested | key: Identifying key   text: Text to display in the tree   subnode: (bool) Are further sub nodes available? (1 = yes, 0 = no) |\n| CreateDatabase | A new parts database was created. | database: Name of the created database |  |\n| OpenDatabase | A new parts database was opened. | database: (string) Name of the newly opened database   readonly: (bool) Read-only status of the opened parts database (1 = \"read-only\", 0 = \"read/write\") |  |\n| CloseDatabase | The current database was closed. |  |  |\n| SelectItem | An item / part was selected in parts management. | itemtype: Item type of the selected element   partnr: Selected part number (if only one part is selected)   variant: Selected part variant (if only one variant is selected)   key: Identifying key of the selected element |  |\n| PreShowTab | An item / part was selected in parts management. You have now the possibility to show / hide tab sheets that are registered for this element. | itemtype: Item type of the selected element   partnr: Selected part number (if only one part is selected)   variant: Selected part variant (if only one variant is selected)    key: Identifying key of the selected element   tabsheet: Tab sheet to be checked. The tab sheet was previously registered using  MDPartsManagement.RegisterTabsheet(...) | show: (bool) Should the tab sheet be displayed? (1 = yes (default), 0 = no) |\n| SaveItem | An item / part was saved in parts management. | partnr: Selected part number (if only one part is selected)  variant: Selected part variant (if only one variant is selected)    itemtype: Item type of the selected element   key: Identifying key of the selected element |  |\n| CopyItem | An item / part was copied in parts management (by the context menu items Copy and Paste). | itemtype: Item type of the copied element   key: Identifying key of the currently selected element (optional)   sourcekey: Identifying key of the element to copy |  |\n| CutCopyItem | An item / part was cut in parts management (by the context menu items Cut and Paste). | itemtype: Item type of the cut element   key: Identifying key of the currently selected element (optional)   sourcekey: Identifying key of the element to cut | key: Identifying key of the created element |\n| SelectCopyItem | The context menu item Copy was clicked in parts management tree. | itemtype: Item type of the copied element   key: Identifying key of the selected element (optional) |  |\n| SelectCutItem | The context menu item Cut was clicked in parts management tree. | itemtype: Item type of the cut element   key: Identifying key of the selected element (optional) |  |\n| SelectPasteItem | The context menu item Paste was clicked in parts management tree. | itemtype: Item type of the pasted element   key: Identifying key of the selected element (optional) |  |\n| NewItem | An item / part was created in parts management. | itemtype: Item type of the newly created element   key: Identifying key of the currently selected element (optional) | key: Identifying key of the created element |\n| DeleteItem | An item / part is being deleted from parts management. | itemtype: Item type of the currently selected to be deleted element   partnr: Selected part number (if only one part is selected)  variant: Selected part variant (if only one variant is selected)   key: Identifying key of the element to be deleted |  |\n| AddPartToProject | A part from parts management is stored in the project. The add-in can add additional custom data to the stored part. | itemtype: Item type of the stored part (always \"eplan.part\")   key: Identifying key of the stored part | value: (string) Custom part data to be stored with the part inside the project (in properties  ARTICLE\\_CUSTOM\\_DATA\\_INDEX  and  ARTICLE\\_CUSTOM\\_DATA\\_VALUE) |\n| AddPartToDatabase | A part is synchronized from the project to the parts management. The additional custom data can now be extracted and stored by the add-in. | itemtype: Item type of the synchronized part (always \"eplan.part\")   key: Identifying key of the synchronized part   value: (string) Custom part data stored with the part inside the project |  |\n| AddItemToProject | An item (part, manufacturer, drilling pattern, ...) is stored in the project. The add-in can add additional custom data to the stored item. | itemtype: Item types of stored items (eplan.part, eplan.manufacturer, ...)   key: Identifying field of stored item's name: name of the stored items (abbreviated name of the manufacturer, name of drilling pattern, ...) | value: (string) Custom data stored with an item inside a project (in properties  ARTICLE\\_CUSTOM\\_DATA\\_INDEX  and  ARTICLE\\_CUSTOM\\_DATA\\_VALUE) |\n| ExportEplanItem | A part is exported from parts management to a file. The additional custom data from the add-in can now be added to the export file. | itemtype: Type of the item to export (always \"eplan.part\")   key: Identifying key of the part to export | value: (string) Custom part data to be added to the export file |\n| ImportEplanItem | A part is imported to parts management. The additional custom data from the file can now be extracted and stored by the add-in. | itemtype: Item type of the part to import (always \"eplan.part\")   key: Identifying key of the imported part   mode: Import mode. Possible values:        0 = Append new records only        1 = Update existing records only        2 = Update existing records and append new ones   value: (string) Custom part data to be extracted from the file and stored by the add-in. |  |\n| ExportCustomItem | All custom items of the respective item type are exported from parts management.   Please mind that this only works with the XML export (\"XPamExportXml](XPamExportXml.html)\" converter). | itemtype: Type of the item to export | value: Custom data of all items to be exported |\n| ImportCustomItem | All custom items of the respective item type are imported from a file into parts management. They have to be saved by the add-in.   Please mind that this only works with the XML import (\"[XPamExportXml\" converter). | itemtype: Type of the item to import   value: Custom data of all items to be imported   mode: Import mode. Possible values:     0 = Append new records only      1 = Update existing records only      2 = Update existing records and append new ones |  |\n| WillDeleteItem | An item / article is to be deleted in parts management | itemtype: Item type of the selected item  key: Identifying field of the currently selected element  partnr: Selected item number (only if an item is selected)  variant: Selected variant (only if an article is selected) objectid: ID of a transient object being modified, (before changes) | allow: If set to 0, then  DeleteItem  is not called (delete is not executed) |\n| WillSaveItem | An item / part will be saved in parts management | itemtype: Item type of the selected element   key: Identifying key of the selected element   partnr: Selected part number (if only one part is selected)   variant: Selected part variant (if only one variant is selected)   objectid: ID of a transient object being modified (before changes) | allow: When set to 0,  SaveItem  is not called (save is not performed) |\n\nInside of the  Execute  method of the action that you defined in your add-in, you can handle the events handed over via  action  parameter in the  ActionCallingContext  as shown in the example below exemplarily for  AddPartToProject,  SelectItem,  SaveItem  and  OpenDatabase.\n\nThe API parts management extension allows **event handling** for the Parts management dialog. Here, for example, the Parts management dialog event  SaveItem  is triggered as soon as the  action  parameter in the the  ActionCallingContext  takes the value  SaveItem:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n public bool Execute(ActionCallingContext ctx)\n {\n     string action = \"\";\n     ctx.GetParameter(\"action\", ref action);\n     switch (action)\n     {\n         case \"AddPartToProject\":\n             // Do something when a part information is added to the project\n             break;\n         case \"SelectItem\":\n             // Do something when a part is selected\n             break;\n         case \"SaveItem\":\n         {\n             Eplan.EplSDK.WPF.EEvent.WPFDialogEventManager em = new Eplan.EplSDK.WPF.EEvent.WPFDialogEventManager();\n             em.send(\"XPartsManagementDialog\", \"SaveItem\", sKey);\n         }\n             break;\n            \n         case \"OpenDatabase\":\n             // Do something when the API parts management extension information is read\n             break;\n     }\n     return true;\n }\n ``` | |\n\n### Add a custom tab / dialog\n\nYou can add custom tabs to the Parts management dialog to display your additional information on a custom dialog. To do this, you must call the  MDPartsManagement.RegisterTabsheet\n\n(<Add-inName>, <ItemType>, <TabsheetName>)  method. As  <TabsheetName>  you need to specify your custom WPF-dialog (in XAML format) that will be shown when an item of the correspronding item type is selected:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n mDPartsManagement.RegisterTabsheet(\"YourAddInName\", \"eplan.part\", \"YourPartsTabsheetName\");\n mDPartsManagement.RegisterTabsheet(\"YourAddInName\", \"YourCustomItemType\", \"YourCustomItemTabsheetName\");\n ``` | |\n\nThe API parts management extension **event handling** for the Parts management dialog also works for your custom dialogs. In the following example, the  SaveItem  event of the Parts management dialog is subscribed to. As a result, whenever an item is saved in the dialog, the  YourDialog\\_SaveItem  method of a custom dialog class can now handle the data of the item to be saved:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n public class YourDialog : UserControl, IDialog\n {\n     public YourDialog()\n     {\n         InitializeComponent();\n         Eplan.EplSDK.WPF.EEvent.WPFDialogEventManager em = new Eplan.EplSDK.WPF.EEvent.WPFDialogEventManager();\n         em.getOnWPFNotifyEvent(\"XPartsManagementDialog\", \"SaveItem\").Notify += new Eplan.EplSDK.WPF.Interfaces.EEvent.NotifyEvent(YourDialog_SaveItem);\n     }\n \n     void YourDialog_SaveItem(string data)\n     {\n         // Handle your data to be saved in here\n     }\n }\n ``` | |"
    },
    {
        "source": "QueryUserRights.md",
        "path": "/User Guide/API Miscellaneous",
        "title": "QueryUserRights",
        "content": "Eplan can link user interactions with specific rights. This is done by the Eplan rights management module. If this module is not available or not licensed, the rights management is not active in Eplan. The following screenshot shows the Rights management dialog with a list of rights.\n\n!](images/RightsManagement.jpg)\n\nIn your API application, you can find out, whether the rights management module is active and you can query the status of a given user right. The following example checks the user right for \"XPLEditorStart\", using the  checkUserRights  and the  checkRightFor  method.\n\n* [C#](#i-tab-content-CS)\n* [VB\n\n```\n\nUserRights oUserRights = new UserRights();\nbool bRights = oUserRights.CheckUserRights();\nif (bRights)\n{\n     bool bAnRight= oUserRights.CheckRightFor(\"XPLEditorStart\");\n     if (bAnRight)\n     {\n       new Decider().Decide(EnumDecisionType.eOkDecision, \"You have the right to call XPLEditorStart!\", \"\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK);\n     }\n     else\n     {\n       new Decider().Decide(EnumDecisionType.eOkDecision, \"You don't have the right to call XPLEditorStart!\", \"\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK);\n     }\n}\nelse\n{\n    new Decider().Decide(EnumDecisionType.eOkDecision, \"This application works without rights management!\", \"\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK);\n}\n```\n\n```\n\nDim oUserRights As New UserRights()\nDim bRights As Boolean = oUserRights.CheckUserRights()\nDim dec As Decider = New Decider\nIf bRights Then\n   Dim bAnRight As Boolean = oUserRights.CheckRightFor(\"XPLEditorStart\")\n   If bAnRight Then\n      dec.Decide(EnumDecisionType.eOkDecision, \"You have the right to call XPLEditorStart!\", \"\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK)               \n   Else\n      dec.Decide(EnumDecisionType.eOkDecision, \"You don't have the right to call XPLEditorStart!\", \"\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK)             \n   End If\nElse\n   dec.Decide(EnumDecisionType.eOkDecision, \"This application works without rights management!\", \"\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK)\nEnd If\n```\n\nFor information about the rights available in Eplan and about their assignment to the users, please refer to the Rights management dialog. You cannot add new user rights via API."
    },
    {
        "source": "Signing_EPLAN_assembies.md",
        "path": "/User Guide/API Miscellaneous",
        "title": "Signing_EPLAN_assembies",
        "content": "As a part of your EADN (Eplan API Developer Network) partnership with Eplan GmbH & Co. KG, you get the opportunity to sign your software interface with our products. This allows you (or your customer) to use the API assembly without having an Eplan API developer license on his workstations. Instead, he receives â through you â a runtime license for an API interface.\n\nThis chapter describes how you (or your developers) should proceed, to get properly signed EADN modules."
    },
    {
        "source": "Signing_EPLAN_assembies.md",
        "path": "/User Guide/API Miscellaneous",
        "title": "**What is possible with API licenses?**",
        "content": "At first there should be clarified why signing is necessary. There are 2 kinds of API licenses:\n\n**a)** **API developer license** â It should be used only for development and testing of an API interface. Normally it has a limitation of a maximum size of Eplan projects to 5 pages. Only unsigned API programs can be loaded using it.\n\n**b)** **API runtime license** â In this case there can be used only signed API programs, so we need to sign it. The routine how to do it is described bellow.\n\nA user can check available licenses and select one by starting Eplan with shift key (then the Select license dialog will appear). When Eplan is already running, the current license can be retrieved from:\n\n**a)** the About Eplan dialog\n\n**b)** in the API using the  EplApplication.License  property and the  License  class."
    },
    {
        "source": "Signing_EPLAN_assembies.md",
        "path": "/User Guide/API Miscellaneous",
        "title": "**The Concept of EADN / API Runtime signing**",
        "content": "EADN / API Runtime signing uses a concept of combining standard .NET strong-naming with additionally including an Eplan license option to the software.  \nTo achieve this combination, please follow the instructions in this chapter."
    },
    {
        "source": "Signing_EPLAN_assembies.md",
        "path": "/User Guide/API Miscellaneous",
        "title": "**Requirements**",
        "content": "After you have concluded your EADN contract or purchased an API Runtime license and you created a new software interface with Eplan, the main administrator of your Eplan cloud organization will get informed about a new entitlement for using the cloud-based EADN Signing service. Additionally, you will receive a file containing the public part of a standard signature key, normally used for strong-naming a .NET assembly. We created this key especially for your software.\n\nFor using the Eplan-Cloud based signing service, you have to be member of the regarding organization and got assigned the role **User** to the application **EADN Singing**:\n\n![](images/Signing_Assemblies/Requirements.png)\n\n### Check available licenses inside active organization\n\nPublic pre-signing keyfiles (e.g.  1234\\_public.snk, refer to *Delay sign the assemblies*](#anchorDelaySignTheAssemblies)) that are used inside a Visual Studio project must match the used Eplan Cloud organization.  \nTo verify which pre-signing keyfiles can get used inside the active Eplan Cloud organization, authorize (refer to [*Authorize manual usage of EADN-Signing*](#anchorAuthorizeManualUsage)) and use the endpoint GET /licenses  and check the result.\n\n![](images/Signing_Assemblies/CheckAvailableLicenses_001.png)\n\n![](images/Signing_Assemblies/CheckAvailableLicenses_002.png)\n\n![\n\n1. Click on endpoint GET /licenses   \n   â Section gets expanded and shows more details\n2. Click on Try out\n3. Click on Execute\n4. Check Response of server in section Code\n\nThe above example shows property  optionId  with the value **1234**, which means assemblies with the used pre-signing keyfile  1234\\_public.snk  would be allowed to get signed inside the active Eplan Cloud organization.\n\nExample of response if no pre-signing key is assigned to the current organization â organization not allowed to sign assemblies.\n\n!](images/Signing_Assemblies/CheckAvailableLicenses_004.png)\n\n**Notice:**  \nIn case no valid license (optionId) is shown, please use [Eplan Global Support Portal](https://www.eplan.de/services/eplan-global-support/) for getting help."
    },
    {
        "source": "Signing_EPLAN_assembies.md",
        "path": "/User Guide/API Miscellaneous",
        "title": "**How to proceed**",
        "content": "Take the following steps to get your application EADN / API Runtime signed:\n\n### Modify the AssemblyInfo\n\nIn your software projects, you need to add an additional attribute to your  AssemblyInfo  files of all the assemblies that are referencing Eplan API Assemblies. The  EplanSignedAssemblyAttribute  is implemented in the  Eplan.EplApi.Starter.dll, which you always have to reference in your API application. The following example shows how to use the attribute in your  AssemblyInfo  file:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n using System.Reflection;\n using System.Runtime.CompilerServices;\n using System.Runtime.InteropServices;\n using Eplan.EplApi.Starter;\n //..\n [assembly: EplanSignedAssemblyAttribute(true)]\n ``` | |\n\n**Important:**  \nEplan checks the signature for **all DLLs and exe files that directly or indirectly use Eplan API functions**. Therefore, please ensure to add the  EplanSignedAssembly  attribute in the  AssemblyInfo.cs  files of every DLL and exe file using Eplan API functionality directly or indirectly.\n\n### Delay sign the assemblies\n\nThe easiest way for delay signing your assemblies (DLL  or  exe) is entering the public key file in the signing properties of your software projects in Visual Studio. Check Sign the assembly and activate the Delay sign only flag. See the following image:\n\n![](images/Signing_Assemblies/Delay_sign.png)\n\nThe delay signing is done, when building the software project and with it creating the assembly.\n\nAlternatively, you can use Microsoft's Assembly Linker  Al.exe  to manually delay sign assemblies. Please refer to respective MSDN documentation.\n\n### Upload files manually\n\nLog in to the Eplan Cloud Developer Portal [https://developer.eplan.com](https://developer.eplan.com/).\n\n**Notice:**  \nAn Eplan Cloud account is required to access the Developer Portal.\n\n**Notice:**  \nManual signing via the Developer Portal is intended only for testing. The main purpose of the service is **automatic signing** (refer directly to [*Fully automated signing process*](#anchorFullyAutomatedSigning)).\n\n![](images/Signing_Assemblies/CloudUpload.JPG)\n\n### Authorize manual usage of EADN-Signing\n\n1. Select **EADN-Signing** in available list of APIs\n2. Click on **Authorize**  \n     â The authorization dialog opens\n3. Click the drop-down list and select **EADN Signing**\n4. Click on **Authorize**  \n     â The API is allowed for manual usage via **Try it out** feature\n5. Click on **Close**  \n     â The authorization dialog is closed  \n     â Activated authorization is shown via closed lock symbol ![](images/Signing_Assemblies/symbol1.png)\n\nAfter successful authorization, the entry USER is displayed as active role:\n\n![](images/Signing_Assemblies/AuthorizeManualUsageOfEADNSigning_001.png)\n\nExample when authorization was **not** successful:\n\n![](images/Signing_Assemblies/AuthorizeManualUsageOfEADNSigning_002.png)\n\n**Tip:**  \nIn case no valid role USER is shown, please refer to *[Requirements](#anchorRequirements)* or contact the administrator of your Eplan Cloud organization. Same method can get used to verify, if a PAT is (still) valid. Just use the authorization method PAT instead of Interactive (OAuth2, x-delegation).\n\n**Notice:**  \nWhen a different API is selected in the list of available APIs, an active authorization is discarded. Repeat the above steps to perform an authorization again.\n\n### Upload pre-signed assemblies / executables\n\n![](images/Signing_Assemblies/UploadPre-Signed_1.JPG)\n\n![](images/Signing_Assemblies/UploadPre-Signed_2.JPG)\n\n1. Click on endpoint **POST /assemblies**  \n     â Section gets expanded and show more details\n2. Click on **Try it out**  \n     â Enables value entry in the **Request Body** section\n3. Click on **Add file item**  \n     â Adds a new **Choose file** row\n4. Click on **Choose file**  \n     â File selection dialog opens  \n     â Select pre-signed assembly  \n     â Confirm with **Open** to add local file for upload  \n     â Repeat steps 3 and 4 for each file which needs to get signed\n5. (Optional) Add personal Comment for full upload-job  \n     â The authorization dialog is closed\n6. Click on **Execute**  \n     â All selected files will get uploaded and tried to get signed\n7. Check Response of server in column **Code**\n8. Select and copy value of **ID** in **Response body**, for later usage of all files\n\n### Check status of uploaded files\n\nLog in to the Eplan Cloud Developer Portal [https://developer.eplan.com](https://developer.eplan.com/).  \nIf required, perform *[Authorize manual usage of EADN-Signing](#anchorAuthorizeManualUsage)*.  \nMake sure you have the **ID** of the desired upload process handy (see also [*Select and copy value of **ID** in **Response body***](#anchor1)).\n\n**Notice:**  \nUse the endpoint **GET /assemblies** to return a list of all existing uploaded packages inside your organization and determine the required ID.\n\n![](images/Signing_Assemblies/CheckStatus.JPG)\n\n1. Click on endpoint **GET /assemblies/{id}/status**  \n     â Section gets expanded and show more details\n2. Click on **Try it out**  \n     â Enables value entry in the **Parameters** section\n3. Insert previous copied ID into parameter **Id of the uploaded package**\n4. Click on **Execute**  \n     â Details about given signing job are getting returned\n5. Check response of server in section **Responses** and get details about results of signing process\n\n### Receive the signed Assemblies manually\n\nLog in to the Eplan Cloud Developer Portal [https://developer.eplan.com](https://developer.eplan.com/).  \nIf required, perform *[Authorize manual usage of EADN-Signing](#anchorAuthorizeManualUsage)*.  \nMake sure you have the **ID** of the desired upload process handy (see also [*Select and copy value of **ID** in **Response body***](#anchor1)).\n\n**Notice:**  \nUse the endpoint **GET /assemblies** to return a list of all existing uploaded packages inside your organization and determine the required ID.\n\n![](images/Signing_Assemblies/Receive.JPG)\n\n1. Click on endpoint **GET /assemblies/{id}**  \n     â Section gets expanded and show more details\n2. Click on **Try it out**  \n     â Enables value entry in the **Parameters** section\n3. Insert previous copied ID into parameter **Id of the uploaded package**\n4. Click on **Execute**  \n     â Download request is getting executed\n5. Click on **Download file** in section **Responses**  \n     â **Save file** selection dialog opens  \n     â Confirm with **Save** to download the file\n\n### Delete uploaded files manually\n\nLog in to the Eplan Cloud Developer Portal [https://developer.eplan.com](https://developer.eplan.com/).  \nIf required, perform *[Authorize manual usage of EADN-Signing](#anchorAuthorizeManualUsage)*.  \n(see also [*Limitations*](#anchor3) below)  \nMake sure you have the **ID** of the desired upload process handy.  \n(see also [*Select and copy value of **ID** in **Response body***](#anchor1))\n\n**Notice:**  \nUse the endpoint **GET /assemblies** to return a list of all existing uploaded packages inside your organization and determine the required ID.\n\n![](images/Signing_Assemblies/Delete.JPG)\n\n1. Click on endpoint **DELETE /assemblies/{id}**  \n     â Section gets expanded and show more details\n2. Click on **Try it out**  \n     â Enables value entry in the **Parameters** section\n3. Insert previous copied ID into parameter **Id of the uploaded package**\n4. Click on **Execute**  \n     â Delete request is getting executed\n5. Check result request in column **Code** in section **Responses**\n\n### Fully automated signing process\n\n**Preparations / prerequisites**\n\nTo take advantage of fully automated signing of assemblies during the build process of Visual Studio, you must create a personal access token (further called **PAT**) for the application **EADN Signing** inside the profile editor of your Eplan Cloud organization.\n\nSee Eplan Cloud help:  \n   â¢ [Open My Settings](https://www.eplan.help/en-us/Infoportal/Content/Cloud/Content/htm/Cloud_h_Settings_Open.htm?tocpath=My)  \n   â¢ [Add personal access token (PAT)](https://www.eplan.help/en-us/Infoportal/Content/Cloud/Content/htm/Cloud_h_Settings_PAT.htm?tocpath=My settings|Sign-in|Personal access token (PAT)|_____1)  \n   â¢ [Roles and permissions](https://www.eplan.help/en-us/Infoportal/Content/Cloud/Content/htm/Cloud_k_RolesRights.htm)\n\n**Notice:**  \nWithout assigned role **User** to **EADN Service**, no **PAT** creation is available for the user.  \nRemoving already assigned role **User** from **EADN** **Signing** makes existing PAT invalid.  \nNo prolonging of already created **PAT** (*new one needed after expiration*)  \nE-Mail notification is automatically sent from Eplan Cloud.\n\nDownload the provided PowerShell script from the [Developer Portal](https://developer.eplan.com/)  [EADN Singing](https://developer.eplan.com/apis/eadn-signing_v1_0) for using it in Post-build event of Visual Studio.\n\n![\n\nAn example for calling the script including available parameters can be found inside the script itself:\n\n|  | Copy Code |\n| --- | --- |\n| ``` \n # Example command line:\n #\n # powershell -ExecutionPolicy Bypass -file \"<YourFolderName>\\PostBuildScript.ps1\"\n ``` | |\n\n  \n\n**Notice:**  \nDepending on your IT guidelines, calling PowerShell scripts without bypassing executions policy may return an error.  \nThe active policy can get checked via running command  Get-ExecutionPolicy -List\n\n  \n\n**Tip:**  \nSee also Microsoft documentation.\n\n### Parameter description\n\n| Parameter name | Mandatory | Description |\n| --- | --- | --- |\n| baseUrl | No | Only for signing in Chinese environment; use parameter value\\*:  <https://api.eplan.com.cn/eadn-signing/v1.0> |\n| comment | No | Comment for complete upload job |\n| accessToken | Yes | PAT which was created in User profile |\n| assemblies | Yes | Filename(s) of assemblies / executables which have to get signed |\n| destinationPath | Yes | Local target folder for downloading result-package (*via PowerShell script target directory is tried to get created if missing*) |\n| deleteAfterwards | No | Delete upload-job after tried signing automatically (*Note: storage quota limitations*) |\n\n\\**current baseUrl can be viewed at any time in the Developer Portal*\n\n### Examples for all countries except China\n\n**Example:**  \nCommand line call for signing **a single file (not China**  \npowershell -ExecutionPolicy Bypass  \n-file \"<YourFolderName>\\PostBuildScript.ps1\"  \n-comment \"This is a test comment from $(USERNAME)\"  \n-accessToken \"<YourPATforEADNSigningService>\"  \n-assemblies \"<SourceFolderWithPreSignedFiles>\\$(TargetFileName)\"  \n-destinationPath \"<TargetFolder>\"  \n-deleteAfterwards\n\n  \n\n**Example:**  \nCommand line call for signing **multiple files â no subfolders** in ZIP result**(not China**  \npowershell -ExecutionPolicy Bypass  \n-file \"<YourFolderName>\\PostBuildScript.ps1\"  \n-comment \"This is a test comment from $(USERNAME)\"  \n-accessToken \"<YourPATforEADNSigningService>\"  \n-assemblies \"<SourceFolder1>\\<YourFile1.dll>,<SourceFolder2>\\<YourFile2.dll>\"   \n-destinationPath \"<TargetFolder>\"  \n-deleteAfterwards\n\n  \n\n**Example:**  \nCommand line call for signing **multiple files â with subfolders** in ZIP result **(not China**  \npowershell -ExecutionPolicy Bypass  \n-file \"<YourFolderName>\\PostBuildScript.ps1\"  \n-comment \"This is a test comment from $(USERNAME)\"  \n-accessToken \"<YourPATforEADNSigningService>\"  \n-rootDirectory \"<RootSourceFolder>\"  \n-assemblies \"<RelativeFolder1>\\<YourFile1.dll>,<RelativeFolder2>\\<YourFile2.dll>\"   \n-destinationPath \"<TargetFolder>\"  \n-deleteAfterwards\n\nThis allows, for example, files with the same name to be processed in one signing operation.\n\n### Examples for China only\n\n**Example:**  \nCommand line call for signing **a single file (China only**  \npowershell -ExecutionPolicy Bypass  \n-file \"<YourFolderName>\\PostBuildScript.ps1\"   \n-baseUrl <https://api.eplan.com.cn/eadn-signing/v1.0>  \n-comment \"This is a test comment from $(USERNAME)\"  \n-accessToken \"<YourPATforEADNSigningService>\"  \n-assemblies \"<SourceFolderWithPreSignedFiles>\\$(TargetFileName)\"  \n-destinationPath \"<TargetFolder>\"  \n-deleteAfterwards\n\n  \n\n**Example:**  \nCommand line call for signing **multiple files â no subfolders** in ZIP result**(China only**  \npowershell -ExecutionPolicy Bypass  \n-file \"<YourFolderName>\\PostBuildScript.ps1\"  \n-baseUrl <https://api.eplan.com.cn/eadn-signing/v1.0>  \n-comment \"This is a test comment from $(USERNAME)\"  \n-accessToken \"<YourPATforEADNSigningService>\"  \n-assemblies \"<SourceFolder1>\\<YourFile1.dll>,<SourceFolder2>\\<YourFile2.dll>\"  \n-destinationPath \"<TargetFolder>\"  \n-deleteAfterwards\n\n**Example:**  \nCommand line call for signing **multiple files â with subfolders** in ZIP result**(China only**  \npowershell -ExecutionPolicy Bypass -file \"<YourFolderName>\\PostBuildScript.ps1\"  \n-baseUrl <https://api.eplan.com.cn/eadn-signing/v1.0>  \n-comment \"This is a test comment from $(USERNAME)\"  \n-accessToken \"<YourPATforEADNSigningService>\"  \n-rootDirectory \"<RootSourceFolder>\"  \n-assemblies \"<RelativeFolder1>\\<YourFile1.dll>,<RelativeFolder2>\\<YourFile2.dll>\"  \n-destinationPath \"<TargetFolder>\"  \n-deleteAfterwards\n\n### Adopt command line for PostBuild-event in Visual Studio\n\n!](images/Signing_Assemblies/EventInVS.JPG)\n\n1. Click on **Build events**  \n     â Pre- and Post-build details of Visual Studio are shown\n2. Click on **Edit Post-buildâ¦**  \n     â Post-build Event Command Line dialog opens\n3. Paste required command line call\n4. Click on **OK**  \n     â Post-build Command Line dialog is closed\n\nOutput console will show details after building:\n\n![](images/Signing_Assemblies/VSOutput.JPG)\n\nAll files (no matter if singing process was successful or not) will get extracted to the given folder in the  destinationPath  parameter.\n\n### Limitations\n\n  â¢ The filenames in one upload have to be unique. Adding the same filename multiple times (on the same folder level) is not allowed, because it can not be reflected in the ZIP-file for download.  \n  \n  â¢ Each upload job can have a max. total file size of ~40 MB  \n  \n  â¢ There is an upload limit of max. 9999 kept upload jobs for each organization.  \n  \n  â¢ No automatic âcleanupâ is done in organization storage.  \n  \n  â¢ If upload limit is reached, older uploaded files have to get deleted before new uploads are possible.\n\n**Tip:**  \nIt is recommended to delete uploaded files directly after signing (no matter if signing was successful or not), to avoid reaching the upload limit at all.\n\n  \n\n**Notice:**  \nFurther details can be also found in the Developer Portal: [ProblemTypes of EADN signing"
    },
    {
        "source": "Signing_EPLAN_assembies.md",
        "path": "/User Guide/API Miscellaneous",
        "title": "**Special cases**",
        "content": "### How to sign automatically generated serialization DLLs\n\nIf you use an automatically created serialization DLL for your classes, you need to delay-sign them via the  sgen.exe  tool. This tool can be found the SDK directory of your development environment.\n\n**Example:**  \n\"C:\\Program Files\\Microsoft Visual Studio 8\\SDK\\v2.0\\bin\\sgen.exe\" /compiler:/delaysign+ /assembly:\"MyDllToBeSerialized.dll\" /proxytypes  \n/reference:\"Eplan.EplApi.AFu.dll\" /reference:<â¦all further references you need> /compiler:/keyfile:\"D:\\MyPublicKey.snk\"\n\n### Signing of your own COM interop DLLs\n\nAs you probably know, any strong-named .NET assembly can only reference / load other strong-named assemblies. In case your application registers COM DLLs, the development environment normally automatically creates so-called interop DLLs, which contain the .NET wrapping of the respective COM methods. Normally, these DLLs are not signed. To create these assemblies in an already delay-signed way Microsoft provides the command line tool tlbimp.exe â also to be found in the SDK directory of your development environment. See the following example, how it is used:\n\n**Example:**  \n\"C:\\Program Files\\Microsoft Visual Studio 8\\SDK\\v2.0\\Bin\\tlbimp.exe\" yourComInterface.dll /delaysign /publickey:C:\\YourKeyFilePublic.snk /out:Interop.yourComInterface.dll"
    },
    {
        "source": "Signing_EPLAN_assembies.md",
        "path": "/User Guide/API Miscellaneous",
        "title": "**What to do in case of problems**",
        "content": "If you encounter issues with the signing process, please contact the Eplan Global Support Portal."
    },
    {
        "source": "TheRibbon.md",
        "path": "/User Guide/API Miscellaneous",
        "title": "TheRibbon",
        "content": "Since version 2022, the Eplan GUI items are accessible through a ribbon. In the API this control is represented by the following classes:\n\n* Eplan.EplApi.Gui.RibbonBar\n* Eplan.EplApi.Gui.RibbonTab\n* Eplan.EplApi.Gui.RibbonCommandGroup\n* Eplan.EplApi.Gui.RibbonCommand\n\nThe ribbon is divided into tabs and these tabs into command groups and commands.\n\nAll ribbon related classes are stored in the  Eplan.EplApi.Gui  namespace. They correspond to the types of ribbon items from the GUI:\n\n!](images/userinterface_ribbon_structure_ls_en_US_new.png)\n\nHere is an example of listing ribbon items (tabs, command groups and commands):\n\n* [C#\n\n```\n\nRibbonBar ribbonBar = new RibbonBar();\nforeach (RibbonTab tab in ribbonBar.Tabs)\n{\n    Debug.WriteLine($\"\\tTab Name:{tab.Name}------------\");\n    foreach (var commandGroup in tab.CommandGroups)\n    {\n        Debug.WriteLine($\"\\t\\tCommand group:{commandGroup.Name}------\");\n        foreach (var command in commandGroup.Commands)\n        {\n            RibbonCommand ribbonCommand = command.Value;\n            uint commandId          = ribbonCommand.ID;\n            string strText          = ribbonCommand.Text;\n            string strDescription   = ribbonCommand.Description;\n            string strTooltipText   = ribbonCommand.TooltipText;\n            string strActionCommandLine = ribbonCommand.ActionCommandLine;\n            Debug.WriteLine($\"\\t\\t\\tCommand Id:{commandId}---.Text:{strText}---.ActionCommandLine:{strActionCommandLine}---.TooltipText:{strTooltipText}---.Description:{strDescription}\");\n        }\n        Debug.WriteLine($\"\\t\\t-----------------------\");\n    }\n    Debug.WriteLine($\"\\t-----------------------------\");\n}\n```\n\nPlease keep it in mind that some tabs are context sensitive, i.e they are open only when the editor is visible.\n\nThe old menu and toolbars are no longer accessible. The equivalent of the old menu point / toolbar button is now the ribbon command:\n\n![](images/RibbonCommand.jpg)\n\nIn the API, commands can be created in following places:\n\n* Extensions > API command group\n* A custom command group that is placed in a persistient or custom tab\n\n### Menu and toolbar migration\n\nThe classes corresponding to the old GUI items i.e.  Toolbar  and  Menu  are currently deprecated, so it is highly recommended to migrate relevant code.\n\nThe following table shows how to create new ribbon items and provides example code:\n\n| Old GUI item | Old API method | New GUI equivalent | New API method | Example old code | Example new code |\n| --- | --- | --- | --- | --- | --- |\n| Main menu | Menu.AddMainMenu | RibbonTab | RibbonBar.AddTab | menu.AddMainMenu(\"API Tests A-N\", Menu.MainMenuName.eMainMenuHelp,\"AddingMessageAction\", \"AddingMessageAction\", \"First menu element\", 1); | var ribbonTab = ribbonBar.AddTab(\"API Tests A-N\"); |\n| Popup menu | Menu.AddPopupMenuItem | RibbonCommandGroup | RibbonTab.AddCommandGroup | menu.AddPopupMenuItem(\"ActionExample - test2\",\"ActionExample - test2 submenupoint1\", \"ActionExample\", \"status text\", mainID, 0, false, false); | var commandGroup = ribbonTab.AddCommandGroup(\"ActionExample - test2\"); |\n| Toolbar | toolbar.CreateCustomToolbar | RibbonCommandGroup | RibbonTab.AddCommandGroup | toolbar.CreateCustomToolbar(\"SelectionSet\", Toolbar.ToolBarDockPos.eToolbarLeft, 4, 1, true); | var commandGroup = ribbonTab.AddCommandGroup(\"SelectionSet\"); |\n| Menu item | menu.AddMenuItem( | RibbonCommand | RibbonBar.AddCommand , RibbonCommandGroup.AddCommand | menu.AddMenuItem(\"UndoAction\", \"UndoAction\");  menu.AddMenuItem(\"SelectionRecursive\", \"SelectionRecursiveAction\", \"\", selectionSetID, 1,false, false); | ribbonBar.AddCommand(\"UndoAction\", \"UndoAction\");  commandGroup.AddCommand(\"SelectionRecursive\", \"SelectionRecursiveAction\"); |\n| Toolbar button | toolbar.AddButton( | RibbonCommand | RibbonCommandGroup.AddCommand(â¦,index) | toolbar.AddButton(\"SelectionSet\", Int32.MaxValue, \"SelectionOneItemAction\",\"C:\\\\myicons\\\\0.ico\", \"SelectionOneItemAction\"); | commandGroup.AddCommand(\"SelectionOneItemAction\", \"SelectionOneItemAction\", 0); |\n\nHere is also a list of other old methods and their new counterparts:\n\n|  |\n| --- |\n|  |\n| Old method | New method |\n| Toolbar.ExistsToolbar | RibbonBar.Tabs.Any(by LINQ)  RibbonBar.GetTab  RibbonBar.GetDefaultTab |\n| Toolbar.GetButtonAction | RibbonCommand.ActionCommandLine |\n| Toolbar.GetButtonToolTip | RibbonCommand.TooltipText |\n| Toolbar.GetCountOfButtons | RibbonCommandGroup.Commands.Count |\n| Toolbar.GetPersistentButtonId  Menu.GetCustomMenuId  GetPersistentMenuId | RibbonCommand.ID |\n| Toolbar.RemoveButton | RibbonCommand.Remove |\n| Toolbar.RemoveCustomToolbar | RibbonCommandGroup.Remove |\n| Menu.IsActionChecked | RibbonCommand.IsChecked |\n| Menu.IsActionEnabled | RibbonCommand.IsEnabled |\n| Menu.RemoveMenuItem | RibbonTab.Remove  RibbonCommandGroup.Remove  RibbonCommand.Remove |\n\nThe  ContextMenu  class is not affected by this change, i.e everything should work as before version 2022.\n\nFor more information, please refer to chapter \"The New Ribbon\" of the Eplan Help.\n\n### RibbonIcons\n\nRibbon command actions can now be created with  .svg  icons. There is a list of standard  CommandIcons, accessible by name or index number.  \nFurthermore, below examples present also how to use custom icons, which can be added by specifying path to  .svg  file or providing icon content in string format.\n\nAdding standard icons\n\n* C#](#i-tab-content-edcbfd9d-ac7e-4e5a-8a6a-1bcd81284414)\n\n```\n\nvar ribbonBar = new RibbonBar();\nvar tab = ribbonBar.AddTab(\"RibbonIcons\");\n\n\n// Adding standard icons to a command action using enum names\nvar commandGroup = tab.AddCommandGroup(\"enum names\");\ncommandGroup.AddCommand(\"Button1\", \"action1\", new RibbonIcon(CommandIcon.Generator));\ncommandGroup.AddCommand(\"Button2\", \"action2\", new RibbonIcon(CommandIcon.Amplifier));\ncommandGroup.AddCommand(\"Button3\", \"action3\", new RibbonIcon(CommandIcon.Octagon_3));\n\n\n// Adding standard icons to a command action using index numbers\ncommandGroup = tab.AddCommandGroup(\"index numbers\");\ncommandGroup.AddCommand(\"Button4\", \"action4\", new RibbonIcon(75));\ncommandGroup.AddCommand(\"Button5\", \"action5\", new RibbonIcon(123));\ncommandGroup.AddCommand(\"Button6\", \"action6\", new RibbonIcon(181));\n```\n\nAdding custom icons\n\n* [C#\n\n```\n\n// Adding new custom icons to a command action using the path to the file\ncommandGroup = tab.AddCommandGroup(\"custom icons path to file\");\ncommandGroup.AddCommand(\"Button7\", \"action7\", new RibbonIcon(\"D:\\\\Icon2.svg\"));\ncommandGroup.AddCommand(\"Button8\", \"action8\", new RibbonIcon(\"D:\\\\Icon3.svg\"));\n\n// Adding new custom icons to a RibbonBar using the path to the file\nRibbonIcon ribbonIcon = ribbonBar.AddIcon(\"D:\\\\CarIco.svg\");\ncommandGroup = tab.AddCommandGroup(\"AddIcon using path\");\ncommandGroup.AddCommand(\"Button10\", \"action10\", ribbonIcon);\n\n// Adding new custom icons to a RibbonBar using the string source\nvar svgContent = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" viewBox=\\\"0 0 16 16\\\">\" +\n \"<title>Clock_1</title>\" +\n \"<g id=\\\"GUIicons\\\">\" +\n \"<g id=\\\"Clock\\\">\" +\n \"<g>\" +\n   \"<circle cx=\\\"8\\\" cy=\\\"8\\\" r=\\\"7.5\\\" style=\\\"fill: #fff\\\"/>\" +\n   \"<path d=\\\"M8,1A7,7,0,1,1,1,8,7,7,0,0,1,8,1M8,0a8,8,0,1,0,8,8A8,8,0,0,0,8,0Z\\\" style=\\\"fill: #4a7db1\\\"/>\" +\n \"<g>\" +\n   \"<path d=\\\"M12,8.5H8v-1h4ZM7.5,4V7h1V4Z\\\" style=\\\"fill:#9e0b0f\\\"/>\" +\n \"<g>\" +\n   \"<rect x=\\\"13.5\\\" y=\\\"7\\\" width=\\\"1\\\" height=\\\"2\\\"transform=\\\"translate(22 -6) rotate(90)\\\" style=\\\"fill: #505050\\\"/>\" +\n   \"<rect x=\\\"7.5\\\" y=\\\"13\\\" width=\\\"1\\\" height=\\\"2\\\"transform=\\\"translate(16 28) rotate(-180)\\\" style=\\\"fill: #505050\\\"/>\" +\n   \"<rect x=\\\"1.5\\\" y=\\\"7\\\" width=\\\"1\\\" height=\\\"2\\\"transform=\\\"translate(-6 10) rotate(-90)\\\" style=\\\"fill: #505050\\\"/>\" +\n   \"<rect x=\\\"7.5\\\" y=\\\"1\\\" width=\\\"1\\\" height=\\\"2\\\"style=\\\"fill: #505050\\\"/>\" +\n \"</g>\" +\n   \"<circle cx=\\\"8\\\" cy=\\\"8\\\" r=\\\"1\\\" style=\\\"fill:#4a7db1;stroke: #9e0b0f;stroke-miterlimit: 10;stroke-width: 0.5px\\\"/>\" +\n \"</g>\" +\n \"</g>\" +\n \"</svg>\";\n\ncommandGroup = tab.AddCommandGroup(\"AddIcon using source\");\nribbonIcon = ribbonBar.AddIcon(svgContent);\ncommandGroup.AddCommand(\"Button13\", \"action13\", ribbonIcon);\n```\n\nThe above examples result in this RibbonBar:\n\n!](images/RibbonIcons.jpg)\n\n**RibbonCommandInfo**\n\nRibbon command actions can now be created using a  RibbonCommandInfo  object. This object contains all required and optional properties.\n\nThe optional properties are  Description,  Tooltip,  Icon,  IndexButtonPosition,  MultiLangButtonText,  MultiLangDescription  and  MultiLangTooltip.\n\nThe multilanguage properties are used over the non-multilanguage properties if they are not empty.\n\nThe IndexButtonPosition is used to specify the position in a  RibbonCommandGroup.\n\n* [C#](#i-tab-content-5e2549ca-5553-4c25-8f82-82e1f77c330d)\n\n```\n\n// Adding new commands using the RibbonCommandInfo\ncommandGroup = tab.AddCommandGroup(\"commands with RibbonCommandInfo\");\nRibbonCommandInfo ribbonCommandInfo = new RibbonCommandInfo(\"buttonText\", \"actionCommandLine\");\ncommandGroup.AddCommand(ribbonCommandInfo);\n```\n\n**Add existing Eplan actions to a custom CommandGroup**\n\nIt is possible to add existing Eplan ribbon command actions to a custom  CommandGroup  via their  Command.ID.\n\nThe corresponding internal icon is automatically added to the action.\n\n* [C#\n\n```\n\n// Adding an existing Eplan command action by its ID\nconst int commandId = 35089;\nvar tab = ribbonBar.AddTab(\"CustomTab\");\nvar commandGroup = tab.AddCommandGroup(\"Group1\");\nvar commandAction = commandGroup.AddCommandWithId(commandId);\n```\n\nTo find the correct  Command.ID  value for the command, you can check the description log in the Eplan Diagnostics dialog after calling this action from the ribbon (to show the Diagnostics Dialog press [Ctrl] + [VK\\_OEM\\_5]. [VK\\_OEM\\_5] corresponds to the [^] key on a German keyboard or to the [\\] on a United States 101 keyboard.):\n\n!](images/MenuID_DiagnosticTool.PNG)\n\n**SVG Icons limitations**\n\nOur UI libraries provide  SVG  support with the following limitations:\n\n   â¢ Scripts, interactions and external objects are not implemented for security reasons.\n\n   â¢ Animations, videos, sounds and internal images are not implemented.\n\n   â¢ Since  SVG  icons should be small and fast to render, we disabled the following  SVG  elements that can significantly affect drawing performance:  \n  \n       -  <pattern>  \n  \n       -  <color-profile>  \n  \n       -  <hkern>  \n  \n       -  <hatch>  \n  \n       -  <hatchpath>  \n  \n       -  all effects, blend mode and filters\n\n       -  compressed  SVG  files (SVGz)\n\nIt is strongly recommended to use only simplified (\"optimized\")  SVG: All elements such as text or shapes should be converted to paths and all paths should be combined.  \nThe simplified  SVG  is small and fast-drawing. In addition, it will be very difficult to \"reverse engineer\" your media in this case."
    },
    {
        "source": "ThrowingAndCatchingExceptions.md",
        "path": "/User Guide/API Miscellaneous",
        "title": "ThrowingAndCatchingExceptions",
        "content": "Error handling in Eplan is preferably done using exceptions. The API framework provides the  BaseException  base class that provides you access to the error handling of Eplan.\n\nIf an exception object of this type is thrown, the Eplan framework catches the exception and writes the data to the system error management or shows the error message in the Eplan error dialog.\n\n* C#](#i-tab-content-CS)\n* [VB](#i-tab-content-VB)\n\n```\n\nEplan.EplApi.Base.BaseException exc2= new Eplan.EplApi.Base.BaseException(\n                                                \"Error from CSharpAction thrown as exception\",\n                                                Eplan.EplApi.Base.MessageLevel.Error);\n\nthrow exc2;\n```\n\n```\n\nDim exc2 As New Eplan.EplApi.Base.BaseException(\"Error from VBAction thrown as exception\", _\n                                                  Eplan.EplApi.Base.MessageLevel.Error)\nThrow exc2\n```\n\nOf course, you can also catch exceptions in your API application and evaluate them, e.g. to display your own error message.\n\n* [C#](#i-tab-content-CS)\n* [VB\n\n```\n\n// Test wrong settings name (throws BaseException that is handled here)\ntry\n{\n    String strGuiLanguage= Settings.GetStringSetting(\"USER.SYSEM.GUI.LANGUAGE\", 0);\n    new Decider().Decide(EnumDecisionType.eOkDecision, \"The current GUI language is: \"+ strGuiLanguage, \"\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK);\n}\ncatch (BaseException exc)\n{\n    String strMessage= exc.Message;\n    new Decider().Decide(EnumDecisionType.eOkDecision, \"Exception: \" + strMessage, \"\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK);\n}\n```\n\n```\n\n' Test wrong settings name (throws BaseException that is handled here)\nDim dec As Decider = New Decider\nTry\n   Dim strGuiLanguage As String = Settings.GetStringSetting(\"USER.SYSEM.GUI.LANGUAGE\", 0)\n   dec.Decide(EnumDecisionType.eOkDecision, \"The current GUI language is: \"+  strGuiLanguage, \"\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK)\nCatch exc As BaseException\n   Dim strMessage As String = exc.Message\n   dec.Decide(EnumDecisionType.eOkDecision, \"Exception: \" + strMessage, \"\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK)\nEnd Try\n```"
    },
    {
        "source": "TraceOutput.md",
        "path": "/User Guide/API Miscellaneous",
        "title": "TraceOutput",
        "content": "For debugging purposes (or program logging in the release version) it is useful to log messages to a trace listener. The API framework provides a  TraceListener  class for this purpose.\n\nIn your API program, you simply add your own trace listener to the  System.Diagnostics.Trace.Listeners:\n\n* C#](#i-tab-content-CS)\n* [VB\n\n```\n\nprivate Eplan.EplApi.Base.TraceListener m_oTrace;\n//.\n//.\n//.\n    m_oTrace= new Eplan.EplApi.Base.TraceListener();\n//.\n//.\n//.\npublic bool Execute(ActionCallingContext ctx )\n{\n    System.Diagnostics.Trace.Listeners.Add(m_oTrace);\n    System.Diagnostics.Trace.WriteLine(\" Begin Execute \");\n//.\n//.\n}\n```\n\n```\n\nDim m_oTrace As Eplan.EplApi.Base.TraceListener\n'...\n   m_oTrace= New Eplan.EplApi.Base.TraceListener()\nPublic Function Execute(ByVal ctx as ActionCallingContext)as Boolean Implements IEplAction.Execute\n    System.Diagnostics.Trace.Listeners.Add(m_oTrace)\n    System.Diagnostics.Trace.WriteLine(\" Begin Execute \")\n'...\n'...\n```\n\n```\n\n \n```\n\nAs a result, all further trace outputs are visible in the Windows trace management and â as the case may be â written to the Eplan log database at the end of the program.\n\n```\n\nTRACE: .\\Actions\\AfCommandLineInterpreter.cpp(18) : AfCommandLineInterpreter::execute: CSharpAction\nTRACE: .\\Actions\\AfAction.cpp(123) : Execute Action: URCheckRightsForAction\nTRACE: .\\Actions\\AfAction.cpp(123) : Execute Action: CSharpAction\nTRACE: u:\\eplanw3_1.0_vc7.1\\eplan\\extensions\\api_demosfue\\v_1.0\\eplan.w3addin.demo1\\csharpaction.cs(24) : Begin Execute\n```"
    },
    {
        "source": "WorkingWithSettings.md",
        "path": "/User Guide/API Miscellaneous",
        "title": "WorkingWithSettings",
        "content": "Eplan has a settings database in which user preferences such as used fonts, colors, etc. are stored.\n\nIn the GUI it is visible under the ribbon item File > Settings....\n\nUsing the API, we can modify the database and also create custom values for use in API applications.\n\nWe can distinguish the following categories of settings:\n\n* **Company settings**: These settings should be located on a server and should be the same for the entire company.\n* **Workstation settings**: These settings apply to a single computer and should be stored on a local hard drive.\n* **User settings**: These settings, such as dimensions and positions of toolbars and dialogs, also need to be stored on a central server so that a user can use his own settings on another workstation.\n* **Project-related settings**: These settings are independent of a user or a workstation. They are stored in a project. See the \"Project Settings\" chapter.\n\nFor more details, please refer to the \"Settings: Operation\" chapter of the Eplan Help.\n\n### Format of settings\n\nThe settings database is organized in a tree structure: Particular branches refer to similar settings and leaves store relevant values.\n\nUsing the export functionality we can access their values, even those that are not visible in the Options > Settings dialog. The format of the file is  XML, and here is its XML scheme definition:\n\n|  | Copy Code |\n| --- | --- |\n| ``` \n <?xml version=\"1.0\" encoding=\"utf-8\"?>\n <xs:schema attributeFormDefault=\"unqualified\" elementFormDefault=\"qualified\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n   <xs:group name=\"levlSettingGroup\">\n     <xs:sequence>\n       <xs:element name=\"Setting\">\n         <xs:complexType>\n           <xs:sequence>\n             <xs:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"Val\" type=\"xs:anyType\" />\n           </xs:sequence>\n           <xs:attribute name=\"name\" use=\"required\">\n             <xs:simpleType>\n               <xs:restriction base=\"xs:string\">\n                 <xs:pattern value=\"[a-zA-ZÃ¤Ã¶Ã¼ÃÃÃ0-9_\\s\\+\\-#\\[\\]]*\"/>\n               </xs:restriction>\n             </xs:simpleType>\n           </xs:attribute>\n           <xs:attribute name=\"type\" use=\"required\">\n             <xs:simpleType>\n               <xs:restriction base=\"xs:string\">\n                 <xs:enumeration value=\"bool\"/>\n                 <xs:enumeration value=\"int\"/>\n                 <xs:enumeration value=\"unsigned int\"/>\n                 <xs:enumeration value=\"long\"/>\n                 <xs:enumeration value=\"unsigned long\"/>\n                 <xs:enumeration value=\"double\"/>\n                 <xs:enumeration value=\"string\"/>\n                 <xs:enumeration value=\"mlstring\"/>\n               </xs:restriction>\n             </xs:simpleType>\n           </xs:attribute>\n           <xs:attribute name=\"info\" type=\"xs:string\" use=\"optional\" />\n           <xs:attribute name=\"desc\" type=\"xs:string\" use=\"optional\" />\n           <xs:attribute name=\"range\" type=\"xs:string\" use=\"optional\" />\n         </xs:complexType>\n       </xs:element>\n     </xs:sequence>   \n   </xs:group>\n   <xs:attributeGroup name=\"levlAttrGroup\">\n     <xs:attribute name=\"name\" use=\"required\">\n       <xs:simpleType>\n         <xs:restriction base=\"xs:string\">\n           <xs:pattern value=\"[a-zA-ZÃ¤Ã¶Ã¼ÃÃÃÃ0-9_\\s\\+\\-#\\[\\](),\\/@:;\\*&amp;]*\"/>\n         </xs:restriction>\n       </xs:simpleType>\n     </xs:attribute>\n     <xs:attribute name=\"info\" type=\"xs:string\" use=\"optional\" />\n     <xs:attribute name=\"nodekind\" type=\"xs:string\" use=\"optional\" />\n   </xs:attributeGroup> \n   <xs:element name=\"Settings\">\n     <xs:complexType>\n       <xs:sequence>\n         <xs:element minOccurs=\"0\" maxOccurs=\"5\" name=\"CAT\">                           \n           <xs:complexType>               \n             <xs:sequence>\n               <xs:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"MOD\">\n                 <xs:complexType>\n                   <xs:sequence>\n                     <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n                       <xs:element name=\"LEV1\">\n                           <xs:complexType mixed=\"true\">\n                             <xs:sequence>\n                               <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n                                 <xs:element name=\"LEV2\">\n                                   <xs:complexType>\n                                     <xs:sequence>\n                                       <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">                                       \n                                         <xs:element name=\"LEV3\">\n                                           <xs:complexType>\n                                             <xs:sequence>\n                                               <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n                                                 <xs:element name=\"LEV4\">\n                                                   <xs:complexType>\n                                                     <xs:sequence>\n                                                       <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n                                                         <xs:element name=\"LEV5\">\n                                                           <xs:complexType>\n                                                             <xs:sequence>\n                                                               <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n                                                                 <xs:element name=\"LEV6\">\n                                                                   <xs:complexType>\n                                                                     <xs:sequence>\n                                                                       <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n                                                                         <xs:element name=\"LEV7\">\n                                                                           <xs:complexType>\n                                                                             <xs:sequence>\n                                                                               <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n                                                                                 <xs:element name=\"LEV8\">\n                                                                                   <xs:complexType>\n                                                                                     <xs:sequence>\n                                                                                       <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n                                                                                         <xs:element name=\"LEV9\">\n                                                                                           <xs:complexType>\n                                                                                             <xs:sequence>\n                                                                                               <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n                                                                                                 <xs:element name=\"LEV10\">\n                                                                                                   <xs:complexType>\n                                                                                                     <xs:group ref=\"levlSettingGroup\"/>\n                                                                                                     <xs:attributeGroup ref=\"levlAttrGroup\"/>                                                                                                  \n                                                                                                   </xs:complexType>\n                                                                                                 </xs:element>\n                                                                                                 <xs:group ref=\"levlSettingGroup\"/>\n                                                                                               </xs:choice>\n                                                                                             </xs:sequence>                                                                                           \n                                                                                             <xs:attributeGroup ref=\"levlAttrGroup\"/>\n                                                                                           </xs:complexType>\n                                                                                         </xs:element>\n                                                                                         <xs:group ref=\"levlSettingGroup\"/>\n                                                                                       </xs:choice>\n                                                                                     </xs:sequence>\n                                                                                     <xs:attributeGroup ref=\"levlAttrGroup\"/>                                                                                \n                                                                                   </xs:complexType>\n                                                                                 </xs:element>\n                                                                                 <xs:group ref=\"levlSettingGroup\"/>\n                                                                               </xs:choice>\n                                                                             </xs:sequence>\n                                                                             <xs:attributeGroup ref=\"levlAttrGroup\"/>\n                                                                           </xs:complexType>\n                                                                         </xs:element>\n                                                                         <xs:group ref=\"levlSettingGroup\"/>\n                                                                       </xs:choice>\n                                                                     </xs:sequence>\n                                                                     <xs:attributeGroup ref=\"levlAttrGroup\"/>\n                                                                   </xs:complexType>\n                                                                 </xs:element>\n                                                                 <xs:group ref=\"levlSettingGroup\"/>\n                                                               </xs:choice>\n                                                             </xs:sequence>\n                                                             <xs:attributeGroup ref=\"levlAttrGroup\"/>\n                                                           </xs:complexType>\n                                                         </xs:element>\n                                                         <xs:group ref=\"levlSettingGroup\"/>\n                                                       </xs:choice>\n                                                     </xs:sequence>\n                                                     <xs:attributeGroup ref=\"levlAttrGroup\"/>\n                                                   </xs:complexType>\n                                                 </xs:element>\n                                                 <xs:group ref=\"levlSettingGroup\"/>\n                                               </xs:choice>\n                                             </xs:sequence>\n                                             <xs:attributeGroup ref=\"levlAttrGroup\"/>\n                                           </xs:complexType>\n                                         </xs:element>\n                                         <xs:group ref=\"levlSettingGroup\"/>\n                                       </xs:choice>\n                                     </xs:sequence>\n                                     <xs:attributeGroup ref=\"levlAttrGroup\"/>\n                                   </xs:complexType>\n                                 </xs:element>\n                                 <xs:group ref=\"levlSettingGroup\"/>\n                               </xs:choice>\n                             </xs:sequence>\n                             <xs:attributeGroup ref=\"levlAttrGroup\"/>                          \n                           </xs:complexType>\n                         </xs:element>\n                       <xs:group ref=\"levlSettingGroup\"/>                               \n                     </xs:choice>\n                   </xs:sequence>\n                   <xs:attributeGroup ref=\"levlAttrGroup\"/>\n                 </xs:complexType>\n               </xs:element>                 \n             </xs:sequence>                 \n             <xs:attribute name=\"name\" use=\"required\">               \n               <xs:simpleType>\n                 <xs:restriction base=\"xs:string\">\n                   <xs:enumeration value=\"COMPANY\"/>\n                   <xs:enumeration value=\"INSTALL\"/>\n                   <xs:enumeration value=\"PROJECT\"/>\n                   <xs:enumeration value=\"STATION\"/>\n                   <xs:enumeration value=\"USER\"/>\n                 </xs:restriction>\n               </xs:simpleType>\n             </xs:attribute>\n           </xs:complexType>\n         </xs:element>\n       </xs:sequence>\n       <xs:attribute name=\"format\" type=\"xs:unsignedByte\" use=\"required\" />\n     </xs:complexType>\n   </xs:element>\n </xs:schema>\n ``` | |\n\n```\n\n \n```\n\nHere is a simplified description of the settings file:\n\n* **name**  â The name of a setting that must be always unique within a setting node.\n* **Settings**  â This is the root node.\n* **CAT**  â Then there are 0-5 possible  CAT  nodes with the  name  attribute one of the following:  COMPANY,  PROJECT,  STATION,  USER,  INSTALL.\n* **MOD**  â Then there is a subnode  MOD, which is a kind of namespace for a setting.\n* **LEV**  â Then there are subnodes  LEV1  up to  LEV10  that specify a path to a leaf node.\n* **Setting**  â Next there is a leaf node  Setting  which stores the following data:\n  + **Val**  â The setting value in the  Val  node. There can be more such nodes, each of them is accessible by individual index parameter.\n  + **type**  â Defines the expected settings type.\n  + **range**  â The range of values\n    - ... does not concern Boolean data types\n    - ... can consist of a token list for strings: (for example \"arial/courier/tahoma\")\n    - ... can have a upper and lower bound for numbers in the format \"from/to\" (separated by slash): \"1/10;20/100\"\n\n### \n\n### Example of settings in XML format\n\nHere is an example of a simple user setting from the User > Display > Identifier branch:\n\n|  | Copy Code |\n| --- | --- |\n| ``` \n <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n <Settings ver=\"2.4.1\" format=\"2\">\n  <CAT name=\"USER\">\n   <MOD name=\"PLEditorGui\">\n    <Setting name=\"SortMode\" type=\"int\">\n     <Val>1</Val>\n    </Setting>\n   </MOD>\n  </CAT>\n </Settings>\n ``` | |\n\nBelow is another example of workstation settings (Workstation > Graphical editing > Print):\n\n|  | Copy Code |\n| --- | --- |\n| ``` \n <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n <Settings ver=\"2.4.1\" format=\"2\">\n  <CAT name=\"STATION\">\n   <MOD name=\"Print\">\n    <Setting name=\"BlackWhite\" type=\"bool\">\n     <Val>1</Val>\n    </Setting>\n    <Setting name=\"BottomMargin\" type=\"double\" range=\"0/1000\">\n     <Val>0</Val>\n    </Setting>\n    <Setting name=\"ConsiderPageScale\" type=\"bool\">\n     <Val>1</Val>\n    </Setting>\n    <Setting name=\"FitToPage\" type=\"bool\">\n     <Val>1</Val>\n    </Setting>\n    <Setting name=\"KeepAspectRatio\" type=\"bool\">\n     <Val>1</Val>\n    </Setting>\n    <Setting name=\"LeftMargin\" type=\"double\" range=\"0/1000\">\n     <Val>0</Val>\n    </Setting>\n    <Setting name=\"Position\" type=\"unsigned long\" range=\"0/8\">\n     <Val>0</Val>\n    </Setting>\n    <Setting name=\"RightMargin\" type=\"double\" range=\"0/1000\">\n     <Val>0</Val>\n    </Setting>\n    <Setting name=\"ScaleHorizontal\" type=\"double\" range=\"0.001/1000\">\n     <Val>1.0</Val>\n    </Setting>\n    <Setting name=\"ScaleVertical\" type=\"double\" range=\"0.001/1000\">\n     <Val>1.0</Val>\n    </Setting>\n    <Setting name=\"TopMargin\" type=\"double\" range=\"0/1000\">\n     <Val>0</Val>\n    </Setting>\n   </MOD>\n  </CAT>\n </Settings>\n ``` | |\n\nHere is example of indexed settings from Company > Graphical editing > Fonts.\n\n|  | Copy Code |\n| --- | --- |\n| ``` \n <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n <Settings ver=\"2.4.3\" format=\"2\">\n  <CAT name=\"COMPANY\">\n   <MOD name=\"GedViewer\">\n    <Setting name=\"Fonts\" type=\"mlstring\">\n     <Val>??_??@Arial;</Val>\n     <Val>??_??@Verdana;</Val>\n     <Val>??_??@Georgia;</Val>\n     <Val>??_??@Tahoma;zh_CN@??;</Val>\n     <Val>??_??@Tahoma;zh_CN@??;</Val>\n     <Val>??_??@Tahoma;zh_CN@??;</Val>\n     <Val>??_??@Tahoma;zh_CN@??;</Val>\n     <Val>??_??@Tahoma;zh_CN@??;</Val>\n     <Val>??_??@Tahoma;zh_CN@??;</Val>\n     <Val>??_??@Tahoma;zh_CN@??;</Val>\n    </Setting>\n   </MOD>\n  </CAT>\n </Settings>\n ``` | |\n\n### API classes for working with settings\n\nSettings  â functions for reading, writing and creating User, Company or Workstation settings.\n\nProjectSettings  â functions for reading, writing and creating project dependant settings. Refer to the \""
    },
    {
        "source": "WritingSystemMessages.md",
        "path": "/User Guide/API Miscellaneous",
        "title": "WritingSystemMessages",
        "content": "Eplan expects system errors to be handled by exceptions. For this resason, the interface to the Eplan system messages is implemented in the  BaseException  class. This means that in order to write a system message, a  BaseException  object must first be created. However, the exception does not have to be thrown!\n\nThe  fixMessage()  function of the exception adds the message to the Eplan system messages.\n\n* C#](#i-tab-content-CS)\n* [VB](#i-tab-content-VB)\n\n```\n\nEplan.EplApi.Base.BaseException exc = new Eplan.EplApi.Base.BaseException(\"CSharpAction really failed!!\",\n                                      Eplan.EplApi.Base.MessageLevel.Error);\nexc.FixMessage();\n```\n\n```\n\nDim exc As Eplan.EplApi.Base.BaseException = New (\"CSharpAction really failed!!\", _\n                                             Eplan.EplApi.Base.MessageLevel.Error)\nexc.FixMessage\n```\n\n!["
    },
    {
        "source": "XMLProcessor.md",
        "path": "/User Guide/API Miscellaneous",
        "title": "XMLProcessor",
        "content": "### The XMLProcessor interface\n\nIn general, Eplan uses  XML  as its interchange format. Furthermore Eplan is required to support various other export / import formats. It is not practical to consider all possible of these formats.\n\n### Solution\n\nEplan carries on exporting / importing its  XML  format. Additionally, conversion modules can be added to Eplan that convert the created  XML  files into other import / export formats.\n\nImport of different formats:\n\n!](images/to_EPLAN.gif)\n\nExport of different formats:\n\n![](images/from_EPLAN.gif)\n\nThe following work flow is used:\n\nImport:\n\n* starting the import and selecting the import format  XYZ\n* converting  XYZ  to  XML  through the conversion module\n* importing the  XML  file\n\nExport:\n\n* starting the export and selecting the export format  XYZ\n* exporting the  XML  file\n* converting  XML  to  XYZ  through the conversion module\n\n### Interface\n\nAPI conversion modules can be created by implementing the  IXMLProcessor  interface. Although not all formats are read as well as written, it makes sense to handle both import and export in one interface.\n\nThe following example shows the usage of the interface, where only the export is implemented:\n\n| C# | Copy Code |\n| --- | --- |\n| ``` \n public class MySimpleXMLConverter : Eplan.EplApi.ApplicationFramework.IXMLProcessor\n {\n     public MySimpleXMLConverter()\n     {\n         //\n         // TODO: Add constructor logic here\n         //\n     }\n     string m_sError = string.Empty;\n     Options m_optionsXMLProcessor = new Options();\n     #region IXMLProcessor Members\n     /// <summary>\n     /// Returns a settings dialog for this processor.\n     /// Dialog is only created, but not displayed!\n     /// </summary>\n     /// <returns>Interface of the created dialog.</returns>\n     public Eplan.EplApi.ApplicationFramework.IOptions GetOption()\n     {\n         return m_optionsXMLProcessor;\n     }\n     /// <summary>\n     /// Returns the name of the converter, as it will appear in the selection list.\n     /// </summary>\n     /// <returns>Name of converter, is shown in selection list.</returns>\n     public string GetName()\n     {\n         String strName = \"SimpleXMLProcessor\";\n         strName += \" (\";\n         strName += GetFileFilter();\n         strName += \")\";\n         return strName;\n     }\n     /// <summary>\n     /// Returns an error message if an error occurred during export/import.\n     /// </summary>\n     ///<returns>Error message</returns>\n     public string GetErrorMessage()\n     {\n         // TODO:  Add XMLProcessor.getErrorMessage implementation\n         return m_sError;\n     }\n     /// <summary>\n     /// Is called after import has been completed.\n     /// </summary>\n     /// <returns>If true, an Information dialog box is displayed.</returns>\n     public bool PostImport()\n     {\n         // TODO:  Add XMLProcessor.postImport implementation\n         return false;\n     }\n     /// <summary>\n     /// Is called after export has been completed.\n     /// </summary>\n     /// <returns>If true, an Information dialog box is displayed.</returns>\n     public bool PostExport()\n     {\n         // TODO:  Add XMLProcessor.postExport implementation\n         return false;\n     }\n     /// <summary>\n     /// Indicates whether the converter provides an export option.\n     /// </summary>\n     /// <param name=\"oContext\">Context with parameters</param>\n     /// <param name=\"bSupportsProgress\">Indicates whether the converter supports a progress bar.</param>\n     /// <returns>true: export is possible; false: export is not possible</returns>\n     public bool CanExport(Eplan.EplApi.Base.Context oContext, ref bool bSupportsProgress)\n     {\n         bSupportsProgress = false;\n         return true;\n     }\n     /// <summary>\n     /// Converts the XML file to a special file.\n     /// </summary>\n     /// <param name=\"strXmlFile\">Input file</param>\n     /// <param name=\"strOutputFile\">Output file</param>\n     /// <param name=\"oContext\">Context with parameters</param>\n     /// <returns> Returns true if successful.</returns>\n     public bool Export(string strXmlFile, string strOutputFile, Eplan.EplApi.Base.Context oContext)\n     {\n         bool bRet = false;\n         try\n         {\n             // Short example for a simple export conversion\n             System.Xml.XmlTextReader xRead = new System.Xml.XmlTextReader(strXmlFile);\n             System.IO.StreamWriter swOut = new System.IO.StreamWriter(strOutputFile);\n             xRead.WhitespaceHandling = System.Xml.WhitespaceHandling.None;\n             string sFirstLang = string.Empty;\n             while (xRead.Read())\n             {\n                 if ((xRead.XmlLang.CompareTo(String.Empty) != 0) && (xRead.Value.CompareTo(String.Empty) != 0))\n                 {\n                     if (sFirstLang.CompareTo(String.Empty) == 0) sFirstLang = xRead.XmlLang;\n                     if (xRead.XmlLang.CompareTo(sFirstLang) == 0) swOut.WriteLine();\n                     swOut.Write(xRead.XmlLang + \":\" + xRead.Value + \";\");\n                 }\n             }\n             swOut.Close();\n             xRead.Close();\n             bRet = true;\n         }\n         catch (Exception e)\n         {\n             m_sError = string.Format(\"Exception: {0}\", e.ToString());\n         }\n \n         return bRet;\n     }\n     /// <summary>\n     /// Returns the filter string for the file selection box.\n     /// </summary>\n     /// <returns>Filter string</returns>\n     public string GetFileFilter()\n     {\n         string strFilter = \"*.*\";\n         return strFilter;\n     }\n     /// <summary>\n     /// Indicates whether the converter can convert external formats to XML.\n     /// </summary>\n     /// <param name=\"oContext\">Context with parameters</param>\n     /// <param name=\"bSupportsProgress\">Indicates whether the converter supports a progress bar.</param>\n     /// <returns>true: conversion is possible; false: conversion is not possible</returns>\n     public bool CanImport(Eplan.EplApi.Base.Context oContext, ref bool bSupportsProgress)\n     {\n         bSupportsProgress = false;\n         return false;\n     }\n     /// <summary>\n     /// Conversion from sImportFile to sXmlFile.\n     /// sXmlFile might be passed as \"\". In this case, the converter must set a file name.\n     /// EContext may point to an EProgress object to support a progress bar.\n     /// Returns true if successful.\n     /// </summary>\n     /// <param name=\"strInputFile\">Input file</param>\n     /// <param name=\"strXmlFile\">Output file</param>\n     /// <param name=\"oContext\">Context with parameters</param>\n     public bool Import(string strInputFile, string strXmlFile, Eplan.EplApi.Base.Context oContext)\n     {\n         // TODO:  Add XMLProcessor.import implementation\n         return false;\n     }\n }\n ``` | |\n\n**Registering a conversion module**\n\nEach conversion module must be registered with Eplan so that it is available during import or export. Since a conversion is only intended for a specific task, the scope of functions of the converter must be set during registration. This is done via the  IInterface  interface, as it is shown at the end of the above example.\n\nThe  InterfaceName  property returns the interface name followed by the interface category. The category specifies in which export dialog the new processor will be displayed. The available interface categories can be found in the list of available XML processors under  Eplan.EplApi.ApplicationFramework.XMLConverter  and  Eplan.EplApi.ApplicationFramework.XMLConverterCategories."
    },
    {
        "source": "EplanApiDotNet.md",
        "path": "/User Guide/Development environment",
        "title": "EplanApiDotNet",
        "content": "Eplan API was created using the MicrosoftÂ® .NET 4.8.1 technology.\n\nTo develop applications with the Eplan API, we recommend Microsoft Visual Studio 2022 or 2019. However it should also work with other development environments for the Microsoft .NET Framework 4.8.1. However, the Eplan API was not tested with IDEs other than the one mentioned above.\n\nTo start a new Eplan API project in Microsoft Visual Studio 2022, select File > New > Project... in the ribbon. In the Create Project dialog, first select the programming language you want to use (C#, Visual Basic, or C++).\n\nNext step is to decide what type of application you want to write:\n\n* For an add-in](AddIns.html), you either select a \"Class Library\" project or you use the Add-in Wizard provided by Eplan. The procedure for using the Add-in Wizard is described in the topic \"[Creating an add-in in Visual Studio](AddinInVisualStudio.html)\". If you want to create an add-in without using the wizard, simply add the references to the API assemblies. At a minimum, you must reference  Eplan.EplApi.AF.dll  and  Eplan.EplApi.Base.dll. Read more about creating add-ins in the topics below \"[Add-ins](AddIns.html)\". In your project settings (for example in Visual Studio) under Configuration Properties > Debugging add the  w3u.exe  as startup program (or  eplan.exe  with the  Variant  parameter) and make sure the created DLL is copied into the Eplan platform  bin  folder after building it.\n* For an offline-program, for example, create a new Windows Application project and proceed as described in the topic \"[Using Eplan API assemblies in other processes\". Make sure that a path is set to the Eplan platform  bin  directory or the working directory of your code project is set respectively, otherwise the corresponding DLLs may not be found.\n\n### Remarks\n\nWorking with an older Eplan API requires a suitable environment for this version of the framework.\n\nFor example version 2.8 of Eplan API was developed for the Microsoft .NET Framework 4.5.2.\n\nMake sure that you don't mix up Eplan API assemblies that use different frameworks."
    }
]