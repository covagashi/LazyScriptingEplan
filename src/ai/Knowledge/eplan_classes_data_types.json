{
  "eplanClassesAndDataTypes": {
    "metadata": {
      "version": "1.0",
      "description": "EPLAN scripting examples for classes, data types, and error handling",
      "category": "Programming Fundamentals"
    },
    "categories": {
      "stringHandling": {
        "name": "String Handling",
        "description": "String manipulation and path variables",
        "examples": [
          {
            "id": "basicString",
            "name": "Basic String Operations",
            "description": "String creation, concatenation, and formatting",
            "script": [
              "using System;",
              "using System.Windows.Forms;",
              "using Eplan.EplApi.Scripting;",
              "",
              "public class _03_Classes_01_String",
              "{",
              "  [Start]",
              "  public void Function()",
              "  {",
              "    MessageBox.Show(\"I am a text (but actually a string)!\");",
              "",
              "    string message1 = string.Empty;",
              "    message1 = \"I am a string with\\nline break!\";",
              "    MessageBox.Show(message1);",
              "    MessageBox.Show(\"Me\" + Environment.NewLine + \"too!\");",
              "",
              "    string message2 = \"I am also a string!\";",
              "    MessageBox.Show(message2);",
              "    message2 = \"You can also give me a new text!\";",
              "    MessageBox.Show(message2);",
              "",
              "    string message3_1 = \"And I \";",
              "    string message3_2 = \"am one \";",
              "    string message3_3 = \"too!\";",
              "    MessageBox.Show(message3_1 + message3_2 + message3_3);",
              "",
              "    MessageBox.Show(\"Line break in code \" +",
              "                    \"is not displayed!\");",
              "",
              "    string message4 = \"The {0} is in the {1}.\";",
              "    string message4_1 = string.Format(message4, \"comb\", \"cabinet\");",
              "    string message4_2 = string.Format(message4, \"cabinet\", \"bathroom\");",
              "    MessageBox.Show(message4_1);",
              "    MessageBox.Show(message4_2);",
              "  }",
              "}"
            ]
          },
          {
            "id": "pathVariables",
            "name": "Path Variables",
            "description": "Using EPLAN path variables with PathMap.SubstitutePath",
            "script": [
              "using System.Windows.Forms;",
              "using Eplan.EplApi.Base;",
              "using Eplan.EplApi.Scripting;",
              "",
              "public class _03_Classes_02_StringPathVariable",
              "{",
              "  [Start]",
              "  public void Function()",
              "  {",
              "    string projectName = PathMap.SubstitutePath(\"$(PROJECTNAME)\");",
              "    MessageBox.Show(projectName);",
              "  }",
              "}"
            ]
          }
        ]
      },
      "numericTypes": {
        "name": "Numeric Data Types",
        "description": "Integer and floating-point operations",
        "examples": [
          {
            "id": "integerOperations",
            "name": "Integer Operations",
            "description": "Basic arithmetic operations with integers",
            "script": [
              "using System.Windows.Forms;",
              "using Eplan.EplApi.Scripting;",
              "",
              "public class _03_Classes_03_Integer",
              "{",
              "  [Start]",
              "  public void Function()",
              "  {",
              "    int result;",
              "    int number1 = 6;",
              "    int number2 = 3;",
              "",
              "    MessageBox.Show(number1.ToString());",
              "",
              "    result = number1 + number2;",
              "    MessageBox.Show(result.ToString());",
              "",
              "    result = number1 - number2;",
              "    MessageBox.Show(result.ToString());",
              "",
              "    result = number1 * number2;",
              "    MessageBox.Show(result.ToString());",
              "",
              "    result = number1 / number2;",
              "    MessageBox.Show(result.ToString());",
              "  }",
              "}"
            ]
          },
          {
            "id": "integerErrors",
            "name": "Integer Type Errors",
            "description": "Common mistakes with integer operations",
            "script": [
              "using System.Windows.Forms;",
              "using Eplan.EplApi.Scripting;",
              "",
              "public class _03_Classes_04_ErrorInteger",
              "{",
              "  [Start]",
              "  public void Function()",
              "  {",
              "    string number1String = \"10\";",
              "    string number2String = \"2\";",
              "    string resultString = number1String + number2String;",
              "    MessageBox.Show(resultString);",
              "",
              "    int result;",
              "    int number1 = 10;",
              "    int number2 = 0;",
              "    result = number1 / number2;",
              "    MessageBox.Show(result.ToString());",
              "  }",
              "}"
            ]
          },
          {
            "id": "floatOperations",
            "name": "Float Operations",
            "description": "Floating-point arithmetic operations",
            "script": [
              "using System.Windows.Forms;",
              "using Eplan.EplApi.Scripting;",
              "",
              "public class _03_Classes_05_Float",
              "{",
              "  [Start]",
              "  public void Function()",
              "  {",
              "    float result;",
              "    float number1 = 10;",
              "    float number2 = 3;",
              "",
              "    result = number1 / number2;",
              "    MessageBox.Show(result.ToString());",
              "  }",
              "}"
            ]
          },
          {
            "id": "floatErrors",
            "name": "Float Type Errors",
            "description": "Common mistakes with float operations",
            "script": [
              "using System.Windows.Forms;",
              "using Eplan.EplApi.Scripting;",
              "",
              "public class _03_Classes_06_ErrorFloat",
              "{",
              "  [Start]",
              "  public void Function()",
              "  {",
              "    float result;",
              "    result = 10 / 3;",
              "    MessageBox.Show(\"10 / 3 = \" + result.ToString());",
              "  }",
              "}"
            ]
          }
        ]
      },
      "errorHandling": {
        "name": "Error Handling",
        "description": "Exception handling and EPLAN BaseException",
        "examples": [
          {
            "id": "tryCatchExample",
            "name": "Try-Catch Exception Handling",
            "description": "Basic exception handling with try-catch blocks",
            "script": [
              "using System.Windows.Forms;",
              "using Eplan.EplApi.Scripting;",
              "using System;",
              "",
              "public class _03_Classes_07_TryCatch",
              "{",
              "  [Start]",
              "  public void Function()",
              "  {",
              "    int result;",
              "    int number1 = 10;",
              "    int number2 = 0;",
              "",
              "    try",
              "    {",
              "      result = number1 / number2;",
              "",
              "      // No more code is executed from here",
              "      MessageBox.Show(result.ToString());",
              "      MessageBox.Show(\"Calculation successfully completed.\");",
              "    }",
              "    catch (Exception exception)",
              "    {",
              "      MessageBox.Show(exception.Message);",
              "    }",
              "  }",
              "}"
            ]
          },
          {
            "id": "baseExceptionExample",
            "name": "EPLAN BaseException",
            "description": "Using EPLAN's BaseException for different message levels",
            "script": [
              "using Eplan.EplApi.ApplicationFramework;",
              "using Eplan.EplApi.Base;",
              "using Eplan.EplApi.Scripting;",
              "",
              "public class _03_Classes_08_BaseException",
              "{",
              "  [Start]",
              "  public void Function()",
              "  {",
              "    BaseException bexAssert = new BaseException(\"Assert\", MessageLevel.Assert);",
              "    bexAssert.FixMessage();",
              "",
              "    BaseException bexError = new BaseException(\"Error\", MessageLevel.Error);",
              "    bexError.FixMessage();",
              "",
              "    BaseException bexFatalError = new BaseException(\"FatalError\", MessageLevel.FatalError);",
              "    bexFatalError.FixMessage();",
              "",
              "    BaseException bexMessage = new BaseException(\"Message\", MessageLevel.Message);",
              "    bexMessage.FixMessage();",
              "",
              "    BaseException bexTrace = new BaseException(\"Trace\", MessageLevel.Trace);",
              "    bexTrace.FixMessage();",
              "",
              "    BaseException bexWarning = new BaseException(\"Warning\", MessageLevel.Warning);",
              "    bexWarning.FixMessage();",
              "",
              "    CommandLineInterpreter cli = new CommandLineInterpreter();",
              "    cli.Execute(\"SystemErrDialog\");",
              "  }",
              "}"
            ]
          }
        ]
      },
      "parameterHandling": {
        "name": "Parameter Handling",
        "description": "Functions with parameters and MessageBox variations",
        "examples": [
          {
            "id": "stringParameter",
            "name": "String Parameter",
            "description": "Action with string parameter",
            "script": [
              "using System.Windows.Forms;",
              "using Eplan.EplApi.Scripting;",
              "",
              "public class _03_Classes_09_ParameterString",
              "{",
              "  [DeclareAction(\"StringParameter\")]",
              "  public void Function(string parameter)",
              "  {",
              "    MessageBox.Show(parameter);",
              "  }",
              "}"
            ]
          },
          {
            "id": "integerParameter",
            "name": "Integer Parameters",
            "description": "Action with multiple integer parameters",
            "script": [
              "using System.Windows.Forms;",
              "using Eplan.EplApi.Scripting;",
              "",
              "public class _03_Classes_10_ParameterInteger",
              "{",
              "  [DeclareAction(\"IntParameter\")]",
              "  public void Function(int int1, int int2)",
              "  {",
              "    int result = int1 + int2;",
              "",
              "    string message = int1.ToString() + \" + \" + int2.ToString() + \" = \" + result.ToString();",
              "",
              "    MessageBox.Show(message);",
              "  }",
              "}"
            ]
          },
          {
            "id": "messageBoxVariations",
            "name": "MessageBox Variations",
            "description": "Different MessageBox configurations with path variables",
            "script": [
              "using System.Windows.Forms;",
              "using Eplan.EplApi.Base;",
              "using Eplan.EplApi.Scripting;",
              "",
              "public class _03_Classes_11_MessageBox",
              "{",
              "  [Start]",
              "  public void Function()",
              "  {",
              "    string projectName = PathMap.SubstitutePath(\"$(PROJECTNAME)\");",
              "",
              "    MessageBox.Show(\"Text\", projectName);",
              "",
              "    MessageBox.Show(\"Text\", projectName, MessageBoxButtons.YesNo);",
              "",
              "    MessageBox.Show(\"Text\", projectName, MessageBoxButtons.AbortRetryIgnore, MessageBoxIcon.Information);",
              "  }",
              "}"
            ]
          }
        ]
      },
      "customClasses": {
        "name": "Custom Classes",
        "description": "Creating and using custom classes",
        "examples": [
          {
            "id": "ownClass",
            "name": "Custom Person Class",
            "description": "Example of creating and using a custom class with properties and methods",
            "script": [
              "using System.Windows.Forms;",
              "using Eplan.EplApi.Scripting;",
              "",
              "class _03_Classes_12_OwnClass",
              "{",
              "  [Start]",
              "  public void Function()",
              "  {",
              "    Person john = new Person();",
              "    john.FirstName = \"John\";",
              "    john.LastName = \"Doe\";",
              "    MessageBox.Show(john.FirstName + \" \" + john.LastName);",
              "",
              "    Person jane = new Person(\"Jane\", \"Public\");",
              "    jane.DisplayFullName();",
              "  }",
              "",
              "  class Person",
              "  {",
              "    public string FirstName { get; set; }",
              "    public string LastName { get; set; }",
              "",
              "    public string FullName",
              "    {",
              "      get { return FirstName + \" \" + LastName; }",
              "    }",
              "",
              "    public Person()",
              "    {",
              "    }",
              "",
              "    public Person(string firstName, string lastName)",
              "    {",
              "      FirstName = firstName;",
              "      LastName = lastName;",
              "    }",
              "",
              "    public void DisplayFullName()",
              "    {",
              "      MessageBox.Show(FullName);",
              "    }",
              "  }",
              "}"
            ]
          }
        ]
      },
      "actionReturnValues": {
        "name": "Actions with Return Values",
        "description": "Handling input/output parameters in custom actions",
        "examples": [
          {
            "id": "actionWithReturnValue",
            "name": "Action with Return Value",
            "description": "Action that returns a value using out parameter",
            "script": [
              "using System.Windows.Forms;",
              "using Eplan.EplApi.ApplicationFramework;",
              "using Eplan.EplApi.Scripting;",
              "",
              "public class _05_ActionsWithValues_01_ActionWithReturnValue",
              "{",
              "  [Start]",
              "  public void Function()",
              "  {",
              "    string value = string.Empty;",
              "",
              "    CommandLineInterpreter cli = new CommandLineInterpreter();",
              "    ActionCallingContext actionCallingContext = new ActionCallingContext();",
              "    actionCallingContext.AddParameter(\"name\", \"Neo\");",
              "    cli.Execute(\"ReturnAction\", actionCallingContext);",
              "",
              "    actionCallingContext.GetParameter(\"value\", ref value);",
              "",
              "    MessageBox.Show(value);",
              "  }",
              "",
              "  [DeclareAction(\"ReturnAction\")]",
              "  public void ReturnAction(string name, out string value)",
              "  {",
              "    value = \"Knock knock \" + name;",
              "  }",
              "}"
            ]
          },
          {
            "id": "actionWithActionCallingContext",
            "name": "Action with ActionCallingContext",
            "description": "Using ActionCallingContext to handle optional parameters",
            "script": [
              "using System.Windows.Forms;",
              "using Eplan.EplApi.ApplicationFramework;",
              "using Eplan.EplApi.Scripting;",
              "",
              "public class _05_ActionsWithValues_02_ActionWithActionCallingContext",
              "{",
              "  private ActionCallingContext _acc;",
              "",
              "  [DeclareAction(\"ActionWithActionCallingContext\")]",
              "  public void ReturnAction(ActionCallingContext acc)",
              "  {",
              "    _acc = acc;",
              "",
              "    string firstName = GetParameterValue(\"firstName\");",
              "",
              "    string message = \"Hello\";",
              "    if (!string.IsNullOrWhiteSpace(firstName))",
              "    {",
              "      message = message + \" \" + firstName;",
              "",
              "      string lastName = GetParameterValue(\"lastName\");",
              "      if (!string.IsNullOrWhiteSpace(lastName))",
              "      {",
              "        message = message + \" \" + lastName;",
              "      }",
              "    }",
              "",
              "    MessageBox.Show(message);",
              "  }",
              "",
              "  private string GetParameterValue(string parameterName)",
              "  {",
              "    string parameter = null;",
              "    _acc.GetParameter(parameterName, ref parameter);",
              "    return parameter;",
              "  }",
              "}"
            ]
          }
        ]
      }
    }
  }
}