{
  "eplanExportAndPartsExamples": {
    "metadata": {
      "version": "1.0",
      "description": "Export operations and parts database management examples",
      "category": "Data Export & Parts Management"
    },
    "categories": {
      "labelExports": {
        "name": "Label/Report Exports",
        "description": "Export BOM, device lists, and reports",
        "examples": [
          {
            "id": "basicLabel",
            "name": "Basic Label Export",
            "description": "Export BOM and device list with progress bar",
            "script": [
              "using System;",
              "using System.IO;",
              "using System.Runtime.Remoting.Contexts;",
              "using Eplan.EplApi.ApplicationFramework;",
              "using Eplan.EplApi.Base;",
              "using Eplan.EplApi.Scripting;",
              "",
              "public class _16_Export_01_Label",
              "{",
              "  [Start]",
              "  public bool AutoTreat()",
              "  {",
              "    Progress progress = new Progress(\"SimpleProgress\");",
              "    progress.SetAllowCancel(true);",
              "    bool bResult = true;",
              "",
              "    progress.BeginPart(100, \"\");",
              "",
              "    if (!progress.Canceled())",
              "    {",
              "      progress.BeginPart(50, \"label\");",
              "      ActionCallingContext context1 = new ActionCallingContext();",
              "      context1.AddParameter(\"configscheme\", \"Summarized parts list\");",
              "      context1.AddParameter(\"filterscheme\", \"\");",
              "      context1.AddParameter(\"sortscheme\", \"\");",
              "      context1.AddParameter(\"language\", \"de_DE\");",
              "      context1.AddParameter(\"destinationfile\", @\"$(DOC)\\BOM.xlsx\");",
              "      context1.AddParameter(\"recrepeat\", \"1\");",
              "      context1.AddParameter(\"taskrepeat\", \"1\");",
              "      context1.AddParameter(\"showoutput\", \"1\");",
              "      context1.AddParameter(\"type\", \"PROJECT\");",
              "      bResult &= new CommandLineInterpreter().Execute(\"label\", context1);",
              "      progress.EndPart();",
              "    }",
              "",
              "    if (!progress.Canceled())",
              "    {",
              "      progress.BeginPart(50, \"label\");",
              "      ActionCallingContext context2 = new ActionCallingContext();",
              "      context2.AddParameter(\"configscheme\", \"Device tag list\");",
              "      context2.AddParameter(\"filterscheme\", \"\");",
              "      context2.AddParameter(\"sortscheme\", \"\");",
              "      context2.AddParameter(\"language\", \"de_DE\");",
              "      context2.AddParameter(\"destinationfile\", @\"$(DOC)\\Device-List.xlsx\");",
              "      context2.AddParameter(\"recrepeat\", \"1\");",
              "      context2.AddParameter(\"taskrepeat\", \"1\");",
              "      context2.AddParameter(\"showoutput\", \"1\");",
              "      context2.AddParameter(\"type\", \"PROJECT\");",
              "      bResult &= new CommandLineInterpreter().Execute(\"label\", context2);",
              "      progress.EndPart();",
              "    }",
              "",
              "    progress.EndPart(true);",
              "    return bResult;",
              "  }",
              "}"
            ]
          },
          {
            "id": "labelWithCheck",
            "name": "Label Export with File Check",
            "description": "Export with file existence check and dialog",
            "script": [
              "using System;",
              "using System.IO;",
              "using System.Windows.Forms;",
              "using Eplan.EplApi.ApplicationFramework;",
              "using Eplan.EplApi.Base;",
              "using Eplan.EplApi.Scripting;",
              "",
              "public class _16_Export_02_LabelWithCheck",
              "{",
              "  [Start]",
              "  public void Function()",
              "  {",
              "    string fileName;",
              "",
              "    fileName = GetFileName(@\"$(DOC)\\BOM.xlsx\");",
              "    if (fileName != null)",
              "    {",
              "      ActionCallingContext context1 = new ActionCallingContext();",
              "      context1.AddParameter(\"configscheme\", \"Summarized parts list\");",
              "      context1.AddParameter(\"filterscheme\", \"\");",
              "      context1.AddParameter(\"sortscheme\", \"\");",
              "      context1.AddParameter(\"language\", \"de_DE\");",
              "      context1.AddParameter(\"destinationfile\", fileName);",
              "      context1.AddParameter(\"recrepeat\", \"1\");",
              "      context1.AddParameter(\"taskrepeat\", \"1\");",
              "      context1.AddParameter(\"showoutput\", \"1\");",
              "      context1.AddParameter(\"type\", \"PROJECT\");",
              "      new CommandLineInterpreter().Execute(\"label\", context1);",
              "    }",
              "  }",
              "",
              "  private static string GetFileName(string fileName)",
              "  {",
              "    string projectPath = PathMap.SubstitutePath(\"$(PROJECTPATH)\");",
              "    string fullFileName = PathMap.SubstitutePath(fileName);",
              "",
              "    if (File.Exists(fullFileName))",
              "    {",
              "      DialogResult dialogResult = MessageBox.Show(",
              "        \"The file already exists: '\" +",
              "        fullFileName +",
              "        Environment.NewLine +",
              "        Environment.NewLine +",
              "        \"Do you want to override it?\",",
              "        \"Label\",",
              "        MessageBoxButtons.YesNo,",
              "        MessageBoxIcon.Question",
              "      );",
              "",
              "      if (dialogResult == DialogResult.No)",
              "      {",
              "        SaveFileDialog sfd = new SaveFileDialog();",
              "        sfd.DefaultExt = \"xlsx\";",
              "        sfd.FileName = fileName;",
              "        sfd.Filter = \"Excel files (*.xlsx)|*.xlsx\";",
              "        sfd.InitialDirectory = projectPath;",
              "        sfd.Title = \"Choose location for \" + fileName + \" :\";",
              "        sfd.ValidateNames = true;",
              "",
              "        DialogResult sfdDialogResult = sfd.ShowDialog();",
              "        if (sfdDialogResult == DialogResult.OK)",
              "        {",
              "          fullFileName = sfd.FileName;",
              "        }",
              "        else if (sfdDialogResult == DialogResult.Cancel)",
              "        {",
              "          fullFileName = null;",
              "        }",
              "      }",
              "    }",
              "    return fullFileName;",
              "  }",
              "}"
            ]
          }
        ]
      },
      "eventDrivenExports": {
        "name": "Event-Driven Exports",
        "description": "Exports triggered by EPLAN events",
        "examples": [
          {
            "id": "pdfOnClosing",
            "name": "PDF Export on Project Close",
            "description": "Automatically export PDF when closing project",
            "script": [
              "using System.IO;",
              "using System.Windows.Forms;",
              "using Eplan.EplApi.ApplicationFramework;",
              "using Eplan.EplApi.Base;",
              "using Eplan.EplApi.Scripting;",
              "",
              "public class _16_Export_03_PdfOnClosing",
              "{",
              "  [DeclareEventHandler(\"Eplan.EplApi.OnUserPreCloseProject\")]",
              "  public void Function()",
              "  {",
              "    string path = PathMap.SubstitutePath(\"$(DOC)\");",
              "    string projectName = PathMap.SubstitutePath(\"$(PROJECTNAME)\");",
              "",
              "    DialogResult dialogResult = MessageBox.Show(",
              "        \"Do you want export a PDF for project '\" +",
              "        projectName + \"' ?\",",
              "        \"PDF-Export\",",
              "        MessageBoxButtons.YesNo,",
              "        MessageBoxIcon.Question",
              "        );",
              "",
              "    if (dialogResult == DialogResult.Yes)",
              "    {",
              "      Progress progress = new Progress(\"SimpleProgress\");",
              "      progress.SetAllowCancel(true);",
              "      progress.SetAskOnCancel(true);",
              "      progress.BeginPart(100, \"\");",
              "      progress.ShowImmediately();",
              "",
              "      CommandLineInterpreter cli = new CommandLineInterpreter();",
              "      ActionCallingContext acc = new ActionCallingContext();",
              "",
              "      string fullFileName = Path.Combine(path, projectName);",
              "      acc.AddParameter(\"TYPE\", \"PDFPROJECTSCHEME\");",
              "      acc.AddParameter(\"EXPORTFILE\", fullFileName);",
              "      acc.AddParameter(\"EXPORTSCHEME\", \"EPLAN_default_value\");",
              "",
              "      cli.Execute(\"export\", acc);",
              "",
              "      progress.EndPart(true);",
              "    }",
              "  }",
              "}"
            ]
          }
        ]
      },
      "partsManagement": {
        "name": "Parts Database Management",
        "description": "Query and modify parts database",
        "examples": [
          {
            "id": "countParts",
            "name": "Count Parts by Type",
            "description": "Count specific part types using LINQ",
            "script": [
              "using System.Linq;",
              "using System.Windows.Forms;",
              "using Eplan.EplApi.MasterData;",
              "using Eplan.EplApi.Scripting;",
              "",
              "class _17_Parts_01_CountParts",
              "{",
              "  [Start]",
              "  public void Function()",
              "  {",
              "    MDPartsManagement mdPartsManagement = new MDPartsManagement();",
              "    int partCount;",
              "",
              "    using (MDPartsDatabase database = mdPartsManagement.OpenDatabase())",
              "    {",
              "      partCount = database.Parts",
              "                            .Count(obj => obj.ProductSubGroup ==",
              "                              MDPartsDatabaseItem.Enums.ProductSubGroup.MotorOverloadSwitch);",
              "    }",
              "    MessageBox.Show(\"Count motor overload switches: \" + partCount);",
              "  }",
              "}"
            ]
          },
          {
            "id": "changePartProperties",
            "name": "Modify Part Properties",
            "description": "Update properties for filtered parts",
            "script": [
              "using Eplan.EplApi.MasterData;",
              "using Eplan.EplApi.Scripting;",
              "using System.Linq;",
              "",
              "class _17_Parts_02_ChangePartProperties",
              "{",
              "  [Start]",
              "  public void Function()",
              "  {",
              "    MDPartsManagement mdPartsManagement = new MDPartsManagement();",
              "    using (MDPartsDatabase database = mdPartsManagement.OpenDatabase())",
              "    {",
              "      var parts = database.Parts",
              "                        .Where(obj => obj.ProductSubGroup ==",
              "                          MDPartsDatabaseItem.Enums.ProductSubGroup",
              "                          .MotorOverloadSwitch);",
              "",
              "      foreach (MDPart part in parts)",
              "      {",
              "        part.Properties.ARTICLE_DESCR1 = \"Motor overload switch\";",
              "      }",
              "    }",
              "  }",
              "}"
            ]
          }
        ]
      }
    },
    "exportParameters": {
      "label": [
        "configscheme - Report configuration scheme",
        "filterscheme - Filter scheme for data",
        "sortscheme - Sorting scheme",
        "language - Export language (de_DE, en_US)",
        "destinationfile - Output file path",
        "type - Export type (PROJECT, SELECTION)"
      ],
      "export": [
        "TYPE - Export type (PDFPROJECTSCHEME, etc.)",
        "EXPORTFILE - Output file path",
        "EXPORTSCHEME - Export scheme to use"
      ]
    },
    "pathVariables": {
      "$(DOC)": "Project documents folder",
      "$(PROJECTNAME)": "Current project name",
      "$(PROJECTPATH)": "Current project path"
    },
    "partsDatabase": {
      "classes": [
        "MDPartsManagement - Parts database management",
        "MDPartsDatabase - Database connection",
        "MDPart - Individual part object"
      ],
      "productSubGroups": [
        "MotorOverloadSwitch",
        "ContactorRelay",
        "CircuitBreaker",
        "Fuse"
      ]
    }
  }
}