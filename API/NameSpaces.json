[
  {
    "namespace": "Eplan.EplApi.ApplicationFramework",
    "description": "Contains core classes and interfaces for EPLAN application development.",
    "members": [
      {
        "type": "class",
        "name": "Action",
        "description": "Represents an executable action in EPLAN.",
        "inheritance": [
          "System.Object"
        ],
        "codeDeclaration": {
          "csharp": "public class Action",
          "cpp": "public ref class Action"
        },
        "remarks": "Core class for creating custom actions in EPLAN."
      },
      {
        "type": "class",
        "name": "ActionCallingContext",
        "description": "Provides context for calling actions in EPLAN.",
        "inheritance": [
          "System.Object",
          "Eplan.EplApi.Base.Context",
          "Eplan.EplApi.ApplicationFramework.ActionCallingContext",
          "Eplan.EplApi.DataModel.StorableObjectContext"
        ],
        "interfaces": [
          "IActionCallingContext",
          "Eplan.EplApi.Base.IContext"
        ],
        "codeDeclaration": {
          "csharp": "public class ActionCallingContext : Eplan.EplApi.Base.Context, IActionCallingContext, Eplan.EplApi.Base.IContext",
          "cpp": "public ref class ActionCallingContext : public Eplan.EplApi.Base.Context, IActionCallingContext, Eplan.EplApi.Base.IContext"
        }
      },
      {
        "type": "class",
        "name": "ActionManager",
        "description": "Manages available actions in EPLAN.",
        "inheritance": [
          "System.Object"
        ],
        "codeDeclaration": {
          "csharp": "public class ActionManager",
          "cpp": "public ref class ActionManager"
        },
        "codeExample": {
          "csharp": "Action oAction = m_ActionManager.FindAction(null);\nAssert.IsNull(oAction);\nActionCallingContext oACC = new ActionCallingContext();\noAction.Execute(oACC);"
        }
      },
      {
        "type": "class",
        "name": "ActionParameterProperties",
        "description": "Defines properties for action parameters.",
        "inheritance": [
          "System.Object"
        ],
        "codeDeclaration": {
          "csharp": "public class ActionParameterProperties",
          "cpp": "public ref class ActionParameterProperties"
        },
        "codeExample": {
          "csharp": "ActionManager oMng = new ActionManager();\nAction oAction = oMng.FindAction(m_strActionName);\nlabelDescription.Text = oAction.ActionProperties.Description;\n\nArrayList lst = oAction.ActionProperties.GetParameterProperties();\nif (lst.Count == 0)\n{\n   listViewParameter.Hide();\n}\nelse\n{\n   foreach (ActionParameterProperties oProperties in lst)\n   {\n        String strParamName         = oProperties.Name;\n        String strParamDescription  = oProperties.Description;\n\n        System.Windows.Forms.ListViewItem listItem = new System.Windows.Forms.ListViewItem(strParamName);\n        listItem.SubItems.Add(strParamDescription);\n\n        listViewParameter.Items.Add(listItem);\n    }\n    listViewParameter.Show();\n}"
        }
      },
      {
        "type": "class",
        "name": "ActionProperties",
        "description": "Encapsulates properties of an EPLAN action.",
        "inheritance": [
          "System.Object"
        ],
        "codeDeclaration": {
          "csharp": "public class ActionProperties",
          "cpp": "public ref class ActionProperties"
        }
      },
      {
        "type": "class",
        "name": "BatchActionManager",
        "description": "Manages batch execution of actions in EPLAN.",
        "inheritance": [
          "System.Object"
        ],
        "codeDeclaration": {
          "csharp": "public class BatchActionManager",
          "cpp": "public ref class BatchActionManager"
        }
      },
      {
        "type": "class",
        "name": "CommandLineInterpreter",
        "description": "Interprets and executes command line commands in EPLAN.",
        "inheritance": [
          "System.Object"
        ],
        "interfaces": [
          "ICommandLineInterpreter"
        ],
        "attributes": [
          {
            "name": "ClassInterface",
            "value": "ClassInterfaceType.None"
          }
        ],
        "codeDeclaration": {
          "csharp": "public class CommandLineInterpreter : ICommandLineInterpreter",
          "cpp": "public ref class CommandLineInterpreter : public ICommandLineInterpreter"
        },
        "codeExample": {
          "csharp": "String strAction = @\"XPrjActionProjectOpen /PROJECT:\";\nbool bRet = new CommandLineInterpreter().Execute(strAction + ProjectName);\nif (!bRet)\n{\n   new Decider().Decide(EnumDecisionType.eOkDecision, \"P8 command does not work\", \"OpenProjectAndPage\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK);\n   CommandLineInterpreter.Execute(\"SystemErrDialog\");\n   return -1;\n}"
        }
      },
      {
        "type": "class",
        "name": "EventHandler",
        "description": "Handles events in EPLAN.",
        "inheritance": [
          "System.Object"
        ],
        "attributes": [
          {
            "name": "ComSourceInterfaces",
            "value": "Eplan.EplApi.ApplicationFramework.IEplanEvents"
          }
        ],
        "codeDeclaration": {
          "csharp": "public class EventHandler",
          "cpp": "public ref class EventHandler"
        }
      },
      {
        "type": "class",
        "name": "EventHandlerWrapper",
        "description": "Wraps event handling functionality in EPLAN.",
        "inheritance": [
          "System.Object"
        ],
        "codeDeclaration": {
          "csharp": "public class EventHandlerWrapper",
          "cpp": "public ref class EventHandlerWrapper"
        },
        "codeExample": {
          "csharp": "Eplan.EplApi.ApplicationFramework.EventHandler oEventHandler = new Eplan.EplApi.ApplicationFramework.EventHandler();\noEventHandler.SetEvent(\"onActionStart.String.*\");\n       \nEplan.EplApi.ApplicationFramework.EventHandlerWrapper oWrapper = new Eplan.EplApi.ApplicationFramework.EventHandlerWrapper();\noWrapper.EplanEventLocally += new Eplan.EplApi.ApplicationFramework.EventHandlerFunction(oWrapper_EventHandlerFunctionLocally);\n          \noEventHandler.EplanEvent += new Eplan.EplApi.ApplicationFramework.EventHandlerFunction(oWrapper.LocallyEventHandlerFunction);"
        }
      },
      {
        "type": "class",
        "name": "EventManager",
        "description": "Manages events in EPLAN.",
        "inheritance": [
          "System.Object"
        ],
        "codeDeclaration": {
          "csharp": "public class EventManager",
          "cpp": "public ref class EventManager"
        }
      },
      {
        "type": "class",
        "name": "EventParameter",
        "description": "Represents parameters for EPLAN events.",
        "inheritance": [
          "System.Object"
        ],
        "interfaces": [
          "IEventParameter"
        ],
        "codeDeclaration": {
          "csharp": "public class EventParameter : IEventParameter",
          "cpp": "public ref class EventParameter : public IEventParameter"
        }
      },
      {
        "type": "class",
        "name": "EventParameterString",
        "description": "Represents string parameters for EPLAN events.",
        "inheritance": [
          "System.Object"
        ],
        "interfaces": [
          "IEventParameter"
        ],
        "codeDeclaration": {
          "csharp": "public class EventParameterString : IEventParameter",
          "cpp": "public ref class EventParameterString : public IEventParameter"
        }
      },
      {
        "type": "class",
        "name": "License",
        "description": "Handles licensing in EPLAN.",
        "inheritance": [
          "System.Object"
        ],
        "codeDeclaration": {
          "csharp": "public class License",
          "cpp": "public ref class License"
        }
      },
      {
        "type": "class",
        "name": "QuietModeStep",
        "description": "Manages quiet mode steps in EPLAN.",
        "inheritance": [
          "System.Object"
        ],
        "codeDeclaration": {
          "csharp": "public class QuietModeStep",
          "cpp": "public ref class QuietModeStep"
        }
      },
      {
        "type": "class",
        "name": "UserRights",
        "description": "Manages user rights in EPLAN.",
        "inheritance": [
          "System.Object"
        ],
        "codeDeclaration": {
          "csharp": "public class UserRights",
          "cpp": "public ref class UserRights"
        }
      },
      {
        "type": "enum",
        "name": "LicenseOptions",
        "description": "Enumerates license options in EPLAN.",
        "inheritance": [
          "System.Enum"
        ],
        "codeDeclaration": {
          "csharp": "public enum LicenseOptions : System.Enum",
          "cpp": "public enum class LicenseOptions : public System.Enum"
        }
      },
      {
        "type": "enum",
        "name": "LicenseType",
        "description": "Enumerates license types in EPLAN.",
        "inheritance": [
          "System.Enum"
        ],
        "codeDeclaration": {
          "csharp": "public enum LicenseType : System.Enum",
          "cpp": "public enum class LicenseType : public System.Enum"
        }
      },
      {
        "type": "enum",
        "name": "ProjectOpenRequirement",
        "description": "Enumerates project open requirements in EPLAN.",
        "inheritance": [
          "System.Enum"
        ],
        "codeDeclaration": {
          "csharp": "public enum ProjectOpenRequirement : System.Enum",
          "cpp": "public enum class ProjectOpenRequirement : public System.Enum"
        },
        "codeExample": {
          "csharp": "public ProjectOpenRequirement GetProjectRequirement()\n{\n    return ProjectOpenRequirement.ProjectExclusive;\n}"
        }
      },
      {
        "type": "enum",
        "name": "QuietModes",
        "description": "Enumerates quiet modes in EPLAN.",
        "inheritance": [
          "System.Enum"
        ],
        "codeDeclaration": {
          "csharp": "public enum QuietModes : System.Enum",
          "cpp": "public enum class QuietModes : public System.Enum"
        }
      },
      {
        "type": "interface",
        "name": "IActionCallingContext",
        "description": "Interface for action calling context in EPLAN.",
        "codeDeclaration": {
          "csharp": "public interface IActionCallingContext",
          "cpp": "public interface class IActionCallingContext"
        }
      },
      {
        "type": "interface",
        "name": "ICommandLineInterpreter",
        "description": "Interface for command line interpreter in EPLAN.",
        "codeDeclaration": {
          "csharp": "public interface ICommandLineInterpreter",
          "cpp": "public interface class ICommandLineInterpreter"
        }
      },
      {
        "type": "interface",
        "name": "IEplAction",
        "description": "Interface for EPLAN actions.",
        "codeDeclaration": {
          "csharp": "public interface IEplAction",
          "cpp": "public interface class IEplAction"
        }
      },
      {
        "type": "interface",
        "name": "IEplActionBatchExtension",
        "description": "Interface for EPLAN action batch extensions.",
        "inheritance": [
          "IInterface"
        ],
        "codeDeclaration": {
          "csharp": "public interface IEplActionBatchExtension : IInterface",
          "cpp": "public interface class IEplActionBatchExtension : public IInterface"
        }
      },
      {
        "type": "interface",
        "name": "IEplActionChecked",
        "description": "Interface for checked EPLAN actions.",
        "codeDeclaration": {
          "csharp": "public interface IEplActionChecked",
          "cpp": "public interface class IEplActionChecked"
        },
        "codeExample": {
          "csharp": "public class TestAction : Eplan.EplApi.ApplicationFramework.IEplAction, Eplan.EplApi.ApplicationFramework.IEplActionChecked\n{\n    public int Checked(string strActionName, Eplan.EplApi.ApplicationFramework.ActionCallingContext actionContext)\n    {\n        if (strActionName == \"TESTACTIONMIXED\")\n        {\n            return 2;\n        }\n        else if (strActionName == \"TESTACTION\")\n        {\n            return 1;\n        }\n        else\n        {\n            return 0;\n        }\n    }\n}"
        }
      },
      {
        "type": "interface",
        "name": "IEplActionEnable",
        "description": "Interface for enabling EPLAN actions.",
        "codeDeclaration": {
          "csharp": "public interface IEplActionEnable",
          "cpp": "public interface class IEplActionEnable"
        },
        "codeExample": {
          "csharp": "public class TestAction : Eplan.EplApi.ApplicationFramework.IEplAction, Eplan.EplApi.ApplicationFramework.IEplActionEnable\n{\n    public bool Enabled(string strActionName, Eplan.EplApi.ApplicationFramework.ActionCallingContext actionContext)\n    {\n        if (strActionName == \"TESTACTION\")\n        {\n            return false;\n        }\n        else\n        {\n            return true;\n        }\n    }\n}"
        }
      },
      {
        "type": "interface",
        "name": "IEplAddIn",
        "description": "Interface for EPLAN add-ins.",
        "codeDeclaration": {
          "csharp": "public interface IEplAddIn",
          "cpp": "public interface class IEplAddIn"
        }
      },
      {
        "type": "interface",
        "name": "IEplAddInShadowCopy",
        "description": "Interface for EPLAN add-ins with shadow copy support.",
        "codeDeclaration": {
          "csharp": "public interface IEplAddInShadowCopy",
          "cpp": "public interface class IEplAddInShadowCopy"
        },
        "codeExample": {
          "csharp": "public class AddInModule: IEplAddIn, IEplAddInShadowCopy\n{\n    public bool OnRegister(ref System.Boolean bLoadOnStart)\n    {\n        bLoadOnStart = true;\n        return true;\n    }\n\n    public bool OnUnregister()\n    {\n        return true;\n    }\n\n    public void OnBeforeInit(string strOriginalAssemblyPath)\n    {\n        m_strOriginalAssemblyPath = strOriginalAssemblyPath;\n    }\n\n    public String GetOriginalAssemblyPath()\n    {\n        return m_strOriginalAssemblyPath;\n    }\n\n    public bool OnInit()\n    {\n        return true;\n    }\n\n    public bool OnInitGui()\n    {\n        return true;\n    }\n\n    public bool OnExit()\n    {\n        return true;\n    }\n\n    private String m_strOriginalAssemblyPath;\n}"
        }
      },
      {
        "type": "interface",
        "name": "IEplanEvents",
        "description": "Interface for EPLAN events.",
        "attributes": [
          {
            "name": "InterfaceType",
            "value": "ComInterfaceType.InterfaceIsIDispatch"
          }
        ],
        "codeDeclaration": {
          "csharp": "public interface IEplanEvents",
          "cpp": "public interface class IEplanEvents"
        }
      },
      {
        "type": "interface",
        "name": "IEplanEventsWrapper",
        "description": "Interface for wrapping EPLAN events.",
        "codeDeclaration": {
          "csharp": "public interface IEplanEventsWrapper",
          "cpp": "public interface class IEplanEventsWrapper"
        }
      },
      {
        "type": "interface",
        "name": "IEventParameter",
        "description": "Interface for event parameters in EPLAN.",
        "codeDeclaration": {
          "csharp": "public interface IEventParameter",
          "cpp": "public interface class IEventParameter"
        }
      },
      {
        "type": "interface",
        "name": "IExtendedProcessor",
        "description": "Interface for extended processors in EPLAN.",
        "inheritance": [
          "IInterface"
        ],
        "codeDeclaration": {
          "csharp": "public interface IExtendedProcessor : IInterface",
          "cpp": "public interface class IExtendedProcessor : public IInterface"
        }
      },
      {
        "type": "interface",
        "name": "IInterface",
        "description": "Base interface for EPLAN interfaces.",
        "codeDeclaration": {
          "csharp": "public interface IInterface",
          "cpp": "public interface class IInterface"
        }
      },
      {
        "type": "interface",
        "name": "IOptions",
        "description": "Interface for options in EPLAN.",
        "codeDeclaration": {
          "csharp": "public interface IOptions",
          "cpp": "public interface class IOptions"
        }
      },
      {
        "type": "interface",
        "name": "IXMLProcessor",
        "description": "Interface for XML processors in EPLAN.",
        "inheritance": [
          "IInterface"
        ],
        "codeDeclaration": {
          "csharp": "public interface IXMLProcessor : IInterface",
          "cpp": "public interface class IXMLProcessor : public IInterface"
        }
      },
      {
        "type": "delegate",
        "name": "EventHandlerFunction",
        "description": "Delegate for event handler functions in EPLAN.",
        "codeDeclaration": {
          "csharp": "public delegate void EventHandlerFunction(IEventParameter pIEventParameter)",
          "cpp": "public delegate void EventHandlerFunction(IEventParameter^ pIEventParameter)"
        }
      },
      {
        "type": "delegate",
        "name": "EventHandlerNameFunction",
        "description": "Delegate for named event handler functions in EPLAN.",
        "codeDeclaration": {
          "csharp": "public delegate void EventHandlerNameFunction(IEventParameter pIEventParameter, string strNameOfEvent)",
          "cpp": "public delegate void EventHandlerNameFunction(IEventParameter^ pIEventParameter, String^ strNameOfEvent)"
        }
      },
      {
        "type": "delegate",
        "name": "EventHandlerNameFunctionResult",
        "description": "Delegate for named event handler functions with a result in EPLAN.",
        "codeDeclaration": {
          "csharp": "public delegate long EventHandlerNameFunctionResult(IEventParameter pIEventParameter, string strNameOfEvent)",
          "cpp": "public delegate int64 EventHandlerNameFunctionResult(IEventParameter^ pIEventParameter, String^ strNameOfEvent)"
        },
        "returnValue": {
          "type": "long",
          "description": "The result of the event handler function."
        }
      }
    ]
  },
  {
    "namespace": "Eplan.EplApi.Gui",
    "classes": [
      {
        "name": "ContextMenu",
        "description": "Represents a context menu in EPLAN.",
        "inheritance": [
          "System.Object"
        ],
        "codeExample": "ContextMenuLocation oLocation = new ContextMenuLocation();\noLocation.DialogName = \"Editor\";\noLocation.ContextMenuName = \"Ged\";\nContextMenu oTestMenu = new ContextMenu();\noTestMenu.AddMenuItem(oLocation, \"My Contextmenuname\", \"MyFavoriteActionName\", true, false);"
      },
      {
        "name": "RibbonBar",
        "description": "Represents a ribbon bar in EPLAN GUI.",
        "inheritance": [
          "System.Object"
        ],
        "codeExamples": [
          {
            "description": "Adding a new tab and commands",
            "code": "using (var ribbonBar = new RibbonBar(true))\n{\n    var ribbonTab = ribbonBar.AddTab(\"MyTab1\") ?? ribbonBar.GetTab(\"MyTab1\");\n    var commandGroup = ribbonTab.AddCommandGroup(\"MyExampleActions\");\n    commandGroup.AddCommand(\"MyExampleAction1\", \"ExampleAction /PARAM:1\");\n    commandGroup.AddCommand(\"MyExampleAction2\", \"ExampleAction /PARAM:2\");\n    commandGroup.AddCommand(\"MyExampleAction3\", \"ExampleAction /PARAM:3\");\n}"
          },
          {
            "description": "Adding a new command with an icon",
            "code": "RibbonBar ribbonBar = new RibbonBar();\nribbonBar.AddCommand(\"New ribbon button text\", \"XPartsManagementStart\", new RibbonIcon(CommandIcon.Circle_0));"
          }
        ]
      }
    ],
    "enums": [
      {
        "name": "CommandIcon",
        "description": "Enumerates icons available for commands in EPLAN GUI.",
        "inheritance": [
          "System.Enum"
        ]
      },
      {
        "name": "RibbonTab.DefaultRibbonTabs",
        "description": "Enumerates default ribbon tabs in EPLAN.",
        "inheritance": [
          "System.Enum"
        ]
      }
    ]
  },
  {
    "namespace": "Eplan.EplApi.Scripting",
    "attributes": [
      {
        "name": "DeclareAction",
        "description": "Attribute used to declare an action in EPLAN scripting.",
        "inheritance": [
          "System.Attribute"
        ],
        "usage": "Method"
      },
      {
        "name": "DeclareEventHandler",
        "description": "Attribute used to declare an event handler in EPLAN scripting.",
        "inheritance": [
          "System.Attribute"
        ],
        "usage": "Method"
      },
      {
        "name": "Start",
        "description": "Attribute used to mark the starting point of an EPLAN script.",
        "inheritance": [
          "System.Attribute"
        ],
        "usage": "Method"
      }
    ]
  },
  {
    "namespace": "Eplan.IdentityClient.Authentification",
    "classes": [
      {
        "name": "ProductInfo",
        "description": "Provides information about the EPLAN product.",
        "attributes": [
          "NullableContext(1)",
          "Nullable(0)"
        ]
      }
    ],
    "interfaces": [
      {
        "name": "IEIdentityClient",
        "description": "Interface for EPLAN identity client operations.",
        "attributes": [
          "NullableContext(1)"
        ]
      }
    ]
  },
  {
    "namespace": "Eplan.IdentityClient",
    "classes": [
      {
        "name": "AuthenticationData",
        "description": "Represents authentication data in EPLAN identity client.",
        "inheritance": [
          "IdentityClientResponse"
        ]
      },
      {
        "name": "EProxySettings",
        "description": "Manages proxy settings for EPLAN identity client."
      }
    ],
    "enums": [
      {
        "name": "ApplicationMode",
        "description": "Enumerates application modes in EPLAN identity client.",
        "inheritance": [
          "System.Enum"
        ]
      },
      {
        "name": "IdentityStatusCode",
        "description": "Enumerates status codes for identity operations in EPLAN.",
        "inheritance": [
          "System.Enum"
        ]
      }
    ]
  },
  {
    "type": "namespace",
    "name": "Eplan.EplApi.MasterData",
    "description": "Contains classes and interfaces for working with EPLAN master data.",
    "members": [
      {
        "type": "class",
        "name": "MasterDataException",
        "description": "Exception class for master data related errors.",
        "inheritance": [
          "System.Object",
          "System.Exception",
          "System.ApplicationException",
          "Eplan.EplApi.Base.BaseException",
          "Eplan.EplApi.MasterData.MasterDataException"
        ]
      },
      {
        "type": "class",
        "name": "MDAccessoryList",
        "description": "Represents an accessory list in the parts database.",
        "inheritance": [
          "System.Object",
          "Eplan.EplApi.MasterData.PropertiesAndHandleObject",
          "Eplan.EplApi.MasterData.MDPartsDatabaseItem",
          "Eplan.EplApi.MasterData.MDAccessoryList"
        ]
      },
      {
        "type": "class",
        "name": "MDAccessoryListPosition",
        "description": "Represents a position in an accessory list.",
        "inheritance": [
          "System.Object",
          "Eplan.EplApi.MasterData.MDPartsDatabaseItemChildData",
          "Eplan.EplApi.MasterData.MDAccessoryListPosition"
        ]
      },
      {
        "type": "class",
        "name": "MDAccessoryPlacement",
        "description": "Represents the placement of an accessory.",
        "inheritance": [
          "System.Object",
          "Eplan.EplApi.MasterData.PropertiesAndHandleObject",
          "Eplan.EplApi.MasterData.MDPartsDatabaseItem",
          "Eplan.EplApi.MasterData.MDAccessoryPlacement"
        ]
      },
      {
        "type": "class",
        "name": "MDAccessoryPlacementPosition",
        "description": "Represents a position for accessory placement.",
        "inheritance": [
          "System.Object",
          "Eplan.EplApi.MasterData.MDPartsDatabaseItemChildData",
          "Eplan.EplApi.MasterData.MDAccessoryPlacementPosition"
        ]
      },
      {
        "type": "class",
        "name": "MDAccessoryPosition",
        "description": "Represents the position of an accessory.",
        "inheritance": [
          "System.Object",
          "Eplan.EplApi.MasterData.MDPartsDatabaseItemChildData",
          "Eplan.EplApi.MasterData.MDAccessoryPosition"
        ]
      },
      {
        "type": "class",
        "name": "MDAddress",
        "description": "Represents an address in the parts database.",
        "inheritance": [
          "System.Object",
          "Eplan.EplApi.MasterData.PropertiesAndHandleObject",
          "Eplan.EplApi.MasterData.MDPartsDatabaseItem",
          "Eplan.EplApi.MasterData.MDAddress"
        ]
      },
      {
        "type": "class",
        "name": "MDAnyPropertyId",
        "description": "Represents any property ID in the master data.",
        "modifiers": [
          "sealed"
        ]
      },
      {
        "type": "class",
        "name": "MDArgumentNullException",
        "description": "Exception thrown when a null argument is passed to a method that does not accept it.",
        "inheritance": [
          "System.Object",
          "System.Exception",
          "System.SystemException",
          "System.ArgumentException",
          "System.ArgumentNullException",
          "Eplan.EplApi.MasterData.MDArgumentNullException"
        ]
      },
      {
        "type": "class",
        "name": "MDCableTemplatePosition",
        "description": "Represents a position for a cable template.",
        "inheritance": [
          "System.Object",
          "Eplan.EplApi.MasterData.MDPartsDatabaseItemChildData",
          "Eplan.EplApi.MasterData.MDFunctionTemplatePosition",
          "Eplan.EplApi.MasterData.MDCableTemplatePosition"
        ]
      },
      {
        "type": "class",
        "name": "MDCanNotAddSymbolPosition",
        "description": "Exception thrown when a symbol position cannot be added.",
        "inheritance": [
          "System.Object",
          "System.Exception",
          "System.ApplicationException",
          "Eplan.EplApi.Base.BaseException",
          "Eplan.EplApi.MasterData.MasterDataException",
          "Eplan.EplApi.MasterData.MDCanNotAddSymbolPosition"
        ]
      },
      {
        "type": "class",
        "name": "MDComponentTemplatePosition",
        "description": "Represents a position for a component template.",
        "inheritance": [
          "System.Object",
          "Eplan.EplApi.MasterData.MDPartsDatabaseItemChildData",
          "Eplan.EplApi.MasterData.MDFunctionTemplatePosition",
          "Eplan.EplApi.MasterData.MDComponentTemplatePosition"
        ]
      },
      {
        "type": "class",
        "name": "MDConnectionPointInfo",
        "description": "Represents information about a connection point.",
        "inheritance": [
          "System.Object",
          "Eplan.EplApi.MasterData.PropertiesAndHandleObject",
          "Eplan.EplApi.MasterData.MDPartsDatabaseItem",
          "Eplan.EplApi.MasterData.MDConnectionPointInfo"
        ]
      },
      {
        "type": "class",
        "name": "MDConnectionPointPosition",
        "description": "Represents the position of a connection point.",
        "inheritance": [
          "System.Object",
          "Eplan.EplApi.MasterData.MDPartsDatabaseItemChildData",
          "Eplan.EplApi.MasterData.MDConnectionPointPosition"
        ]
      },
      {
        "type": "class",
        "name": "MDConstruction",
        "description": "Represents a construction in the parts database.",
        "inheritance": [
          "System.Object",
          "Eplan.EplApi.MasterData.PropertiesAndHandleObject",
          "Eplan.EplApi.MasterData.MDPartsDatabaseItem",
          "Eplan.EplApi.MasterData.MDConstruction"
        ]
      },
      {
        "type": "class",
        "name": "MDContourElement",
        "description": "Represents a contour element in the master data."
      },
      {
        "type": "class",
        "name": "MDDatabaseConnectionException",
        "description": "Exception thrown when there's an issue with the database connection.",
        "inheritance": [
          "System.Object",
          "System.Exception",
          "System.ApplicationException",
          "Eplan.EplApi.Base.BaseException",
          "Eplan.EplApi.MasterData.MasterDataException",
          "Eplan.EplApi.MasterData.MDDatabaseConnectionException"
        ]
      },
      {
        "type": "class",
        "name": "MDDatabaseReadOnlyException",
        "description": "Exception thrown when attempting to write to a read-only database.",
        "inheritance": [
          "System.Object",
          "System.Exception",
          "System.ApplicationException",
          "Eplan.EplApi.Base.BaseException",
          "Eplan.EplApi.MasterData.MasterDataException",
          "Eplan.EplApi.MasterData.MDDatabaseReadOnlyException"
        ]
      },
      {
        "type": "class",
        "name": "MDDoorPosition",
        "description": "Represents the position of a door in the master data.",
        "inheritance": [
          "System.Object",
          "Eplan.EplApi.MasterData.MDPartsDatabaseItemChildData",
          "Eplan.EplApi.MasterData.MDDoorPosition"
        ]
      },
      {
        "type": "class",
        "name": "MDDrillingPosition",
        "description": "Represents the position of a drilling in the master data.",
        "inheritance": [
          "System.Object",
          "Eplan.EplApi.MasterData.MDPartsDatabaseItemChildData",
          "Eplan.EplApi.MasterData.MDDrillingPosition"
        ]
      },
      {
        "type": "class",
        "name": "MDElectricalRelayTemplatePosition",
        "description": "Represents a position for an electrical relay template.",
        "inheritance": [
          "System.Object",
          "Eplan.EplApi.MasterData.MDPartsDatabaseItemChildData",
          "Eplan.EplApi.MasterData.MDFunctionTemplatePosition",
          "Eplan.EplApi.MasterData.MDElectricalRelayTemplatePosition"
        ]
      },
      {
        "type": "class",
        "name": "MDEmptyPropertyException",
        "description": "Exception thrown when a property is empty.",
        "inheritance": [
          "System.Object",
          "System.Exception",
          "System.ApplicationException",
          "Eplan.EplApi.Base.BaseException",
          "Eplan.EplApi.MasterData.MasterDataException",
          "Eplan.EplApi.MasterData.MDEmptyPropertyException"
        ]
      },
      {
        "type": "class",
        "name": "MDFunctionTemplatePosition",
        "description": "Represents a position for a function template.",
        "inheritance": [
          "System.Object",
          "Eplan.EplApi.MasterData.MDPartsDatabaseItemChildData",
          "Eplan.EplApi.MasterData.MDFunctionTemplatePosition"
        ]
      },
      {
        "type": "class",
        "name": "MDIncorrectNameFormatException",
        "description": "Exception thrown when a name format is incorrect.",
        "inheritance": [
          "System.Object",
          "System.Exception",
          "System.ApplicationException",
          "Eplan.EplApi.Base.BaseException",
          "Eplan.EplApi.MasterData.MasterDataException",
          "Eplan.EplApi.MasterData.MDIncorrectNameFormatException"
        ]
      },
      {
        "type": "class",
        "name": "MDIndexedPropertyException",
        "description": "Exception thrown for issues with indexed properties.",
        "inheritance": [
          "System.Object",
          "System.Exception",
          "System.ApplicationException",
          "Eplan.EplApi.Base.BaseException",
          "Eplan.EplApi.MasterData.MasterDataException",
          "Eplan.EplApi.MasterData.MDIndexedPropertyException"
        ]
      },
      {
        "type": "class",
        "name": "MDInvalidArgumentException",
        "description": "Exception thrown when an invalid argument is provided.",
        "inheritance": [
          "System.Object",
          "System.Exception",
          "System.SystemException",
          "System.ArgumentException",
          "Eplan.EplApi.MasterData.MDInvalidArgumentException"
        ]
      },
      {
        "type": "class",
        "name": "MDInvalidHandleException",
        "description": "Exception thrown when an invalid handle is used.",
        "inheritance": [
          "System.Object",
          "System.Exception",
          "System.SystemException",
          "System.ArgumentException",
          "Eplan.EplApi.MasterData.MDInvalidArgumentException",
          "Eplan.EplApi.MasterData.MDInvalidHandleException"
        ]
      },
      {
        "type": "class",
        "name": "MDInvalidIndexException",
        "description": "Exception thrown when an invalid index is used.",
        "inheritance": [
          "System.Object",
          "System.Exception",
          "System.SystemException",
          "System.ArgumentException",
          "Eplan.EplApi.MasterData.MDInvalidArgumentException",
          "Eplan.EplApi.MasterData.MDInvalidIndexException"
        ]
      },
      {
        "type": "class",
        "name": "MDInvalidTimeValueException",
        "description": "Exception thrown when an invalid time value is used.",
        "inheritance": [
          "System.Object",
          "System.Exception",
          "System.SystemException",
          "System.ArgumentException",
          "Eplan.EplApi.MasterData.MDInvalidArgumentException",
          "Eplan.EplApi.MasterData.MDInvalidTimeValueException"
        ]
      },
      {
        "type": "class",
        "name": "MDMechanicsFunctionDefinition",
        "description": "Represents a mechanics function definition.",
        "inheritance": [
          "System.Object",
          "Eplan.EplApi.MasterData.MDPartsDatabaseItemChildData",
          "Eplan.EplApi.MasterData.MDFunctionTemplatePosition",
          "Eplan.EplApi.MasterData.MDMechanicsFunctionDefinition"
        ]
      },
      {
        "type": "class",
        "name": "MDNotIndexedPropertyException",
        "description": "Exception thrown when a property is not indexed.",
        "inheritance": [
          "System.Object",
          "System.Exception",
          "System.ApplicationException",
          "Eplan.EplApi.Base.BaseException",
          "Eplan.EplApi.MasterData.MasterDataException",
          "Eplan.EplApi.MasterData.MDNotIndexedPropertyException"
        ]
      },
      {
        "type": "class",
        "name": "MDObjectCreationException",
        "description": "Exception thrown when object creation fails.",
        "inheritance": [
          "System.Object",
          "System.Exception",
          "System.ApplicationException",
          "Eplan.EplApi.Base.BaseException",
          "Eplan.EplApi.MasterData.MasterDataException",
          "Eplan.EplApi.MasterData.MDObjectCreationException"
        ]
      },
      {
        "type": "class",
        "name": "MDObjectFilter",
        "description": "Represents a filter for master data objects."
      },
      {
        "type": "class",
        "name": "MDObjectNotCreatedException",
        "description": "Exception thrown when an object could not be created.",
        "inheritance": [
          "System.Object",
          "System.Exception",
          "System.ApplicationException",
          "Eplan.EplApi.Base.BaseException",
          "Eplan.EplApi.MasterData.MasterDataException",
          "Eplan.EplApi.MasterData.MDObjectCreationException",
          "Eplan.EplApi.MasterData.MDObjectNotCreatedException"
        ]
      },
      {
        "type": "class",
        "name": "MDPart",
        "description": "Represents a part in the master data.",
        "inheritance": [
          "System.Object",
          "Eplan.EplApi.MasterData.PropertiesAndHandleObject",
          "Eplan.EplApi.MasterData.MDPartsDatabaseItem",
          "Eplan.EplApi.MasterData.MDPart"
        ]
      },
      {
        "type": "class",
        "name": "MDPartAssemblyPosition",
        "description": "Represents the position of a part assembly.",
        "inheritance": [
          "System.Object",
          "Eplan.EplApi.MasterData.MDPartsDatabaseItemChildData",
          "Eplan.EplApi.MasterData.MDPartHierarchyPosition",
          "Eplan.EplApi.MasterData.MDPartAssemblyPosition"
        ]
      },
      {
        "type": "class",
        "name": "MDPartHierarchyPosition",
        "description": "Represents a position in the part hierarchy.",
        "inheritance": [
          "System.Object",
          "Eplan.EplApi.MasterData.MDPartsDatabaseItemChildData",
          "Eplan.EplApi.MasterData.MDPartHierarchyPosition"
        ],
        "modifiers": [
          "abstract"
        ]
      },
      {
        "type": "class",
        "name": "MDPartLockedMountingAreaPosition",
        "description": "Represents a locked mounting area position for a part.",
        "inheritance": [
          "System.Object",
          "Eplan.EplApi.MasterData.MDPartsDatabaseItemChildData",
          "Eplan.EplApi.MasterData.MDPartLockedMountingAreaPosition"
        ]
      },
      {
        "type": "class",
        "name": "MDPartModulePosition",
        "description": "Represents the position of a part module.",
        "inheritance": [
          "System.Object",
          "Eplan.EplApi.MasterData.MDPartsDatabaseItemChildData",
          "Eplan.EplApi.MasterData.MDPartHierarchyPosition",
          "Eplan.EplApi.MasterData.MDPartModulePosition"
        ]
      },
      {
        "type": "class",
        "name": "MDPartMountingPanelPosition",
        "description": "Represents the mounting panel position for a part.",
        "inheritance": [
          "System.Object",
          "Eplan.EplApi.MasterData.MDPartsDatabaseItemChildData",
          "Eplan.EplApi.MasterData.MDPartMountingPanelPosition"
        ]
      },
      {
        "type": "class",
        "name": "MDPartPartConstructionPosition",
        "description": "Represents the construction position for a part.",
        "inheritance": [
          "System.Object",
          "Eplan.EplApi.MasterData.MDPartsDatabaseItemChildData",
          "Eplan.EplApi.MasterData.MDPartPartConstructionPosition"
        ]
      },
      {
        "type": "class",
        "name": "MDPartSafetyRelatedValuePosition",
        "description": "Represents a safety-related value position for a part.",
        "inheritance": [
          "System.Object",
          "Eplan.EplApi.MasterData.MDPartsDatabaseItemChildData",
          "Eplan.EplApi.MasterData.MDPartSafetyRelatedValuePosition"
        ]
      },
      {
        "type": "class",
        "name": "MDPartsDatabase",
        "description": "Represents the parts database."
      },
      {
        "type": "class",
        "name": "MDPartsDatabaseItem",
        "description": "Represents an item in the parts database.",
        "inheritance": [
          "System.Object",
          "Eplan.EplApi.MasterData.PropertiesAndHandleObject",
          "Eplan.EplApi.MasterData.MDPartsDatabaseItem"
        ]
      },
      {
        "type": "class",
        "name": "MDPartsDatabaseItem.Enums",
        "description": "Contains enumerations for MDPartsDatabaseItem."
      },
      {
        "type": "class",
        "name": "MDPartsDatabaseItemChildData",
        "description": "Represents child data for a parts database item."
      },
      {
        "type": "class",
        "name": "MDPartsDatabaseItemPropertyList",
        "description": "Represents a property list for a parts database item.",
        "inheritance": [
          "System.Object",
          "Eplan.EplApi.MasterData.PropertiesAndHandleObjectPropertyList",
          "Eplan.EplApi.MasterData.MDPartsDatabaseItemPropertyList"
        ],
        "attributes": [
          {
            "name": "DefaultMember",
            "value": "Property"
          }
        ]
      },
      {
        "type": "class",
        "name": "MDPartsDatabaseTransaction",
        "description": "Represents a transaction in the parts database."
      },
      {
        "type": "class",
        "name": "MDPartsDatabaseTransactionManager",
        "description": "Manages transactions in the parts database.",
        "modifiers": [
          "internal"
        ]
      },
      {
        "type": "class",
        "name": "MDPartsManagement",
        "description": "Manages parts in the master data."
      },
      {
        "type": "class",
        "name": "MDPartSupportBarPosition",
        "description": "Represents the support bar position for a part.",
        "inheritance": [
          "System.Object",
          "Eplan.EplApi.MasterData.MDPartsDatabaseItemChildData",
          "Eplan.EplApi.MasterData.MDPartSupportBarPosition"
        ]
      },
      {
        "type": "class",
        "name": "MDPermissionException",
        "description": "Exception thrown for permission-related issues.",
        "inheritance": [
          "System.Object",
          "System.Exception",
          "System.ApplicationException",
          "Eplan.EplApi.Base.BaseException",
          "Eplan.EplApi.MasterData.MasterDataException",
          "Eplan.EplApi.MasterData.MDSettingValueFailedException",
          "Eplan.EplApi.MasterData.MDPermissionException"
        ]
      },
      {
        "type": "class",
        "name": "MDPlcTemplatePosition",
        "description": "Represents a position for a PLC template.",
        "inheritance": [
          "System.Object",
          "Eplan.EplApi.MasterData.MDPartsDatabaseItemChildData",
          "Eplan.EplApi.MasterData.MDFunctionTemplatePosition",
          "Eplan.EplApi.MasterData.MDPlcTemplatePosition"
        ]
      },
      {
        "type": "class",
        "name": "MDPlugTemplatePosition",
        "description": "Represents a position for a plug template.",
        "inheritance": [
          "System.Object",
          "Eplan.EplApi.MasterData.MDPartsDatabaseItemChildData",
          "Eplan.EplApi.MasterData.MDFunctionTemplatePosition",
          "Eplan.EplApi.MasterData.MDPlugTemplatePosition"
        ]
      },
      {
        "type": "class",
        "name": "MDPropertyAlreadyExistsException",
        "description": "Exception thrown when a property already exists.",
        "inheritance": [
          "System.Object",
          "System.Exception",
          "System.ApplicationException",
          "Eplan.EplApi.Base.BaseException",
          "Eplan.EplApi.MasterData.MasterDataException",
          "Eplan.EplApi.MasterData.MDPropertyAlreadyExistsException"
        ]
      },
      {
        "type": "class",
        "name": "MDPropertyDefinition",
        "description": "Defines a property in the master data."
      },
      {
        "type": "class",
        "name": "MDPropertyNotFoundException",
        "description": "Exception thrown when a property is not found.",
        "inheritance": [
          "System.Object",
          "System.Exception",
          "System.SystemException",
          "System.ArgumentException",
          "Eplan.EplApi.MasterData.MDInvalidArgumentException",
          "Eplan.EplApi.MasterData.MDPropertyNotFoundException"
        ]
      },
      {
        "type": "class",
        "name": "MDPropertyReadOnlyException",
        "description": "Exception thrown when attempting to modify a read-only property.",
        "inheritance": [
          "System.Object",
          "System.Exception",
          "System.ApplicationException",
          "Eplan.EplApi.Base.BaseException",
          "Eplan.EplApi.MasterData.MasterDataException",
          "Eplan.EplApi.MasterData.MDSettingValueFailedException",
          "Eplan.EplApi.MasterData.MDPermissionException",
          "Eplan.EplApi.MasterData.MDPropertyReadOnlyException"
        ]
      },
      {
        "type": "class",
        "name": "MDPropertyValue",
        "description": "Represents a property value in the master data.",
        "modifiers": [
          "sealed"
        ],
        "attributes": [
          {
            "name": "DefaultMember",
            "value": "Item"
          }
        ]
      },
      {
        "type": "class",
        "name": "MDPropertyValueOutOfRangeException",
        "description": "Exception thrown when a property value is out of range.",
        "inheritance": [
          "System.Object",
          "System.Exception",
          "System.SystemException",
          "System.ArgumentException",
          "Eplan.EplApi.MasterData.MDInvalidArgumentException",
          "Eplan.EplApi.MasterData.MDPropertyValueOutOfRangeException"
        ]
      },
      {
        "type": "class",
        "name": "MDSettingValueFailedException",
        "description": "Exception thrown when setting a value fails.",
        "inheritance": [
          "System.Object",
          "System.Exception",
          "System.ApplicationException",
          "Eplan.EplApi.Base.BaseException",
          "Eplan.EplApi.MasterData.MasterDataException",
          "Eplan.EplApi.MasterData.MDSettingValueFailedException"
        ]
      },
      {
        "type": "class",
        "name": "MDSymbol",
        "description": "Represents a symbol in the master data.",
        "inheritance": [
          "System.Object",
          "Eplan.EplApi.MasterData.PropertiesAndHandleObject",
          "Eplan.EplApi.MasterData.MDSymbol"
        ],
        "attributes": [
          {
            "name": "DefaultMember",
            "value": "Variant"
          }
        ]
      },
      {
        "type": "class",
        "name": "MDSymbol.Enums",
        "description": "Contains enumerations for MDSymbol."
      },
      {
        "type": "class",
        "name": "MDSymbol.MDPropertyPlacementsSchema",
        "description": "Represents a schema for property placements in a symbol."
      },
      {
        "type": "class",
        "name": "MDSymbol.MDPropertyPlacementsSchemasList",
        "description": "Represents a list of property placement schemas for a symbol."
      },
      {
        "type": "class",
        "name": "MDSymbolConnectionPoint",
        "description": "Represents a connection point in a symbol."
      },
      {
        "type": "class",
        "name": "MDSymbolLibrary",
        "description": "Represents a symbol library.",
        "inheritance": [
          "System.Object",
          "Eplan.EplApi.MasterData.PropertiesAndHandleObject",
          "Eplan.EplApi.MasterData.MDSymbolLibrary"
        ],
        "attributes": [
          {
            "name": "DefaultMember",
            "value": "Symbol"
          }
        ]
      },
      {
        "type": "class",
        "name": "MDSymbolLibraryPropertyList",
        "description": "Represents a property list for a symbol library.",
        "inheritance": [
          "System.Object",
          "Eplan.EplApi.MasterData.PropertiesAndHandleObjectPropertyList",
          "Eplan.EplApi.MasterData.MDSymbolLibraryPropertyList"
        ],
        "attributes": [
          {
            "name": "DefaultMember",
            "value": "Property"
          }
        ]
      },
      {
        "type": "class",
        "name": "MDSymbolPosition",
        "description": "Represents the position of a symbol."
      },
      {
        "type": "class",
        "name": "MDSymbolPropertyList",
        "description": "Represents a property list for a symbol.",
        "inheritance": [
          "System.Object",
          "Eplan.EplApi.MasterData.PropertiesAndHandleObjectPropertyList",
          "Eplan.EplApi.MasterData.MDSymbolPropertyList"
        ],
        "attributes": [
          {
            "name": "DefaultMember",
            "value": "Property"
          }
        ]
      },
      {
        "type": "class",
        "name": "MDSymbolVariant",
        "description": "Represents a variant of a symbol.",
        "inheritance": [
          "System.Object",
          "Eplan.EplApi.MasterData.PropertiesAndHandleObject",
          "Eplan.EplApi.MasterData.MDSymbolVariant"
        ]
      },
      {
        "type": "class",
        "name": "MDSymbolVariantPropertyList",
        "description": "Represents a property list for a symbol variant.",
        "inheritance": [
          "System.Object",
          "Eplan.EplApi.MasterData.PropertiesAndHandleObjectPropertyList",
          "Eplan.EplApi.MasterData.MDSymbolVariantPropertyList"
        ],
        "attributes": [
          {
            "name": "DefaultMember",
            "value": "Property"
          }
        ]
      },
      {
        "type": "class",
        "name": "MDTerminalTemplatePosition",
        "description": "Represents a position for a terminal template.",
        "inheritance": [
          "System.Object",
          "Eplan.EplApi.MasterData.MDPartsDatabaseItemChildData",
          "Eplan.EplApi.MasterData.MDFunctionTemplatePosition",
          "Eplan.EplApi.MasterData.MDTerminalTemplatePosition"
        ]
      },
      {
        "type": "class",
        "name": "MDTranslationDatabase",
        "description": "Represents the translation database for master data."
      },
      {
        "type": "class",
        "name": "MDUserDefinedPropertyDefinition",
        "description": "Represents a user-defined property definition."
      },
      {
        "type": "class",
        "name": "MDUserDefinedPropertyDefinition.Enums",
        "description": "Contains enumerations for MDUserDefinedPropertyDefinition."
      },
      {
        "type": "class",
        "name": "MDUserDefinedPropertyPosition",
        "description": "Represents the position of a user-defined property.",
        "inheritance": [
          "System.Object",
          "Eplan.EplApi.MasterData.MDPartsDatabaseItemChildData",
          "Eplan.EplApi.MasterData.MDUserDefinedPropertyPosition"
        ]
      },
      {
        "type": "class",
        "name": "MDWireTemplatePosition",
        "description": "Represents a position for a wire template.",
        "inheritance": [
          "System.Object",
          "Eplan.EplApi.MasterData.MDPartsDatabaseItemChildData",
          "Eplan.EplApi.MasterData.MDFunctionTemplatePosition",
          "Eplan.EplApi.MasterData.MDWireTemplatePosition"
        ]
      },
      {
        "type": "class",
        "name": "Properties",
        "description": "Contains property definitions for the master data."
      },
      {
        "type": "class",
        "name": "PropertiesAndHandleObject",
        "description": "Base class for objects with properties and handles.",
        "inheritance": [
          "System.Object",
          "Eplan.EplApi.MasterData.PropertiesAndHandleObject"
        ]
      },
      {
        "type": "class",
        "name": "PropertiesAndHandleObjectPropertyList",
        "description": "Represents a property list for objects with properties and handles.",
        "attributes": [
          {
            "name": "DefaultMember",
            "value": "Property"
          }
        ]
      },
      {
        "type": "enum",
        "name": "MDAccessoryPlacementPosition.BasePoint",
        "description": "Enumeration for base points of accessory placement positions.",
        "inheritance": [
          "System.Enum"
        ]
      },
      {
        "type": "enum",
        "name": "MDConnectionPointPosition.ConnectionPointDirection",
        "description": "Enumeration for connection point directions.",
        "inheritance": [
          "System.Enum"
        ]
      },
      {
        "type": "enum",
        "name": "MDContourElement.ContureType",
        "description": "Enumeration for contour types.",
        "inheritance": [
          "System.Enum"
        ]
      },
      {
        "type": "enum",
        "name": "MDDrillingPosition.DrillingSubType",
        "description": "Enumeration for drilling subtypes.",
        "inheritance": [
          "System.Enum"
        ]
      },
      {
        "type": "enum",
        "name": "MDDrillingPosition.DrillingType",
        "description": "Enumeration for drilling types.",
        "inheritance": [
          "System.Enum"
        ]
      },
      {
        "type": "enum",
        "name": "MDFunctionTemplatePosition.TerminalFunctionType",
        "description": "Enumeration for terminal function types.",
        "inheritance": [
          "System.Enum"
        ]
      },
      {
        "type": "enum",
        "name": "MDObjectFilter.CompareOperator",
        "description": "Enumeration for comparison operators in object filters.",
        "inheritance": [
          "System.Enum"
        ]
      },
      {
        "type": "enum",
        "name": "MDPartLockedMountingAreaPosition.LockedMountingAreaType",
        "description": "Enumeration for locked mounting area types.",
        "inheritance": [
          "System.Enum"
        ]
      },
      {
        "type": "enum",
        "name": "MDPartsDatabase.DataFormat",
        "description": "Enumeration for data formats in the parts database.",
        "inheritance": [
          "System.Enum"
        ]
      },
      {
        "type": "enum",
        "name": "MDPartsDatabase.MDPartsDatabaseType",
        "description": "Enumeration for parts database types.",
        "inheritance": [
          "System.Enum"
        ]
      },
      {
        "type": "enum",
        "name": "MDPartsDatabaseItem.Enums.ProductGroup",
        "description": "Enumeration for product groups.",
        "inheritance": [
          "System.Enum"
        ]
      },
      {
        "type": "enum",
        "name": "MDPartsDatabaseItem.Enums.ProductSubGroup",
        "description": "Enumeration for product subgroups.",
        "inheritance": [
          "System.Enum"
        ]
      },
      {
        "type": "enum",
        "name": "MDPartsDatabaseItem.Enums.ProductTopGroup",
        "description": "Enumeration for product top groups.",
        "inheritance": [
          "System.Enum"
        ]
      },
      {
        "type": "enum",
        "name": "MDPartsDatabaseItem.Enums.Type",
        "description": "Enumeration for parts database item types.",
        "inheritance": [
          "System.Enum"
        ]
      },
      {
        "type": "enum",
        "name": "MDPartsManagement.ImportIdentifier",
        "description": "Enumeration for import identifiers.",
        "inheritance": [
          "System.Enum"
        ]
      },
      {
        "type": "enum",
        "name": "MDPartsManagement.ImportMode",
        "description": "Enumeration for import modes.",
        "inheritance": [
          "System.Enum"
        ]
      },
      {
        "type": "enum",
        "name": "MDPropertyDefinition.MDPropertyType",
        "description": "Enumeration for property types.",
        "inheritance": [
          "System.Enum"
        ]
      },
      {
        "type": "enum",
        "name": "MDSymbol.Enums.SymbolType",
        "description": "Enumeration for symbol types.",
        "inheritance": [
          "System.Enum"
        ]
      },
      {
        "type": "enum",
        "name": "MDSymbolLibrary.Mode",
        "description": "Enumeration for symbol library modes.",
        "inheritance": [
          "System.Enum"
        ]
      },
      {
        "type": "enum",
        "name": "MDUserDefinedPropertyDefinition.Enums.CategoryType",
        "description": "Enumeration for category types of user-defined properties.",
        "inheritance": [
          "System.Enum"
        ]
      },
      {
        "type": "enum",
        "name": "MDUserDefinedPropertyDefinition.Enums.ClientType",
        "description": "Enumeration for client types of user-defined properties.",
        "inheritance": [
          "System.Enum"
        ]
      },
      {
        "type": "enum",
        "name": "MDUserDefinedPropertyDefinition.Enums.InputAidType",
        "description": "Enumeration for input aid types of user-defined properties.",
        "inheritance": [
          "System.Enum"
        ]
      },
      {
        "type": "enum",
        "name": "Properties.MDPartsDatabaseItem",
        "description": "Enumeration for parts database item properties.",
        "inheritance": [
          "System.Enum"
        ]
      },
      {
        "type": "enum",
        "name": "Properties.MDSymbol",
        "description": "Enumeration for symbol properties.",
        "inheritance": [
          "System.Enum"
        ]
      },
      {
        "type": "enum",
        "name": "Properties.MDSymbolLibrary",
        "description": "Enumeration for symbol library properties.",
        "inheritance": [
          "System.Enum"
        ]
      },
      {
        "type": "enum",
        "name": "Properties.MDSymbolVariant",
        "description": "Enumeration for symbol variant properties.",
        "inheritance": [
          "System.Enum"
        ]
      },
      {
        "type": "struct",
        "name": "MDConnectionCategory",
        "description": "Represents a connection category in the master data.",
        "inheritance": [
          "System.ValueType"
        ]
      },
      {
        "type": "delegate",
        "name": "PropertySetNotification",
        "description": "Delegate for property set notifications.",
        "modifiers": [
          "internal"
        ]
      }
    ]
  },
  {
    "type": "namespace",
    "name": "Eplan.EplApi.Base",
    "description": "Contains core classes and interfaces for EPLAN base functionality.",
    "members": [
      {
        "type": "class",
        "name": "BaseException",
        "description": "Base exception class for EPLAN-specific exceptions.",
        "inheritance": [
          "System.Object",
          "System.Exception",
          "System.ApplicationException",
          "Eplan.EplApi.Base.BaseException"
        ]
      },
      {
        "type": "class",
        "name": "Context",
        "description": "Provides context information for EPLAN operations.",
        "inheritance": [
          "System.Object",
          "Eplan.EplApi.Base.Context"
        ],
        "interfaces": [
          "IContext"
        ]
      },
      {
        "type": "class",
        "name": "ContextParameterBlock",
        "description": "Represents a block of context parameters."
      },
      {
        "type": "class",
        "name": "Decider",
        "description": "Handles decision-making processes in EPLAN.",
        "codeExample": "Decider eDecision = new Decider();\r\nEnumDecisionReturn eAnswer = eDecision.Decide(eOkCancelDecision, \"Show some dialog text\", \"Eplan Decider\", eOK, eOK);\nif (eAnswer == eOK)\r\n{\n    // Do your work\n}"
      },
      {
        "type": "class",
        "name": "EplAssert",
        "description": "Provides assertion functionality for EPLAN.",
        "codeExample": "object testObject = null;\r\nEplan.EplApi.Base.EplAssert oAssert = new Eplan.EplApi.Base.EplAssert();\r\noAssert.Assert(testObject != null, \"The testobject must not be null!\");"
      },
      {
        "type": "class",
        "name": "EplTrace",
        "description": "Provides tracing functionality for EPLAN.",
        "codeExample": "Eplan.EplApi.Base.EplTrace oTrace = new Eplan.EplApi.Base.EplTrace();\r\noTrace.Trace(\"Eplan.EplApi.Base\", \"Start executing function abc\");"
      },
      {
        "type": "class",
        "name": "FileSelectDecisionContext",
        "description": "Provides context for file selection decisions.",
        "codeExample": "FileSelectDecisionContext fileContext = new FileSelectDecisionContext(\"ExlSheetSelector\", EnumDecisionReturn.eCANCEL);\r\nfileContext.Title = \"Select Excel file\";\r\nfileContext.AllowMultiSelect = false;\r\nfileContext.DefaultExtension = \"xls\";\r\nfileContext.AddFilter(\"Excel 97 files (*.xls)\", \"*.xls\");\r\nfileContext.AddFilter(\"Excel files (*.xlsx)\", \"*.xlsx\");\r\nfileContext.AddFilter(\"Fenstermakro, Symbolmakro (*.ema, *.ems)\", \"*.ema;*.ems\");\r\nfileContext.AddFilter(\"All files (*.*)\", \"*.*\");\r\n\r\nDecider oDecision = new Decider();\r\nEnumDecisionReturn eAnswer = oDecision.Decide(fileContext);\nif (eAnswer != EnumDecisionReturn.eOK)\r\n{\n    return true;\r\n}\nstring sExlFile = fileContext.GetFiles()[0];"
      },
      {
        "type": "class",
        "name": "ISOCode",
        "description": "Represents ISO codes in EPLAN."
      },
      {
        "type": "class",
        "name": "LanguageList",
        "description": "Represents a list of languages.",
        "inheritance": [
          "System.Object",
          "System.Collections.ArrayList",
          "Eplan.EplApi.Base.LanguageList"
        ],
        "attributes": [
          {
            "name": "DefaultMember",
            "value": "Item"
          },
          {
            "name": "DebuggerTypeProxy",
            "value": "System.Collections.ArrayList/ArrayListDebugView"
          },
          {
            "name": "DebuggerDisplay",
            "value": "Count = {Count}"
          }
        ]
      },
      {
        "type": "class",
        "name": "Languages",
        "description": "Provides functionality related to languages in EPLAN."
      },
      {
        "type": "class",
        "name": "LockingException",
        "description": "Exception thrown for locking-related issues.",
        "inheritance": [
          "System.Object",
          "System.Exception",
          "System.ApplicationException",
          "Eplan.EplApi.Base.BaseException",
          "Eplan.EplApi.Base.LockingException"
        ]
      },
      {
        "type": "class",
        "name": "MultiLangString",
        "description": "Represents a multi-language string."
      },
      {
        "type": "class",
        "name": "ParserParameter",
        "description": "Represents parameters for parsing operations."
      },
      {
        "type": "class",
        "name": "PathMap",
        "description": "Manages path mappings in EPLAN."
      },
      {
        "type": "class",
        "name": "Progress",
        "description": "Provides functionality for progress reporting.",
        "codeExample": "Progress oProgress = new Progress(\"SimpleProgress\");\r\noProgress.ShowImmediately();\r\n//part 1\r\noProgress.BeginPart(25.0, \"\");\r\noProgress.SetActionText(\"part1\");\r\noProgress.SetNeededSteps(1);\r\noProgress.Step(1);\r\nSystem.Threading.Thread.Sleep(2500); // TODO: Some processing\r\noProgress.EndPart(false);\r\n//part 2\r\noProgress.BeginPart(30.0, \"\");\r\noProgress.SetNeededSteps(3);\r\n// call SetNeededSteps with the count of steps following\r\noProgress.SetActionText(\"part2 step1\");\r\noProgress.Step(1);\r\nSystem.Threading.Thread.Sleep(1000); // TODO: Some processing\r\noProgress.SetActionText(\"part2 step2\");\r\noProgress.Step(1);\r\nSystem.Threading.Thread.Sleep(1000); // TODO: Some processing\r\noProgress.SetActionText(\"part2 step3\");\r\noProgress.Step(1);\r\nSystem.Threading.Thread.Sleep(1000); // TODO: Some processing\r\noProgress.EndPart(false);\r\n//part 3\r\noProgress.BeginPart(45.0, \"\"); // Here is a sum of 100% reached!\r\noProgress.SetActionText(\"part3\");\r\noProgress.SetNeededSteps(1);\r\noProgress.Step(1);\r\nSystem.Threading.Thread.Sleep(4500); // TODO: Some processing\r\noProgress.EndPart(true); // The window is destroyed with the call EndPart(true) and the progress is prepared to be destroyed."
      },
      {
        "type": "class",
        "name": "ProgressFactory",
        "description": "Factory class for creating Progress objects."
      },
      {
        "type": "class",
        "name": "Range",
        "description": "Represents a range of values."
      },
      {
        "type": "class",
        "name": "SchemeSetting",
        "description": "Manages scheme settings in EPLAN.",
        "codeExample": "SchemeSetting oSchemeSetting = new SchemeSetting();\r\noSchemeSetting.Init(\"USER.DXF.SCHEMES\");\r\nstring strSchemeName = \"DXFSchemeToSelect\";\r\nif (oSchemeSetting.CheckIfSchemeExists(strSchemeName))\r\n{\r\n    oSchemeSetting.SetScheme(strSchemeName);\r\n    int iExportFormatVersion = oSchemeSetting.GetNumericSetting(\"EXPORT.FORMAT_VERSION\", 0);\r\n}"
      },
      {
        "type": "class",
        "name": "SettingNode",
        "description": "Represents a node in the settings hierarchy.",
        "codeExample": "SettingNode oSettingNode = new SettingNode(\"STATION.AF.Modules\");\r\nStringCollection oSubnodes = new StringCollection();\r\noSettingNode.GetListOfNodes(ref oSubnodes, false);\r\nforeach (string sSubNode in oSubnodes)\r\n{\r\n    SettingNode oSubNode = oSettingNode.GetSubNode(sSubNode);\r\n    Console.WriteLine(oSubNode.GetNodePath());\r\n}"
      },
      {
        "type": "class",
        "name": "Settings",
        "description": "Manages EPLAN settings.",
        "inheritance": [
          "System.Object",
          "Eplan.EplApi.Base.Settings"
        ],
        "interfaces": [
          "ISettings"
        ],
        "codeExample": "try {\r\n  String strGuiLanguage = new Settings().GetStringSetting(\"USER.SYSTEM.GUI.LANGUAGE\", 0);\r\n  new Decider().Decide(EnumDecisionType.eOkDecision, \"The user interface language is set to: \" + strGuiLanguage, \"\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK);\r\n} catch (BaseException exc) {\r\n  String strMessage = exc.Message;\r\n  new Decider().Decide(EnumDecisionType.eOkDecision, \"Exception: \" + strMessage, \"\", EnumDecisionReturn.eOK, EnumDecisionReturn.eOK);\r\n}"
      },
      {
        "type": "class",
        "name": "SysMessagesCollection",
        "description": "Represents a collection of system messages.",
        "codeExample": "int nBookmark = new Eplan.EplApi.Base.BaseException().GetBookmarkID();\r\nEplan.EplApi.Base.SysMessagesCollection colSysMsg = new Eplan.EplApi.Base.SysMessagesCollection(nBookmark, Eplan.EplApi.Base.MessageLevel.Error);\r\nforeach (Eplan.EplApi.Base.BaseException osysMsg in colSysMsg)\r\n{\r\n    if (osysMsg != null)\r\n    {\r\n        Console.WriteLine(\"Fehler: \" + osysMsg.ToString());\r\n    }\r\n}"
      },
      {
        "type": "class",
        "name": "SysMessagesEnumerator",
        "description": "Enumerates system messages.",
        "codeExample": "SysMessagesCollection colSysMsg = new SysMessagesCollection();\r\nSysMessagesEnumerator itSysMsg = colSysMsg.GetSysMsgEnumerator();\r\nint nNr = 0;\r\n\r\nitSysMsg.MoveNext(); // move to first item in collection\r\ndo {\r\n    BaseException osysMsg = itSysMsg.Current as BaseException;\r\n    if (osysMsg != null)\r\n    {\r\n        nNr++;\r\n    }\r\n} while (itSysMsg.MoveNext());"
      },
      {
        "type": "class",
        "name": "TraceListener",
        "description": "Listens to trace messages in EPLAN.",
        "inheritance": [
          "System.Object",
          "System.MarshalByRefObject",
          "System.Diagnostics.TraceListener",
          "Eplan.EplApi.Base.TraceListener"
        ],
        "codeExample": "Eplan.EplApi.Base.TraceListener oTrace = new Eplan.EplApi.Base.TraceListener();\r\nSystem.Diagnostics.Trace.Listeners.Add(oTrace);\r\n// When new trace listeners are created and added, they must be removed again later!\r\noTrace.WriteLine(\"Begin Execute\"); // Only write to the EPLAN system message management.\r\nSystem.Diagnostics.Trace.WriteLine(\"Begin Execute\"); // Send to all trace listeners.\r\noTrace.Close();\r\nSystem.Diagnostics.Trace.Listeners.Remove(oTrace);"
      },
      {
        "type": "class",
        "name": "UnitParser",
        "description": "Parses and converts units.",
        "codeExample": "UnitParser oUnitParser = new UnitParser();\r\n\r\nParserParameter oParserParameter = new ParserParameter();\r\noParserParameter.UnitID = Unit.Length_cm; //Set value in cm\r\noUnitParser.Set(\"200 cm\", oParserParameter);\r\n\r\n//Get value in mm\r\nParserParameter oParserParameter_mm = new ParserParameter();\r\noParserParameter_mm.UnitID = Unit.Length_mm;\r\ndouble dValue_mm = oUnitParser.ValueToUnit(oParserParameter_mm);\r\n\r\n//Get value in m\r\nParserParameter oParserParameter_m = new ParserParameter();\r\noParserParameter_m.UnitID = Unit.Length_m;\r\ndouble dValue_m = oUnitParser.ValueToUnit(oParserParameter_m);"
      },
      {
        "type": "class",
        "name": "ListSelectDecisionContext",
        "description": "Provides context for list selection decisions.",
        "codeExample": "StringCollection collection = new StringCollection();\r\ncollection.Add(\"Content 1\");\r\ncollection.Add(\"Content 2\");\r\ncollection.Add(\"Content 3\");\r\n\r\nListSelectDecisionContext listSelectDecisionContext = new ListSelectDecisionContext(collection, \"Content 2\", \"Dialog Title\");\r\n\r\nDecider oDecision = new Decider();\r\nEnumDecisionReturn eAnswer = oDecision.Decide(listSelectDecisionContext);\r\nif (eAnswer != EnumDecisionReturn.eOK)\r\n{\r\n    return false;\r\n}\r\nif (listSelectDecisionContext.AllowMultiSelect)\r\n{\r\n    StringCollection selectedEntries = listSelectDecisionContext.SelectedEntries;\r\n}\r\nelse\r\n{\r\n    long index = listSelectDecisionContext.SelectedIndex;\r\n    string strEntry = listSelectDecisionContext.SelectedEntry;\r\n}"
      },
      {
        "type": "enum",
        "name": "EnumDecisionIcon",
        "description": "Enumeration of decision icons.",
        "inheritance": [
          "System.Enum"
        ]
      },
      {
        "type": "enum",
        "name": "EnumDecisionReturn",
        "description": "Enumeration of decision return values.",
        "inheritance": [
          "System.Enum"
        ]
      },
      {
        "type": "enum",
        "name": "EnumDecisionType",
        "description": "Enumeration of decision types.",
        "inheritance": [
          "System.Enum"
        ]
      },
      {
        "type": "enum",
        "name": "ISettings.CreationFlag",
        "description": "Enumeration of creation flags for settings.",
        "inheritance": [
          "System.Enum"
        ]
      },
      {
        "type": "enum",
        "name": "ISettings.SettingType",
        "description": "Enumeration of setting types.",
        "inheritance": [
          "System.Enum"
        ]
      },
      {
        "type": "enum",
        "name": "ISOCode.Language",
        "description": "Enumeration of ISO language codes.",
        "inheritance": [
          "System.Enum"
        ]
      },
      {
        "type": "enum",
        "name": "MessageLevel",
        "description": "Enumeration of message levels.",
        "inheritance": [
          "System.Enum"
        ]
      },
      {
        "type": "enum",
        "name": "Unit",
        "description": "Enumeration of units.",
        "inheritance": [
          "System.Enum"
        ]
      },
      {
        "type": "enum",
        "name": "UnitGroup",
        "description": "Enumeration of unit groups.",
        "inheritance": [
          "System.Enum"
        ]
      },
      {
        "type": "struct",
        "name": "PointD",
        "description": "Represents a point with double-precision floating-point coordinates.",
        "inheritance": [
          "System.ValueType"
        ]
      },
      {
        "type": "struct",
        "name": "PointD3D",
        "description": "Represents a 3D point with double-precision floating-point coordinates.",
        "inheritance": [
          "System.ValueType"
        ]
      },
      {
        "type": "struct",
        "name": "RectangleD",
        "description": "Represents a rectangle with double-precision floating-point coordinates.",
        "inheritance": [
          "System.ValueType"
        ]
      },
      {
        "type": "interface",
        "name": "IContext",
        "description": "Interface for context objects in EPLAN."
      },
      {
        "type": "interface",
        "name": "IEplProgress",
        "description": "Interface for progress reporting in EPLAN."
      },
      {
        "type": "interface",
        "name": "ISettings",
        "description": "Interface for managing settings in EPLAN."
      }
    ]
  },
  {
    "type": "namespace",
    "name": "Eplan.EplApi.Base.Enums",
    "description": "Contains enumerations used in EPLAN base functionality.",
    "members": [
      {
        "type": "enum",
        "name": "BusSystemType",
        "description": "Enumeration of bus system types.",
        "inheritance": [
          "System.Enum"
        ]
      },
      {
        "type": "enum",
        "name": "FunctionCategory",
        "description": "Enumeration of function categories.",
        "inheritance": [
          "System.Enum"
        ]
      },
      {
        "type": "enum",
        "name": "ItemType",
        "description": "Enumeration of item types.",
        "inheritance": [
          "System.Enum"
        ]
      },
      {
        "type": "enum",
        "name": "PinPotentialType",
        "description": "Enumeration of pin potential types.",
        "inheritance": [
          "System.Enum"
        ]
      }
    ]
  },
  {
    "namespace": "Eplan.EplApi.Base",
    "classes": {
      "SysMessagesCollection": {
        "description": "System-wide message tree containing BaseException objects",
        "inheritance": [
          "System.Object"
        ],
        "remarks": [
          "Each message (BaseException) may contain a further inner exception",
          "Only Message, Warning, Error, and Fatal Error types are listed",
          "Assert and Trace are not added to SysMessagesCollection",
          "Consecutive messages with same text are joined into one item",
          "Collection content independent of logging mode",
          "Advanced logging mode includes Asserts and Traces in EplLog.txt",
          "In immediate mode, identical messages are not joined"
        ],
        "constructors": {
          "SysMessagesCollection()": {
            "description": "Default constructor - contains all existing system messages"
          },
          "SysMessagesCollection(Int32, MessageLevel)": {
            "description": "Constructor with bookmark filter and error level",
            "parameters": {
              "nBookmarkID": "Only messages with this value or higher. 0 means no filter",
              "nErrLevel": "Minimum severity level to include. MessageLevel.Trace includes all"
            }
          },
          "SysMessagesCollection(Int32, Int32, MessageLevel)": {
            "description": "Constructor with start/end bookmarks and error level",
            "parameters": {
              "nBookmarkIDStart": "Starting bookmark value for messages",
              "nBookmarkIDEnd": "Ending bookmark value for messages",
              "nErrLevel": "Minimum severity level to include"
            }
          }
        },
        "properties": {
          "BookmarkIDEnd": {
            "type": "Int32",
            "description": "End bookmark identifier"
          },
          "BookmarkIDStart": {
            "type": "Int32",
            "description": "Start bookmark identifier"
          },
          "Count": {
            "type": "Int32",
            "description": "Number of elements in collection"
          }
        },
        "methods": {
          "GetEnumerator": {
            "returns": "IEnumerator",
            "description": "Returns standard collection enumerator"
          },
          "GetSysMsgEnumerator": {
            "returns": "SysMessagesEnumerator",
            "description": "Returns typed message enumerator"
          }
        },
        "examples": {
          "error_check": {
            "description": "Check for errors example",
            "code": [
              "int nBookmark = new Eplan.EplApi.Base.BaseException().GetBookmarkID();",
              "Eplan.EplApi.Base.SysMessagesCollection colSysMsg = new Eplan.EplApi.Base.SysMessagesCollection(nBookmark, Eplan.EplApi.Base.MessageLevel.Error);",
              "foreach(Eplan.EplApi.Base.BaseException osysMsg in colSysMsg)",
              "{",
              "    if (osysMsg != null)",
              "    {",
              "        Console.WriteLine(\"Fehler: \" + osysMsg.ToString());",
              "    }",
              "}"
            ]
          }
        }
      },
      "SysMessagesEnumerator": {
        "description": "Supports iteration over SysMessagesCollection",
        "inheritance": [
          "System.Object"
        ],
        "constructors": {
          "SysMessagesEnumerator()": {
            "description": "Default constructor"
          }
        },
        "properties": {
          "Current": {
            "type": "object",
            "description": "Gets current element in collection"
          }
        },
        "methods": {
          "Dispose": {
            "returns": "void",
            "description": "Releases resources"
          },
          "GetCount": {
            "returns": "int",
            "description": "Gets number of messages"
          },
          "MoveNext": {
            "returns": "bool",
            "description": "Advances to next element"
          },
          "Reset": {
            "returns": "void",
            "description": "Returns to start position"
          }
        },
        "examples": {
          "full_iteration": {
            "description": "Iterate complete message tree",
            "code": [
              "SysMessagesCollection colSysMsg = new SysMessagesCollection();",
              "SysMessagesEnumerator itSysMsg = colSysMsg.GetSysMsgEnumerator();",
              "int nNr=0;",
              "itSysMsg.MoveNext();",
              "do",
              "{",
              "    BaseException osysMsg = itSysMsg.Current as BaseException;",
              "    if (osysMsg != null)",
              "    {",
              "        nNr++;",
              "    }",
              "} while(itSysMsg.MoveNext());"
            ]
          },
          "error_iteration": {
            "description": "Iterate errors since bookmark",
            "code": [
              "SysMessagesCollection colSysMsg = new SysMessagesCollection(nBookmark, Eplan.EplApi.Base.MessageLevel.Error);",
              "SysMessagesEnumerator itSysMsg = colSysMsg.GetSysMsgEnumerator();",
              "int nNr=0;",
              "itSysMsg.MoveNext();",
              "do",
              "{",
              "    BaseException osysMsg = itSysMsg.Current as BaseException;",
              "    if (osysMsg != null)",
              "    {",
              "        nNr++;",
              "    }",
              "} while(itSysMsg.MoveNext());"
            ]
          }
        }
      },
      "BaseException": {
        "methods": {
          "GetBookmarkID": {
            "returns": "int",
            "description": "Sets label in system message management",
            "example": {
              "description": "Get messages since bookmark",
              "code": [
                "int nBookmark = new Eplan.EplApi.Base.BaseException().GetBookmarkID();",
                "BaseException oBaseException = new BaseException(\"Exception message\", MessageLevel.Error);",
                "oBaseException.FixMessage();",
                "SysMessagesCollection colSysMsg = new SysMessagesCollection(nBookmark, Eplan.EplApi.Base.MessageLevel.Error);",
                "SysMessagesEnumerator itSysMsg = colSysMsg.GetSysMsgEnumerator();"
              ]
            }
          },
          "GetMessageIndex": {
            "returns": "string",
            "description": "Returns S-number of message. Returns 'S000000' if no ID defined"
          },
          "GetMessageText": {
            "returns": "string",
            "description": "Returns message text without index"
          }
        },
        "properties": {
          "MessageLevel": {
            "type": "MessageLevel",
            "description": "Message severity level"
          },
          "NumberOfOccurrences": {
            "type": "int",
            "description": "Number of consecutive identical messages joined together"
          }
        }
      }
    },
    "enums": {
      "MessageLevel": {
        "type": "System.Enum",
        "members": {
          "Trace": {
            "value": 0,
            "description": "Trace message for developers, appears in EplLog with Advanced mode"
          },
          "Message": {
            "value": 1,
            "description": "Note"
          },
          "Warning": {
            "value": 2,
            "description": "Warning"
          },
          "Assert": {
            "value": 3,
            "description": "Lowest error level, not visible in GUI"
          },
          "Error": {
            "value": 4,
            "description": "Error"
          },
          "FatalError": {
            "value": 5,
            "description": "Fatal Error"
          }
        }
      }
    },
    "configuration_notes": {
      "logging_modes": {
        "normal": "Standard logging to EplLog.txt",
        "advanced": "Includes Assert and Trace messages",
        "immediate": "Prevents message joining"
      },
      "configuration_tools": [
        "EPLAN Diagnose dialog",
        "ELogFileConfigToolu.exe in bin folder"
      ]
    }
  },
  {
    "scriptTemplate": {
        "baseImports": [
            "using Eplan.EplApi.ApplicationFramework;",
            "using Eplan.EplApi.Scripting;"
        ],
        "classStructure": {
            "className": "Class",
            "methodAttribute": "[Start]",
            "methodName": "Function",
            "methodReturnType": "void",
            "baseCode": {
                "initialization": [
                    "CommandLineInterpreter oCLI = new CommandLineInterpreter();",
                    "ActionCallingContext acc = new ActionCallingContext();"
                ],
                "execution": "oCLI.Execute(\"{actionName}\", acc);",
                "return": "return;"
            }
        },
        "codeStyle": {
            "doNotInclude": [
                "try-catch blocks",
                "error logging",
                "custom error handling",
                "message boxes",
                "console outputs"
            ],
            "reasoning": [
                "EPLAN handles all error management internally",
                "EPLAN provides its own logging system",
                "Exceptions are handled by EPLAN's BaseException system",
                "User notifications are managed by EPLAN"
            ],
            "bestPractices": [
                "Keep scripts minimal and focused",
                "Use only necessary parameters",
                "Follow EPLAN's command structure exactly",
                "Use full paths with @ prefix for strings",
                "Don't use $ for message boxes"
            ]
        },
        "parameterHandling": {
            "method": "acc.AddParameter(\"{parameterName}\", \"{parameterValue}\");",
            "parameterTypes": {
                "string": {
                    "format": "@\"{value}\"",
                    "needsQuotes": true,
                    "pathHandling": "Use @ prefix for paths"
                },
                "integer": {
                    "format": "{value}",
                    "needsQuotes": false
                },
                "number": {
                    "format": "{value}",
                    "needsQuotes": false
                }
            }
        }
    },
    "scriptGeneration": {
        "minimumStructure": {
            "required": [
                "Base imports",
                "Class definition",
                "Start attribute",
                "Function definition",
                "CLI and ACC initialization",
                "Parameter addition",
                "Action execution",
                "Return statement"
            ],
            "template": [
                "using Eplan.EplApi.ApplicationFramework;",
                "using Eplan.EplApi.Scripting;",
                "",
                "public class Class",
                "{",
                "    [Start]",
                "    public void Function()",
                "    {",
                "        CommandLineInterpreter oCLI = new CommandLineInterpreter();",
                "        ActionCallingContext acc = new ActionCallingContext();",
                "",
                "        {parameters}",
                "",
                "        oCLI.Execute(\"{actionName}\", acc);",
                "",
                "        return;",
                "    }",
                "}"
            ]
        }
    },
    "examples": {
        "partslist": {
            "export": {
                "description": "Export parts list to CSV",
                "parameters": {
                    "TYPE": "EXPORT",
                    "PROJECTNAME": "C:\\Projects\\EPLAN\\EPLAN_Sample_Project.elk",
                    "FORMAT": "XPalCSVConverter",
                    "EXPORTFILE": "C:\\temp\\PartsList.csv"
                },
                "resultingScript": [
                    "using Eplan.EplApi.ApplicationFramework;",
                    "using Eplan.EplApi.Scripting;",
                    "",
                    "public class Class",
                    "{",
                    "    [Start]",
                    "    public void Function()",
                    "    {",
                    "        CommandLineInterpreter oCLI = new CommandLineInterpreter();",
                    "        ActionCallingContext acc = new ActionCallingContext();",
                    "",
                    "        acc.AddParameter(\"TYPE\", \"EXPORT\");",
                    "        acc.AddParameter(\"PROJECTNAME\", @\"C:\\Projects\\EPLAN\\EPLAN_Sample_Project.elk\");",
                    "        acc.AddParameter(\"FORMAT\", \"XPalCSVConverter\");",
                    "        acc.AddParameter(\"EXPORTFILE\", @\"C:\\temp\\PartsList.csv\");",
                    "",
                    "        oCLI.Execute(\"partslist\", acc);",
                    "",
                    "        return;",
                    "    }",
                    "}"
                ]
            }
        }
    },
    "parameterValidation": {
        "rules": {
            "TYPE": {
                "required": true,
                "mustBeFirstParameter": true,
                "validValues": ["IMPORT", "EXPORT", "IMPORTTOSYSTEM", "EXPORTFROMSYSTEM", "DELETESTOREDPROPERTIES"]
            },
            "general": {
                "orderingRules": [
                    "TYPE must be first parameter",
                    "PROJECTNAME should be second when included",
                    "Format-related parameters should follow",
                    "Specific action parameters last"
                ]
            }
        }
    }
  },
  {
    "namespace": "Eplan.EplApi.Base",
    "classes": [
      {
        "name": "PathMap",
        "description": "Class for managing path variables in EPLAN.",
        "methods": [
          {
            "name": "SubstitutePath",
            "description": "Replaces path variables with their current values.",
            "parameters": [
              {
                "name": "path",
                "type": "string",
                "description": "The path string containing variables to be replaced."
              }
            ],
            "returnType": "string",
            "example": "string fullPath = PathMap.SubstitutePath(\"$(PROJECTPATH)\");"
          }
        ],
        "pathVariables": [
          {
            "variable": "$(PROJECTNAME)",
            "description": "The name of the current project without directory path or file extension.",
            "example": "R0048767E5IMS105-02.03"
          },
          {
            "variable": "$(PROJECTPATH)",
            "description": "The full directory path of the current project.",
            "example": "Y:\\Projects\\EPLAN\\"
          },
          {
            "variable": "$(LOCALDATE)",
            "description": "Current date in the format YYYYMMDD.",
            "example": "20241218"
          },
          {
            "variable": "$(LOCALTIME)",
            "description": "Current time in the format HHMMSS.",
            "example": "123456"
          },
          {
            "variable": "$(TMP)",
            "description": "The directory used by the operating system for temporary files.",
            "example": "C:\\Users\\User\\AppData\\Local\\Temp\\"
          },
          {
            "variable": "$(MD_DOCUMENTS)",
            "description": "A user-defined directory for documents specified in the settings.",
            "example": "C:\\EPLAN\\Documents\\"
          },
          {
            "variable": "$(ENVVAR_<Variable_Name>)",
            "description": "Custom environment variable defined in the operating system.",
            "example": "$(ENVVAR_USERNAME)"
          }
        ],
        "notes": [
          "Path variables standardize and simplify references within EPLAN.",
          "It is recommended to validate the generated path before using it for critical operations.",
          "Environment variables can be defined and manipulated using the EPLAN API."
        ]
      }
    ]
  }  
]