{
  "eplanGUIExamples": {
    "metadata": {
      "version": "1.0",
      "description": "EPLAN GUI customization examples for ribbons and context menus",
      "category": "User Interface"
    }
  },
  "progressBars": {
    "name": "Progress Bar Examples",
    "description": "Creating and managing progress indicators",
    "examples": [
      {
        "id": "simpleProgress",
        "name": "Simple Progress Bar",
        "description": "Basic progress bar with steps and cancellation support",
        "script": [
          "using Eplan.EplApi.Base;",
          "using Eplan.EplApi.Scripting;",
          "using System.Threading;",
          "",
          "public class _08_Progressbar_01_SimpleProgress",
          "{",
          "  [Start]",
          "  public void Function()",
          "  {",
          "    Progress progress = new Progress(\"SimpleProgress\");",
          "    progress.SetAllowCancel(true);",
          "    progress.SetAskOnCancel(true);",
          "    progress.SetNeededSteps(3);",
          "    progress.SetTitle(\"My progress\");",
          "    progress.ShowImmediately();",
          "",
          "    try",
          "    {",
          "      if (!progress.Canceled())",
          "      {",
          "        progress.SetActionText(\"Step 1\");",
          "        progress.SetTitle(\"Title 1\");",
          "        progress.Step(1);",
          "",
          "        Thread.Sleep(1000);",
          "      }",
          "",
          "      if (!progress.Canceled())",
          "      {",
          "        progress.SetActionText(\"Step 2\");",
          "        progress.SetTitle(\"Title 2\");",
          "        progress.Step(1);",
          "",
          "        Thread.Sleep(1000);",
          "      }",
          "",
          "      if (!progress.Canceled())",
          "      {",
          "        progress.SetActionText(\"Step 3\");",
          "        progress.SetTitle(\"Title 3\");",
          "        progress.Step(1);",
          "",
          "        Thread.Sleep(1000);",
          "      }",
          "    }",
          "    finally",
          "    {",
          "      progress.EndPart(true);",
          "    }",
          "  }",
          "}"
        ]
      },
      {
        "id": "enhancedProgress",
        "name": "Enhanced Progress with Actions",
        "description": "Progress bar integrated with EPLAN actions",
        "script": [
          "using Eplan.EplApi.ApplicationFramework;",
          "using Eplan.EplApi.Base;",
          "using Eplan.EplApi.Scripting;",
          "",
          "public class _08_Progressbar_02_EnhancedProgress",
          "{",
          "  [Start]",
          "  public void Function()",
          "  {",
          "    CommandLineInterpreter cli = new CommandLineInterpreter();",
          "",
          "    Progress progress = new Progress(\"EnhancedProgress\");",
          "    progress.SetAllowCancel(false);",
          "    progress.ShowImmediately();",
          "",
          "    try",
          "    {",
          "      progress.BeginPart(33, \"Part 1\");",
          "      cli.Execute(\"generate /TYPE:CONNECTIONS\");",
          "      progress.EndPart();",
          "",
          "      progress.BeginPart(33, \"Part 2\");",
          "      cli.Execute(\"reports\");",
          "      progress.EndPart();",
          "",
          "      progress.BeginPart(33, \"Part 3\");",
          "      cli.Execute(\"compress /FILTERSCHEME:Standard\");",
          "      progress.EndPart();",
          "    }",
          "    finally",
          "    {",
          "      progress.EndPart(true);",
          "    }",
          "  }",
          "}"
        ]
      }
    ]
  },
    "categories": {
      "ribbonCustomization": {
        "name": "Ribbon Bar Customization",
        "description": "Creating custom ribbon tabs, groups, and commands",
        "examples": [
          {
            "id": "ribbonTab",
            "name": "Custom Ribbon Tab with Commands",
            "description": "Create a custom ribbon tab with command groups and multilingual support",
            "script": [
              "using System.Windows.Forms;",
              "using Eplan.EplApi.Base;",
              "using Eplan.EplApi.Gui;",
              "using Eplan.EplApi.Scripting;",
              "",
              "class _07_RibbonContextMenus_01_Ribbon",
              "{",
              "  private const string ACTION_NAME = \"RibbonAction\";",
              "",
              "  private MultiLangString TAB_NAME",
              "  {",
              "    get",
              "    {",
              "      MultiLangString tabName = new MultiLangString();",
              "      tabName.AddString(ISOCode.Language.L_de_DE, \"Mein Tab\");",
              "      tabName.AddString(ISOCode.Language.L_en_US, \"My Tab\");",
              "      return tabName;",
              "    }",
              "  }",
              "",
              "  [DeclareRegister]",
              "  public void Register()",
              "  {",
              "    RibbonBar ribbonBar = new RibbonBar();",
              "    RibbonTab ribbonTab = ribbonBar.GetTab(TAB_NAME, true);",
              "    if (ribbonTab == null)",
              "    {",
              "      ribbonTab = ribbonBar.AddTab(TAB_NAME);",
              "    }",
              "",
              "    // Simple",
              "    RibbonCommandGroup ribbonCommandGroup1 = ribbonTab.AddCommandGroup(\"My group 1\");",
              "    RibbonIcon ribbonIcon1 = new RibbonIcon(CommandIcon.Accumulator);",
              "    ribbonCommandGroup1.AddCommand(\"My action 1\", ACTION_NAME, ribbonIcon1);",
              "",
              "    // Extended",
              "    MultiLangString groupText = new MultiLangString();",
              "    groupText.AddString(ISOCode.Language.L_de_DE, \"Meine Gruppe 2\");",
              "    groupText.AddString(ISOCode.Language.L_en_US, \"My group 2\");",
              "    RibbonCommandGroup ribbonCommandGroup2 = ribbonTab.AddCommandGroup(groupText);",
              "",
              "    MultiLangString commandText = new MultiLangString();",
              "    commandText.AddString(ISOCode.Language.L_de_DE, \"Meine Aktion 2\");",
              "    commandText.AddString(ISOCode.Language.L_en_US, \"My action 2\");",
              "",
              "    MultiLangString tooltip = new MultiLangString();",
              "    tooltip.AddString(ISOCode.Language.L_de_DE, \"Mein ToolTip\");",
              "    tooltip.AddString(ISOCode.Language.L_en_US, \"My tooltip\");",
              "",
              "    MultiLangString description = new MultiLangString();",
              "    description.AddString(ISOCode.Language.L_de_DE, \"Meine Beschreibung\");",
              "    description.AddString(ISOCode.Language.L_en_US, \"My description\");",
              "",
              "    string imagePath = @\"C:\\test\\test.svg\";",
              "    RibbonIcon ribbonIcon2 = ribbonBar.AddIcon(imagePath);",
              "    ribbonCommandGroup2.AddCommand(commandText, ACTION_NAME, tooltip, description, ribbonIcon2);",
              "  }",
              "",
              "  [DeclareUnregister]",
              "  public void UnRegister()",
              "  {",
              "    RibbonBar ribbonBar = new RibbonBar();",
              "    RibbonTab ribbonTab = ribbonBar.GetTab(TAB_NAME, true);",
              "    if (ribbonTab != null)",
              "    {",
              "      ribbonTab.Remove();",
              "    }",
              "  }",
              "",
              "  [DeclareAction(ACTION_NAME)]",
              "  public void Function()",
              "  {",
              "    MessageBox.Show(\"Action was executed!\");",
              "  }",
              "}"
            ],
            "features": [
              "Multilingual support",
              "Custom icons (SVG)",
              "Tooltips and descriptions",
              "Register/Unregister lifecycle"
            ]
          }
        ]
      },
      "contextMenus": {
        "name": "Context Menu Customization",
        "description": "Adding custom items to context menus",
        "examples": [
          {
            "id": "contextMenu",
            "name": "Add Context Menu Item",
            "description": "Add a custom menu item to a specific context menu",
            "script": [
              "using System.Windows.Forms;",
              "using Eplan.EplApi.Scripting;",
              "",
              "public class _07_RibbonContextMenus_02_ContextMenu",
              "{",
              "  [DeclareAction(\"MenuAction\")]",
              "  public void ActionFunction()",
              "  {",
              "    MessageBox.Show(\"Action was executed!\");",
              "  }",
              "",
              "  [DeclareMenu]",
              "  public void MenuFunction()",
              "  {",
              "    Eplan.EplApi.Gui.ContextMenuLocation contextMenuLocation =",
              "        new Eplan.EplApi.Gui.ContextMenuLocation(",
              "            \"GedEditGuiText\",",
              "            \"1002\"",
              "            );",
              "",
              "    Eplan.EplApi.Gui.ContextMenu menu = ",
              "      new Eplan.EplApi.Gui.ContextMenu();",
              "    menu.AddMenuItem(",
              "        contextMenuLocation,",
              "        \"Menu item in context menu\",",
              "        \"MenuAction\",",
              "        true,",
              "        false",
              "        );",
              "  }",
              "}"
            ]
          },
          {
            "id": "contextMenuId",
            "name": "Show Context Menu IDs",
            "description": "Enable/disable context menu ID visibility for development",
            "script": [
              "using System.Windows.Forms;",
              "using Eplan.EplApi.Scripting;",
              "using Eplan.EplApi.Base;",
              "",
              "public class _07_RibbonContextMenus_03_ContextMenuId",
              "{",
              "  [DeclareRegister]",
              "  public void Register()",
              "  {",
              "    Settings settings = new Settings();",
              "",
              "    settings.SetBoolSetting(\"USER.EnfMVC.ContextMenuSetting.ShowIdentifier\", true, 0);",
              "",
              "    MessageBox.Show(\"Context menu id: visible\");",
              "  }",
              "",
              "  [DeclareUnregister]",
              "  public void UnRegister()",
              "  {",
              "    Settings settings = new Settings();",
              "",
              "    settings.SetBoolSetting(\"USER.EnfMVC.ContextMenuSetting.ShowIdentifier\", false, 0);",
              "",
              "    MessageBox.Show(\"Context menu id: invisible\");",
              "  }",
              "}"
            ]
          }
        ]
      }
    },
    "guiElements": {
      "ribbon": {
        "components": [
          "RibbonBar - Main ribbon container",
          "RibbonTab - Tab containing command groups",
          "RibbonCommandGroup - Group of related commands",
          "RibbonIcon - Icons for commands (supports SVG)",
          "MultiLangString - Multilingual text support"
        ],
        "iconTypes": [
          "CommandIcon enum values",
          "Custom SVG files",
          "Custom image files"
        ]
      },
      "contextMenu": {
        "components": [
          "ContextMenuLocation - Specifies where to add menu item",
          "ContextMenu - Menu container",
          "AddMenuItem - Method to add menu items"
        ],
        "locations": [
          "GedEditGuiText - Text editor context menu",
          "1002 - Specific menu identifier"
        ]
      }
    },
    "developmentTips": {
      "contextMenuIds": {
        "setting": "USER.EnfMVC.ContextMenuSetting.ShowIdentifier",
        "purpose": "Shows context menu IDs to help locate where to add custom items"
      },
      "lifecycle": {
        "register": "Called when script loads - setup GUI elements",
        "unregister": "Called when script unloads - cleanup GUI elements"
      }
    }
  }
}