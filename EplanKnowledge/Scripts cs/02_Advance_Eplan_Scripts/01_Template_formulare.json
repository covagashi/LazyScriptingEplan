[
    {
        "id": "00_template_form",
        "name": "Windows Form Template",
        "category": "advanced",
        "description": "Template for creating a basic Windows Form in EPLAN script",
        "purpose": "Demonstrate the basic structure for Windows Forms implementation",
        "code": [
            "using System.Windows.Forms;",
            "using Eplan.EplApi.Scripting;",
            "",
            "public partial class frmTemplate : System.Windows.Forms.Form",
            "{",
            "    #region Windows Form Designer generated code",
            "",
            "    private System.ComponentModel.IContainer components = null;",
            "",
            "    protected override void Dispose(bool disposing)",
            "    {",
            "        if (disposing && (components != null))",
            "        {",
            "            components.Dispose();",
            "        }",
            "        base.Dispose(disposing);",
            "    }",
            "",
            "    private void InitializeComponent()",
            "    {",
            "        this.SuspendLayout();",
            "        // ",
            "        // frmTemplate",
            "        // ",
            "        this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);",
            "        this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;",
            "        this.ClientSize = new System.Drawing.Size(292, 273);",
            "        this.Name = \"frmTemplate\";",
            "        this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;",
            "        this.Text = \"Template\";",
            "        this.ResumeLayout(false);",
            "    }",
            "",
            "    public frmTemplate()",
            "    {",
            "        InitializeComponent();",
            "    }",
            "",
            "    #endregion",
            "",
            "    [Start]",
            "    public void Function()",
            "    {",
            "        frmTemplate frm = new frmTemplate();",
            "        frm.ShowDialog();",
            "",
            "        return;",
            "    }",
            "}"
        ],
        "keyPoints": [
            {
                "concept": "Form Inheritance",
                "explanation": "Inherits from System.Windows.Forms.Form to create a Windows Form"
            },
            {
                "concept": "Component Management",
                "explanation": "Includes standard Windows Forms designer code for component handling"
            },
            {
                "concept": "Form Initialization",
                "explanation": "Basic form setup with InitializeComponent and constructor"
            },
            {
                "concept": "EPLAN Integration",
                "explanation": "Uses Start attribute for EPLAN script execution"
            }
        ]
    },
    {
        "id": "02_labeling_verification",
        "name": "Labeling with File Verification",
        "category": "advanced",
        "description": "Script for generating labels with file existence verification and custom file handling",
        "purpose": "Create labels for parts list and equipment while managing file collisions",
        "code": [
            "using System.IO;",
            "using System.Windows.Forms;",
            "using Eplan.EplApi.ApplicationFramework;",
            "using Eplan.EplApi.Base;",
            "using Eplan.EplApi.Scripting;",
            "",
            "public class Class",
            "{",
            "    [Start]",
            "    public void Function()",
            "    {",
            "        string strFilename = string.Empty;",
            "",
            "        strFilename = CheckFilename(\"summaryPartsList.xls\");",
            "        if (strFilename != \"\")",
            "        {",
            "            ActionCallingContext labellingContext = new ActionCallingContext();",
            "            labellingContext.AddParameter(\"CONFIGSCHEME\", \"Summarized parts list\");",
            "            labellingContext.AddParameter(\"DESTINATIONFILE\", strFilename);",
            "            labellingContext.AddParameter(\"FILTERSCHEME\", \"\");",
            "            labellingContext.AddParameter(\"LANGUAGE\", \"en_EN\");",
            "            labellingContext.AddParameter(\"LogMsgActionDone\", \"true\");",
            "            labellingContext.AddParameter(\"SHOWOUTPUT\", \"1\");",
            "            labellingContext.AddParameter(\"RECREPEAT\", \"1\");",
            "            labellingContext.AddParameter(\"SORTSCHEME\", \"\");",
            "            labellingContext.AddParameter(\"TASKREPEAT\", \"1\");",
            "            new CommandLineInterpreter().Execute(\"label\", labellingContext);",
            "        }",
            "",
            "        strFilename = CheckFilename(\"equipmentLabeling.xls\");",
            "        if (strFilename != \"\")",
            "        {",
            "            ActionCallingContext labellingContext1 = new ActionCallingContext();",
            "            labellingContext1.AddParameter(\"CONFIGSCHEME\", \"Device tag list\");",
            "            labellingContext1.AddParameter(\"DESTINATIONFILE\", strFilename);",
            "            labellingContext1.AddParameter(\"FILTERSCHEME\", \"\");",
            "            labellingContext1.AddParameter(\"LANGUAGE\", \"de_DE\");",
            "            labellingContext1.AddParameter(\"LogMsgActionDone\", \"true\");",
            "            labellingContext1.AddParameter(\"SHOWOUTPUT\", \"1\");",
            "            labellingContext1.AddParameter(\"RECREPEAT\", \"1\");",
            "            labellingContext1.AddParameter(\"SORTSCHEME\", \"\");",
            "            labellingContext1.AddParameter(\"TASKREPEAT\", \"1\");",
            "            new CommandLineInterpreter().Execute(\"label\", labellingContext1);",
            "        }",
            "",
            "        return;",
            "    }",
            "",
            "    private static string CheckFilename(string strType)",
            "    {",
            "        string strProjectpath = PathMap.SubstitutePath(\"$(PROJECTPATH)\" + @\"\\\\\");",
            "        string strFilename = strProjectpath + strType;",
            "",
            "        if (File.Exists(strFilename))",
            "        {",
            "            DialogResult Result = MessageBox.Show(",
            "                \"The file\\n'\" + strFilename + \"'\\nalready exists.\\n\" +",
            "                \"Do you want to overwrite the file?\",",
            "                \"Labeling\",",
            "                MessageBoxButtons.YesNo,",
            "                MessageBoxIcon.Question);",
            "",
            "            if (Result == DialogResult.No)",
            "            {",
            "                SaveFileDialog sfd = new SaveFileDialog();",
            "                sfd.DefaultExt = \"xls\";",
            "                sfd.FileName = strType;",
            "                sfd.Filter = \"Excel file (*.xls)|*.xls\";",
            "                sfd.InitialDirectory = strProjectpath;",
            "                sfd.Title = \"Storage location for\" + strType + \" choose:\";",
            "                sfd.ValidateNames = true;",
            "",
            "                DialogResult ResultSfd = sfd.ShowDialog();",
            "                if (ResultSfd == DialogResult.OK)",
            "                {",
            "                    strFilename = sfd.FileName;",
            "                }",
            "                else if (ResultSfd == DialogResult.Cancel)",
            "                {",
            "                    strFilename = \"\";",
            "                }",
            "            }",
            "        }",
            "        return strFilename;",
            "    }",
            "}"
        ],
        "keyPoints": [
            {
                "concept": "File Verification",
                "explanation": "Checks for existing files and handles file collisions with user input"
            },
            {
                "concept": "Multiple Label Types",
                "explanation": "Generates both parts list and equipment labels with different configurations"
            },
            {
                "concept": "Path Handling",
                "explanation": "Uses EPLAN path variables for project-relative file operations"
            },
            {
                "concept": "User Interface",
                "explanation": "Implements file dialogs for user interaction when resolving file conflicts"
            }
        ]
    },
    {
        "id": "03_pdf_on_close",
        "name": "Create PDF on Project Close",
        "category": "advanced",
        "description": "Script that generates a PDF when closing an EPLAN project, with progress tracking",
        "purpose": "Automate PDF export during project close with user confirmation",
        "code": [
            "using System.Windows.Forms;",
            "using Eplan.EplApi.ApplicationFramework;",
            "using Eplan.EplApi.Base;",
            "using Eplan.EplApi.Scripting;",
            "",
            "public class Class",
            "{",
            "    [DeclareEventHandler(\"Eplan.EplApi.OnUserPreCloseProject\")]",
            "    public void Function()",
            "    {",
            "        string strFullProjectname = PathMap.SubstitutePath(\"$(P)\");",
            "        string strProjectpath = PathMap.SubstitutePath(\"$(PROJECTPATH)\" + @\"\\\\\");",
            "        string strProjectname = PathMap.SubstitutePath(\"$(PROJECTNAME)\");",
            "",
            "        DialogResult Result = MessageBox.Show(",
            "            \"Should a PDF be generated for the project\\n'\" + ",
            "            strProjectname + \"'\\nbe generated?\",",
            "            \"PDF-Export\",",
            "            MessageBoxButtons.YesNo,",
            "            MessageBoxIcon.Question);",
            "",
            "        if (Result == DialogResult.Yes)",
            "        {",
            "            Progress oProgress = new Progress(\"SimpleProgress\");",
            "            oProgress.SetAllowCancel(true);",
            "            oProgress.SetAskOnCancel(true);",
            "            oProgress.BeginPart(100, \"\");",
            "            oProgress.ShowImmediately();",
            "",
            "            CommandLineInterpreter oCLI = new CommandLineInterpreter();",
            "            ActionCallingContext acc = new ActionCallingContext();",
            "",
            "            acc.AddParameter(\"TYPE\", \"PDFPROJECTSCHEME\");",
            "            acc.AddParameter(\"PROJECTNAME\", strFullProjectname);",
            "            acc.AddParameter(\"EXPORTFILE\", strProjectpath + strProjectname);",
            "            acc.AddParameter(\"EXPORTSCHEME\", \"EPLAN_default_value\");",
            "",
            "            oCLI.Execute(\"export\", acc);",
            "",
            "            oProgress.EndPart(true);",
            "        }",
            "",
            "        return;",
            "    }",
            "}"
        ],
        "keyPoints": [
            {
                "concept": "Event Handler",
                "explanation": "Uses OnUserPreCloseProject event to trigger before project closes"
            },
            {
                "concept": "Progress Tracking",
                "explanation": "Implements progress bar for PDF export visualization"
            },
            {
                "concept": "Path Management",
                "explanation": "Uses EPLAN path variables for project identification"
            },
            {
                "concept": "User Confirmation",
                "explanation": "Requests user permission before PDF generation"
            }
        ]
    },
    {
        "id": "03_pdf_on_close",
        "name": "Create PDF on Project Close",
        "category": "advanced",
        "description": "Script that generates a PDF when closing an EPLAN project, with progress tracking",
        "purpose": "Automate PDF export during project close with user confirmation",
        "code": [
            "using System.Windows.Forms;",
            "using Eplan.EplApi.ApplicationFramework;",
            "using Eplan.EplApi.Base;",
            "using Eplan.EplApi.Scripting;",
            "",
            "public class Class",
            "{",
            "    [DeclareEventHandler(\"Eplan.EplApi.OnUserPreCloseProject\")]",
            "    public void Function()",
            "    {",
            "        string strFullProjectname = PathMap.SubstitutePath(\"$(P)\");",
            "        string strProjectpath = PathMap.SubstitutePath(\"$(PROJECTPATH)\" + @\"\\\\\");",
            "        string strProjectname = PathMap.SubstitutePath(\"$(PROJECTNAME)\");",
            "",
            "        DialogResult Result = MessageBox.Show(",
            "            \"Should a PDF be generated for the project\\n'\" + ",
            "            strProjectname + \"'\\nbe generated?\",",
            "            \"PDF-Export\",",
            "            MessageBoxButtons.YesNo,",
            "            MessageBoxIcon.Question);",
            "",
            "        if (Result == DialogResult.Yes)",
            "        {",
            "            Progress oProgress = new Progress(\"SimpleProgress\");",
            "            oProgress.SetAllowCancel(true);",
            "            oProgress.SetAskOnCancel(true);",
            "            oProgress.BeginPart(100, \"\");",
            "            oProgress.ShowImmediately();",
            "",
            "            CommandLineInterpreter oCLI = new CommandLineInterpreter();",
            "            ActionCallingContext acc = new ActionCallingContext();",
            "",
            "            acc.AddParameter(\"TYPE\", \"PDFPROJECTSCHEME\");",
            "            acc.AddParameter(\"PROJECTNAME\", strFullProjectname);",
            "            acc.AddParameter(\"EXPORTFILE\", strProjectpath + strProjectname);",
            "            acc.AddParameter(\"EXPORTSCHEME\", \"EPLAN_default_value\");",
            "",
            "            oCLI.Execute(\"export\", acc);",
            "",
            "            oProgress.EndPart(true);",
            "        }",
            "",
            "        return;",
            "    }",
            "}"
        ],
        "keyPoints": [
            {
                "concept": "Event Handler",
                "explanation": "Uses OnUserPreCloseProject event to trigger before project closes"
            },
            {
                "concept": "Progress Tracking",
                "explanation": "Implements progress bar for PDF export visualization"
            },
            {
                "concept": "Path Management",
                "explanation": "Uses EPLAN path variables for project identification"
            },
            {
                "concept": "User Confirmation",
                "explanation": "Requests user permission before PDF generation"
            }
        ]
    },
    {
        "id": "04_write_text_file",
        "name": "Write Text File",
        "category": "advanced",
        "description": "Script to write text to a file and open it automatically",
        "purpose": "Demonstrate file writing operations with Unicode encoding",
        "code": [
            "using System.Diagnostics;",
            "using System.IO;",
            "using System.Text;",
            "using Eplan.EplApi.Base;",
            "using Eplan.EplApi.Scripting;",
            "",
            "public class Class",
            "{",
            "    [Start]",
            "    public void Function()",
            "    {",
            "        string filename = PathMap.SubstitutePath(@\"$(PROJECTPATH)\\Testdatei.txt\");",
            "",
            "        string strContent = \"Sample text\\n\";",
            "",
            "        StreamWriter swTextfile = new StreamWriter(",
            "            filename,",
            "            true,",
            "            Encoding.Unicode);",
            "",
            "        swTextfile.Write(strContent);",
            "        swTextfile.Close();",
            "",
            "        new Decider().Decide(",
            "            EnumDecisionType.eOkDecision,",
            "            \"Text file successfully exported.\",",
            "            \"Information\",",
            "            EnumDecisionReturn.eOK,",
            "            EnumDecisionReturn.eOK);",
            "",
            "        Process.Start(filename);",
            "",
            "        return;",
            "    }",
            "}"
        ],
        "keyPoints": [
            {
                "concept": "File Operations",
                "explanation": "Uses StreamWriter for Unicode text file writing"
            },
            {
                "concept": "Path Management",
                "explanation": "Uses EPLAN path variables for file location"
            },
            {
                "concept": "EPLAN Dialog",
                "explanation": "Uses EPLAN Decider instead of Windows MessageBox"
            },
            {
                "concept": "Auto-open",
                "explanation": "Automatically opens created file with default application"
            }
        ]
    },
    {
        "id": "05_write_xml_file",
        "name": "Write XML File",
        "category": "advanced",
        "description": "Script to create a formatted XML file with indentation and open it automatically",
        "purpose": "Generate a structured XML document with nested elements and attributes",
        "code": [
            "using System.Diagnostics;",
            "using System.Xml;",
            "using Eplan.EplApi.Base;",
            "using Eplan.EplApi.Scripting;",
            "",
            "public class Class",
            "{",
            "    [Start]",
            "    public void Function()",
            "    {",
            "        string filename = PathMap.SubstitutePath(@\"$(PROJECTPATH)\\Testfile.xml\");",
            "",
            "        XmlWriterSettings xs = new XmlWriterSettings();",
            "        xs.Indent = true;",
            "        xs.IndentChars = \"\\t\";",
            "",
            "        XmlWriter xw = XmlWriter.Create(filename, xs);",
            "",
            "        xw.WriteStartDocument();",
            "",
            "        xw.WriteStartElement(\"People\");",
            "",
            "        xw.WriteStartElement(\"Person\");",
            "        xw.WriteElementString(\"First name\", \"Max\");",
            "        xw.WriteElementString(\"Last name\", \"Mustermann\");",
            "        xw.WriteStartElement(\"Address\");",
            "        xw.WriteAttributeString(\"Location\", \"M\u00fcnchen\");",
            "        xw.WriteAttributeString(\"Street\", \"Musterstra\u00dfe 1\");",
            "        xw.WriteEndElement();",
            "        xw.WriteEndElement();",
            "",
            "        xw.WriteStartElement(\"Person\");",
            "        xw.WriteElementString(\"First name\", \"Maria\");",
            "        xw.WriteElementString(\"Last name\", \"Musterfrau\");",
            "        xw.WriteStartElement(\"Address\");",
            "        xw.WriteAttributeString(\"Location\", \"M\u00fcnchen\");",
            "        xw.WriteAttributeString(\"Street\", \"Musterstra\u00dfe 2\");",
            "        xw.WriteEndElement();",
            "        xw.WriteEndElement();",
            "",
            "        xw.WriteEndElement();",
            "",
            "        xw.WriteEndDocument();",
            "        xw.Close();",
            "",
            "        new Decider().Decide(",
            "            EnumDecisionType.eOkDecision,",
            "            \"XML file successfully exported.\",",
            "            \"Information\",",
            "            EnumDecisionReturn.eOK,",
            "            EnumDecisionReturn.eOK);",
            "",
            "        Process.Start(filename);",
            "",
            "        return;",
            "    }",
            "}"
        ],
        "keyPoints": [
            {
                "concept": "XML Writing",
                "explanation": "Uses XmlWriter with indentation settings for formatted XML creation"
            },
            {
                "concept": "Document Structure",
                "explanation": "Creates hierarchical XML with elements, attributes, and proper nesting"
            },
            {
                "concept": "EPLAN Integration",
                "explanation": "Uses EPLAN path variables and Decider for notifications"
            },
            {
                "concept": "File Handling",
                "explanation": "Automatically opens created XML file after generation"
            }
        ]
    },
    {
        "id": "06_labeling",
        "name": "Labeling with Progress",
        "category": "advanced",
        "description": "Script that creates two types of labels with progress tracking",
        "purpose": "Generate parts list and equipment labels with visual progress feedback",
        "code": [
            "using Eplan.EplApi.ApplicationFramework;",
            "using Eplan.EplApi.Base;",
            "using Eplan.EplApi.Scripting;",
            "",
            "public class Class",
            "{",
            "    [Start]",
            "    public void Function()",
            "    {",
            "        string strProjectpath = PathMap.SubstitutePath(\"$(PROJECTPATH)\" + @\"\\\\\");",
            "",
            "        Progress progress = new Progress(\"SimpleProgress\");",
            "        progress.BeginPart(100, \"\");",
            "        progress.SetAllowCancel(true);",
            "",
            "        if (!progress.Canceled())",
            "        {",
            "            progress.BeginPart(50, \"Item totals BOM is created...\");",
            "            ActionCallingContext labellingContext = new ActionCallingContext();",
            "            labellingContext.AddParameter(\"CONFIGSCHEME\", \"Summarized parts list\");",
            "            labellingContext.AddParameter(\"DESTINATIONFILE\", strProjectpath + \"ItemtotalsBOM.xls\");",
            "            labellingContext.AddParameter(\"FILTERSCHEME\", \"\");",
            "            labellingContext.AddParameter(\"LANGUAGE\", \"en_EN\");",
            "            labellingContext.AddParameter(\"LogMsgActionDone\", \"true\");",
            "            labellingContext.AddParameter(\"SHOWOUTPUT\", \"1\");",
            "            labellingContext.AddParameter(\"RECREPEAT\", \"1\");",
            "            labellingContext.AddParameter(\"SORTSCHEME\", \"\");",
            "            labellingContext.AddParameter(\"TASKREPEAT\", \"1\");",
            "            new CommandLineInterpreter().Execute(\"label\", labellingContext);",
            "            progress.EndPart();",
            "        }",
            "",
            "        if (!progress.Canceled())",
            "        {",
            "            progress.BeginPart(50, \"Equipment labeling is created...\");",
            "            ActionCallingContext labellingContext1 = new ActionCallingContext();",
            "            labellingContext1.AddParameter(\"CONFIGSCHEME\", \"Device tag list\");",
            "            labellingContext1.AddParameter(\"DESTINATIONFILE\", strProjectpath + \"Equipmentlabeling.xls\");",
            "            labellingContext1.AddParameter(\"FILTERSCHEME\", \"\");",
            "            labellingContext1.AddParameter(\"LANGUAGE\", \"de_DE\");",
            "            labellingContext1.AddParameter(\"LogMsgActionDone\", \"true\");",
            "            labellingContext1.AddParameter(\"SHOWOUTPUT\", \"1\");",
            "            labellingContext1.AddParameter(\"RECREPEAT\", \"1\");",
            "            labellingContext1.AddParameter(\"SORTSCHEME\", \"\");",
            "            labellingContext1.AddParameter(\"TASKREPEAT\", \"1\");",
            "            new CommandLineInterpreter().Execute(\"label\", labellingContext1);",
            "            progress.EndPart();",
            "        }",
            "",
            "        progress.EndPart(true);",
            "",
            "        return;",
            "    }",
            "}"
        ],
        "keyPoints": [
            {
                "concept": "Progress Tracking",
                "explanation": "Uses EPLAN Progress class for visual feedback with cancellation support"
            },
            {
                "concept": "Multi-label Generation",
                "explanation": "Creates both BOM and equipment labels in separate steps"
            },
            {
                "concept": "Progress Segmentation",
                "explanation": "Divides progress into two equal 50% parts for each labeling task"
            },
            {
                "concept": "Cancel Handling",
                "explanation": "Checks for user cancellation between major operations"
            }
        ]
    },
    {
        "id": "07_read_text_file",
        "name": "Read Text File",
        "category": "advanced",
        "description": "Script to read EPLAN version from text file with custom line reading functionality",
        "purpose": "Read specific lines from a text file generated by labeling action",
        "code": [
            "using System.IO;",
            "using System.Text;",
            "using Eplan.EplApi.ApplicationFramework;",
            "using Eplan.EplApi.Base;",
            "using Eplan.EplApi.Scripting;",
            "",
            "public class Class",
            "{",
            "    [Start]",
            "    public void Function()",
            "    {",
            "        string filename = PathMap.SubstitutePath(@\"$(TMP)\\Last_Version.txt\");",
            "",
            "        LabellingText(filename);",
            "",
            "        string LastVersion = ReadLine(filename, 1);",
            "",
            "        new Decider().Decide(",
            "            EnumDecisionType.eOkDecision,",
            "            \"Recently used EPLAN-Version:\\n\" + LastVersion,",
            "            \"Information\",",
            "            EnumDecisionReturn.eOK,",
            "            EnumDecisionReturn.eOK);",
            "",
            "        File.Delete(filename);",
            "",
            "        return;",
            "    }",
            "",
            "    public string ReadLine(string strFilename, int intLine)",
            "    {",
            "        string strContent = \"\";",
            "        float fRow = 0;",
            "",
            "        StreamReader srTextfile = new StreamReader(",
            "            strFilename, Encoding.Unicode);",
            "",
            "        while (!srTextfile.EndOfStream && fRow < intLine)",
            "        {",
            "            fRow += 1;",
            "            strContent = srTextfile.ReadLine();",
            "        }",
            "",
            "        if (fRow < intLine)",
            "        {",
            "            strContent = \"\";",
            "        }",
            "",
            "        srTextfile.Close();",
            "",
            "        return strContent;",
            "    }",
            "",
            "    private static void LabellingText(string filename)",
            "    {",
            "        ActionCallingContext acc = new ActionCallingContext();",
            "        acc.AddParameter(\"CONFIGSCHEME\", \"Recently used EPLAN-Version_Textdatei\");",
            "        acc.AddParameter(\"DESTINATIONFILE\", filename);",
            "        acc.AddParameter(\"FILTERSCHEME\", \"\");",
            "        acc.AddParameter(\"LANGUAGE\", \"en_EN\");",
            "        acc.AddParameter(\"LogMsgActionDone\", \"true\");",
            "        acc.AddParameter(\"SHOWOUTPUT\", \"0\");",
            "        acc.AddParameter(\"RECREPEAT\", \"1\");",
            "        acc.AddParameter(\"SORTSCHEME\", \"\");",
            "        acc.AddParameter(\"TASKREPEAT\", \"1\");",
            "        new CommandLineInterpreter().Execute(\"label\", acc);",
            "",
            "        return;",
            "    }",
            "}"
        ],
        "keyPoints": [
            {
                "concept": "File Reading",
                "explanation": "Implements custom line reading function with Unicode encoding support"
            },
            {
                "concept": "Labeling Integration",
                "explanation": "Uses EPLAN labeling action to generate version information file"
            },
            {
                "concept": "Temporary Files",
                "explanation": "Uses EPLAN temporary directory and manages file cleanup"
            },
            {
                "concept": "EPLAN Dialog",
                "explanation": "Uses EPLAN Decider for displaying version information"
            }
        ]
    },
    {
        "id": "08_xml_read",
        "name": "Read XML File",
        "category": "advanced",
        "description": "Script to read EPLAN version from XML file using attribute ID",
        "purpose": "Read specific version information from project XML based on ID",
        "code": [
            "using System.Xml;",
            "using Eplan.EplApi.Base;",
            "using Eplan.EplApi.Scripting;",
            "",
            "public class Class",
            "{",
            "    [Start]",
            "    public void Function()",
            "    {",
            "        string filename = PathMap.SubstitutePath(\"$(PROJECTPATH)\" + @\"\\\" + \"Projectinfo.xml\");",
            "",
            "        string LastVersion = ReadXml(filename, 10043);",
            "",
            "        new Decider().Decide(",
            "            EnumDecisionType.eOkDecision,",
            "            \"Recently used EPLAN-Version:\\n\" + LastVersion,",
            "            \"Information\",",
            "            EnumDecisionReturn.eOK,",
            "            EnumDecisionReturn.eOK);",
            "",
            "        return;",
            "    }",
            "",
            "    private static string ReadXml(string filename, int ID)",
            "    {",
            "        string strLastVersion = \"\";",
            "",
            "        XmlTextReader reader = new XmlTextReader(filename);",
            "",
            "        while (reader.Read())",
            "        {",
            "            if (reader.HasAttributes)",
            "            {",
            "                while (reader.MoveToNextAttribute())",
            "                {",
            "                    if (reader.Name == \"id\")",
            "                    {",
            "                        if (reader.Value == ID.ToString())",
            "                        {",
            "                            strLastVersion = reader.ReadString();",
            "                            reader.Close();",
            "                            return strLastVersion;",
            "                        }",
            "                    }",
            "                }",
            "            }",
            "        }",
            "",
            "        return strLastVersion;",
            "    }",
            "}"
        ],
        "keyPoints": [
            {
                "concept": "XML Parsing",
                "explanation": "Uses XmlTextReader for efficient XML attribute reading"
            },
            {
                "concept": "Attribute Search",
                "explanation": "Searches for specific ID attribute to find version information"
            },
            {
                "concept": "Project Path",
                "explanation": "Uses EPLAN path variables for project-relative file access"
            },
            {
                "concept": "EPLAN Dialog",
                "explanation": "Uses EPLAN Decider instead of MessageBox for notifications"
            }
        ]
    },
    {
        "id": "09_set_property",
        "name": "Set Project Property",
        "category": "advanced",
        "description": "Script to set a project property using the XEsSetProjectPropertyAction",
        "purpose": "Modify project property with specific ID, index and value",
        "code": [
            "using Eplan.EplApi.ApplicationFramework;",
            "using Eplan.EplApi.Base;",
            "using Eplan.EplApi.Scripting;",
            "",
            "public class Class",
            "{",
            "    [Start]",
            "    public void Function()",
            "    {",
            "        CommandLineInterpreter oCLI = new CommandLineInterpreter();",
            "        ActionCallingContext acc = new ActionCallingContext();",
            "",
            "        acc.AddParameter(\"PropertyId\", \"10013\");",
            "        acc.AddParameter(\"PropertyIndex\", \"0\");",
            "        acc.AddParameter(\"PropertyValue\", \"23542\");",
            "",
            "        oCLI.Execute(\"XEsSetProjectPropertyAction\", acc);",
            "",
            "        new Decider().Decide(",
            "            EnumDecisionType.eOkDecision,",
            "            \"Action executed.\",",
            "            \"Information\",",
            "            EnumDecisionReturn.eOK,",
            "            EnumDecisionReturn.eOK);",
            "",
            "        return;",
            "    }",
            "}"
        ],
        "keyPoints": [
            {
                "concept": "Property Setting",
                "explanation": "Uses XEsSetProjectPropertyAction to modify project properties"
            },
            {
                "concept": "Parameter Structure",
                "explanation": "Sets property ID, index and value through action parameters"
            }
        ]
    },
    {
        "id": "10_project_backup",
        "name": "Project Backup",
        "category": "advanced",
        "description": "Script to create a timestamped backup of EPLAN project with progress tracking",
        "purpose": "Automate project backup with compression and file structure creation",
        "code": [
            "using System;",
            "using Eplan.EplApi.ApplicationFramework;",
            "using Eplan.EplApi.Base;",
            "using Eplan.EplApi.Scripting;",
            "",
            "public class Class",
            "{",
            "    [Start]",
            "    public void Function()",
            "    {",
            "        string strProjectpath = PathMap.SubstitutePath(\"$(PROJECTPATH)\");",
            "        string strProjectname = PathMap.SubstitutePath(\"$(PROJECTNAME)\");",
            "        string strFullProjectname = PathMap.SubstitutePath(\"$(P)\");",
            "",
            "        string strDate = DateTime.Now.ToString(\"yyyy-MM-dd\");",
            "        string strTime = DateTime.Now.ToString(\"hh-mm-ss\");",
            "        string strBackupDirectory = strProjectpath + @\"\\Backup\\\";",
            "        string strBackupFilename = strProjectname + \"_Backup_\" + strDate + \"_\" + strTime;",
            "",
            "        if (!System.IO.Directory.Exists(strBackupDirectory))",
            "        {",
            "            System.IO.Directory.CreateDirectory(strBackupDirectory);",
            "        }",
            "",
            "        Progress oProgress = new Progress(\"SimpleProgress\");",
            "        oProgress.SetAllowCancel(true);",
            "        oProgress.SetAskOnCancel(true);",
            "        oProgress.BeginPart(100, \"\");",
            "        oProgress.SetTitle(\"Backup\");",
            "        oProgress.ShowImmediately();",
            "",
            "        if (!oProgress.Canceled())",
            "        {",
            "            CommandLineInterpreter oCLI = new CommandLineInterpreter();",
            "            ActionCallingContext acc = new ActionCallingContext();",
            "",
            "            acc.AddParameter(\"BACKUPMEDIA\", \"DISK\");",
            "            acc.AddParameter(\"ARCHIVENAME\", strBackupFilename);",
            "            acc.AddParameter(\"BACKUPMETHOD\", \"BACKUP\");",
            "            acc.AddParameter(\"COMPRESSPRJ\", \"1\");",
            "            acc.AddParameter(\"INCLEXTDOCS\", \"1\");",
            "            acc.AddParameter(\"BACKUPAMOUNT\", \"BACKUPAMOUNT_ALL\");",
            "            acc.AddParameter(\"INCLIMAGES\", \"1\");",
            "            acc.AddParameter(\"LogMsgActionDone\", \"true\");",
            "            acc.AddParameter(\"DESTINATIONPATH\", strBackupDirectory);",
            "            acc.AddParameter(\"PROJECTNAME\", strFullProjectname);",
            "            acc.AddParameter(\"TYPE\", \"PROJECT\");",
            "",
            "            oCLI.Execute(\"backup\", acc);",
            "        }",
            "",
            "        oProgress.EndPart(true);",
            "",
            "        new Decider().Decide(",
            "            EnumDecisionType.eOkDecision,",
            "            \"Backup was created successfully:\\n\" + strBackupFilename,",
            "            \"Information\",",
            "            EnumDecisionReturn.eOK,",
            "            EnumDecisionReturn.eOK);",
            "",
            "        return;",
            "    }",
            "}"
        ],
        "keyPoints": [
            {
                "concept": "Timestamp Creation",
                "explanation": "Uses date and time for unique backup naming"
            },
            {
                "concept": "Directory Management",
                "explanation": "Creates backup directory if it doesn't exist"
            },
            {
                "concept": "Progress Tracking",
                "explanation": "Shows progress bar with cancel option"
            },
            {
                "concept": "Backup Configuration",
                "explanation": "Sets comprehensive backup parameters including external docs and images"
            }
        ]
    },
    {
        "id": "11_import_project_properties",
        "name": "Importar Propiedades del Proyecto",
        "category": "advanced",
        "description": "Script para importar propiedades del proyecto desde un archivo ProjectInfo.xml",
        "purpose": "Facilitar la importaci\u00f3n de propiedades del proyecto desde un archivo externo con seguimiento de progreso",
        "code": [
            "using System.Windows.Forms;",
            "using Eplan.EplApi.ApplicationFramework;",
            "using Eplan.EplApi.Base;",
            "using Eplan.EplApi.Scripting;",
            "",
            "public class Class",
            "{",
            "    [Start]",
            "    public void Function()",
            "    {",
            "        string strProjects =",
            "            PathMap.SubstitutePath(\"$(MD_PROJECTS)\");",
            "        string strFilename = string.Empty;",
            "",
            "        OpenFileDialog ofd = new OpenFileDialog();",
            "        ofd.Filter = \"ProjectInfo.xml|ProjectInfo.xml\";",
            "        ofd.InitialDirectory = strProjects;",
            "        ofd.Title = \"Seleccionar propiedades del proyecto:\";",
            "        ofd.ValidateNames = true;",
            "",
            "        if (ofd.ShowDialog() == DialogResult.OK)",
            "        {",
            "            strFilename = ofd.FileName;",
            "",
            "            Progress oProgress = new Progress(\"SimpleProgress\");",
            "            oProgress.SetAllowCancel(false);",
            "            oProgress.BeginPart(100, \"\");",
            "            oProgress.SetTitle(\"Importar propiedades del proyecto\");",
            "            oProgress.ShowImmediately();",
            "",
            "            CommandLineInterpreter oCLI = new CommandLineInterpreter();",
            "            ActionCallingContext cc = new ActionCallingContext();",
            "",
            "            cc.AddParameter(\"TYPE\", \"READPROJECTINFO\");",
            "            cc.AddParameter(\"FILENAME\", strFilename);",
            "            oCLI.Execute(\"projectmanagement\", cc);",
            "",
            "            oProgress.EndPart(true);",
            "",
            "            oCLI.Execute(\"XPrjActionPropertiesEdit\");",
            "        }",
            "",
            "        return;",
            "    }",
            "}"
        ],
        "keyPoints": [
            {
                "concept": "Selecci\u00f3n de Archivo",
                "explanation": "Utiliza un di\u00e1logo de selecci\u00f3n de archivo para elegir el archivo ProjectInfo.xml"
            },
            {
                "concept": "Seguimiento de Progreso",
                "explanation": "Implementa una barra de progreso para visualizar el proceso de importaci\u00f3n"
            },
            {
                "concept": "Gesti\u00f3n de Rutas",
                "explanation": "Utiliza variables de ruta de EPLAN para acceder a la ubicaci\u00f3n de proyectos"
            },
            {
                "concept": "Integraci\u00f3n con EPLAN",
                "explanation": "Ejecuta comandos de EPLAN para la gesti\u00f3n de proyectos y edici\u00f3n de propiedades"
            }
        ]
    },
    {
        "id": "12_system_messages",
        "name": "Mensajes del Sistema",
        "category": "advanced",
        "description": "Script para demostrar diferentes niveles de mensajes del sistema en EPLAN",
        "purpose": "Mostrar c\u00f3mo crear y gestionar diferentes tipos de mensajes del sistema en EPLAN",
        "code": [
            "using Eplan.EplApi.ApplicationFramework;",
            "using Eplan.EplApi.Base;",
            "using Eplan.EplApi.Scripting;",
            "",
            "public class Class",
            "{",
            "    [Start]",
            "    public void Function()",
            "    {",
            "        BaseException bexAssert =",
            "            new BaseException(\"Assert\", MessageLevel.Assert);",
            "        bexAssert.FixMessage();",
            "",
            "        BaseException bexError =",
            "            new BaseException(\"Error\", MessageLevel.Error);",
            "        bexError.FixMessage();",
            "",
            "        BaseException bexFatalError =",
            "            new BaseException(\"FatalError\", MessageLevel.FatalError);",
            "        bexFatalError.FixMessage();",
            "",
            "        BaseException bexMessage =",
            "            new BaseException(\"Message\", MessageLevel.Message);",
            "        bexMessage.FixMessage();",
            "",
            "        BaseException bexTrace =",
            "            new BaseException(\"Trace\", MessageLevel.Trace);",
            "        bexTrace.FixMessage();",
            "",
            "        BaseException bexWarning =",
            "            new BaseException(\"Warning\", MessageLevel.Warning);",
            "        bexWarning.FixMessage();",
            "",
            "        CommandLineInterpreter oCLI = new CommandLineInterpreter();",
            "        oCLI.Execute(\"SystemErrDialog\");",
            "",
            "        ",
            "           ",
            "        return;",
            "    }",
            "}"
        ],
        "keyPoints": [
            {
                "concept": "Niveles de Mensaje",
                "explanation": "Demuestra los diferentes niveles de mensajes disponibles en EPLAN (Assert, Error, FatalError, Message, Trace, Warning)"
            },
            {
                "concept": "BaseException",
                "explanation": "Utiliza la clase BaseException para crear mensajes del sistema con diferentes niveles de severidad"
            },
            {
                "concept": "Fijaci\u00f3n de Mensajes",
                "explanation": "Utiliza el m\u00e9todo FixMessage para registrar los mensajes en el sistema"
            },
            {
                "concept": "Di\u00e1logo de Errores",
                "explanation": "Muestra c\u00f3mo abrir el di\u00e1logo de errores del sistema para visualizar los mensajes generados"
            }
        ]
    },
    {
        "id": "13_settings_class_example_1",
        "name": "Configuraci\u00f3n - Establecer Valor de Cadena",
        "category": "advanced",
        "description": "Script para establecer un valor de configuraci\u00f3n de tipo cadena en EPLAN",
        "purpose": "Demostrar c\u00f3mo establecer valores de configuraci\u00f3n de tipo cadena en EPLAN",
        "code": [
            "using System.Windows.Forms;",
            "using Eplan.EplApi.Scripting;",
            "",
            "public class Class",
            "{",
            "    [Start]",
            "    public void Function()",
            "    {",
            "        Eplan.EplApi.Base.Settings oSettings =",
            "            new Eplan.EplApi.Base.Settings();",
            "",
            "        oSettings.SetStringSetting(",
            "            \"USER.TrDMProject.UserData.Identification\",",
            "            \"TEST\",",
            "            0",
            "            );",
            "",
            "        MessageBox.Show(\"Setting has been set.\");",
            "",
            "        return;",
            "    }",
            "}"
        ],
        "keyPoints": [
            {
                "concept": "Configuraci\u00f3n de Cadena",
                "explanation": "Utiliza SetStringSetting para establecer un valor de configuraci\u00f3n de tipo cadena"
            },
            {
                "concept": "Identificaci\u00f3n de Usuario",
                "explanation": "Establece un valor para la identificaci\u00f3n de usuario en los datos del proyecto"
            },
            {
                "concept": "Clase Settings",
                "explanation": "Demuestra el uso de la clase Settings para manipular configuraciones de EPLAN"
            },
            {
                "concept": "Confirmaci\u00f3n al Usuario",
                "explanation": "Muestra un mensaje de confirmaci\u00f3n al usuario cuando la configuraci\u00f3n ha sido establecida"
            }
        ]
    },
    {
        "id": "13_settings_class_example_2",
        "name": "Configuraci\u00f3n - Establecer Valor Booleano",
        "category": "advanced",
        "description": "Script para establecer un valor de configuraci\u00f3n de tipo booleano en EPLAN",
        "purpose": "Demostrar c\u00f3mo establecer valores de configuraci\u00f3n de tipo booleano en EPLAN",
        "code": [
            "using System.Windows.Forms;",
            "using Eplan.EplApi.Scripting;",
            "",
            "public class Class",
            "{",
            "    [Start]",
            "    public void Function()",
            "    {",
            "        Eplan.EplApi.Base.Settings oSettings =",
            "            new Eplan.EplApi.Base.Settings();",
            "",
            "        oSettings.SetBoolSetting(",
            "            \"USER.EnfMVC.ContextMenuSetting.ShowExtended\",",
            "            true,",
            "            0",
            "            );",
            "",
            "        MessageBox.Show(",
            "            \"Setting has been activated. EPLAN restart required.\"",
            "            );",
            "",
            "        return;",
            "    }",
            "}"
        ],
        "keyPoints": [
            {
                "concept": "Configuraci\u00f3n Booleana",
                "explanation": "Utiliza SetBoolSetting para establecer un valor de configuraci\u00f3n de tipo booleano"
            },
            {
                "concept": "Men\u00fa Contextual",
                "explanation": "Activa la configuraci\u00f3n para mostrar men\u00fas contextuales extendidos"
            },
            {
                "concept": "Clase Settings",
                "explanation": "Demuestra el uso de la clase Settings para manipular configuraciones de EPLAN"
            },
            {
                "concept": "Reinicio Requerido",
                "explanation": "Informa al usuario que se requiere reiniciar EPLAN para aplicar los cambios"
            }
        ]
    },
    {
        "id": "13_settings_class_example_3",
        "name": "Configuraci\u00f3n - Establecer Valor Num\u00e9rico",
        "category": "advanced",
        "description": "Script para establecer un valor de configuraci\u00f3n de tipo num\u00e9rico en EPLAN",
        "purpose": "Demostrar c\u00f3mo establecer valores de configuraci\u00f3n de tipo num\u00e9rico en EPLAN",
        "code": [
            "using System.Windows.Forms;",
            "using Eplan.EplApi.Scripting;",
            "",
            "public class Class",
            "{",
            "    [Start]",
            "    public void Function()",
            "    {",
            "        Eplan.EplApi.Base.Settings oSettings =",
            "            new Eplan.EplApi.Base.Settings();",
            "",
            "        oSettings.SetNumericSetting(",
            "            \"USER.SYSTEM.GUI.LAST_PROJECTS_COUNT\",",
            "            11,",
            "            0",
            "            );",
            "",
            "        MessageBox.Show(\"Setting has been set.\");",
            "",
            "        return;",
            "    }",
            "}"
        ],
        "keyPoints": [
            {
                "concept": "Configuraci\u00f3n Num\u00e9rica",
                "explanation": "Utiliza SetNumericSetting para establecer un valor de configuraci\u00f3n de tipo num\u00e9rico"
            },
            {
                "concept": "Proyectos Recientes",
                "explanation": "Configura el n\u00famero de proyectos recientes que se mostrar\u00e1n en la interfaz"
            },
            {
                "concept": "Clase Settings",
                "explanation": "Demuestra el uso de la clase Settings para manipular configuraciones de EPLAN"
            },
            {
                "concept": "Confirmaci\u00f3n al Usuario",
                "explanation": "Muestra un mensaje de confirmaci\u00f3n al usuario cuando la configuraci\u00f3n ha sido establecida"
            }
        ]
    },
    {
        "id": "13_settings_class_example_4",
        "name": "Configuraci\u00f3n - Obtener Valor de Cadena",
        "category": "advanced",
        "description": "Script para obtener un valor de configuraci\u00f3n de tipo cadena en EPLAN",
        "purpose": "Demostrar c\u00f3mo obtener valores de configuraci\u00f3n de tipo cadena en EPLAN",
        "code": [
            "using System.Windows.Forms;",
            "using Eplan.EplApi.Scripting;",
            "",
            "public class Class",
            "{",
            "    [Start]",
            "    public void Function()",
            "    {",
            "        Eplan.EplApi.Base.Settings oSettings =",
            "            new Eplan.EplApi.Base.Settings();",
            "",
            "        string strName = oSettings.GetStringSetting(",
            "            \"USER.TrDMProject.UserData.Longname\",",
            "            0",
            "            );",
            "",
            "        MessageBox.Show(\"Hello \" + strName + \"!\");",
            "",
            "        return;",
            "    }",
            "}"
        ],
        "keyPoints": [
            {
                "concept": "Obtenci\u00f3n de Configuraci\u00f3n",
                "explanation": "Utiliza GetStringSetting para obtener un valor de configuraci\u00f3n de tipo cadena"
            },
            {
                "concept": "Nombre de Usuario",
                "explanation": "Recupera el nombre completo del usuario desde la configuraci\u00f3n del proyecto"
            },
            {
                "concept": "Clase Settings",
                "explanation": "Demuestra el uso de la clase Settings para acceder a configuraciones de EPLAN"
            },
            {
                "concept": "Personalizaci\u00f3n de Mensajes",
                "explanation": "Utiliza el valor obtenido para personalizar un mensaje de saludo al usuario"
            }
        ]
    },
    {
        "id": "13_settings_class_example_5",
        "name": "Configuraci\u00f3n - Obtener Valor Booleano",
        "category": "advanced",
        "description": "Script para obtener un valor de configuraci\u00f3n de tipo booleano en EPLAN",
        "purpose": "Demostrar c\u00f3mo obtener valores de configuraci\u00f3n de tipo booleano en EPLAN",
        "code": [
            "using System.Windows.Forms;",
            "using Eplan.EplApi.Scripting;",
            "",
            "public class Class",
            "{",
            "    [Start]",
            "    public void Function()",
            "    {",
            "        Eplan.EplApi.Base.Settings oSettings =",
            "            new Eplan.EplApi.Base.Settings();",
            "",
            "        bool bolSetting = oSettings.GetBoolSetting(",
            "            \"USER.XUserSettingsGui.UseLoginName\",",
            "            0",
            "            );",
            "",
            "        if (bolSetting)",
            "        {",
            "            MessageBox.Show(\"Setting is enabled.\");",
            "        }",
            "        else",
            "        {",
            "            MessageBox.Show(\"Setting is disabled.\");",
            "        }",
            "",
            "        return;",
            "    }",
            "}"
        ],
        "keyPoints": [
            {
                "concept": "Obtenci\u00f3n de Configuraci\u00f3n Booleana",
                "explanation": "Utiliza GetBoolSetting para obtener un valor de configuraci\u00f3n de tipo booleano"
            },
            {
                "concept": "Nombre de Inicio de Sesi\u00f3n",
                "explanation": "Verifica si est\u00e1 habilitada la configuraci\u00f3n para usar el nombre de inicio de sesi\u00f3n"
            },
            {
                "concept": "Clase Settings",
                "explanation": "Demuestra el uso de la clase Settings para acceder a configuraciones de EPLAN"
            },
            {
                "concept": "L\u00f3gica Condicional",
                "explanation": "Utiliza una estructura condicional para mostrar diferentes mensajes seg\u00fan el valor obtenido"
            }
        ]
    },
    {
        "id": "13_settings_class_example_6",
        "name": "Configuraci\u00f3n - Obtener Valor Num\u00e9rico",
        "category": "advanced",
        "description": "Script para obtener un valor de configuraci\u00f3n de tipo num\u00e9rico en EPLAN",
        "purpose": "Demostrar c\u00f3mo obtener valores de configuraci\u00f3n de tipo num\u00e9rico en EPLAN",
        "code": [
            "using System.Windows.Forms;",
            "using Eplan.EplApi.Scripting;",
            "",
            "public class Class",
            "{",
            "    [Start]",
            "    public void Function()",
            "    {",
            "        Eplan.EplApi.Base.Settings oSettings =",
            "            new Eplan.EplApi.Base.Settings();",
            "",
            "        int intSetting = oSettings.GetNumericSetting(",
            "            \"USER.MF.PREVIEW.MINCOLWIDTH\",",
            "            0",
            "            );",
            "",
            "        MessageBox.Show(\"Minimum width of the tiles in the preview: \"",
            "            + intSetting.ToString());",
            "",
            "        return;",
            "    }",
            "}"
        ],
        "keyPoints": [
            {
                "concept": "Obtenci\u00f3n de Configuraci\u00f3n Num\u00e9rica",
                "explanation": "Utiliza GetNumericSetting para obtener un valor de configuraci\u00f3n de tipo num\u00e9rico"
            },
            {
                "concept": "Ancho de Columna",
                "explanation": "Recupera el ancho m\u00ednimo de columna configurado para la vista previa"
            },
            {
                "concept": "Clase Settings",
                "explanation": "Demuestra el uso de la clase Settings para acceder a configuraciones de EPLAN"
            },
            {
                "concept": "Conversi\u00f3n de Tipos",
                "explanation": "Convierte el valor num\u00e9rico a cadena para mostrarlo en un mensaje"
            }
        ]
    },
    {
        "id": "13_settings_class_example_7",
        "name": "Configuraci\u00f3n - Importar Configuraciones",
        "category": "advanced",
        "description": "Script para importar configuraciones desde un archivo XML en EPLAN",
        "purpose": "Demostrar c\u00f3mo importar configuraciones desde un archivo XML externo en EPLAN",
        "code": [
            "using System.Windows.Forms;",
            "using Eplan.EplApi.Scripting;",
            "",
            "public class Class",
            "{",
            "    [Start]",
            "    public void Function()",
            "    {",
            "        Eplan.EplApi.Base.Settings oSettings =",
            "            new Eplan.EplApi.Base.Settings();",
            "",
            "        oSettings.ReadSettings(@\"C:\\test\\test.xml\");",
            "",
            "        MessageBox.Show(\"Settings have been imported.\");",
            "",
            "        return;",
            "    }",
            "}"
        ],
        "keyPoints": [
            {
                "concept": "Importaci\u00f3n de Configuraciones",
                "explanation": "Utiliza ReadSettings para importar configuraciones desde un archivo XML"
            },
            {
                "concept": "Ruta de Archivo",
                "explanation": "Especifica la ruta completa al archivo XML de configuraciones"
            },
            {
                "concept": "Clase Settings",
                "explanation": "Demuestra el uso de la clase Settings para manipular configuraciones de EPLAN"
            },
            {
                "concept": "Confirmaci\u00f3n al Usuario",
                "explanation": "Muestra un mensaje de confirmaci\u00f3n al usuario cuando las configuraciones han sido importadas"
            }
        ]
    },
    {
        "id": "14_xsettings_import",
        "name": "Importaci\u00f3n de Configuraciones con Par\u00e1metros",
        "category": "advanced",
        "description": "Script para importar diferentes configuraciones seg\u00fan un par\u00e1metro especificado",
        "purpose": "Demostrar c\u00f3mo importar diferentes configuraciones basadas en par\u00e1metros y manejar excepciones",
        "code": [
            "using System;",
            "using System.Windows.Forms;",
            "using Eplan.EplApi.ApplicationFramework;",
            "using Eplan.EplApi.Base;",
            "using Eplan.EplApi.Scripting;",
            "",
            "public class Class",
            "{",
            "    [DeclareAction(\"ImportSettings\")]",
            "    public void Function(int SET)",
            "    {",
            "        try",
            "        {",
            "            string strScripts =",
            "                PathMap.SubstitutePath(\"$(MD_SCRIPTS)\" + @\"\\\\\");",
            "            string strProject = PathMap.SubstitutePath(\"$(P)\");",
            "            string strMessage = string.Empty;",
            "",
            "            CommandLineInterpreter oCLI = new CommandLineInterpreter();",
            "            ActionCallingContext acc = new ActionCallingContext();",
            "            acc.AddParameter(\"Project\", strProject);",
            "",
            "            switch (SET)",
            "            {",
            "                case 1:",
            "                    strMessage = \"[As drawn]\";",
            "                    acc.AddParameter(\"XMLFile\", strScripts + @\"1.xml\");",
            "                    break;",
            "",
            "                case 2:",
            "                    strMessage = \"[As a point]\";",
            "                    acc.AddParameter(\"XMLFile\", strScripts + @\"2.xml\");",
            "                    break;",
            "",
            "                case 3:",
            "                    strMessage = \"[With target setting]\";",
            "                    acc.AddParameter(\"XMLFile\", strScripts + @\"3.xml\");",
            "                    break;",
            "",
            "                default:",
            "                    MessageBox.Show(\"Parameter not known\",",
            "                        \"Error\", MessageBoxButtons.OK,",
            "                        MessageBoxIcon.Error);",
            "                    return;",
            "            }",
            "",
            "            oCLI.Execute(\"XSettingsImport\", acc);",
            "",
            "            MessageBox.Show(\"Settings have been imported.\\n\"",
            "                + strMessage, \"Information\",",
            "                MessageBoxButtons.OK,",
            "                MessageBoxIcon.Information);",
            "",
            "        }",
            "        catch (Exception ex)",
            "        {",
            "            MessageBox.Show(ex.Message, \"Error\",",
            "                MessageBoxButtons.OK,",
            "                MessageBoxIcon.Error);",
            "        }",
            "",
            "        return;",
            "    }",
            "}"
        ],
        "keyPoints": [
            {
                "concept": "Acci\u00f3n Declarada",
                "explanation": "Utiliza DeclareAction para definir una acci\u00f3n que puede ser llamada con par\u00e1metros"
            },
            {
                "concept": "Importaci\u00f3n Condicional",
                "explanation": "Selecciona diferentes archivos de configuraci\u00f3n seg\u00fan el par\u00e1metro proporcionado"
            },
            {
                "concept": "Manejo de Excepciones",
                "explanation": "Implementa un bloque try-catch para manejar posibles errores durante la importaci\u00f3n"
            },
            {
                "concept": "Retroalimentaci\u00f3n al Usuario",
                "explanation": "Proporciona mensajes informativos o de error seg\u00fan el resultado de la operaci\u00f3n"
            }
        ]
    },
    {
        "id": "15_eplan_remoting",
        "name": "Cliente Remoto de EPLAN",
        "category": "advanced",
        "description": "Script para interactuar con instancias activas o iniciar nuevas instancias de EPLAN",
        "purpose": "Demostrar c\u00f3mo conectarse a instancias existentes de EPLAN o iniciar nuevas instancias para ejecutar acciones",
        "code": [
            "using Eplan.EplApi.RemoteClient;",
            "using Eplan.EplApi.Starter;",
            "using System;",
            "using System.Collections.Generic;",
            "using System.Diagnostics;",
            "using System.Linq;",
            "",
            "namespace EPLAN_Remote_Client",
            "{",
            "    internal class Program",
            "    {",
            "        static void Main(string[] args)",
            "        {",
            "            List<EplanServerData> instancesActive = GetActiveEplanInstances();",
            "            if (instancesActive.Any())",
            "            {",
            "                Console.WriteLine(\"Iniciar instancia activa...\");",
            "                EplanServerData eplanInstanceActive = instancesActive",
            "                  .OrderBy(obj => obj.EplanVersion)",
            "                  .Last();",
            "",
            "                ExecuteActive(eplanInstanceActive);",
            "            }",
            "            else",
            "            {",
            "                Console.WriteLine(\"No se encontr\u00f3 ninguna instancia activa.\");",
            "",
            "                List<EplanData> instancesInstalled = GetInstalledEplanInstances();",
            "                instancesInstalled = instancesInstalled",
            "                  .Where(obj =>",
            "                    obj.EplanVariant.Equals(\"Electric P8\") &&",
            "                    obj.EplanVersion.StartsWith(\"2023\"))",
            "                  .OrderBy(obj => obj.EplanVersion)",
            "                  .ToList();",
            "                if (instancesInstalled.Any())",
            "                {",
            "                    Console.WriteLine(\"Iniciar instancia instalada...\");",
            "                    EplanData eplanInstanceInstalled = instancesInstalled.Last();",
            "",
            "                    ExecuteInstalled(eplanInstanceInstalled);",
            "                }",
            "                else",
            "                {",
            "                    Console.WriteLine(\"No se encontr\u00f3 ninguna instancia instalada.\");",
            "                }",
            "            }",
            "",
            "            Console.WriteLine(\"Ejecuci\u00f3n completada.\");",
            "            Console.ReadKey();",
            "        }",
            "",
            "        public static List<EplanServerData> GetActiveEplanInstances()",
            "        {",
            "            EplanRemoteClient eplanRemoteClient = new EplanRemoteClient();",
            "            List<EplanServerData> eplanServerDatas = new List<EplanServerData>();",
            "            eplanRemoteClient.GetActiveEplanServersOnLocalMachine(",
            "              out eplanServerDatas);",
            "            return eplanServerDatas;",
            "        }",
            "",
            "        private static void ExecuteActive(EplanServerData eplanServerData)",
            "        {",
            "            EplanRemoteClient eplanRemoteClient = new EplanRemoteClient();",
            "            eplanRemoteClient.SynchronousMode = true;",
            "            eplanRemoteClient.Connect(\"localhost\",",
            "              eplanServerData.ServerPort.ToString(),",
            "              new TimeSpan(0, 0, 0, 5)); // 5s needed to resolve",
            "",
            "            eplanRemoteClient.ExecuteAction(\"Actionname\");",
            "            eplanRemoteClient.Disconnect();",
            "            eplanRemoteClient.Dispose();",
            "        }",
            "",
            "        public static List<EplanData> GetInstalledEplanInstances()",
            "        {",
            "            EplanFinder eplanFinder = new EplanFinder();",
            "            List<EplanData> eplanVersions = new List<EplanData>();",
            "            eplanFinder.GetInstalledEplanVersions(ref eplanVersions, true);",
            "            return eplanVersions;",
            "        }",
            "",
            "        private static void ExecuteInstalled(EplanData eplanData)",
            "        {",
            "            ProcessStartInfo startInfo = new ProcessStartInfo();",
            "            startInfo.FileName = eplanData.EplanPath;",
            "",
            "            const string QUOTE = \"\\\"\";",
            "            string arguments = string.Format(\"/Variant:{0}{1}{0} {2}\",",
            "              QUOTE, eplanData.EplanVariant, \"Actionname\");",
            "",
            "            startInfo.Arguments = arguments;",
            "            Process.Start(startInfo);",
            "        }",
            "    }",
            "}"
        ],
        "keyPoints": [
            {
                "concept": "Detecci\u00f3n de Instancias",
                "explanation": "Identifica instancias activas e instaladas de EPLAN en la m\u00e1quina local"
            },
            {
                "concept": "Conexi\u00f3n Remota",
                "explanation": "Establece conexi\u00f3n con instancias activas de EPLAN para ejecutar acciones remotamente"
            },
            {
                "concept": "Inicio de Aplicaci\u00f3n",
                "explanation": "Inicia nuevas instancias de EPLAN cuando no hay instancias activas disponibles"
            },
            {
                "concept": "Filtrado de Versiones",
                "explanation": "Filtra instancias espec\u00edficas de EPLAN Electric P8 2023 para asegurar compatibilidad"
            }
        ]
    },
    {
        "id": "16_page_filter",
        "name": "Filtro de P\u00e1ginas",
        "category": "advanced",
        "description": "Script para procesar p\u00e1ginas seleccionadas con barra de progreso y filtrado",
        "purpose": "Demostrar c\u00f3mo trabajar con p\u00e1ginas seleccionadas, mostrar progreso y aplicar filtros espec\u00edficos",
        "code": [
            "using System;",
            "using System.Diagnostics;",
            "using System.Threading;",
            "using System.Windows.Forms;",
            "using Eplan.EplApi.ApplicationFramework;",
            "using Eplan.EplApi.Base;",
            "using Eplan.EplApi.Scripting;",
            "class Program",
            "{",
            "    [Start]",
            "    public void Action()",
            "    {",
            "        // Get selected pages",
            "        var pages = GetPages();",
            "        // Setup progressbar",
            "        Progress progress = new Progress(\"EnhancedProgress\");",
            "        progress.SetTitle(\"Do Something with pages\");",
            "        progress.SetAllowCancel(true);",
            "        progress.ShowImmediately();",
            "        progress.SetNeededSteps(pages.Length + 1);",
            "        try",
            "        {",
            "            // Do something with pages",
            "            foreach (var page in pages)",
            "            {",
            "                progress.SetActionText(page);",
            "                progress.Step(1);",
            "                SelectPage(page);",
            "            }",
            "        }",
            "        catch (Exception exception)",
            "        {",
            "            MessageBox.Show(exception.Message, \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);",
            "        }",
            "        finally",
            "        {",
            "            progress.EndPart(true);",
            "        }",
            "    }",
            "    private static string[] GetPages()",
            "    {",
            "        ActionCallingContext oACC = new ActionCallingContext();",
            "        string pagesString = string.Empty;",
            "        oACC.AddParameter(\"TYPE\", \"PAGES\");",
            "        new CommandLineInterpreter().Execute(\"selectionset\", oACC);",
            "        oACC.GetParameter(\"PAGES\", ref pagesString);",
            "        string[] pages = pagesString.Split(';');",
            "        return pages;",
            "    }",
            "    private void SelectPage(string page)",
            "    {",
            "        ActionCallingContext oACC = new ActionCallingContext();",
            "        CommandLineInterpreter oCLI = new CommandLineInterpreter();",
            "        oACC.AddParameter(\"PAGENAME\", page);",
            "        oCLI.Execute(\"edit\", oACC);",
            "        oACC.AddParameter(\"PropertyId\", \"11006\");",
            "        oCLI.Execute(\"XEsGetPagePropertyAction\", oACC);",
            "        string propertyValue = \"\";",
            "        oACC.GetParameter(\"PropertyValue\", ref propertyValue);        ",
            "",
            "        if (string.Equals(propertyValue, \"7\", StringComparison.OrdinalIgnoreCase))",
            "        {",
            "            using (var qm = new QuietModeStep(QuietModes.ShowNoDialogs))",
            "            {",
            "                new CommandLineInterpreter().Execute(\"XPmExternalDeletePages\");",
            "            }",
            "        }",
            "        oCLI.Execute(\"XGedClosePage\");",
            "    }",
            "}"
        ],
        "keyPoints": [
            {
                "concept": "Selecci\u00f3n de P\u00e1ginas",
                "explanation": "Obtiene y procesa las p\u00e1ginas seleccionadas en el proyecto actual"
            },
            {
                "concept": "Barra de Progreso",
                "explanation": "Implementa una barra de progreso mejorada para visualizar el avance del procesamiento"
            },
            {
                "concept": "Manejo de Excepciones",
                "explanation": "Utiliza bloques try-catch-finally para garantizar la limpieza de recursos incluso en caso de error"
            },
            {
                "concept": "Filtrado por Propiedades",
                "explanation": "Verifica propiedades espec\u00edficas de las p\u00e1ginas para aplicar acciones condicionales"
            }
        ]
    },
    {
        "id": "17_system_messages_eplan_to_server",
        "name": "Registro de Mensajes del Sistema en Servidor",
        "category": "advanced",
        "description": "Script para capturar mensajes de error de EPLAN y enviarlos a un servidor externo",
        "purpose": "Demostrar c\u00f3mo interceptar mensajes del sistema y enviarlos a un servidor externo para registro centralizado",
        "code": [
            "using System;",
            "using System.Net.Http;",
            "using System.Text;",
            "using System.IO;",
            "using System.Linq;",
            "using System.Threading.Tasks;",
            "using Eplan.EplApi.ApplicationFramework;",
            "using Eplan.EplApi.Scripting;",
            "using Eplan.EplApi.Base;",
            "",
            "public class SystemMessageLogger",
            "{",
            "    private static readonly HttpClient client = new HttpClient();",
            "    private const string SERVER_URL = \"http://localhost:8000/log\";",
            "    private const string LOG_FILE_PATH = @\"C:\\Temp\\EplanErrorLog.txt\";",
            "    private static int lastBookmarkID = 0;",
            "",
            "    [DeclareEventHandler(\"onActionEnd.String.*\")]",
            "    public void MyEventHandlerFunction(IEventParameter iEventParameter)",
            "    {",
            "        try",
            "        {",
            "            SysMessagesCollection colSysMsg = new SysMessagesCollection(lastBookmarkID, MessageLevel.Error);",
            "        ",
            "            if (colSysMsg.Count > 0)",
            "            {",
            "                BaseException lastMessage = colSysMsg.Cast<BaseException>().LastOrDefault();",
            "            ",
            "                if (lastMessage != null)",
            "                {",
            "                    string message = \"Error: \" + lastMessage.ToString();",
            "                    SendMessageToServer(message).Wait();",
            "                    WriteTestFile(message);",
            "                }",
            "            ",
            "                lastBookmarkID = colSysMsg.BookmarkIDEnd;",
            "            }",
            "        }",
            "        catch (Exception ex)",
            "        {",
            "            WriteTestFile(\"Error in MyEventHandlerFunction: \" + ex.ToString());",
            "        }",
            "    }",
            "",
            "    private async Task SendMessageToServer(string message)",
            "    {",
            "        try",
            "        {",
            "            var content = new StringContent(message, Encoding.UTF8, \"text/plain\");",
            "            HttpResponseMessage response = await client.PostAsync(SERVER_URL, content);",
            "            ",
            "            if (response.IsSuccessStatusCode)",
            "            {",
            "                WriteTestFile(\"Message ok: \" + message);",
            "            }",
            "            else",
            "            {",
            "                WriteTestFile(\"Error sending message to server. C\u00f3digo: \" + response.StatusCode);",
            "            }",
            "        }",
            "        catch (Exception ex)",
            "        {",
            "            WriteTestFile(\"Exception when sending message to server: \" + ex.ToString());",
            "        }",
            "    }",
            "",
            "    private void WriteTestFile(string message)",
            "    {",
            "        try",
            "        {",
            "            using (StreamWriter sw = File.AppendText(LOG_FILE_PATH))",
            "            {",
            "                sw.WriteLine(DateTime.Now + \": \" + message);",
            "            }",
            "        }",
            "        catch (Exception ex)",
            "        {            ",
            "            Console.WriteLine(\"Error writing to file: \" + ex.Message);",
            "        }",
            "    }",
            "}"
        ],
        "keyPoints": [
            {
                "concept": "Captura de Eventos",
                "explanation": "Utiliza DeclareEventHandler para interceptar eventos de finalizaci\u00f3n de acciones en EPLAN"
            },
            {
                "concept": "Recolecci\u00f3n de Mensajes",
                "explanation": "Utiliza SysMessagesCollection para obtener mensajes de error del sistema"
            },
            {
                "concept": "Comunicaci\u00f3n HTTP",
                "explanation": "Env\u00eda mensajes de error a un servidor externo mediante solicitudes HTTP POST"
            },
            {
                "concept": "Registro Local",
                "explanation": "Mantiene un registro local de mensajes y errores como respaldo"
            }
        ]
    },
    {
        "id": "18_get_server_message",
        "name": "Obtener Mensaje del Servidor",
        "category": "advanced",
        "description": "Script para obtener mensajes desde un servidor externo y mostrarlos en EPLAN",
        "purpose": "Demostrar c\u00f3mo realizar solicitudes HTTP GET a un servidor externo desde EPLAN",
        "code": [
            "using System;",
            "using System.Net.Http;",
            "using System.Windows.Forms;",
            "using Eplan.EplApi.ApplicationFramework;",
            "using Eplan.EplApi.Scripting;",
            "",
            "public class ConexionServidor",
            "{",
            "    [Start]",
            "    public void Execute()",
            "    {",
            "        ObtenerMensajeDelServidor();",
            "    }",
            "",
            "    private void ObtenerMensajeDelServidor()",
            "    {",
            "        using (var client = new HttpClient())",
            "        {",
            "            try",
            "            {",
            "                string url = \"http://localhost:8000\";",
            "                HttpResponseMessage response = client.GetAsync(url).Result;",
            "                ",
            "                if (response.IsSuccessStatusCode)",
            "                {",
            "                    string contenido = response.Content.ReadAsStringAsync().Result;",
            "                    MessageBox.Show(\"Mensaje del servidor: \" + contenido);",
            "                }",
            "                else",
            "                {",
            "                    MessageBox.Show(\"Error: \" + response.StatusCode);",
            "                }",
            "            }",
            "            catch (Exception ex)",
            "            {",
            "                MessageBox.Show(\"Error en la petici\u00f3n: \" + ex.Message);",
            "            }",
            "        }",
            "    }",
            "}"
        ],
        "keyPoints": [
            {
                "concept": "Cliente HTTP",
                "explanation": "Utiliza HttpClient para realizar solicitudes HTTP a un servidor externo"
            },
            {
                "concept": "Solicitud GET",
                "explanation": "Realiza una solicitud GET para obtener informaci\u00f3n del servidor"
            },
            {
                "concept": "Manejo de Respuestas",
                "explanation": "Procesa la respuesta del servidor y muestra el contenido o errores al usuario"
            },
            {
                "concept": "Manejo de Excepciones",
                "explanation": "Implementa manejo de excepciones para capturar y mostrar errores de comunicaci\u00f3n"
            }
        ]
    },
    {
        "id": "19_action_name_on_server",
        "name": "Registro de Acciones en Servidor",
        "category": "advanced",
        "description": "Script para registrar nombres de acciones ejecutadas en EPLAN en un servidor externo",
        "purpose": "Demostrar c\u00f3mo capturar eventos de acci\u00f3n y enviarlos a un servidor externo en formato JSON",
        "code": [
            "using System;",
            "using System.Net.Http;",
            "using System.Text;",
            "using System.Threading.Tasks;",
            "using Eplan.EplApi.ApplicationFramework;",
            "using Eplan.EplApi.Scripting;",
            "using Eplan.EplApi.Base;",
            "",
            "public class EventLogger",
            "{",
            "    private static readonly HttpClient client = new HttpClient();",
            "    private const string SERVER_URL = \"http://localhost:8000\"; // Ajusta esta URL seg\u00fan tu configuraci\u00f3n",
            "",
            "    [DeclareEventHandler(\"onActionEnd.String.*\")]",
            "    public long MyEventHandlerFunction(IEventParameter iEventParameter)",
            "    {",
            "        try",
            "        {",
            "            EventParameterString oEventParameterString = new EventParameterString(iEventParameter);",
            "            string strActionName = oEventParameterString.String;",
            "",
            "            // Enviar el evento al servidor",
            "            SendEventToServer(strActionName); ",
            "        }",
            "        catch (Exception ex)",
            "        {",
            "            System.Windows.Forms.MessageBox.Show(string.Format(\"Error: {0}\", ex.Message), \"MyEventHandler\");",
            "        }",
            "",
            "        return 0;",
            "    }",
            "",
            "    private async Task SendEventToServer(string actionName)",
            "    {",
            "        try",
            "        {",
            "            string json = string.Format(\"{{\\\"event\\\":\\\"onActionEnd.String.{0}\\\",\\\"timestamp\\\":\\\"{1}\\\"}}\", actionName, DateTime.Now);",
            "            var content = new StringContent(json, Encoding.UTF8, \"application/json\");",
            "",
            "            HttpResponseMessage response = await client.PostAsync(SERVER_URL, content);",
            "            string responseContent = await response.Content.ReadAsStringAsync();",
            "",
            "            if (!response.IsSuccessStatusCode)",
            "            {",
            "                throw new Exception(string.Format(\"Server error: {0}. Message: {1}\", response.StatusCode, responseContent));",
            "            }",
            "            ",
            "        }",
            "        catch (Exception ex)",
            "        {",
            "            System.Diagnostics.Trace.WriteLine(string.Format(\"Error sending event to server: {0}\", ex.Message));",
            "            ",
            "        }",
            "    }",
            "}"
        ],
        "keyPoints": [
            {
                "concept": "Captura de Eventos de Acci\u00f3n",
                "explanation": "Utiliza DeclareEventHandler para interceptar eventos de finalizaci\u00f3n de acciones"
            },
            {
                "concept": "Formato JSON",
                "explanation": "Env\u00eda datos al servidor en formato JSON con informaci\u00f3n del evento y marca de tiempo"
            },
            {
                "concept": "Comunicaci\u00f3n As\u00edncrona",
                "explanation": "Utiliza m\u00e9todos as\u00edncronos para enviar datos al servidor sin bloquear la interfaz de usuario"
            },
            {
                "concept": "Registro de Errores",
                "explanation": "Registra errores de comunicaci\u00f3n en el registro de seguimiento del sistema"
            }
        ]
    }
]