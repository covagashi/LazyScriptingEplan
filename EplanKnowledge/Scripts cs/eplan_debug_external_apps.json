{
  "eplanDebugAndExternalApps": {
    "metadata": {
      "version": "1.0",
      "description": "Debugging and external application integration examples",
      "category": "Development Tools"
    }
  },
  "fileSystemOperations": {
    "name": "File System Operations",
    "description": "File and folder management operations",
    "examples": [
      {
        "id": "checkFolder",
        "name": "Check and Create Folder",
        "description": "Check if folder exists and create if needed",
        "script": [
          "using System.IO;",
          "using System.Windows.Forms;",
          "using Eplan.EplApi.Scripting;",
          "",
          "public class _12_FilesFolders_01_CheckFolder",
          "{",
          "  [Start]",
          "  public void Function()",
          "  {",
          "    string path = @\"C:\\test\\\";",
          "",
          "    if (Directory.Exists(path))",
          "    {",
          "      MessageBox.Show(\"Folder already exists.\");",
          "    }",
          "    else",
          "    {",
          "      Directory.CreateDirectory(path);",
          "      MessageBox.Show(\"Folder created.\");",
          "    }",
          "  }",
          "}"
        ]
      },
      {
        "id": "checkFile",
        "name": "Check and Create File",
        "description": "Check if file exists and create if needed",
        "script": [
          "using System.IO;",
          "using System.Windows.Forms;",
          "using Eplan.EplApi.Scripting;",
          "",
          "public class _12_FilesFolders_02_CheckFile",
          "{",
          "  [Start]",
          "  public void Function()",
          "  {",
          "    string fileName = @\"C:\\test\\test.txt\";",
          "",
          "    if (File.Exists(fileName))",
          "    {",
          "      MessageBox.Show(\"File already exists.\");",
          "    }",
          "    else",
          "    {",
          "      FileStream fileStream = File.Create(fileName);",
          "      fileStream.Dispose();",
          "      MessageBox.Show(\"File created.\");",
          "    }",
          "  }",
          "}"
        ]
      },
      {
        "id": "deleteFile",
        "name": "Delete File",
        "description": "Delete existing file",
        "script": [
          "using System.IO;",
          "using System.Windows.Forms;",
          "using Eplan.EplApi.Scripting;",
          "",
          "public class _12_FilesFolders_03_DeleteFile",
          "{",
          "  [Start]",
          "  public void Function()",
          "  {",
          "    string fileName = @\"C:\\test\\test.txt\";",
          "",
          "    if (File.Exists(fileName))",
          "    {",
          "      File.Delete(fileName);",
          "      MessageBox.Show(\"File deleted.\");",
          "    }",
          "  }",
          "}"
        ]
      },
      {
        "id": "fileWithTimestamp",
        "name": "File with DateTime Stamp",
        "description": "Create file with date and time in filename",
        "script": [
          "using System;",
          "using System.IO;",
          "using System.Windows.Forms;",
          "using Eplan.EplApi.Scripting;",
          "",
          "public class _12_FilesFolders_04_FileWithDateTimeStamp",
          "{",
          "  [Start]",
          "  public void Function()",
          "  {",
          "    string date = DateTime.Now.ToString(\"yyyy-MM-dd\");",
          "    string time = DateTime.Now.ToString(\"HH-mm-ss\");",
          "    string fileName = @\"C:\\test\\test_\" + date + \"_\" + time + \".txt\";",
          "",
          "    FileStream fileStream = File.Create(fileName);",
          "    fileStream.Dispose();",
          "    MessageBox.Show(\"File created.\");",
          "  }",
          "}"
        ]
      }
    ],
    "categories": {
      "debugging": {
        "name": "Script Debugging",
        "description": "Enable debugging and breakpoints in EPLAN scripts",
        "examples": [
          {
            "id": "debugSetting",
            "name": "Enable Script Debugging",
            "description": "Enable/disable script debugging via settings",
            "script": [
              "using System.Windows.Forms;",
              "using Eplan.EplApi.Scripting;",
              "using Eplan.EplApi.Base;",
              "",
              "public class _10_Debug_01_DebugSetting",
              "{",
              "  [DeclareRegister]",
              "  public void Register()",
              "  {",
              "    Settings settings = new Settings();",
              "",
              "    settings.SetBoolSetting(\"USER.EplanEplApiScriptLog.DebugScripts\", true, 0);",
              "",
              "    MessageBox.Show(\"Debugging enabled\");",
              "  }",
              "",
              "  [DeclareUnregister]",
              "  public void UnRegister()",
              "  {",
              "    Settings settings = new Settings();",
              "",
              "    settings.SetBoolSetting(\"USER.EplanEplApiScriptLog.DebugScripts\", false, 0);",
              "",
              "    MessageBox.Show(\"Debugging disabled\");",
              "  }",
              "}"
            ]
          },
          {
            "id": "debugTest",
            "name": "Debug Test with Breakpoints",
            "description": "Using debugger breakpoints and debug output",
            "script": [
              "using System.Windows.Forms;",
              "using Eplan.EplApi.Scripting;",
              "using System;",
              "using System.Diagnostics;",
              "",
              "public class _10_Debug_02_DebugTest",
              "{",
              "  [Start]",
              "  public void Function()",
              "  {",
              "    if (Debugger.IsAttached)",
              "    {",
              "      Debugger.Break();",
              "    }",
              "",
              "    int result;",
              "    int number1 = 10;",
              "    int number2 = 0;",
              "",
              "    if (Debugger.IsAttached)",
              "    {",
              "      Debug.WriteLine(number1 + \":\" + number2);",
              "    }",
              "",
              "    try",
              "    {",
              "      result = number1 / number2;",
              "",
              "      // No more code is executed from here",
              "      MessageBox.Show(result.ToString());",
              "      MessageBox.Show(\"Calculation successfully completed.\");",
              "    }",
              "    catch (Exception exception)",
              "    {",
              "      MessageBox.Show(exception.Message);",
              "    }",
              "  }",
              "}"
            ]
          }
        ]
      },
      "externalApplications": {
        "name": "External Applications",
        "description": "Launch and integrate external applications",
        "examples": [
          {
            "id": "runProcess",
            "name": "Run External Process",
            "description": "Launch external applications using Process.Start",
            "script": [
              "using System;",
              "using System.Diagnostics;",
              "using System.Windows.Forms;",
              "using Eplan.EplApi.Scripting;",
              "",
              "public class _11_ExternalApplications_01_RunProcess",
              "{",
              "  [Start]",
              "  public void Function()",
              "  {",
              "    try",
              "    {",
              "      Process.Start(\"calc\");",
              "    }",
              "    catch (Exception ex)",
              "    {",
              "      MessageBox.Show(ex.Message, \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);",
              "    }",
              "  }",
              "}"
            ]
          },
          {
            "id": "runMultipleProcesses",
            "name": "Multiple Processes with Ribbon Integration",
            "description": "Launch multiple applications via ribbon buttons",
            "script": [
              "using System;",
              "using System.Diagnostics;",
              "using System.Windows.Forms;",
              "using Eplan.EplApi.Base;",
              "using Eplan.EplApi.Gui;",
              "using Eplan.EplApi.Scripting;",
              "",
              "public class _11_ExternalApplications_02_RunMultipleProcesses",
              "{",
              "  [DeclareAction(\"StartProcess\")]",
              "  public void Function(string processName, string parameter)",
              "  {",
              "    try",
              "    {",
              "      parameter = PathMap.SubstitutePath(parameter);",
              "      Process.Start(processName, parameter);",
              "    }",
              "    catch (Exception ex)",
              "    {",
              "      MessageBox.Show(ex.Message, \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);",
              "    }",
              "  }",
              "",
              "  private MultiLangString TAB_NAME",
              "  {",
              "    get",
              "    {",
              "      MultiLangString tabName = new MultiLangString();",
              "      tabName.AddString(ISOCode.Language.L_de_DE, \"Mein Tab\");",
              "      tabName.AddString(ISOCode.Language.L_en_US, \"My Tab\");",
              "      return tabName;",
              "    }",
              "  }",
              "",
              "  private const string GROUP_NAME = \"Apps\";",
              "",
              "  [DeclareRegister]",
              "  public void Register()",
              "  {",
              "    RibbonBar ribbonBar = new RibbonBar();",
              "",
              "    RibbonTab ribbonTab = ribbonBar.GetTab(TAB_NAME, true);",
              "    if (ribbonTab == null)",
              "    {",
              "      ribbonTab = ribbonBar.AddTab(TAB_NAME);",
              "    }",
              "    ",
              "    RibbonCommandGroup ribbonCommandGroup = ribbonTab.AddCommandGroup(GROUP_NAME);",
              "",
              "    string quote = \"\\\"\";",
              "",
              "    ribbonCommandGroup.AddCommand(\"Calculator\",",
              "      \"StartProcess /processName:calc /parameter:''\",",
              "      new RibbonIcon(CommandIcon.Application));",
              "    ",
              "    ribbonCommandGroup.AddCommand(",
              "      \"Project folder\",",
              "      \"StartProcess /processName:explorer /parameter:\" +",
              "      quote +\"$(PROJECTPATH)\" + quote,",
              "      new RibbonIcon(CommandIcon.Application));",
              "",
              "    ribbonCommandGroup.AddCommand(\"Char map\",",
              "      \"StartProcess /processName:charmap /parameter:''\",",
              "      new RibbonIcon(CommandIcon.Application));",
              "",
              "    string pdfFile = @\"C:\\test\\test.pdf\";",
              "    ribbonCommandGroup.AddCommand(\"PDF\", ",
              "      \"StartProcess /processName:\" + quote + pdfFile + quote +",
              "      \" /parameter:''\",",
              "      new RibbonIcon(CommandIcon.Application));",
              "  }",
              "",
              "  [DeclareUnregister]",
              "  public void UnRegister()",
              "  {",
              "    RibbonBar ribbonBar = new RibbonBar();",
              "    RibbonTab ribbonTab = ribbonBar.GetTab(TAB_NAME, true);",
              "    if (ribbonTab != null)",
              "    {",
              "      RibbonCommandGroup ribbonCommandGroup = ribbonTab.GetCommandGroup(GROUP_NAME);",
              "      if (ribbonCommandGroup != null)",
              "      {",
              "        ribbonCommandGroup.Remove();",
              "      }",
              "    }",
              "  }",
              "}"
            ]
          }
        ]
      }
    },
    "debuggingTools": {
      "settings": {
        "debugScripts": "USER.EplanEplApiScriptLog.DebugScripts",
        "description": "Enable debugging capabilities for EPLAN scripts"
      },
      "methods": [
        "Debugger.IsAttached - Check if debugger is connected",
        "Debugger.Break() - Create breakpoint in code",
        "Debug.WriteLine() - Output debug messages"
      ]
    },
    "externalProcesses": {
      "commonApplications": [
        "calc - Windows Calculator",
        "explorer - Windows Explorer",
        "charmap - Character Map",
        "notepad - Notepad"
      ],
      "parameters": [
        "File paths can be passed as parameters",
        "Use PathMap.SubstitutePath() for EPLAN variables",
        "Quote paths with spaces using escaped quotes"
      ]
    },
    "ribbonIntegration": {
      "features": [
        "Create ribbon tabs for external applications",
        "Use CommandIcon.Application for app icons",
        "Parameter handling for different applications",
        "Proper cleanup in UnRegister method"
      ]
    }
  }
}