{
  "eplanSettingsExamples": {
    "metadata": {
      "version": "1.0",
      "description": "EPLAN settings management and configuration examples",
      "category": "Settings Management"
    },
    "categories": {
      "settingTypes": {
        "name": "Setting Data Types",
        "description": "Examples for different setting data types",
        "examples": [
          {
            "id": "setString",
            "name": "Set String Setting",
            "description": "Set a string value in EPLAN settings",
            "script": [
              "using System.Windows.Forms;",
              "using Eplan.EplApi.Scripting;",
              "using Eplan.EplApi.Base;",
              "",
              "public class _05_Settings_01_SetString",
              "{",
              "  [Start]",
              "  public void Function()",
              "  {",
              "    Settings settings = new Settings();",
              "",
              "    settings.SetStringSetting(\"USER.TrDMProject.UserData.Identification\", \"TEST\", 0);",
              "",
              "    MessageBox.Show(\"Setting has been set.\");",
              "  }",
              "}"
            ]
          },
          {
            "id": "setBool",
            "name": "Set Boolean Setting",
            "description": "Set a boolean value in EPLAN settings",
            "script": [
              "using System.Windows.Forms;",
              "using Eplan.EplApi.Scripting;",
              "using Eplan.EplApi.Base;",
              "",
              "public class _05_Settings_02_SetBool",
              "{",
              "  [Start]",
              "  public void Function()",
              "  {",
              "    Settings settings = new Settings();",
              "",
              "    settings.SetBoolSetting(\"USER.EnfMVC.ContextMenuSetting.ShowExtended\", true, 0);",
              "",
              "    MessageBox.Show(\"Setting has been activated. EPLAN restart required.\");",
              "  }",
              "}"
            ]
          },
          {
            "id": "setInteger",
            "name": "Set Integer Setting",
            "description": "Set a numeric value in EPLAN settings",
            "script": [
              "using System.Windows.Forms;",
              "using Eplan.EplApi.Scripting;",
              "using Eplan.EplApi.Base;",
              "",
              "public class _05_Settings_03_SetInteger",
              "{",
              "  [Start]",
              "  public void Function()",
              "  {",
              "    Settings settings = new Settings();",
              "",
              "    settings.SetNumericSetting(\"USER.SYSTEM.GUI.LAST_PROJECTS_COUNT\", 11, 0);",
              "",
              "    MessageBox.Show(\"Setting has been set.\");",
              "  }",
              "}"
            ]
          }
        ]
      },
      "readingSettings": {
        "name": "Reading Settings",
        "description": "Examples for reading different setting types",
        "examples": [
          {
            "id": "readString",
            "name": "Read String Setting",
            "description": "Read a string value from EPLAN settings",
            "script": [
              "using System.Windows.Forms;",
              "using Eplan.EplApi.Scripting;",
              "using Eplan.EplApi.Base;",
              "",
              "public class _05_Settings_04_ReadString",
              "{",
              "  [Start]",
              "  public void Function()",
              "  {",
              "    Settings settings = new Settings();",
              "",
              "    string name = settings.GetStringSetting(\"USER.TrDMProject.UserData.Longname\", 0);",
              "",
              "    MessageBox.Show(\"Hello \" + name + \"!\");",
              "  }",
              "}"
            ]
          },
          {
            "id": "readBool",
            "name": "Read Boolean Setting",
            "description": "Read a boolean value from EPLAN settings",
            "script": [
              "using System.Windows.Forms;",
              "using Eplan.EplApi.Scripting;",
              "using Eplan.EplApi.Base;",
              "",
              "public class _05_Settings_05_ReadBool",
              "{",
              "  [Start]",
              "  public void Function()",
              "  {",
              "    Settings settings = new Settings();",
              "",
              "    bool useLoginName = settings.GetBoolSetting(\"USER.XUserSettingsGui.UseLoginName\", 0);",
              "",
              "    if (useLoginName)",
              "    {",
              "      MessageBox.Show(\"Setting is activated.\");",
              "    }",
              "    else",
              "    {",
              "      MessageBox.Show(\"Setting is deactivated.\");",
              "    }",
              "  }",
              "}"
            ]
          },
          {
            "id": "readInteger",
            "name": "Read Integer Setting",
            "description": "Read a numeric value from EPLAN settings",
            "script": [
              "using System.Windows.Forms;",
              "using Eplan.EplApi.Scripting;",
              "using Eplan.EplApi.Base;",
              "",
              "public class _05_Settings_06_ReadInteger",
              "{",
              "  [Start]",
              "  public void Function()",
              "  {",
              "    Settings settings = new Settings();",
              "",
              "    int minColWidth = settings.GetNumericSetting(\"USER.MF.PREVIEW.MINCOLWIDTH\", 0);",
              "",
              "    MessageBox.Show(\"Minimum width of the tiles in the preview: \"",
              "        + minColWidth.ToString());",
              "  }",
              "}"
            ]
          }
        ]
      },
      "settingsImportExport": {
        "name": "Settings Import/Export",
        "description": "Import and export settings configurations",
        "examples": [
          {
            "id": "importSettings",
            "name": "Import Settings from XML",
            "description": "Import settings from an XML file",
            "script": [
              "using System.Windows.Forms;",
              "using Eplan.EplApi.Scripting;",
              "using Eplan.EplApi.Base;",
              "",
              "public class _05_Settings_07_Import",
              "{",
              "  [Start]",
              "  public void Function()",
              "  {",
              "    Settings settings = new Settings();",
              "",
              "    settings.ReadSettings(@\"C:\\test\\test.xml\");",
              "",
              "    MessageBox.Show(\"Settings have been imported.\");",
              "  }",
              "}"
            ]
          },
          {
            "id": "importProjectSettings",
            "name": "Import Project Settings",
            "description": "Import project-specific settings using XSettingsImport action",
            "script": [
              "using System.Windows.Forms;",
              "using Eplan.EplApi.ApplicationFramework;",
              "using Eplan.EplApi.Base;",
              "using Eplan.EplApi.Scripting;",
              "",
              "public class _08_ImportProjectSettings",
              "{",
              "  [Start]",
              "  public void Function()",
              "  {",
              "    string scripts = PathMap.SubstitutePath(\"$(MD_SCRIPTS)\" + @\"\\\");",
              "    string project = PathMap.SubstitutePath(\"$(P)\");",
              "",
              "    CommandLineInterpreter cli = new CommandLineInterpreter();",
              "    ActionCallingContext acc = new ActionCallingContext();",
              "    acc.AddParameter(\"Project\", project);",
              "    acc.AddParameter(\"XmlFile\", scripts + @\"Point.xml\");",
              "    cli.Execute(\"XSettingsImport\", acc);",
              "",
              "    MessageBox.Show(\"Settings have been imported.\");",
              "  }",
              "}"
            ]
          }
        ]
      }
    },
    "settingCategories": {
      "USER": {
        "description": "User-specific settings",
        "examples": [
          "USER.SYSTEM.GUI.LANGUAGE",
          "USER.TrDMProject.UserData.Longname",
          "USER.SYSTEM.GUI.LAST_PROJECTS_COUNT"
        ]
      },
      "PROJECT": {
        "description": "Project-specific settings",
        "examples": [
          "PROJECT.NUMBERING.FUNCTIONIDENTIFICATION",
          "PROJECT.PAGESIZE.WIDTH",
          "PROJECT.PAGESIZE.HEIGHT"
        ]
      },
      "COMPANY": {
        "description": "Company-wide settings",
        "examples": [
          "COMPANY.NAME",
          "COMPANY.ADDRESS1",
          "COMPANY.LOGO"
        ]
      }
    },
    "pathVariables": {
      "common": [
        "$(MD_SCRIPTS) - Scripts directory",
        "$(P) - Current project path",
        "$(PROJECTNAME) - Project name",
        "$(PROJECTPATH) - Project directory"
      ]
    }
  }
}